// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Cephei.Gen
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Cephei.Gen.NetModel;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Class : ClassBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"(*
Copyright (C) 2020 Cepheis Ltd (steve.channell@cepheis.com)

This file is part of Cephei.QL Project https://github.com/channell/Cephei

Cephei.QL is open source software based on QLNet  you can redistribute it and/or modify it
under the terms of the Cephei.QL license.  You should have received a
copy of the license along with this program; if not, license is
available at <https://github.com/channell/Cephei/LICENSE>.

QLNet is a based on QuantLib, a free-software/open-source library
for financial quantitative analysts and developers - http://quantlib.org/
The QuantLib license is available online at http://quantlib.org/license.shtml.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the license for more details.
*)
namespace Cephei.XL

open ExcelDna.Integration
open Cephei.Cell
open Cephei.Cell.Generic
open Cephei.QL
open System.Collections
open System
open System.Linq
open QLNet
open Cephei.XL.Helper

(* <summary>
");
            
            #line 39 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((NetClass.Notes != null ? NetClass.Notes : "")));
            
            #line default
            #line hidden
            this.Write("\r\n  </summary> *)\r\n[<AutoSerializable(true)>]\r\nmodule ");
            
            #line 42 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("Function =\r\n\r\n");
            
            #line 44 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

    int version = -1;
    foreach(var m in NetClass.MethodAndConstructors)
    {
        if (m.Name == NetClass.Name)
        {
            version++;

            
            #line default
            #line hidden
            this.Write("    (*\r\n        ");
            
            #line 53 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((m.Notes != null ? m.Notes : "")));
            
            #line default
            #line hidden
            this.Write("\r\n    *)\r\n    [<ExcelFunction(Name=\"_");
            
            #line 55 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            
            #line 55 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((version > 0 ? version.ToString() : "")));
            
            #line default
            #line hidden
            this.Write("\", Description=\"Create a ");
            
            #line 55 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("\",Category=\"Cephei\", IsThreadSafe = false, IsExceptionSafe=true)>]\r\n    let ");
            
            #line 56 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("_create");
            
            #line 56 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((version > 0 ? version.ToString() : "")));
            
            #line default
            #line hidden
            this.Write("\r\n        ([<ExcelArgument(Name=\"Mnemonic\",Description = \"Identifier for Cell\")>]" +
                    " \r\n         mnemonic : string)\r\n");
            
            #line 59 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("    (*\r\n        ");
            
            #line 65 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((m.Notes != null ? m.Notes : "")));
            
            #line default
            #line hidden
            this.Write("\r\n    *)\r\n    [<ExcelFunction(Name=\"_");
            
            #line 67 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 67 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m.Name));
            
            #line default
            #line hidden
            this.Write("\", Description=\"Create a ");
            
            #line 67 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("\",Category=\"Cephei\", IsThreadSafe = false, IsExceptionSafe=true)>]\r\n    let ");
            
            #line 68 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 68 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m.Name));
            
            #line default
            #line hidden
            this.Write("\r\n        ([<ExcelArgument(Name=\"Mnemonic\",Description = \"Identifier for Cell\")>]" +
                    " \r\n         mnemonic : string)\r\n");
            
            #line 71 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        if (m.Name != NetClass.Name)
        {

            
            #line default
            #line hidden
            this.Write("        ([<ExcelArgument(Name=\"");
            
            #line 76 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("\",Description = \"Reference to ");
            
            #line 76 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("\")>] \r\n         ");
            
            #line 77 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name.ToLower()));
            
            #line default
            #line hidden
            this.Write(" : obj)\r\n");
            
            #line 78 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        foreach (var pam in m.Parameters)
        {

            
            #line default
            #line hidden
            this.Write("        ([<ExcelArgument(Name=\"");
            
            #line 83 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(pam.Value.Name) ? pam.Value.Name.ToUpper() : pam.Value.Name)));
            
            #line default
            #line hidden
            this.Write("\",Description = \"Reference to ");
            
            #line 83 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(pam.Value.Name) ? pam.Value.Name.ToUpper() : pam.Value.Name)));
            
            #line default
            #line hidden
            this.Write("\")>] \r\n         ");
            
            #line 84 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(pam.Value.Name) ? pam.Value.Name.ToUpper() : pam.Value.Name)));
            
            #line default
            #line hidden
            this.Write(" : obj)\r\n");
            
            #line 85 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        if (m.Name == NetClass.Name && NetClass.HasEngine)
        {

            
            #line default
            #line hidden
            this.Write(@"        ([<ExcelArgument(Name=""pricingEngine"",Description = ""Reference to Pricing Engine used"")>] 
         pricingEngine : obj)
        ([<ExcelArgument(Name=""evaluationDate"",Description = ""Reference to the date used for evaluation"")>] 
         evaluationDate : obj)
");
            
            #line 94 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }

            
            #line default
            #line hidden
            this.Write("        = \r\n        if not (Model.IsInFunctionWizard()) then\r\n\r\n            try\r\n" +
                    "\r\n");
            
            #line 102 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        if (m.Name != NetClass.Name)
        {

            
            #line default
            #line hidden
            this.Write("                let _");
            
            #line 106 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write(" = Helper.toCell<");
            
            #line 106 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 106 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name.ToLower()));
            
            #line default
            #line hidden
            this.Write(" \"");
            
            #line 106 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("\"  \r\n");
            
            #line 107 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }

        foreach (var pam in m.Parameters)
        {
            if (pam.Value.ParameterType.StartsWith("Handle"))
            {

            
            #line default
            #line hidden
            this.Write("                let _");
            
            #line 115 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(pam.Value.Name) ? pam.Value.Name.ToUpper() : pam.Value.Name)));
            
            #line default
            #line hidden
            this.Write(" = Helper.toHandle<");
            
            #line 115 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pam.Value.ParameterType));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 115 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(pam.Value.Name) ? pam.Value.Name.ToUpper() : pam.Value.Name)));
            
            #line default
            #line hidden
            this.Write(" \"");
            
            #line 115 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pam.Value.Name));
            
            #line default
            #line hidden
            this.Write("\" \r\n");
            
            #line 116 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

            }
            else if (pam.Value.ParameterType.StartsWith("Nullable"))
            {

            
            #line default
            #line hidden
            this.Write("                let _");
            
            #line 121 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(pam.Value.Name) ? pam.Value.Name.ToUpper() : pam.Value.Name)));
            
            #line default
            #line hidden
            this.Write(" = Helper.toNullable<");
            
            #line 121 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pam.Value.ParameterType));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 121 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(pam.Value.Name) ? pam.Value.Name.ToUpper() : pam.Value.Name)));
            
            #line default
            #line hidden
            this.Write(" \"");
            
            #line 121 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pam.Value.Name));
            
            #line default
            #line hidden
            this.Write("\"\r\n");
            
            #line 122 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

            }
            else
            {

            
            #line default
            #line hidden
            this.Write("                let _");
            
            #line 127 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(pam.Value.Name) ? pam.Value.Name.ToUpper() : pam.Value.Name)));
            
            #line default
            #line hidden
            this.Write(" = Helper.toCell<");
            
            #line 127 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pam.Value.ParameterType));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 127 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(pam.Value.Name) ? pam.Value.Name.ToUpper() : pam.Value.Name)));
            
            #line default
            #line hidden
            this.Write(" \"");
            
            #line 127 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(pam.Value.Name) ? pam.Value.Name.ToUpper() : pam.Value.Name)));
            
            #line default
            #line hidden
            this.Write("\" \r\n");
            
            #line 128 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

            }
        }
        if (m.Name == NetClass.Name && NetClass.HasEngine)
        {

            
            #line default
            #line hidden
            this.Write("                let _pricingEngine = Helper.toCell<IPricingEngine> pricingEngine " +
                    "\"pricingEngine\"  \r\n                let _evaluationDate = Helper.toCell<Date> eva" +
                    "luationDate \"evaluationDate\"  \r\n");
            
            #line 136 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        if (m.Name == NetClass.Name)
        {

            
            #line default
            #line hidden
            this.Write("                let builder (current : ICell) = withMnemonic mnemonic (Fun.");
            
            #line 141 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name + (version > 0 ? version.ToString() : "")));
            
            #line default
            #line hidden
            this.Write(" \r\n");
            
            #line 142 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("                let builder (current : ICell) = withMnemonic mnemonic ((_");
            
            #line 147 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write(".cell :?> ");
            
            #line 147 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("Model).");
            
            #line 147 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m.CapFSName));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 148 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        foreach (var pam in m.Parameters)
        {

            
            #line default
            #line hidden
            this.Write("                                                            _");
            
            #line 153 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(pam.Value.Name) ? pam.Value.Name.ToUpper() : pam.Value.Name)));
            
            #line default
            #line hidden
            this.Write(".cell \r\n");
            
            #line 154 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        if (m.Name == NetClass.Name && NetClass.HasEngine)
        {

            
            #line default
            #line hidden
            this.Write("                                                            _pricingEngine.cell \r" +
                    "\n                                                            _evaluationDate.cel" +
                    "l \r\n");
            
            #line 161 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }

            
            #line default
            #line hidden
            this.Write("                                                       ) :> ICell\r\n");
            
            #line 165 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        if (m.Name == NetClass.Name)
        {

            
            #line default
            #line hidden
            this.Write("                let format (i : ICell) (l:string) = Helper.Range.fromModel (i :?>" +
                    " ICell<");
            
            #line 169 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write(">) l\r\n");
            
            #line 170 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        else if (m.ReturnType != "Date" && m.IsReturnTypeObject)
        {
            if (m.ReturnType.Contains("List<"))
            {

            
            #line default
            #line hidden
            this.Write("                let format (i : ");
            
            #line 177 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m.ReturnType.Replace("List<", "Generic.Cephei.Cell.List<")));
            
            #line default
            #line hidden
            this.Write(") (l : string) = Helper.Range.fromList i l\r\n");
            
            #line 178 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

            }
            else
            {

            
            #line default
            #line hidden
            this.Write("                let format (i : ICell) (l:string) = Helper.Range.fromModel (i :?>" +
                    " ICell<");
            
            #line 183 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m.ReturnType));
            
            #line default
            #line hidden
            this.Write(">) l\r\n");
            
            #line 184 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

            }
        }
        else if (m.ReturnType.Contains("List<"))
        {

            
            #line default
            #line hidden
            this.Write("                let format (i : ");
            
            #line 190 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m.ReturnType.Replace("List<", "Generic.List<")));
            
            #line default
            #line hidden
            this.Write(") (l : string) = (Helper.Range.fromArray (i.ToArray()) l)\r\n");
            
            #line 191 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        else
        {
            if (m.ReturnType == "Date")
            {

            
            #line default
            #line hidden
            this.Write("                let format (d : Date) (l:string) = d.serialNumber() :> obj\r\n");
            
            #line 199 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

            }
            else if (m.ReturnType == "DateTime")
            {

            
            #line default
            #line hidden
            this.Write("                let format (d : Date) (l:string) = d.ToOADate() :> obj\r\n");
            
            #line 205 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

            }
            else if ("double,float,int,Int32,long,Int64".Contains (m.ReturnType))
            {

            
            #line default
            #line hidden
            this.Write("                let format (o : ");
            
            #line 210 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((m.ReturnType == "void" ? NetClass.Name : m.ReturnType)));
            
            #line default
            #line hidden
            this.Write(") (l:string) = o :> obj\r\n");
            
            #line 211 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

            }
            else 
            {

            
            #line default
            #line hidden
            this.Write("                let format (o : ");
            
            #line 216 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((m.ReturnType == "void" ? NetClass.Name : m.ReturnType)));
            
            #line default
            #line hidden
            this.Write(") (l:string) = o.ToString() :> obj\r\n");
            
            #line 217 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

            }
        }

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 222 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        if (m.Name == NetClass.Name)
        {

            
            #line default
            #line hidden
            this.Write("                let source () = Helper.sourceFold \"Fun.");
            
            #line 226 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name + (version > 0 ? version.ToString() : "")));
            
            #line default
            #line hidden
            this.Write("\" \r\n");
            
            #line 227 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("                let source () = Helper.sourceFold (_");
            
            #line 232 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write(".source + \".");
            
            #line 232 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(m.Name) ? m.Name.ToUpper() : m.CapFSName)));
            
            #line default
            #line hidden
            this.Write("\") \r\n");
            
            #line 233 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        var delim = "[|";
        if (m.Name != NetClass.Name)
        {

            
            #line default
            #line hidden
            this.Write("                                               ");
            
            #line 239 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(delim));
            
            #line default
            #line hidden
            this.Write(" _");
            
            #line 239 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write(".source\r\n");
            
            #line 240 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

            delim = "; ";
        }
        foreach (var pam in m.Parameters)
        {

            
            #line default
            #line hidden
            this.Write("                                               ");
            
            #line 246 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(delim));
            
            #line default
            #line hidden
            this.Write(" _");
            
            #line 246 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(pam.Value.Name) ? pam.Value.Name.ToUpper() : pam.Value.Name)));
            
            #line default
            #line hidden
            this.Write(".source\r\n");
            
            #line 247 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

            delim = "; ";
        }
        if (m.Name == NetClass.Name && NetClass.HasEngine)
        {

            
            #line default
            #line hidden
            this.Write("                                               ");
            
            #line 253 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(delim));
            
            #line default
            #line hidden
            this.Write(" _pricingEngine.source\r\n                                               ");
            
            #line 254 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(delim));
            
            #line default
            #line hidden
            this.Write(" _evaluationDate.source\r\n");
            
            #line 255 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        if (delim == "; ")
        {

            
            #line default
            #line hidden
            this.Write("                                               |]\r\n");
            
            #line 261 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("                                               [||]\r\n");
            
            #line 267 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }

            
            #line default
            #line hidden
            this.Write("                let hash = Helper.hashFold \r\n");
            
            #line 271 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        delim = "[|";
        if (m.Name != NetClass.Name)
        {

            
            #line default
            #line hidden
            this.Write("                                ");
            
            #line 276 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(delim));
            
            #line default
            #line hidden
            this.Write(" _");
            
            #line 276 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write(".cell\r\n");
            
            #line 277 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

            delim = "; ";
        }
        foreach (var pam in m.Parameters)
        {

            
            #line default
            #line hidden
            this.Write("                                ");
            
            #line 283 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(delim));
            
            #line default
            #line hidden
            this.Write(" _");
            
            #line 283 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(pam.Value.Name) ? pam.Value.Name.ToUpper() : pam.Value.Name)));
            
            #line default
            #line hidden
            this.Write(".cell\r\n");
            
            #line 284 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

            delim = "; ";
        }
        if (m.Name == NetClass.Name && NetClass.HasEngine)
        {

            
            #line default
            #line hidden
            this.Write("                                ");
            
            #line 290 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(delim));
            
            #line default
            #line hidden
            this.Write(" _pricingEngine.cell\r\n                                ");
            
            #line 291 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(delim));
            
            #line default
            #line hidden
            this.Write(" _evaluationDate.cell\r\n");
            
            #line 292 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        if (delim == "; ")
        {

            
            #line default
            #line hidden
            this.Write("                                |]\r\n");
            
            #line 298 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("                                [||]\r\n");
            
            #line 304 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

        }
        var subscriber = "subscriber";
        if ((m.Name == NetClass.Name || m.IsReturnTypeObject) && m.ReturnType != "Date")
        {
            if (m.ReturnType == null || !m.ReturnType.Contains("List<"))
                subscriber = "subscriberModel"; 
            else
                subscriber = "subscriberModelRange";
        }
        else if (m.ReturnType.Contains("List<"))
            subscriber = "subscriberRange";

            
            #line default
            #line hidden
            this.Write("                Model.specify \r\n                    { mnemonic = Model.formatMnem" +
                    "onic mnemonic\r\n                    ; creator = builder\r\n                    ; su" +
                    "bscriber = Helper.");
            
            #line 320 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(subscriber));
            
            #line default
            #line hidden
            this.Write(" format\r\n                    ; source = source \r\n                    ; hash = has" +
                    "h\r\n                    } :?> string\r\n            with\r\n            | _ as e ->  " +
                    "\"#\" + e.Message\r\n        else\r\n            \"<WIZ>\"\r\n");
            
            #line 328 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

    }

            
            #line default
            #line hidden
            this.Write("    [<ExcelFunction(Name=\"_");
            
            #line 331 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("_Range\", Description=\"Create a range of ");
            
            #line 331 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("\",Category=\"Cephei\", IsThreadSafe = false, IsExceptionSafe=true)>]\r\n    let ");
            
            #line 332 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("_Range \r\n        ([<ExcelArgument(Name=\"Mnemonic\",Description = \"Identifier for C" +
                    "ell\")>] \r\n         mnemonic : string)\r\n        ([<ExcelArgument(Name=\"Objects\",D" +
                    "escription = \"Identifer for the ");
            
            #line 335 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write(@""")>] 
         values : obj[,])
         =

        if not (Model.IsInFunctionWizard()) then

            try

                let a = values |>
                        Seq.cast<obj> |>
                        Seq.map (fun (i : obj) -> Helper.toCell<");
            
            #line 345 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("> i \"value\" ) |>\r\n                        Seq.toArray\r\n                let c = a " +
                    "|> Array.map (fun i -> i.cell)\r\n                let l = new Generic.Cephei.Cell." +
                    "List<");
            
            #line 348 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write("> (c)\r\n                let s = a |> Array.map (fun i -> i.source)\r\n              " +
                    "  let builder (current : ICell) = l :> ICell\r\n                let format (i : Ge" +
                    "neric.Cephei.Cell.List<");
            
            #line 351 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write(@">) (l : string) = Helper.Range.fromList i l

                Model.specify 
                    { mnemonic = Model.formatMnemonic mnemonic
                    ; creator = builder
                    ; subscriber = Helper.subscriberRange format
                    ; source =  (fun () -> ""(new Cephei.Cell.List<");
            
            #line 357 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write(">(\" + (Helper.sourceFoldArray (s) + \"))\"))\r\n                    ; hash = Helper.h" +
                    "ashFold2 c\r\n                    } :?> string\r\n            with\r\n            | _ " +
                    "as e ->  \"#\" + e.Message\r\n        else\r\n            \"<WIZ>\"\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 364 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

		public Class
			( NetModel.Class @class
			)
		{
			_NetClassField = @class;
		}

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\steve\Source\Repos\Cephei2\Cephei.Gen\NetXL\Class.tt"

private global::Cephei.Gen.NetModel.Class _NetClassField;

/// <summary>
/// Access the NetClass parameter of the template.
/// </summary>
private global::Cephei.Gen.NetModel.Class NetClass
{
    get
    {
        return this._NetClassField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool NetClassValueAcquired = false;
if (this.Session.ContainsKey("NetClass"))
{
    this._NetClassField = ((global::Cephei.Gen.NetModel.Class)(this.Session["NetClass"]));
    NetClassValueAcquired = true;
}
if ((NetClassValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NetClass");
    if ((data != null))
    {
        this._NetClassField = ((global::Cephei.Gen.NetModel.Class)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ClassBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
