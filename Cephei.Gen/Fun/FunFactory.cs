// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Cephei.Gen
{
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    using Cephei.Gen.Model;
    using EA.Gen.Model.Jet;
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\Fun\FunFactory.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class FunFactory : FunFactoryBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 1 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\Fun\FunFactory.tt"
/*public 
Name:           FunFactory.cst
Author:         Stephen Channell
Description:    Generate the functional interface to Cephei
*/
            
            #line default
            #line hidden
            this.Write(@"//
// Functional interface to the Cephei Factories
// 
namespace Cephei
  open System
  /// Functional interface to QL121 factories .
  module Fun =
    begin

      let Vector (a : 'a seq) = 
        new Core.CoVector<'a> (a)

      let Matrix (m : 'm seq seq) =
        new Core.CoMatrix<'m> (m)

      let Cube (c : 'c seq seq seq) = 
        new Core.CoCube<'c> (c)

      //
      // prime FactoryFinder with reference to the process quantlib
      //
      let mutable Path = 
         let a = System.Reflection.Assembly.GetExecutingAssembly ()
         a.CodeBase.Substring(0, a.CodeBase.LastIndexOf('/'))

      do
         if System.IntPtr.Size = 4 then
           Cephei.Core.FactoryFinder.Reference (System.Reflection.Assembly.LoadFrom (Path + ""/Cephei.QL");
            
            #line 45 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\Fun\FunFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_VersionField));
            
            #line default
            #line hidden
            this.Write(".impl.dll\"))\r\n         else\r\n           Cephei.Core.FactoryFinder.Reference (Syst" +
                    "em.Reflection.Assembly.LoadFrom (Path + \"/Cephei.QL");
            
            #line 47 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\Fun\FunFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_VersionField));
            
            #line default
            #line hidden
            this.Write(@".impl64.dll""))
    
      /// builder for doubles
      let Doubles = Cephei.Core.FactoryFinder.Find<Cephei.Core.IDouble_Factory> ()
      /// builder for ints
      let Ints = Cephei.Core.FactoryFinder.Find<Cephei.Core.IInt_Factory> () 
      /// builder for unsigned ints
      let UInts = Cephei.Core.FactoryFinder.Find<Cephei.Core.IUInt_Factory> ()
      /// builder for longs 
      let Longs = Cephei.Core.FactoryFinder.Find<Cephei.Core.ILong_Factory> ()
      /// builder for unsigned longs
      let ULongs = Cephei.Core.FactoryFinder.Find<Cephei.Core.IULong_Factory> ()
      /// builder for dates
      let DateTimes = Cephei.Core.FactoryFinder.Find<Cephei.Core.IDateTime_Factory> ()
      /// builder for booeans
      let Bools = Cephei.Core.FactoryFinder.Find<Cephei.Core.IBool_Factory> () 
      /// builder for string
      let Strings = Cephei.Core.FactoryFinder.Find<Cephei.Core.IString_Factory> ()
      /// builder for session objects
      let Sessions = Cephei.Core.FactoryFinder.Find<Cephei.QL.ISession_Factory > ()

");
            
            #line 68 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\Fun\FunFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Generate ()));
            
            #line default
            #line hidden
            this.Write("\r\n    end\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 71 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\Fun\FunFactory.tt"


private EA.Gen.Model.Jet.Package rootPackage = null;

public string Generate ()
{
	var sb = new StringBuilder();
    GenerateFor (sb, ThisPackage, "  ",Capital(ThisPackage.Name));
	return sb.ToString();
 }
public void GenerateFor (StringBuilder writer, EA.Gen.Model.Jet.Package thisPackage, string tabs, string parents)
{
    Console.WriteLine (tabs + "Rendering factories for " + thisPackage.Name);
    if (thisPackage.Name != "QL")
    {
        writer.AppendLine ("");
        writer.AppendLine(tabs + "module " + Capital(thisPackage.Name) + " =" );
        writer.AppendLine (tabs + "  begin");
    }
    
    foreach (var element in thisPackage.Elements)
    {
        if (element.ObjectType == "Class" &&
            (element.Visibility == "Public" || element.Visibility == null) &&
            !element.Name.Contains ("<") &&
			!(element.PDATA3 != null && element.PDATA3.Contains("<PRM1>")) &&
            element.Name != "engine" &&
            element.Name != "arguments" &&
            element.Name != "results" &&
            element.Name != "Point" &&
            element.Stereotype != "typedef" &&
            element.Stereotype != "enumeration" &&
            element.ParentID == 0 &&
            element.IsSpec
            )
        {
            writer.AppendLine (tabs + "    /// " + (element.Note ?? "").Replace("\n", " ").Replace("\r", ""));
            writer.AppendLine (tabs + "    let " + element.Name + " = Cephei.Core.FactoryFinder.Find<Cephei." + Factory(parents, "I", element.Name) + "> ()" );
//            writer.WriteLine (tabs + "    let " + element.Name + " = new Cephei." + Factory(parents, "C", element.Name) + "() :> Cephei." + Factory(parents, "I", element.Name) );
        }
    }

    foreach (var package in thisPackage.Children) 
    {
        GenerateFor (writer, package, tabs + "    ", parents + "." + Capital(package.Name));
    }
    if (thisPackage.Name != "QL")
    {
        writer.AppendLine (tabs + "  end");
    }
}

private string Capital (string name)
{
    return name.Substring (0, 1).ToUpper () + name.Substring (1);
}

private string Factory (string parent, string type, string name)
{
    if (parent == "")
        return type  + name + "_Factory ";
    else
        return parent + "." + type + name + "_Factory ";
}

public EA.Gen.Model.Jet.Package ThisPackage
{
	get
	{
		if( rootPackage == null )
		{
            rootPackage = (from r in Context.Repository.Packages
                            where r.Name == _PackageNameField || r.GUID == _PackageNameField
                            select r
                            ).First();
		}
		if (rootPackage == null)
			throw new ApplicationException("You must identify a root package ");
		return rootPackage;
	}
	set 
    { 
        rootPackage = value; 
    }
}

    public Context Context;

	public FunFactory 
		( string packageName
		, string version
		, Context ctx = null
		)
	{
        _PackageNameField = packageName;
		_VersionField = version;
            if (ctx != null)
                Context = ctx;
            else
                Context = new Context();
	}

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\Fun\FunFactory.tt"

private string _PackageNameField;

/// <summary>
/// Access the PackageName parameter of the template.
/// </summary>
private string PackageName
{
    get
    {
        return this._PackageNameField;
    }
}

private string _VersionField;

/// <summary>
/// Access the Version parameter of the template.
/// </summary>
private string Version
{
    get
    {
        return this._VersionField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool PackageNameValueAcquired = false;
if (this.Session.ContainsKey("PackageName"))
{
    this._PackageNameField = ((string)(this.Session["PackageName"]));
    PackageNameValueAcquired = true;
}
if ((PackageNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("PackageName");
    if ((data != null))
    {
        this._PackageNameField = ((string)(data));
    }
}
bool VersionValueAcquired = false;
if (this.Session.ContainsKey("Version"))
{
    this._VersionField = ((string)(this.Session["Version"]));
    VersionValueAcquired = true;
}
if ((VersionValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Version");
    if ((data != null))
    {
        this._VersionField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class FunFactoryBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
