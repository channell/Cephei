<#/*public 
Name:           FunFactory.cst
Author:         Stephen Channell
Description:    Generate the functional interface to Cephei
*/#>
<#@ parameter Name="PackageName" Type="System.String" Default="" Category="1. Context" Optional="False" Description="Name of entity in EA repository, that is to be generated." #>
<#@ parameter Name="Version" Type="System.String" #>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ Assembly Name="System.Design" #>
<#@ Assembly Name="System" #>
<#@ Import NameSpace="System.IO" #>
<#@ Import NameSpace="System.Text" #>
<#@ Import NameSpace="System.Collections.Generic" #>
<#@ import namespace="Cephei.Gen.Model" #>
<#@ import namespace="EA.Gen.Model.Jet" #>
<#@ import namespace="System.Linq" #>
//
// Functional interface to the Cephei Factories
// 
namespace Cephei
  open System
  /// Functional interface to QL121 factories .
  module Fun =
    begin

      let Vector (a : 'a seq) = 
        new Core.CoVector<'a> (a)

      let Matrix (m : 'm seq seq) =
        new Core.CoMatrix<'m> (m)

      let Cube (c : 'c seq seq seq) = 
        new Core.CoCube<'c> (c)

      //
      // prime FactoryFinder with reference to the process quantlib
      //
      let mutable Path = 
         let a = System.Reflection.Assembly.GetExecutingAssembly ()
         a.CodeBase.Substring(0, a.CodeBase.LastIndexOf('/'))

      do
         if System.IntPtr.Size = 4 then
           Cephei.Core.FactoryFinder.Reference (System.Reflection.Assembly.LoadFrom (Path + "/Cephei.QL<#=_VersionField#>.impl.dll"))
         else
           Cephei.Core.FactoryFinder.Reference (System.Reflection.Assembly.LoadFrom (Path + "/Cephei.QL<#=_VersionField#>.impl64.dll"))
    
      /// builder for doubles
      let Doubles = Cephei.Core.FactoryFinder.Find<Cephei.Core.IDouble_Factory> ()
      /// builder for ints
      let Ints = Cephei.Core.FactoryFinder.Find<Cephei.Core.IInt_Factory> () 
      /// builder for unsigned ints
      let UInts = Cephei.Core.FactoryFinder.Find<Cephei.Core.IUInt_Factory> ()
      /// builder for longs 
      let Longs = Cephei.Core.FactoryFinder.Find<Cephei.Core.ILong_Factory> ()
      /// builder for unsigned longs
      let ULongs = Cephei.Core.FactoryFinder.Find<Cephei.Core.IULong_Factory> ()
      /// builder for dates
      let DateTimes = Cephei.Core.FactoryFinder.Find<Cephei.Core.IDateTime_Factory> ()
      /// builder for booeans
      let Bools = Cephei.Core.FactoryFinder.Find<Cephei.Core.IBool_Factory> () 
      /// builder for string
      let Strings = Cephei.Core.FactoryFinder.Find<Cephei.Core.IString_Factory> ()
      /// builder for session objects
      let Sessions = Cephei.Core.FactoryFinder.Find<Cephei.QL.ISession_Factory > ()

<#=Generate ()#>
    end

<#+

private EA.Gen.Model.Jet.Package rootPackage = null;

public string Generate ()
{
	var sb = new StringBuilder();
    GenerateFor (sb, ThisPackage, "  ",Capital(ThisPackage.Name));
	return sb.ToString();
 }
public void GenerateFor (StringBuilder writer, EA.Gen.Model.Jet.Package thisPackage, string tabs, string parents)
{
    Console.WriteLine (tabs + "Rendering factories for " + thisPackage.Name);
    if (thisPackage.Name != "QL")
    {
        writer.AppendLine ("");
        writer.AppendLine(tabs + "module " + Capital(thisPackage.Name) + " =" );
        writer.AppendLine (tabs + "  begin");
    }
    
    foreach (var element in thisPackage.Elements)
    {
        if (element.ObjectType == "Class" &&
            (element.Visibility == "Public" || element.Visibility == null) &&
            !element.Name.Contains ("<") &&
			!(element.PDATA3 != null && element.PDATA3.Contains("<PRM1>")) &&
            element.Name != "engine" &&
            element.Name != "arguments" &&
            element.Name != "results" &&
            element.Name != "Point" &&
            element.Stereotype != "typedef" &&
            element.Stereotype != "enumeration" &&
            element.ParentID == 0 &&
            element.IsSpec
            )
        {
            writer.AppendLine (tabs + "    /// " + (element.Note ?? "").Replace("\n", " ").Replace("\r", ""));
            writer.AppendLine (tabs + "    let " + element.Name + " = Cephei.Core.FactoryFinder.Find<Cephei." + Factory(parents, "I", element.Name) + "> ()" );
//            writer.WriteLine (tabs + "    let " + element.Name + " = new Cephei." + Factory(parents, "C", element.Name) + "() :> Cephei." + Factory(parents, "I", element.Name) );
        }
    }

    foreach (var package in thisPackage.Children) 
    {
        GenerateFor (writer, package, tabs + "    ", parents + "." + Capital(package.Name));
    }
    if (thisPackage.Name != "QL")
    {
        writer.AppendLine (tabs + "  end");
    }
}

private string Capital (string name)
{
    return name.Substring (0, 1).ToUpper () + name.Substring (1);
}

private string Factory (string parent, string type, string name)
{
    if (parent == "")
        return type  + name + "_Factory ";
    else
        return parent + "." + type + name + "_Factory ";
}

public EA.Gen.Model.Jet.Package ThisPackage
{
	get
	{
		if( rootPackage == null )
		{
            rootPackage = (from r in Context.Repository.Packages
                            where r.Name == _PackageNameField || r.GUID == _PackageNameField
                            select r
                            ).First();
		}
		if (rootPackage == null)
			throw new ApplicationException("You must identify a root package ");
		return rootPackage;
	}
	set 
    { 
        rootPackage = value; 
    }
}

    public Context Context;

	public FunFactory 
		( string packageName
		, string version
		, Context ctx = null
		)
	{
        _PackageNameField = packageName;
		_VersionField = version;
            if (ctx != null)
                Context = ctx;
            else
                Context = new Context();
	}
#>
