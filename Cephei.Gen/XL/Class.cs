// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Cephei.Gen
{
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    using Cephei.Gen.Model;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Class : ClassBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 1 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
/* 
Name:           Interface.cst
Author:         Stephen Channell
Description:    Generate a single Interface for the Class
*/
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 17 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

    
    Context.ElementName = ElementName; 
    Context.RootName = RootPackageName;
    Context.Prefix = "I";
    Context.Suffix = "";
    Context.ClassDelimiter = ".";
    
    string Namespace = "Cephei." + Context.CurrentClass.GetNamespace (Context.ClassDelimiter).Replace ("QL", "XL");

    bool emptyClass = true;
    foreach(Method method in Context.CurrentClass.Methods)
    { 
        if (Context.Included2 (method, (method.Name == Context.CurrentClass.Name && !Context.CurrentClass.IsAbstract)) && !method.Name.StartsWith("operator") && !method.Name.StartsWith("~"))
        {
            emptyClass = false;
        }
    }
    if (emptyClass) 
    { 

            
            #line default
            #line hidden
            this.Write("/////////////////////////////////////////////////////////////////////////////////" +
                    "/////////////////////////////////////////\r\n// Class ");
            
            #line 39 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(" does not have any exportable functions\r\n////////////////////////////////////////" +
                    "////////////////////////////////////////////////////////////////////////////////" +
                    "//\r\n \r\n");
            
            #line 42 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

//        return "";
    }
    if (Context.CurrentClass.FileName == "") return "";

            
            #line default
            #line hidden
            this.Write("#pragma warning disable 108\r\n#pragma warning disable 435\r\nusing System;\r\nusing Sy" +
                    "stem.Runtime.InteropServices;\r\nusing ExcelDna.Integration;\r\nusing Cephei.Core;\r\n" +
                    "using Cephei.");
            
            #line 53 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.GetNamespace (Context.ClassDelimiter)));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\nnamespace ");
            
            #line 55 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    ");
            
            #line 57 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.Comment(Context.CurrentClass.Notes,"\t")));
            
            #line default
            #line hidden
            this.Write("\r\n    [Guid (\"");
            
            #line 58 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Guid2.Substring(1, Context.CurrentClass.Guid2.Length -2)));
            
            #line default
            #line hidden
            this.Write("\"),ComVisible(true)]\r\n\tpublic static class ");
            
            #line 59 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@"
	{
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Functions to implement the Excel interface
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
");
            
            #line 64 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

    Parameter pricerParameter = Context.CurrentClass.PricingParameter ();

    foreach(Method method in Context.CurrentClass.Methods)
    { 
        if (Context.Included2 (method, (method.Name == Context.CurrentClass.Name  && !Context.CurrentClass.IsAbstract)) && !method.Name.StartsWith("operator") && !method.Name.StartsWith("~"))
        { 
            string xlName; 
            
            if (Context.CurrentClass.Name != method.Name)
                xlName = (/*Namespace + 
                          "." + */
                          Context.CurrentClass.Name +
                          "_" +
                          method.XLClassName).Replace("Cephei.XL.","").Replace(".", "_");
            else
                xlName = (/*Namespace + 
                          "." + */
                          method.XLClassName).Replace("Cephei.XL.","").Replace(".", "_");

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 84 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.Comment(method.Notes, "\t\t")));
            
            #line default
            #line hidden
            this.Write("\r\n        /// <param name=\"Mnemonic\">Mnemonic for the ");
            
            #line 85 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.XLClassName));
            
            #line default
            #line hidden
            this.Write("</param>\r\n");
            
            #line 86 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

            if (Context.CurrentClass.Name != method.Name)
            {

            
            #line default
            #line hidden
            this.Write("        /// <param name=\"");
            
            #line 90 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("Mnemonic\">Mnemonic for the ");
            
            #line 90 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("<see cref=\"");
            
            #line 90 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.GetNamespace (Context.ClassDelimiter).Replace ("::", ".") + ".I" + Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("\"/></param>\r\n");
            
            #line 91 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
                    
            }
            foreach (KeyValuePair<int, Parameter> pair in method.Parameters)
            {

            
            #line default
            #line hidden
            this.Write("            \r\n        /// <param name=\"");
            
            #line 96 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.Value.Name));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 96 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.Value.Notes ?? ""));
            
            #line default
            #line hidden
            this.Write("<see cref=\"");
            
            #line 96 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.Value.ParameterType.GetQualifiedTypeWithoutOption (false, ".", "I", "")));
            
            #line default
            #line hidden
            this.Write("\"/></param>\r\n");
            
            #line 97 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

            }
            if (pricerParameter != null && method.Name == Context.CurrentClass.Name)
            {

            
            #line default
            #line hidden
            this.Write("            \r\n        /// <param name=\"QL_Pricer\">Pricing object for ");
            
            #line 102 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("<see cref=\"");
            
            #line 102 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.PricingParameter().GetQualifiedType (true, ".", "I", "")));
            
            #line default
            #line hidden
            this.Write("\"/></param>\r\n");
            
            #line 103 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

            }

            
            #line default
            #line hidden
            this.Write("            \r\n        /// <param name=\"With\">with optional session reference<see " +
                    "cref=\"Cephei.XL.Session._Session\"/></param>\r\n        /// <returns>Mnemonic for t" +
                    "he ");
            
            #line 107 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.XLClassName));
            
            #line default
            #line hidden
            this.Write("</returns>\r\n        [ExcelFunction (Description = \"");
            
            #line 108 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Notes));
            
            #line default
            #line hidden
            this.Write("\", Category = \"");
            
            #line 108 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\", Name = \"_");
            
            #line 108 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xlName));
            
            #line default
            #line hidden
            this.Write("\", IsExceptionSafe=false, IsMacroType=true)]\r\n        public static string _");
            
            #line 109 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xlName));
            
            #line default
            #line hidden
            this.Write("\r\n            ( [ExcelArgument (\"Mnemonic for the ");
            
            #line 110 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.XLClassName));
            
            #line default
            #line hidden
            this.Write("\")] string Mnemonic\r\n");
            
            #line 111 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

            if (Context.CurrentClass.Name != method.Name)
            {

            
            #line default
            #line hidden
            this.Write("            , [ExcelArgument (\"Mnemonic for the ");
            
            #line 115 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("\")] string ");
            
            #line 115 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("Mnemonic\r\n");
            
            #line 116 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
                    
            }
            foreach (KeyValuePair<int, Parameter> pair in method.Parameters)
            {

            
            #line default
            #line hidden
            this.Write("            \r\n            , [ExcelArgument (\"");
            
            #line 121 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.Value.Notes ?? ""));
            
            #line default
            #line hidden
            this.Write("\")] object ");
            
            #line 121 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.Value.Name));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 122 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

            }
            if (pricerParameter != null && method.Name == Context.CurrentClass.Name)
            {

            
            #line default
            #line hidden
            this.Write("            \r\n            , [ExcelArgument (\"Pricing object for instrument\")] obj" +
                    "ect QL_Pricer\r\n");
            
            #line 128 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

            }

            
            #line default
            #line hidden
            this.Write(@"                
            , [ExcelArgument (""with optional session reference"")] string With
            )
        {
            if (CepheiModel.Instance.IsInFunctionWizard ())
                return Mnemonic;
            try
            {
                Tuple<Type, Object[]> __pam = new Tuple<Type, object[]>
                    ( typeof (");
            
            #line 139 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace.Replace (".XL", ".Data") + "." + Context.CurrentClass.Name + "." + method.XLClassName));
            
            #line default
            #line hidden
            this.Write("Cell)\r\n");
            
            #line 140 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

            if (Context.CurrentClass.Name != method.Name)
            {

            
            #line default
            #line hidden
            this.Write("                    , new object[]\r\n                        { Mnemonic\r\n         " +
                    "               , XLHelper.Validate<");
            
            #line 146 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.GetNamespace (".") + ".I" + Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(">(");
            
            #line 146 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("Mnemonic, true, \"");
            
            #line 146 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("Mnemonic\")\r\n");
            
            #line 147 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

            }
            else
            {

            
            #line default
            #line hidden
            this.Write("                    , new object[]\r\n                        { Mnemonic\r\n");
            
            #line 154 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
                    
            }

            
            #line default
            #line hidden
            this.Write("                        ");
            
            #line 157 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((method.Parameters.Count == 0 ? "" : ",")));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 157 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetParamCallStringXL("", "", "\n\t\t\t\t\t\t, ")));
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t\t\t\t\t, XLHelper.AssertToString (With, false, \"With\") \r\n                      " +
                    "  }\r\n                    );\r\n                CepheiModel.Instance.WriteLog \r\n   " +
                    "                 ( LogType.Information\r\n                    , ");
            
            #line 163 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((method.Id * 10) + 20000000 + 1));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"Create\"\r\n            " +
                    "        , \"");
            
            #line 166 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.XLClassName));
            
            #line default
            #line hidden
            this.Write(@"""
                    );
                return (string)CepheiModel.Instance.Subscribe (__pam);
            }
            catch (Exception e)
            {
                CepheiModel.Instance.WriteLog 
                    ( LogType.Error
                    , ");
            
            #line 174 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((method.Id * 10) + 20000000 + 2));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"Create\"\r\n            " +
                    "        , \"");
            
            #line 177 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.XLClassName));
            
            #line default
            #line hidden
            this.Write(":\" + e.Message\r\n                    );\r\n                return \"#\" + e.Message;\r\n" +
                    "            }\r\n        }\r\n");
            
            #line 182 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

            if (Context.CurrentClass.Name == method.Name)
            {

            
            #line default
            #line hidden
            this.Write("  \r\n        /// <summary>\r\n        /// Create an object from VBA\r\n        /// </s" +
                    "ummary>\r\n        public static ICell Create");
            
            #line 189 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.XLClassName));
            
            #line default
            #line hidden
            this.Write("\r\n            ( string Mnemonic\r\n");
            
            #line 191 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

            if (Context.CurrentClass.Name != method.Name)
            {

            
            #line default
            #line hidden
            this.Write("            , string ");
            
            #line 195 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("Mnemonic\r\n");
            
            #line 196 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
                    
            }
            foreach (KeyValuePair<int, Parameter> pair in method.Parameters)
            {

            
            #line default
            #line hidden
            this.Write("            \r\n            , object ");
            
            #line 201 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.Value.Name));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 202 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

            }
            if (pricerParameter != null && method.Name == Context.CurrentClass.Name)
            {

            
            #line default
            #line hidden
            this.Write("            \r\n            , object QL_Pricer\r\n            \r\n");
            
            #line 209 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

            }

            
            #line default
            #line hidden
            this.Write("                \r\n            , object With\r\n            )\r\n        {\r\n          " +
                    "  try\r\n            {\r\n                object[] __pam = new object[]\r\n           " +
                    "         { Mnemonic\r\n");
            
            #line 219 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

            if (Context.CurrentClass.Name != method.Name)
            {

            
            #line default
            #line hidden
            this.Write("                    , ");
            
            #line 223 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("Mnemonic\r\n");
            
            #line 224 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
                    
            }

            
            #line default
            #line hidden
            this.Write("                    ");
            
            #line 227 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((method.Parameters.Count == 0 ? "" : ",")));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 227 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetParamCallStringXL("", "", "\n\t\t\t\t\t, ")));
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t\t\t\t, XLHelper.AssertToString (With, false, \"With\") \r\n                    };\r" +
                    "\n\r\n                CepheiModel.Instance.WriteLog \r\n                    ( LogType" +
                    ".Information\r\n                    , ");
            
            #line 233 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((method.Id * 10) + 20000000 + 3));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"Create\"\r\n            " +
                    "        , \"");
            
            #line 236 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.XLClassName));
            
            #line default
            #line hidden
            this.Write("\"\r\n                    );\r\n        \r\n                var _r= new ");
            
            #line 239 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace.Replace (".XL", ".Data") + "." + Context.CurrentClass.Name + "." + method.XLClassName));
            
            #line default
            #line hidden
            this.Write(@"Cell (CepheiModel.Instance, __pam);
                CepheiModel.Instance[Mnemonic] = _r;
                return _r;
            }
            catch (Exception e)
            {
                CepheiModel.Instance.WriteLog 
                    ( LogType.Error
                    , ");
            
            #line 247 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((method.Id * 10) + 20000000 + 4));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"Create\"\r\n            " +
                    "        , \"");
            
            #line 250 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.XLClassName));
            
            #line default
            #line hidden
            this.Write("\"\r\n                    );\r\n                throw e;\r\n            }\r\n        }\r\n");
            
            #line 255 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

            }
        }
    }

    string xl_Name = (/*Namespace + "." +*/ Context.CurrentClass.Name).Replace("Cephei.XL.","").Replace(".", "_");


            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// Create Vector from Excel\r\n        /// </summar" +
                    "y>\r\n        [ExcelFunction (Description = \"Create a reference to a list of refer" +
                    "ences to ");
            
            #line 266 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("\", Category = \"Cephei.XL\", Name = \"_");
            
            #line 266 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xl_Name));
            
            #line default
            #line hidden
            this.Write("_Vector\", IsExceptionSafe=false, IsMacroType=true)]\r\n        public static object" +
                    " _");
            
            #line 267 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xl_Name));
            
            #line default
            #line hidden
            this.Write("_Vector\r\n            ([ExcelArgument (\"Mnemonic\")] string Mnemonic\r\n           , " +
                    "[ExcelArgument (\"vector of Mnemonic for the ");
            
            #line 269 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@"s"")] object[] v
           )
        {
            if (CepheiModel.Instance.IsInFunctionWizard ())
                return Mnemonic;
            try
            {
                Tuple<Type, Object[]> __pam = new Tuple<Type, object[]>
                    ( typeof (");
            
            #line 277 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace.Replace (".XL", ".Data") + "." + Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@".CellVector)
                    , new object[]
                        { Mnemonic
                        , v
                        }
                    );
                CepheiModel.Instance.WriteLog
                    ( LogType.Information
                    , ");
            
            #line 285 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.CurrentClass.Id * 10) + 20000000 + 5));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"CreateVector\"\r\n      " +
                    "              , \"");
            
            #line 288 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@"""
                    );
                return (string)CepheiModel.Instance.Subscribe (__pam);
            }
            catch (Exception e)
            {
                CepheiModel.Instance.WriteLog
                    (LogType.Error
                    , ");
            
            #line 296 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.CurrentClass.Id * 10) + 20000000 + 5));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"CreateVector\"\r\n      " +
                    "              , \"");
            
            #line 299 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@":"" + e.Message
                    );
                return ""#"" + e.Message;
            }
        }

        /// <summary>
        /// Create Matrix from Excel
        /// </summary>
        [ExcelFunction (Description = ""Create a reference to a table of references to ");
            
            #line 308 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("\", Category = \"Cephei.XL\", Name = \"_");
            
            #line 308 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xl_Name));
            
            #line default
            #line hidden
            this.Write("_Matrix\", IsExceptionSafe=false, IsMacroType=true)]\r\n        public static object" +
                    " _");
            
            #line 309 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xl_Name));
            
            #line default
            #line hidden
            this.Write("_Matrix\r\n            ([ExcelArgument (\"Mnemonic\")] string Mnemonic\r\n           , " +
                    "[ExcelArgument (\"matrix of Mnemonic for the ");
            
            #line 311 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@"s"")] object[] v
           )
        {
            if (CepheiModel.Instance.IsInFunctionWizard ())
                return Mnemonic;
            try
            {
                Tuple<Type, Object[]> __pam = new Tuple<Type, object[]>
                    ( typeof (");
            
            #line 319 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace.Replace (".XL", ".Data") + "." + Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@".CellMatrix)
                    , new object[]
                        { Mnemonic
                        , v
                        }
                    );
                CepheiModel.Instance.WriteLog
                    ( LogType.Information
                    , ");
            
            #line 327 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.CurrentClass.Id * 10) + 20000000 + 6));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"CreateMatrix\"\r\n      " +
                    "              , \"");
            
            #line 330 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@"""
                    );
                return (string)CepheiModel.Instance.Subscribe (__pam);
            }
            catch (Exception e)
            {
                CepheiModel.Instance.WriteLog
                    (LogType.Error
                    , ");
            
            #line 338 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.CurrentClass.Id * 10) + 20000000 + 6));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"CreateMatrix\"\r\n      " +
                    "              , \"");
            
            #line 341 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@":"" + e.Message
                    );
                return ""#"" + e.Message;
            }
        }
        /*
        /// <summary>
        /// Create Cube from Excel
        /// </summary>
        [ExcelFunction (Description = ""Create a reference to a cube of references to ");
            
            #line 350 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("\", Category = \"Cephei.XL\", Name = \"_");
            
            #line 350 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xl_Name));
            
            #line default
            #line hidden
            this.Write("_Cube\", IsExceptionSafe=false, IsMacroType=true)]\r\n        public static object _" +
                    "");
            
            #line 351 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(xl_Name));
            
            #line default
            #line hidden
            this.Write("_Cube\r\n            ([ExcelArgument (\"Mnemonic\")] string Mnemonic\r\n           , [E" +
                    "xcelArgument (\"Cube of Mnemonic for the ");
            
            #line 353 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@"s"")] object[] v
           )
        {
            if (CepheiModel.Instance.IsInFunctionWizard ())
                return Mnemonic;
            try
            {
                Tuple<Type, Object[]> __pam = new Tuple<Type, object[]>
                    ( typeof (");
            
            #line 361 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace.Replace (".XL", ".Data") + "." + Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@".CellCube)
                    , new object[]
                        { Mnemonic
                        , v
                        }
                    );
                CepheiModel.Instance.WriteLog
                    ( LogType.Information
                    , ");
            
            #line 369 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.CurrentClass.Id * 10) + 20000000 + 7));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"CreateCube\"\r\n        " +
                    "            , \"");
            
            #line 372 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@"""
                    );
                return (string)CepheiModel.Instance.Subscribe (__pam);
            }
            catch (Exception e)
            {
                CepheiModel.Instance.WriteLog
                    (LogType.Error
                    , ");
            
            #line 380 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.CurrentClass.Id * 10) + 20000000 + 7));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"CreateCube\"\r\n        " +
                    "            , \"");
            
            #line 383 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@":"" + e.Message
                    );
                return ""#"" + e.Message;
            }
        }
        /// <summary>
        /// Create Vector from VBA
        /// </summary>
        public static ICell VectorCreate
           ( string Mnemonic
           , object[] v
           )
        {
            try
            {
                object[] __pam =
                    new object[]
                        { Mnemonic
                        , v
                        };
                CepheiModel.Instance.WriteLog
                    ( LogType.Information
                    , ");
            
            #line 405 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.CurrentClass.Id * 10) + 20000000 + 5));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"CreateVector\"\r\n      " +
                    "              , \"");
            
            #line 408 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("\"\r\n                    );\r\n                var _r = new ");
            
            #line 410 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace.Replace (".XL", ".Data") + "." + Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@".CellVector (CepheiModel.Instance, __pam);
                CepheiModel.Instance[Mnemonic] = _r;
                return _r;
            }
            catch (Exception e)
            {
                CepheiModel.Instance.WriteLog
                    (LogType.Error
                    , ");
            
            #line 418 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.CurrentClass.Id * 10) + 20000000 + 5));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"CreateVector\"\r\n      " +
                    "              , \"");
            
            #line 421 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@":"" + e.Message
                    );
                throw e;
            }
        }

        /// <summary>
        /// Create Matrix from VBA
        /// </summary>
        public static ICell MatrixCreate
           ( string Mnemonic
           , object[] v
           )
        {
            try
            {
                object[] __pam =
                    new object[]
                        { Mnemonic
                        , v
                        };
                CepheiModel.Instance.WriteLog
                    ( LogType.Information
                    , ");
            
            #line 444 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.CurrentClass.Id * 10) + 20000000 + 6));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"CreateMatrix\"\r\n      " +
                    "              , \"");
            
            #line 447 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("\"\r\n                    );\r\n                var _r = new ");
            
            #line 449 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace.Replace (".XL", ".Data") + "." + Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@".CellMatrix (CepheiModel.Instance, __pam);
                CepheiModel.Instance[Mnemonic] = _r;
                return _r;
            }
            catch (Exception e)
            {
                CepheiModel.Instance.WriteLog
                    (LogType.Error
                    , ");
            
            #line 457 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.CurrentClass.Id * 10) + 20000000 + 6));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"CreateMatrix\"\r\n      " +
                    "              , \"");
            
            #line 460 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@":"" + e.Message
                    );
                throw e;
            }
        }
        /// <summary>
        /// Create Cube from VBA
        /// </summary>
        public static ICell CubeCreate
           ( string Mnemonic
           , object[] v
           )
        {
            try
            {
                object[] __pam =
                    new object[]
                        { Mnemonic
                        , v
                        };
                CepheiModel.Instance.WriteLog
                    ( LogType.Information
                    , ");
            
            #line 482 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.CurrentClass.Id * 10) + 20000000 + 7));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"CreateCube\"\r\n        " +
                    "            , \"");
            
            #line 485 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("\"\r\n                    );\r\n                var _r = new ");
            
            #line 487 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace.Replace (".XL", ".Data") + "." + Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(@".CellCube (CepheiModel.Instance, __pam);
                CepheiModel.Instance[Mnemonic] = _r;
                return _r;
            }
            catch (Exception e)
            {
                CepheiModel.Instance.WriteLog
                    (LogType.Error
                    , ");
            
            #line 495 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.CurrentClass.Id * 10) + 20000000 + 7));
            
            #line default
            #line hidden
            this.Write("\r\n                    , \"Cephei.XL\"\r\n                    , \"CreateCube\"\r\n        " +
                    "            , \"");
            
            #line 498 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(":\" + e.Message\r\n                    );\r\n                throw e;\r\n            }\r\n" +
                    "        }\r\n        */\r\n    }\r\n}\r\n");
            
            #line 506 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"
  
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 507 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

		public Context Context = new Context();

		public Class
			( string ElementName
			, string RootPackageName
			)
		{
			_ElementNameField = ElementName;
			_RootPackageNameField = RootPackageName;
		}

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\XL\Class.tt"

private string _ElementNameField;

/// <summary>
/// Access the ElementName parameter of the template.
/// </summary>
private string ElementName
{
    get
    {
        return this._ElementNameField;
    }
}

private string _RootPackageNameField;

/// <summary>
/// Access the RootPackageName parameter of the template.
/// </summary>
private string RootPackageName
{
    get
    {
        return this._RootPackageNameField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ElementNameValueAcquired = false;
if (this.Session.ContainsKey("ElementName"))
{
    this._ElementNameField = ((string)(this.Session["ElementName"]));
    ElementNameValueAcquired = true;
}
if ((ElementNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ElementName");
    if ((data != null))
    {
        this._ElementNameField = ((string)(data));
    }
}
bool RootPackageNameValueAcquired = false;
if (this.Session.ContainsKey("RootPackageName"))
{
    this._RootPackageNameField = ((string)(this.Session["RootPackageName"]));
    RootPackageNameValueAcquired = true;
}
if ((RootPackageNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("RootPackageName");
    if ((data != null))
    {
        this._RootPackageNameField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ClassBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
