<#/*
Name:           Control.tt
Author:         Stephen Channell
Description:    Control the generation of XL intefaces
*/#> 
<#@ parameter Name="RootPackageName" Type="System.String" Default="" Optional="False" Category="1. Context" Description="Package to recursively process." #>
<#@ parameter Name="ProjectName" Type="System.String" Default="" Optional="False" Category="1. Context" Description="Project file to generate." #>
<#@ parameter name="OutputDirectory" type="System.String" #>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ Assembly Name="System.Design" #>
<#@ Assembly Name="Interop.EA" Path="C:\Program Files (x86)\Sparx Systems\EA" #>

<#@ Import NameSpace="System.IO" #>
<#@ Import NameSpace="System.Text" #>
<#@ Import NameSpace="System.Collections.Generic" #>
<# go (); #>
<#+

void go ()
{
	Console.WriteLine("************ Generating Interface *********************");
    
	string fileName =  OutputDirectory + "\\" + ProjectName + ".csproj";

    if (!Directory.Exists(OutputDirectory)) Directory.CreateDirectory(OutputDirectory);

    var project = new Project
        ( RootPackageName
        , ProjectName
        , OutputDirectory
		, Context);

    var projCode = project.TransformText();
    System.IO.File.WriteAllText(fileName, projCode);
    
    Output ("Bools.cs", "Bool", "bool", 1);
    Output ("DateTimes.cs", "DateTime", "DateTime", 2);
    Output ("Doubles.cs", "Double", "double", 3);
    Output ("Ints.cs", "Int", "int", 4);
    Output ("Longs.cs", "Long", "long", 5);
    Output ("Strings.cs", "String", "String", 6);
    Output ("UInts.cs", "UInt", "uint", 7);
    Output ("ULongs.cs", "ULong", "ulong", 8);
}

void Output (string filename, string Mnemonic, string typecode, int msgno)
{
    var tmp = new Collect (Mnemonic, typecode, msgno);
    var code = tmp.TransformText();
    System.IO.File.WriteAllText(OutputDirectory + "\\" + filename, code);
    Console.WriteLine("Rendered " + Mnemonic);
}
	public Model.Context Context;

	public XLControl
		( string rootPackageName
		, string projectName
		, string outputDirectory
		, Model.Context ctx = null
		)
	{
        _RootPackageNameField = rootPackageName;
        _ProjectNameField = projectName;
        _OutputDirectoryField = outputDirectory;
			if (ctx != null)
				Context = ctx;
	}
#>