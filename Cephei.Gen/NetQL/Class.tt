<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Cephei.Gen.NetModel" #>
<#@ parameter Name="NetClass" Type="Cephei.Gen.NetModel.Class" Default="" Category="1. Context" Optional="False" Description="Name of entity in EA repository, that is to be generated." #>
(*
Copyright (C) 2020 Cepheis Ltd (steve.channell@cepheis.com)

This file is part of Cephei.QL Project https://github.com/channell/Cephei

Cephei.QL is open source software based on QLNet  you can redistribute it and/or modify it
under the terms of the Cephei.QL license.  You should have received a
copy of the license along with this program; if not, license is
available at <https://github.com/channell/Cephei/LICENSE>.

QLNet is a based on QuantLib, a free-software/open-source library
for financial quantitative analysts and developers - http://quantlib.org/
The QuantLib license is available online at http://quantlib.org/license.shtml.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the license for more details.
*)
namespace Cephei.QL

open System
open Cephei.QL.Util
open Cephei.Cell
open Cephei.Cell.Generic
open System.Collections
open System.Collections.Generic
open QLNet
open Cephei.QLNetHelper

<#
    int version = 0;
    foreach(var m in NetClass.Constructors)
    {
#>
(* <summary>
<#=(NetClass.Notes != null ? NetClass.Notes : "")#>
<#=(m.Notes != null ? m.Notes : "")#>
  </summary> *)
[<AutoSerializable(true)>]
type <#=NetClass.FSTemplate (version++)#>
<#=m.FSConstructor#>
    inherit Model<<#=NetClass.FSTypeName#>> ()
(*
    Parameters
*)
<#
        foreach (var pam in m.Parameters)
        {
#>
    let _<#=(Context.Keywords.Contains(pam.Value.Name) ? pam.Value.Name.ToUpper() : pam.Value.Name).PadRight(41, ' ')#> = <#=pam.Value.Name#>
<#
        }
        if (NetClass.HasEngine)
        {
#>
    let _evaluationDate                            = evaluationDate
    let _pricingEngine                             = pricingEngine
<#
        }
#>
(*
    Functions
*)
<#=m.FSConstruct#>
<#
        foreach(var meth in NetClass.Methods)
        {
            if (meth.Parameters.Count == 0)
            {
              if (meth.ReturnType == "void")
                {
#>
    let _<#=meth.FSName.PadRight(41, ' ')#> = cell (fun () -> <#=NetClass.CellReference#>.<#=(Context.Keywords.Contains(meth.Name) ? meth.Name.ToUpper() : meth.Name)#><#=(meth.IsProperty ? "" : "()")#>
                                                                     _<#=NetClass.Name#>.Value)
<#
                }
                else
                {
#>
    let _<#=meth.FSName.PadRight(41, ' ')#> = cell (fun () -> <#=NetClass.CellReference#>.<#=(Context.Keywords.Contains(meth.Name) ? meth.Name.ToUpper() : meth.Name)#><#=(meth.IsProperty ? "" : "()")#>)
<#
                }
            }
            else
            {
                if (meth.ReturnType == "void")
                {
#>
    let _<#=meth.FSName.PadRight(41, ' ')#> <#=meth.FormatParameters("({0} : ICell<{1}>) ")#>  
                                                   = cell (fun () -> <#=NetClass.CellReference#>.<#=(Context.Keywords.Contains(meth.Name) ? meth.Name.ToUpper() : meth.Name)#>(<#=meth.FormatParameters("{0}.Value", "", ", ")#>)
                                                                     _<#=NetClass.Name#>.Value)
<#
                }
                else
                {
#>
    let _<#=meth.FSName.PadRight(41, ' ')#> <#=meth.FormatParameters("({0} : ICell<{1}>) ")#>  
                                                   = cell (fun () -> <#=NetClass.CellReference#>.<#=(Context.Keywords.Contains(meth.Name) ? meth.Name.ToUpper() : meth.Name)#>(<#=meth.FormatParameters("{0}.Value", "", ", ")#>))
<#
                }
            }
        }
#>
    do this.Bind(_<#=NetClass.Name#>)

(* 
    Externally visible/bindable properties
*)
<#
        foreach (var pam in m.Parameters)
        {
#>
    member this.<#=pam.Value.Name.PadRight(34, ' ')#> = _<#=pam.Value.Name#> 
<#
        }
        if (NetClass.HasEngine)
        {
#>
    member this.<#="EvaluationDate".PadRight(34, ' ')#> = _evaluationDate
    member this.<#="PricingEngine".PadRight(34, ' ')#> = _pricingEngine
<#
        }

        foreach(var meth in NetClass.Methods)
        {
            if (meth.Parameters.Count == 0)
            {
#>
    member this.<#=meth.CapFSName.PadRight(34, ' ')#> = _<#=meth.FSName#>
<#
            }
            else
            {
#>
    member this.<#=meth.CapFSName.PadRight(34, ' ')#> <#=meth.FormatParameters("{0} ")#>  
                                                   = _<#=meth.FSName#> <#=meth.FormatParameters("{0} ")#>
<#
            }
        }
    }
#>
<#+
		public Class
			( NetModel.Class @class
			)
		{
			_NetClassField = @class;
		}
#>
