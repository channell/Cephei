// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Cephei.Gen
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Cephei.Gen.NetModel;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Class : ClassBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"(*
Copyright (C) 2020 Cepheis Ltd (steve.channell@cepheis.com)

This file is part of Cephei.QL Project https://github.com/channell/Cephei

Cephei.QL is open source software based on QLNet  you can redistribute it and/or modify it
under the terms of the Cephei.QL license.  You should have received a
copy of the license along with this program; if not, license is
available at <https://github.com/channell/Cephei/LICENSE>.

QLNet is a based on QuantLib, a free-software/open-source library
for financial quantitative analysts and developers - http://quantlib.org/
The QuantLib license is available online at http://quantlib.org/license.shtml.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the license for more details.
*)
namespace Cephei.QL

open System
open Cephei.QL.Util
open Cephei.Cell
open Cephei.Cell.Generic
open System.Collections
open System.Collections.Generic
open QLNet
open Cephei.QLNetHelper

");
            
            #line 37 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

    int version = 0;
    foreach(var m in NetClass.Constructors)
    {

            
            #line default
            #line hidden
            this.Write("(* <summary>\r\n");
            
            #line 43 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((NetClass.Notes != null ? NetClass.Notes : "")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 44 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((m.Notes != null ? m.Notes : "")));
            
            #line default
            #line hidden
            this.Write("\r\n  </summary> *)\r\n[<AutoSerializable(true)>]\r\ntype ");
            
            #line 47 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.FSTemplate (version++)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 48 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m.FSConstructor));
            
            #line default
            #line hidden
            this.Write("\r\n    inherit Model<");
            
            #line 49 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.FSTypeName));
            
            #line default
            #line hidden
            this.Write("> ()\r\n(*\r\n    Parameters\r\n*)\r\n");
            
            #line 53 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

        foreach (var pam in m.Parameters)
        {

            
            #line default
            #line hidden
            this.Write("    let _");
            
            #line 57 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(pam.Value.Name) ? pam.Value.Name.ToUpper() : pam.Value.Name).PadRight(41, ' ')));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 57 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pam.Value.Name));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 58 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

        }
        if (NetClass.HasEngine)
        {

            
            #line default
            #line hidden
            this.Write("    let mutable\n        _evaluationDate                            = evaluationDa" +
                    "te\r\n    let _pricingEngine                             = pricingEngine\r\n");
            
            #line 65 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

        }

            
            #line default
            #line hidden
            this.Write("(*\r\n    Functions\r\n*)\r\n");
            
            #line 71 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m.FSConstruct));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 72 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

        foreach(var meth in NetClass.Methods)
        {
            var celltype = (meth.Name.Contains("Price") || meth.Name.Contains("NPV") || meth.Name.Contains("yield") ? "cell" : "triv");
            if (meth.Parameters.Count == 0)
            {
              if (meth.ReturnType == "void")
                {

            
            #line default
            #line hidden
            this.Write("    let _");
            
            #line 81 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.FSName.PadRight(41, ' ')));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 81 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(celltype));
            
            #line default
            #line hidden
            this.Write(" (fun () -> ");
            
            #line 81 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.CellReference));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 81 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(meth.Name) ? meth.Name.ToUpper() : meth.Name)));
            
            #line default
            #line hidden
            
            #line 81 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((meth.IsProperty ? "" : "()")));
            
            #line default
            #line hidden
            this.Write("\r\n                                                                     _");
            
            #line 82 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write(".Value)\r\n");
            
            #line 83 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

                }
                else
                {

            
            #line default
            #line hidden
            this.Write("    let _");
            
            #line 88 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.FSName.PadRight(41, ' ')));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 88 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(celltype));
            
            #line default
            #line hidden
            this.Write(" (fun () -> ");
            
            #line 88 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.CellReference));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 88 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(meth.Name) ? meth.Name.ToUpper() : meth.Name)));
            
            #line default
            #line hidden
            
            #line 88 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((meth.IsProperty ? "" : "()")));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 89 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

                }
            }
            else
            {
                if (meth.ReturnType == "void")
                {

            
            #line default
            #line hidden
            this.Write("    let _");
            
            #line 97 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.FSName.PadRight(41, ' ')));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 97 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.FormatParameters("({0} : ICell<{1}>) ")));
            
            #line default
            #line hidden
            this.Write("  \r\n                                                   = ");
            
            #line 98 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(celltype));
            
            #line default
            #line hidden
            this.Write(" (fun () -> ");
            
            #line 98 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.CellReference));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 98 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(meth.Name) ? meth.Name.ToUpper() : meth.Name)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 98 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.FormatParameters("{0}.Value", "", ", ")));
            
            #line default
            #line hidden
            this.Write(")\r\n                                                                     _");
            
            #line 99 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write(".Value)\r\n");
            
            #line 100 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

                }
                else
                {

            
            #line default
            #line hidden
            this.Write("    let _");
            
            #line 105 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.FSName.PadRight(41, ' ')));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 105 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.FormatParameters("({0} : ICell<{1}>) ")));
            
            #line default
            #line hidden
            this.Write("  \r\n                                                   = ");
            
            #line 106 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(celltype));
            
            #line default
            #line hidden
            this.Write(" (fun () -> ");
            
            #line 106 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.CellReference));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 106 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.Keywords.Contains(meth.Name) ? meth.Name.ToUpper() : meth.Name)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 106 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.FormatParameters("{0}.Value", "", ", ")));
            
            #line default
            #line hidden
            this.Write("))\r\n");
            
            #line 107 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

                }
            }
        }

            
            #line default
            #line hidden
            this.Write("    do this.Bind(_");
            
            #line 112 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NetClass.Name));
            
            #line default
            #line hidden
            this.Write(")\r\n\r\n(* \r\n    Externally visible/bindable properties\r\n*)\r\n");
            
            #line 117 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

        foreach (var pam in m.Parameters)
        {

            
            #line default
            #line hidden
            this.Write("    member this.");
            
            #line 121 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pam.Value.Name.PadRight(34, ' ')));
            
            #line default
            #line hidden
            this.Write(" = _");
            
            #line 121 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pam.Value.Name));
            
            #line default
            #line hidden
            this.Write(" \r\n");
            
            #line 122 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

        }
        if (NetClass.HasEngine)
        {

            
            #line default
            #line hidden
            this.Write("    member this.");
            
            #line 127 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("EvaluationDate".PadRight(34, ' ')));
            
            #line default
            #line hidden
            this.Write(" = _evaluationDate\r\n    member this.");
            
            #line 128 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("PricingEngine".PadRight(34, ' ')));
            
            #line default
            #line hidden
            this.Write(" = _pricingEngine\r\n");
            
            #line 129 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

        }

        foreach(var meth in NetClass.Methods)
        {
            if (meth.Parameters.Count == 0)
            {

            
            #line default
            #line hidden
            this.Write("    member this.");
            
            #line 137 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.CapFSName.PadRight(34, ' ')));
            
            #line default
            #line hidden
            this.Write(" = _");
            
            #line 137 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.FSName));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 138 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

            }
            else
            {

            
            #line default
            #line hidden
            this.Write("    member this.");
            
            #line 143 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.CapFSName.PadRight(34, ' ')));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 143 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.FormatParameters("{0} ")));
            
            #line default
            #line hidden
            this.Write("  \r\n                                                   = _");
            
            #line 144 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.FSName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 144 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.FormatParameters("{0} ")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 145 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

            }
        }
    }

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 150 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

		public Class
			( NetModel.Class @class
			)
		{
			_NetClassField = @class;
		}

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\steve\source\repos\Cephei2\Cephei.Gen\NetQL\Class.tt"

private global::Cephei.Gen.NetModel.Class _NetClassField;

/// <summary>
/// Access the NetClass parameter of the template.
/// </summary>
private global::Cephei.Gen.NetModel.Class NetClass
{
    get
    {
        return this._NetClassField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool NetClassValueAcquired = false;
if (this.Session.ContainsKey("NetClass"))
{
    this._NetClassField = ((global::Cephei.Gen.NetModel.Class)(this.Session["NetClass"]));
    NetClassValueAcquired = true;
}
if ((NetClassValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NetClass");
    if ((data != null))
    {
        this._NetClassField = ((global::Cephei.Gen.NetModel.Class)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ClassBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
