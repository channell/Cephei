// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Cephei.Gen
{
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    using Cephei.Gen.Model;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Interface : InterfaceBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 1 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
/* 
Name:           Interface.cst
Author:         Stephen Channell
Description:    Generate a single Interface for the Class
*/
            
            #line default
            #line hidden
            
            #line 16 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"

    
    Context.ElementName = ElementName;
    Context.RootName = RootPackageName;
    Context.Prefix = "I";
    Context.Suffix = "";

            
            #line default
            #line hidden
            this.Write("#pragma warning disable 108\r\nusing System;\r\nusing System.Runtime.InteropServices;" +
                    "\r\nusing System.Collections.Generic;\r\nusing Cephei;\r\nusing Cephei.Core;\r\nusing Ce" +
                    "phei.Core.Generic;\r\nusing Microsoft.FSharp.Core;\r\n");
            
            #line 31 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"

    if (Context.CurrentClass.FileName == "") return "";
    foreach (KeyValuePair<int,Package> pair in Context.CurrentClass.ReferencedPackages)
    {

            
            #line default
            #line hidden
            this.Write(" \r\nusing Cephei.");
            
            #line 36 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.Value.GlobalName.Replace("::", ".")));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 37 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
        
    }

            
            #line default
            #line hidden
            this.Write("namespace Cephei.");
            
            #line 40 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.GetNamespace (ClassDelimiter).Replace ("::", ".")));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    ");
            
            #line 42 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.Comment(Context.CurrentClass.Notes,"\t")));
            
            #line default
            #line hidden
            this.Write("\r\n    [Guid (\"");
            
            #line 43 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Guid.Substring(1, Context.CurrentClass.Guid.Length -2)));
            
            #line default
            #line hidden
            this.Write("\"),ComVisible(true)]\r\n\tpublic interface I");
            
            #line 44 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 44 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.GetGeneralisation (Context.CurrentClass, "I", false).Replace ("::", ".")));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n\t\t///////////////////////////////////////////////////////////////\r\n        " +
                    "// Methods\r\n        //\r\n");
            
            #line 49 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
 
        foreach(Method method in Context.CurrentClass.Methods)
        { 
            if (Context.CurrentClass.Name != method.Name && Context.Included2 (method, false) && !method.Name.StartsWith("operator") && !method.Name.StartsWith("~"))
            {
                if (method.Parameters.Count > 0 || !method.IsNameUnique)
                {

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 57 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.Comment(method.Notes,"\t\t")));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t ");
            
            #line 58 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((method.ReturnType.Source == "void" ? "I" + Context.CurrentClass.Name : method.ReturnType.GetQualifiedType(false,".", "I", "").Replace("::","."))));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 58 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.UpperName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 58 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetParamString(true, "I", "", ".").Replace("::",".")));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 59 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"

                }
                else
                {

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 64 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.Comment(method.Notes,"\t\t")));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t ");
            
            #line 65 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((method.ReturnType.Source == "void" ? "I" + Context.CurrentClass.Name : method.ReturnType.GetQualifiedType(false,".", "I", "").Replace("::","."))));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 65 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.UpperName));
            
            #line default
            #line hidden
            this.Write(" {get;}\r\n");
            
            #line 66 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"

                }
            }
        } 

            
            #line default
            #line hidden
            this.Write("         /// <summary>\r\n         /// Cast the object to an interface\r\n         //" +
                    "/ </summary>\r\n         T As<T> ();\r\n    }   \r\n\r\n    ");
            
            #line 77 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.Comment(Context.CurrentClass.Notes + " Factory","\t")));
            
            #line default
            #line hidden
            this.Write("\r\n   \t[ComVisible(true)]\r\n    public interface I");
            
            #line 79 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write("_Factory ");
            
            #line 79 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((Context.CurrentClass.Collections.Count > 0 ? ": INativeCollection_Factory<I" + Context.CurrentClass.Name + ">" : "")));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        ///////////////////////////////////////////////////////////////\r" +
                    "\n        // Factory methods\r\n        //\r\n");
            
            #line 84 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"

    if (!Context.CurrentClass.IsAbstract)
    {
        foreach(Method method in Context.CurrentClass.Methods)
        { 
            if (Context.CurrentClass.Name == method.Name && Context.Included2 (method, true))
            {

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 92 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.Comment(method.Notes,"\t\t")));
            
            #line default
            #line hidden
            this.Write("\r\n\t    I");
            
            #line 93 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.CurrentClass.Name));
            
            #line default
            #line hidden
            this.Write(" Create (");
            
            #line 93 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetParamConstructor(true, "I", "", ".").Replace("::",".")));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 94 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"

            }
        }
    }

            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n");
            
            #line 101 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"
  
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 102 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"

		public Context Context;

		public Interface
			( string ElementName
			, string RootPackageName
			, Context ctx = null
			)
		{
			_ElementNameField = ElementName;
			_RootPackageNameField = RootPackageName;
			_ClassDelimiterField = ".";
			if (ctx != null)
				Context = ctx;
			else
				Context = new Context();
		}

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\steve\source\repos\Cephei\Cephei.Gen\QL\Interface.tt"

private string _ElementNameField;

/// <summary>
/// Access the ElementName parameter of the template.
/// </summary>
private string ElementName
{
    get
    {
        return this._ElementNameField;
    }
}

private string _RootPackageNameField;

/// <summary>
/// Access the RootPackageName parameter of the template.
/// </summary>
private string RootPackageName
{
    get
    {
        return this._RootPackageNameField;
    }
}

private string _ClassDelimiterField;

/// <summary>
/// Access the ClassDelimiter parameter of the template.
/// </summary>
private string ClassDelimiter
{
    get
    {
        return this._ClassDelimiterField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ElementNameValueAcquired = false;
if (this.Session.ContainsKey("ElementName"))
{
    this._ElementNameField = ((string)(this.Session["ElementName"]));
    ElementNameValueAcquired = true;
}
if ((ElementNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ElementName");
    if ((data != null))
    {
        this._ElementNameField = ((string)(data));
    }
}
bool RootPackageNameValueAcquired = false;
if (this.Session.ContainsKey("RootPackageName"))
{
    this._RootPackageNameField = ((string)(this.Session["RootPackageName"]));
    RootPackageNameValueAcquired = true;
}
if ((RootPackageNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("RootPackageName");
    if ((data != null))
    {
        this._RootPackageNameField = ((string)(data));
    }
}
bool ClassDelimiterValueAcquired = false;
if (this.Session.ContainsKey("ClassDelimiter"))
{
    this._ClassDelimiterField = ((string)(this.Session["ClassDelimiter"]));
    ClassDelimiterValueAcquired = true;
}
if ((ClassDelimiterValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ClassDelimiter");
    if ((data != null))
    {
        this._ClassDelimiterField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class InterfaceBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
