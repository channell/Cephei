id: Cephei - Backup.Cell
language: CSharp
name:
  Default: Cephei - Backup.Cell
qualifiedName:
  Default: Cephei - Backup.Cell
type: Assembly
modifiers: {}
items:
- id: Cephei.Cell
  commentId: N:Cephei.Cell
  language: CSharp
  name:
    CSharp: Cephei.Cell
    VB: Cephei.Cell
  nameWithType:
    CSharp: Cephei.Cell
    VB: Cephei.Cell
  qualifiedName:
    CSharp: Cephei.Cell
    VB: Cephei.Cell
  type: Namespace
  assemblies:
  - Cephei - Backup.Cell
  modifiers: {}
  items:
  - id: Cephei.Cell.TraceSubscriber`1
    commentId: T:Cephei.Cell.TraceSubscriber`1
    language: CSharp
    name:
      CSharp: TraceSubscriber<T>
      VB: TraceSubscriber(Of T)
    nameWithType:
      CSharp: TraceSubscriber<T>
      VB: TraceSubscriber(Of T)
    qualifiedName:
      CSharp: Cephei.Cell.TraceSubscriber<T>
      VB: Cephei.Cell.TraceSubscriber(Of T)
    type: Class
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/CellObserver.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: TraceSubscriber
      path: ../Cephei.Cell/CellObserver.cs
      startLine: 162
    syntax:
      content:
        CSharp: 'public class TraceSubscriber<T> : IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>, IDisposable'
        VB: >-
          Public Class TraceSubscriber(Of T)

              Inherits IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime))

              Implements IDisposable
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - IDisposable
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Cephei.Cell.TraceSubscriber`1.#ctor(Cephei.Cell.Generic.ICell{`0},Microsoft.FSharp.Core.FSharpFunc{`0,System.String},System.String)
      commentId: M:Cephei.Cell.TraceSubscriber`1.#ctor(Cephei.Cell.Generic.ICell{`0},Microsoft.FSharp.Core.FSharpFunc{`0,System.String},System.String)
      language: CSharp
      name:
        CSharp: TraceSubscriber(ICell<T>, FSharpFunc<T, String>, String)
        VB: TraceSubscriber(ICell(Of T), FSharpFunc(Of T, String), String)
      nameWithType:
        CSharp: TraceSubscriber<T>.TraceSubscriber(ICell<T>, FSharpFunc<T, String>, String)
        VB: TraceSubscriber(Of T).TraceSubscriber(ICell(Of T), FSharpFunc(Of T, String), String)
      qualifiedName:
        CSharp: Cephei.Cell.TraceSubscriber<T>.TraceSubscriber(Cephei.Cell.Generic.ICell<T>, Microsoft.FSharp.Core.FSharpFunc<T, System.String>, System.String)
        VB: Cephei.Cell.TraceSubscriber(Of T).TraceSubscriber(Cephei.Cell.Generic.ICell(Of T), Microsoft.FSharp.Core.FSharpFunc(Of T, System.String), System.String)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 167
      syntax:
        content:
          CSharp: public TraceSubscriber(ICell<T> source, FSharpFunc<T, string> formater, string prefix = "")
          VB: Public Sub New(source As ICell(Of T), formater As FSharpFunc(Of T, String), prefix As String = "")
        parameters:
        - id: source
          type: Cephei.Cell.Generic.ICell{{T}}
        - id: formater
          type: Microsoft.FSharp.Core.FSharpFunc{{T},System.String}
        - id: prefix
          type: System.String
      overload: Cephei.Cell.TraceSubscriber`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.TraceSubscriber`1.OnCompleted
      commentId: M:Cephei.Cell.TraceSubscriber`1.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: TraceSubscriber<T>.OnCompleted()
        VB: TraceSubscriber(Of T).OnCompleted()
      qualifiedName:
        CSharp: Cephei.Cell.TraceSubscriber<T>.OnCompleted()
        VB: Cephei.Cell.TraceSubscriber(Of T).OnCompleted()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnCompleted
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 175
      syntax:
        content:
          CSharp: public void OnCompleted()
          VB: Public Sub OnCompleted
      overload: Cephei.Cell.TraceSubscriber`1.OnCompleted*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.TraceSubscriber`1.OnError(Exception)
      commentId: M:Cephei.Cell.TraceSubscriber`1.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: TraceSubscriber<T>.OnError(Exception)
        VB: TraceSubscriber(Of T).OnError(Exception)
      qualifiedName:
        CSharp: Cephei.Cell.TraceSubscriber<T>.OnError(Exception)
        VB: Cephei.Cell.TraceSubscriber(Of T).OnError(Exception)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnError
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 180
      syntax:
        content:
          CSharp: public void OnError(Exception error)
          VB: Public Sub OnError(error As Exception)
        parameters:
        - id: error
          type: Exception
      overload: Cephei.Cell.TraceSubscriber`1.OnError*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.TraceSubscriber`1.OnNext(Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime})
      commentId: M:Cephei.Cell.TraceSubscriber`1.OnNext(Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime})
      language: CSharp
      name:
        CSharp: OnNext(Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>)
        VB: OnNext(Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime))
      nameWithType:
        CSharp: TraceSubscriber<T>.OnNext(Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>)
        VB: TraceSubscriber(Of T).OnNext(Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime))
      qualifiedName:
        CSharp: Cephei.Cell.TraceSubscriber<T>.OnNext(Tuple<Cephei.Cell.ISession, Cephei.Cell.Generic.ICell<T>, Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime>)
        VB: Cephei.Cell.TraceSubscriber(Of T).OnNext(Tuple(Of Cephei.Cell.ISession, Cephei.Cell.Generic.ICell(Of T), Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnNext
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 185
      syntax:
        content:
          CSharp: public void OnNext(Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime> value)
          VB: Public Sub OnNext(value As Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime))
        parameters:
        - id: value
          type: Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}
      overload: Cephei.Cell.TraceSubscriber`1.OnNext*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.TraceSubscriber`1.Dispose
      commentId: M:Cephei.Cell.TraceSubscriber`1.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: TraceSubscriber<T>.Dispose()
        VB: TraceSubscriber(Of T).Dispose()
      qualifiedName:
        CSharp: Cephei.Cell.TraceSubscriber<T>.Dispose()
        VB: Cephei.Cell.TraceSubscriber(Of T).Dispose()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dispose
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 190
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Cephei.Cell.TraceSubscriber`1.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.TraceSubscriber`1.Finalize
      commentId: M:Cephei.Cell.TraceSubscriber`1.Finalize
      language: CSharp
      name:
        CSharp: Finalize()
        VB: Finalize()
      nameWithType:
        CSharp: TraceSubscriber<T>.Finalize()
        VB: TraceSubscriber(Of T).Finalize()
      qualifiedName:
        CSharp: Cephei.Cell.TraceSubscriber<T>.Finalize()
        VB: Cephei.Cell.TraceSubscriber(Of T).Finalize()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Finalize
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 195
      syntax:
        content:
          CSharp: protected void Finalize()
          VB: Protected Sub Finalize
      overload: Cephei.Cell.TraceSubscriber`1.Finalize*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
  - id: Cephei.Cell.ConsoleSubscriber`1
    commentId: T:Cephei.Cell.ConsoleSubscriber`1
    language: CSharp
    name:
      CSharp: ConsoleSubscriber<T>
      VB: ConsoleSubscriber(Of T)
    nameWithType:
      CSharp: ConsoleSubscriber<T>
      VB: ConsoleSubscriber(Of T)
    qualifiedName:
      CSharp: Cephei.Cell.ConsoleSubscriber<T>
      VB: Cephei.Cell.ConsoleSubscriber(Of T)
    type: Class
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/CellObserver.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: ConsoleSubscriber
      path: ../Cephei.Cell/CellObserver.cs
      startLine: 201
    syntax:
      content:
        CSharp: 'public class ConsoleSubscriber<T> : IObserver<T>, IDisposable'
        VB: >-
          Public Class ConsoleSubscriber(Of T)

              Inherits IObserver(Of T)

              Implements IDisposable
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - IDisposable
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Cephei.Cell.ConsoleSubscriber`1.#ctor(Cephei.Cell.Generic.ICell{`0},System.String)
      commentId: M:Cephei.Cell.ConsoleSubscriber`1.#ctor(Cephei.Cell.Generic.ICell{`0},System.String)
      language: CSharp
      name:
        CSharp: ConsoleSubscriber(ICell<T>, String)
        VB: ConsoleSubscriber(ICell(Of T), String)
      nameWithType:
        CSharp: ConsoleSubscriber<T>.ConsoleSubscriber(ICell<T>, String)
        VB: ConsoleSubscriber(Of T).ConsoleSubscriber(ICell(Of T), String)
      qualifiedName:
        CSharp: Cephei.Cell.ConsoleSubscriber<T>.ConsoleSubscriber(Cephei.Cell.Generic.ICell<T>, System.String)
        VB: Cephei.Cell.ConsoleSubscriber(Of T).ConsoleSubscriber(Cephei.Cell.Generic.ICell(Of T), System.String)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 206
      syntax:
        content:
          CSharp: public ConsoleSubscriber(ICell<T> source, string prefix = "")
          VB: Public Sub New(source As ICell(Of T), prefix As String = "")
        parameters:
        - id: source
          type: Cephei.Cell.Generic.ICell{{T}}
        - id: prefix
          type: System.String
      overload: Cephei.Cell.ConsoleSubscriber`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.ConsoleSubscriber`1.OnCompleted
      commentId: M:Cephei.Cell.ConsoleSubscriber`1.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: ConsoleSubscriber<T>.OnCompleted()
        VB: ConsoleSubscriber(Of T).OnCompleted()
      qualifiedName:
        CSharp: Cephei.Cell.ConsoleSubscriber<T>.OnCompleted()
        VB: Cephei.Cell.ConsoleSubscriber(Of T).OnCompleted()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnCompleted
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 213
      syntax:
        content:
          CSharp: public void OnCompleted()
          VB: Public Sub OnCompleted
      overload: Cephei.Cell.ConsoleSubscriber`1.OnCompleted*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.ConsoleSubscriber`1.OnError(Exception)
      commentId: M:Cephei.Cell.ConsoleSubscriber`1.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: ConsoleSubscriber<T>.OnError(Exception)
        VB: ConsoleSubscriber(Of T).OnError(Exception)
      qualifiedName:
        CSharp: Cephei.Cell.ConsoleSubscriber<T>.OnError(Exception)
        VB: Cephei.Cell.ConsoleSubscriber(Of T).OnError(Exception)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnError
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 218
      syntax:
        content:
          CSharp: public void OnError(Exception error)
          VB: Public Sub OnError(error As Exception)
        parameters:
        - id: error
          type: Exception
      overload: Cephei.Cell.ConsoleSubscriber`1.OnError*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.ConsoleSubscriber`1.OnNext(`0)
      commentId: M:Cephei.Cell.ConsoleSubscriber`1.OnNext(`0)
      language: CSharp
      name:
        CSharp: OnNext(T)
        VB: OnNext(T)
      nameWithType:
        CSharp: ConsoleSubscriber<T>.OnNext(T)
        VB: ConsoleSubscriber(Of T).OnNext(T)
      qualifiedName:
        CSharp: Cephei.Cell.ConsoleSubscriber<T>.OnNext(T)
        VB: Cephei.Cell.ConsoleSubscriber(Of T).OnNext(T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnNext
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 223
      syntax:
        content:
          CSharp: public void OnNext(T value)
          VB: Public Sub OnNext(value As T)
        parameters:
        - id: value
          type: '{T}'
      overload: Cephei.Cell.ConsoleSubscriber`1.OnNext*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.ConsoleSubscriber`1.Dispose
      commentId: M:Cephei.Cell.ConsoleSubscriber`1.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ConsoleSubscriber<T>.Dispose()
        VB: ConsoleSubscriber(Of T).Dispose()
      qualifiedName:
        CSharp: Cephei.Cell.ConsoleSubscriber<T>.Dispose()
        VB: Cephei.Cell.ConsoleSubscriber(Of T).Dispose()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dispose
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 241
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Cephei.Cell.ConsoleSubscriber`1.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.ConsoleSubscriber`1.Finalize
      commentId: M:Cephei.Cell.ConsoleSubscriber`1.Finalize
      language: CSharp
      name:
        CSharp: Finalize()
        VB: Finalize()
      nameWithType:
        CSharp: ConsoleSubscriber<T>.Finalize()
        VB: ConsoleSubscriber(Of T).Finalize()
      qualifiedName:
        CSharp: Cephei.Cell.ConsoleSubscriber<T>.Finalize()
        VB: Cephei.Cell.ConsoleSubscriber(Of T).Finalize()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Finalize
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 246
      syntax:
        content:
          CSharp: protected void Finalize()
          VB: Protected Sub Finalize
      overload: Cephei.Cell.ConsoleSubscriber`1.Finalize*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
  - id: Cephei.Cell.ConsoleSessionSubscriber`1
    commentId: T:Cephei.Cell.ConsoleSessionSubscriber`1
    language: CSharp
    name:
      CSharp: ConsoleSessionSubscriber<T>
      VB: ConsoleSessionSubscriber(Of T)
    nameWithType:
      CSharp: ConsoleSessionSubscriber<T>
      VB: ConsoleSessionSubscriber(Of T)
    qualifiedName:
      CSharp: Cephei.Cell.ConsoleSessionSubscriber<T>
      VB: Cephei.Cell.ConsoleSessionSubscriber(Of T)
    type: Class
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/CellObserver.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: ConsoleSessionSubscriber
      path: ../Cephei.Cell/CellObserver.cs
      startLine: 251
    syntax:
      content:
        CSharp: 'public class ConsoleSessionSubscriber<T> : IObserver<KeyValuePair<ISession, KeyValuePair<string, T>>>, IDisposable'
        VB: >-
          Public Class ConsoleSessionSubscriber(Of T)

              Inherits IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T)))

              Implements IDisposable
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - IDisposable
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Cephei.Cell.ConsoleSessionSubscriber`1.#ctor(Cephei.Cell.Generic.ICell{`0},System.String)
      commentId: M:Cephei.Cell.ConsoleSessionSubscriber`1.#ctor(Cephei.Cell.Generic.ICell{`0},System.String)
      language: CSharp
      name:
        CSharp: ConsoleSessionSubscriber(ICell<T>, String)
        VB: ConsoleSessionSubscriber(ICell(Of T), String)
      nameWithType:
        CSharp: ConsoleSessionSubscriber<T>.ConsoleSessionSubscriber(ICell<T>, String)
        VB: ConsoleSessionSubscriber(Of T).ConsoleSessionSubscriber(ICell(Of T), String)
      qualifiedName:
        CSharp: Cephei.Cell.ConsoleSessionSubscriber<T>.ConsoleSessionSubscriber(Cephei.Cell.Generic.ICell<T>, System.String)
        VB: Cephei.Cell.ConsoleSessionSubscriber(Of T).ConsoleSessionSubscriber(Cephei.Cell.Generic.ICell(Of T), System.String)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 257
      syntax:
        content:
          CSharp: public ConsoleSessionSubscriber(ICell<T> source, string prefix = "")
          VB: Public Sub New(source As ICell(Of T), prefix As String = "")
        parameters:
        - id: source
          type: Cephei.Cell.Generic.ICell{{T}}
        - id: prefix
          type: System.String
      overload: Cephei.Cell.ConsoleSessionSubscriber`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.ConsoleSessionSubscriber`1.OnCompleted
      commentId: M:Cephei.Cell.ConsoleSessionSubscriber`1.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: ConsoleSessionSubscriber<T>.OnCompleted()
        VB: ConsoleSessionSubscriber(Of T).OnCompleted()
      qualifiedName:
        CSharp: Cephei.Cell.ConsoleSessionSubscriber<T>.OnCompleted()
        VB: Cephei.Cell.ConsoleSessionSubscriber(Of T).OnCompleted()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnCompleted
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 265
      syntax:
        content:
          CSharp: public void OnCompleted()
          VB: Public Sub OnCompleted
      overload: Cephei.Cell.ConsoleSessionSubscriber`1.OnCompleted*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.ConsoleSessionSubscriber`1.OnError(Exception)
      commentId: M:Cephei.Cell.ConsoleSessionSubscriber`1.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: ConsoleSessionSubscriber<T>.OnError(Exception)
        VB: ConsoleSessionSubscriber(Of T).OnError(Exception)
      qualifiedName:
        CSharp: Cephei.Cell.ConsoleSessionSubscriber<T>.OnError(Exception)
        VB: Cephei.Cell.ConsoleSessionSubscriber(Of T).OnError(Exception)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnError
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 270
      syntax:
        content:
          CSharp: public void OnError(Exception error)
          VB: Public Sub OnError(error As Exception)
        parameters:
        - id: error
          type: Exception
      overload: Cephei.Cell.ConsoleSessionSubscriber`1.OnError*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.ConsoleSessionSubscriber`1.OnNext(KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}})
      commentId: M:Cephei.Cell.ConsoleSessionSubscriber`1.OnNext(KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}})
      language: CSharp
      name:
        CSharp: OnNext(KeyValuePair<ISession, KeyValuePair<String, T>>)
        VB: OnNext(KeyValuePair(Of ISession, KeyValuePair(Of String, T)))
      nameWithType:
        CSharp: ConsoleSessionSubscriber<T>.OnNext(KeyValuePair<ISession, KeyValuePair<String, T>>)
        VB: ConsoleSessionSubscriber(Of T).OnNext(KeyValuePair(Of ISession, KeyValuePair(Of String, T)))
      qualifiedName:
        CSharp: Cephei.Cell.ConsoleSessionSubscriber<T>.OnNext(KeyValuePair<Cephei.Cell.ISession, KeyValuePair<System.String, T>>)
        VB: Cephei.Cell.ConsoleSessionSubscriber(Of T).OnNext(KeyValuePair(Of Cephei.Cell.ISession, KeyValuePair(Of System.String, T)))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnNext
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 275
      syntax:
        content:
          CSharp: public void OnNext(KeyValuePair<ISession, KeyValuePair<string, T>> value)
          VB: Public Sub OnNext(value As KeyValuePair(Of ISession, KeyValuePair(Of String, T)))
        parameters:
        - id: value
          type: KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}
      overload: Cephei.Cell.ConsoleSessionSubscriber`1.OnNext*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.ConsoleSessionSubscriber`1.Dispose
      commentId: M:Cephei.Cell.ConsoleSessionSubscriber`1.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ConsoleSessionSubscriber<T>.Dispose()
        VB: ConsoleSessionSubscriber(Of T).Dispose()
      qualifiedName:
        CSharp: Cephei.Cell.ConsoleSessionSubscriber<T>.Dispose()
        VB: Cephei.Cell.ConsoleSessionSubscriber(Of T).Dispose()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dispose
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 289
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Cephei.Cell.ConsoleSessionSubscriber`1.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.ConsoleSessionSubscriber`1.Finalize
      commentId: M:Cephei.Cell.ConsoleSessionSubscriber`1.Finalize
      language: CSharp
      name:
        CSharp: Finalize()
        VB: Finalize()
      nameWithType:
        CSharp: ConsoleSessionSubscriber<T>.Finalize()
        VB: ConsoleSessionSubscriber(Of T).Finalize()
      qualifiedName:
        CSharp: Cephei.Cell.ConsoleSessionSubscriber<T>.Finalize()
        VB: Cephei.Cell.ConsoleSessionSubscriber(Of T).Finalize()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/CellObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Finalize
        path: ../Cephei.Cell/CellObserver.cs
        startLine: 294
      syntax:
        content:
          CSharp: protected void Finalize()
          VB: Protected Sub Finalize
      overload: Cephei.Cell.ConsoleSessionSubscriber`1.Finalize*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
  - id: Cephei.Cell.CellEvent
    commentId: T:Cephei.Cell.CellEvent
    language: CSharp
    name:
      CSharp: CellEvent
      VB: CellEvent
    nameWithType:
      CSharp: CellEvent
      VB: CellEvent
    qualifiedName:
      CSharp: Cephei.Cell.CellEvent
      VB: Cephei.Cell.CellEvent
    type: Enum
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/Enum.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: CellEvent
      path: ../Cephei.Cell/Enum.cs
      startLine: 9
    summary: "\nEvents sent from mutating cells to their dependants OnChange event handlers\n"
    example: []
    syntax:
      content:
        CSharp: 'public enum CellEvent : int'
        VB: Public Enum CellEvent As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Cephei.Cell.CellEvent.Create
      commentId: F:Cephei.Cell.CellEvent.Create
      language: CSharp
      name:
        CSharp: Create
        VB: Create
      nameWithType:
        CSharp: CellEvent.Create
        VB: CellEvent.Create
      qualifiedName:
        CSharp: Cephei.Cell.CellEvent.Create
        VB: Cephei.Cell.CellEvent.Create
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Enum.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Create
        path: ../Cephei.Cell/Enum.cs
        startLine: 16
      summary: "\ndefault is that it was simply created\n"
      example: []
      syntax:
        content:
          CSharp: Create = null
          VB: Create = Nothing
        return:
          type: Cephei.Cell.CellEvent
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Cephei.Cell.CellEvent.Invalidate
      commentId: F:Cephei.Cell.CellEvent.Invalidate
      language: CSharp
      name:
        CSharp: Invalidate
        VB: Invalidate
      nameWithType:
        CSharp: CellEvent.Invalidate
        VB: CellEvent.Invalidate
      qualifiedName:
        CSharp: Cephei.Cell.CellEvent.Invalidate
        VB: Cephei.Cell.CellEvent.Invalidate
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Enum.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Invalidate
        path: ../Cephei.Cell/Enum.cs
        startLine: 22
      summary: "\nInvalidate message is sent by threaded calculations to invalidate objects\nwithout causing a cascade of blocked threads.  Invalidate results in the cell\nbecoming <em>Dirty</em>\n"
      example: []
      syntax:
        content:
          CSharp: Invalidate = null
          VB: Invalidate = Nothing
        return:
          type: Cephei.Cell.CellEvent
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Cephei.Cell.CellEvent.Calculate
      commentId: F:Cephei.Cell.CellEvent.Calculate
      language: CSharp
      name:
        CSharp: Calculate
        VB: Calculate
      nameWithType:
        CSharp: CellEvent.Calculate
        VB: CellEvent.Calculate
      qualifiedName:
        CSharp: Cephei.Cell.CellEvent.Calculate
        VB: Cephei.Cell.CellEvent.Calculate
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Enum.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Calculate
        path: ../Cephei.Cell/Enum.cs
        startLine: 27
      summary: "\ndo the calculation if needed. Recipients of this message send invalidate\nmessages to their listeners\n"
      example: []
      syntax:
        content:
          CSharp: Calculate = null
          VB: Calculate = Nothing
        return:
          type: Cephei.Cell.CellEvent
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Cephei.Cell.CellEvent.Error
      commentId: F:Cephei.Cell.CellEvent.Error
      language: CSharp
      name:
        CSharp: Error
        VB: Error
      nameWithType:
        CSharp: CellEvent.Error
        VB: CellEvent.Error
      qualifiedName:
        CSharp: Cephei.Cell.CellEvent.Error
        VB: Cephei.Cell.CellEvent.Error
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Enum.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Error
        path: ../Cephei.Cell/Enum.cs
        startLine: 32
      summary: "\nan error occurred in the calculation.. all dependant changes should be\nabandoned\n"
      example: []
      syntax:
        content:
          CSharp: Error = null
          VB: Error = Nothing
        return:
          type: Cephei.Cell.CellEvent
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Cephei.Cell.CellEvent.Link
      commentId: F:Cephei.Cell.CellEvent.Link
      language: CSharp
      name:
        CSharp: Link
        VB: Link
      nameWithType:
        CSharp: CellEvent.Link
        VB: CellEvent.Link
      qualifiedName:
        CSharp: Cephei.Cell.CellEvent.Link
        VB: Cephei.Cell.CellEvent.Link
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Enum.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Link
        path: ../Cephei.Cell/Enum.cs
        startLine: 37
      summary: "\nwhen the value of a cell changes in the model, force Calculators to switch\nreferences\n"
      example: []
      syntax:
        content:
          CSharp: Link = null
          VB: Link = Nothing
        return:
          type: Cephei.Cell.CellEvent
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Cephei.Cell.CellEvent.Delete
      commentId: F:Cephei.Cell.CellEvent.Delete
      language: CSharp
      name:
        CSharp: Delete
        VB: Delete
      nameWithType:
        CSharp: CellEvent.Delete
        VB: CellEvent.Delete
      qualifiedName:
        CSharp: Cephei.Cell.CellEvent.Delete
        VB: Cephei.Cell.CellEvent.Delete
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Enum.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Delete
        path: ../Cephei.Cell/Enum.cs
        startLine: 43
      summary: "\nThe item has been removed from a model, and any casual observes should unlink.\nThis will only happen for dynamic models that allow the calculations to be\nchanged at runtime\n"
      example: []
      syntax:
        content:
          CSharp: Delete = null
          VB: Delete = Nothing
        return:
          type: Cephei.Cell.CellEvent
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Cephei.Cell.CellEvent.JoinSession
      commentId: F:Cephei.Cell.CellEvent.JoinSession
      language: CSharp
      name:
        CSharp: JoinSession
        VB: JoinSession
      nameWithType:
        CSharp: CellEvent.JoinSession
        VB: CellEvent.JoinSession
      qualifiedName:
        CSharp: Cephei.Cell.CellEvent.JoinSession
        VB: Cephei.Cell.CellEvent.JoinSession
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Enum.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: JoinSession
        path: ../Cephei.Cell/Enum.cs
        startLine: 49
      summary: "\nJoin a calculation session.  This event is passed to all dependant cells so\nthey can determine whether a session value should be used instead of the spot\nvalue\n"
      example: []
      syntax:
        content:
          CSharp: JoinSession = null
          VB: JoinSession = Nothing
        return:
          type: Cephei.Cell.CellEvent
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Cephei.Cell.CellState
    commentId: T:Cephei.Cell.CellState
    language: CSharp
    name:
      CSharp: CellState
      VB: CellState
    nameWithType:
      CSharp: CellState
      VB: CellState
    qualifiedName:
      CSharp: Cephei.Cell.CellState
      VB: Cephei.Cell.CellState
    type: Enum
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/Enum.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: CellState
      path: ../Cephei.Cell/Enum.cs
      startLine: 57
    summary: "\nThe State vector of the cell\n"
    example: []
    syntax:
      content:
        CSharp: 'public enum CellState : int'
        VB: Public Enum CellState As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Cephei.Cell.CellState.Clean
      commentId: F:Cephei.Cell.CellState.Clean
      language: CSharp
      name:
        CSharp: Clean
        VB: Clean
      nameWithType:
        CSharp: CellState.Clean
        VB: CellState.Clean
      qualifiedName:
        CSharp: Cephei.Cell.CellState.Clean
        VB: Cephei.Cell.CellState.Clean
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Enum.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Clean
        path: ../Cephei.Cell/Enum.cs
        startLine: 65
      summary: "\nClean state is set whenever a value is assigned to the Cell, or a Calculation\nhas completed\n"
      example: []
      syntax:
        content:
          CSharp: Clean = null
          VB: Clean = Nothing
        return:
          type: Cephei.Cell.CellState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Cephei.Cell.CellState.Error
      commentId: F:Cephei.Cell.CellState.Error
      language: CSharp
      name:
        CSharp: Error
        VB: Error
      nameWithType:
        CSharp: CellState.Error
        VB: CellState.Error
      qualifiedName:
        CSharp: Cephei.Cell.CellState.Error
        VB: Cephei.Cell.CellState.Error
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Enum.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Error
        path: ../Cephei.Cell/Enum.cs
        startLine: 70
      summary: "\nError state is entered whenever a calculation fails.\nAn Error event is raised to dependants\n"
      example: []
      syntax:
        content:
          CSharp: Error = null
          VB: Error = Nothing
        return:
          type: Cephei.Cell.CellState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Cephei.Cell.CellState.Dirty
      commentId: F:Cephei.Cell.CellState.Dirty
      language: CSharp
      name:
        CSharp: Dirty
        VB: Dirty
      nameWithType:
        CSharp: CellState.Dirty
        VB: CellState.Dirty
      qualifiedName:
        CSharp: Cephei.Cell.CellState.Dirty
        VB: Cephei.Cell.CellState.Dirty
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Enum.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dirty
        path: ../Cephei.Cell/Enum.cs
        startLine: 79
      summary: "\nDirty is the state\n<ul>\n<li>On creation with a function\nCalculate is called on a Task thread</li>\n<li>Whenever an Invalidate Event is fired</li>\n</ul>\n"
      example: []
      syntax:
        content:
          CSharp: Dirty = null
          VB: Dirty = Nothing
        return:
          type: Cephei.Cell.CellState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Cephei.Cell.CellState.Calculating
      commentId: F:Cephei.Cell.CellState.Calculating
      language: CSharp
      name:
        CSharp: Calculating
        VB: Calculating
      nameWithType:
        CSharp: CellState.Calculating
        VB: CellState.Calculating
      qualifiedName:
        CSharp: Cephei.Cell.CellState.Calculating
        VB: Cephei.Cell.CellState.Calculating
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Enum.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Calculating
        path: ../Cephei.Cell/Enum.cs
        startLine: 85
      summary: "\nCalculating state is set when a thread starts calculating a value, either\ntriggered by Calculate Event or a value is require but the enqued task has not\nyet been dispatched\n"
      example: []
      syntax:
        content:
          CSharp: Calculating = null
          VB: Calculating = Nothing
        return:
          type: Cephei.Cell.CellState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Cephei.Cell.CellState.Blocking
      commentId: F:Cephei.Cell.CellState.Blocking
      language: CSharp
      name:
        CSharp: Blocking
        VB: Blocking
      nameWithType:
        CSharp: CellState.Blocking
        VB: CellState.Blocking
      qualifiedName:
        CSharp: Cephei.Cell.CellState.Blocking
        VB: Cephei.Cell.CellState.Blocking
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Enum.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Blocking
        path: ../Cephei.Cell/Enum.cs
        startLine: 91
      summary: "\nBlocking State is entered whenever a value is required, but another thread is\nalready in the process of calculating a value or a task needs to calculate a\nvalue for a session\n"
      example: []
      syntax:
        content:
          CSharp: Blocking = null
          VB: Blocking = Nothing
        return:
          type: Cephei.Cell.CellState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Cephei.Cell.CellChange
    commentId: T:Cephei.Cell.CellChange
    language: CSharp
    name:
      CSharp: CellChange
      VB: CellChange
    nameWithType:
      CSharp: CellChange
      VB: CellChange
    qualifiedName:
      CSharp: Cephei.Cell.CellChange
      VB: Cephei.Cell.CellChange
    type: Delegate
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/ICell.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: CellChange
      path: ../Cephei.Cell/ICell.cs
      startLine: 18
    summary: "\nNotification that a cell has changed\n"
    example: []
    syntax:
      content:
        CSharp: public delegate void CellChange(CellEvent eventType, ICellEvent sender, DateTime epoch, ISession session);
        VB: Public Delegate Sub CellChange(eventType As CellEvent, sender As ICellEvent, epoch As DateTime, session As ISession)
      parameters:
      - id: eventType
        type: Cephei.Cell.CellEvent
        description: type of event passed
      - id: sender
        type: Cephei.Cell.ICellEvent
        description: the cell that triggered this change
      - id: epoch
        type: DateTime
        description: the time epoch of the original source change.. used for throttling
      - id: session
        type: Cephei.Cell.ISession
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: Cephei.Cell.ICellEvent
    commentId: T:Cephei.Cell.ICellEvent
    language: CSharp
    name:
      CSharp: ICellEvent
      VB: ICellEvent
    nameWithType:
      CSharp: ICellEvent
      VB: ICellEvent
    qualifiedName:
      CSharp: Cephei.Cell.ICellEvent
      VB: Cephei.Cell.ICellEvent
    type: Interface
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/ICell.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: ICellEvent
      path: ../Cephei.Cell/ICell.cs
      startLine: 23
    summary: "\nCells and observers that handle change events\n"
    example: []
    syntax:
      content:
        CSharp: public interface ICellEvent
        VB: Public Interface ICellEvent
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      commentId: M:Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      language: CSharp
      name:
        CSharp: OnChange(CellEvent, ICellEvent, DateTime, ISession)
        VB: OnChange(CellEvent, ICellEvent, DateTime, ISession)
      nameWithType:
        CSharp: ICellEvent.OnChange(CellEvent, ICellEvent, DateTime, ISession)
        VB: ICellEvent.OnChange(CellEvent, ICellEvent, DateTime, ISession)
      qualifiedName:
        CSharp: Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
        VB: Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnChange
        path: ../Cephei.Cell/ICell.cs
        startLine: 36
      summary: "\nOnChange is the event sink that receives notification of changes to dependant\ncells\n"
      example: []
      syntax:
        content:
          CSharp: void OnChange(CellEvent eventType, ICellEvent root, DateTime epoch, ISession session)
          VB: Sub OnChange(eventType As CellEvent, root As ICellEvent, epoch As DateTime, session As ISession)
        parameters:
        - id: eventType
          type: Cephei.Cell.CellEvent
          description: The event be raised
        - id: root
          type: Cephei.Cell.ICellEvent
          description: The cell that sent this event,
        - id: epoch
          type: DateTime
          description: >-
            timestamp of the change.  This is used to ensure that

            latest values are not overwirtten by calculations dispatched out of

            order
        - id: session
          type: Cephei.Cell.ISession
          description: >-
            reference to the session that the eventi was originally

            source in
      overload: Cephei.Cell.ICellEvent.OnChange*
      modifiers:
        CSharp: []
        VB: []
  - id: Cephei.Cell.ICell
    commentId: T:Cephei.Cell.ICell
    language: CSharp
    name:
      CSharp: ICell
      VB: ICell
    nameWithType:
      CSharp: ICell
      VB: ICell
    qualifiedName:
      CSharp: Cephei.Cell.ICell
      VB: Cephei.Cell.ICell
    type: Interface
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/ICell.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: ICell
      path: ../Cephei.Cell/ICell.cs
      startLine: 42
    summary: "\nICell provides a base interface with the common behavior of all Cells\n"
    example: []
    syntax:
      content:
        CSharp: 'public interface ICell : ICellEvent'
        VB: >-
          Public Interface ICell

              Inherits ICellEvent
    inheritedMembers:
    - Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Cephei.Cell.ICell.Parent
      commentId: P:Cephei.Cell.ICell.Parent
      language: CSharp
      name:
        CSharp: Parent
        VB: Parent
      nameWithType:
        CSharp: ICell.Parent
        VB: ICell.Parent
      qualifiedName:
        CSharp: Cephei.Cell.ICell.Parent
        VB: Cephei.Cell.ICell.Parent
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Parent
        path: ../Cephei.Cell/ICell.cs
        startLine: 49
      summary: "\nReference to the parent of this cell - usually the model the cell is defined in.\n\nParents get notifications for all changes to their childen\n"
      example: []
      syntax:
        content:
          CSharp: ICell Parent { get; set; }
          VB: Property Parent As ICell
        parameters: []
        return:
          type: Cephei.Cell.ICell
      overload: Cephei.Cell.ICell.Parent*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: Cephei.Cell.ICell.Dependants
      commentId: P:Cephei.Cell.ICell.Dependants
      language: CSharp
      name:
        CSharp: Dependants
        VB: Dependants
      nameWithType:
        CSharp: ICell.Dependants
        VB: ICell.Dependants
      qualifiedName:
        CSharp: Cephei.Cell.ICell.Dependants
        VB: Cephei.Cell.ICell.Dependants
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dependants
        path: ../Cephei.Cell/ICell.cs
        startLine: 55
      summary: "\nEnumerated list of the Target vale of all event delegates.\nThis is used to ensure that multiple references do not result in events being\nfired multiple times <em>x = f (y,y) </em>has a single dependancy\n"
      example: []
      syntax:
        content:
          CSharp: IEnumerable<ICellEvent> Dependants { get; }
          VB: ReadOnly Property Dependants As IEnumerable(Of ICellEvent)
        parameters: []
        return:
          type: IEnumerable{Cephei.Cell.ICellEvent}
      overload: Cephei.Cell.ICell.Dependants*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Cephei.Cell.ICell.Mnemonic
      commentId: P:Cephei.Cell.ICell.Mnemonic
      language: CSharp
      name:
        CSharp: Mnemonic
        VB: Mnemonic
      nameWithType:
        CSharp: ICell.Mnemonic
        VB: ICell.Mnemonic
      qualifiedName:
        CSharp: Cephei.Cell.ICell.Mnemonic
        VB: Cephei.Cell.ICell.Mnemonic
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Mnemonic
        path: ../Cephei.Cell/ICell.cs
        startLine: 60
      summary: "\nrefeence Mnemonic that provides context for multiple subscriptions and model\nreferences\n"
      example: []
      syntax:
        content:
          CSharp: string Mnemonic { get; set; }
          VB: Property Mnemonic As String
        parameters: []
        return:
          type: System.String
      overload: Cephei.Cell.ICell.Mnemonic*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: Cephei.Cell.ICell.Change
      commentId: E:Cephei.Cell.ICell.Change
      language: CSharp
      name:
        CSharp: Change
        VB: Change
      nameWithType:
        CSharp: ICell.Change
        VB: ICell.Change
      qualifiedName:
        CSharp: Cephei.Cell.ICell.Change
        VB: Cephei.Cell.ICell.Change
      type: Event
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Change
        path: ../Cephei.Cell/ICell.cs
        startLine: 66
      summary: "\nEvent handle that a dependant cell uses to subscribe to changes.\ne.g. if <em>x = f (y)</em> then <em>x</em> will attach its OnChange to <em>y</em>\nEvent to subscribe to changes<em> </em>\n"
      example: []
      syntax:
        content:
          CSharp: event CellChange Change
          VB: Event Change As CellChange
        return:
          type: Cephei.Cell.CellChange
      modifiers:
        CSharp: []
        VB: []
    - id: Cephei.Cell.ICell.HasFunction
      commentId: P:Cephei.Cell.ICell.HasFunction
      language: CSharp
      name:
        CSharp: HasFunction
        VB: HasFunction
      nameWithType:
        CSharp: ICell.HasFunction
        VB: ICell.HasFunction
      qualifiedName:
        CSharp: Cephei.Cell.ICell.HasFunction
        VB: Cephei.Cell.ICell.HasFunction
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasFunction
        path: ../Cephei.Cell/ICell.cs
        startLine: 71
      summary: "\nDoes the cell havee a function that can be subscribed to \n"
      example: []
      syntax:
        content:
          CSharp: bool HasFunction { get; }
          VB: ReadOnly Property HasFunction As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Cephei.Cell.ICell.HasFunction*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Cephei.Cell.ICell.HasValue
      commentId: P:Cephei.Cell.ICell.HasValue
      language: CSharp
      name:
        CSharp: HasValue
        VB: HasValue
      nameWithType:
        CSharp: ICell.HasValue
        VB: ICell.HasValue
      qualifiedName:
        CSharp: Cephei.Cell.ICell.HasValue
        VB: Cephei.Cell.ICell.HasValue
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasValue
        path: ../Cephei.Cell/ICell.cs
        startLine: 76
      summary: "\nDoes the cell havee a function that can be subscribed to \n"
      example: []
      syntax:
        content:
          CSharp: bool HasValue { get; }
          VB: ReadOnly Property HasValue As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Cephei.Cell.ICell.HasValue*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Cephei.Cell.ICell.Box
      commentId: P:Cephei.Cell.ICell.Box
      language: CSharp
      name:
        CSharp: Box
        VB: Box
      nameWithType:
        CSharp: ICell.Box
        VB: ICell.Box
      qualifiedName:
        CSharp: Cephei.Cell.ICell.Box
        VB: Cephei.Cell.ICell.Box
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Box
        path: ../Cephei.Cell/ICell.cs
        startLine: 81
      summary: "\nSupport assignement from boxed values\n"
      example: []
      syntax:
        content:
          CSharp: object Box { get; set; }
          VB: Property Box As Object
        parameters: []
        return:
          type: System.Object
      overload: Cephei.Cell.ICell.Box*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
  - id: Cephei.Cell.Cell
    commentId: T:Cephei.Cell.Cell
    language: CSharp
    name:
      CSharp: Cell
      VB: Cell
    nameWithType:
      CSharp: Cell
      VB: Cell
    qualifiedName:
      CSharp: Cephei.Cell.Cell
      VB: Cephei.Cell.Cell
    type: Class
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/ICell.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: Cell
      path: ../Cephei.Cell/ICell.cs
      startLine: 88
    summary: "\nCell provides a  module functions of the Cell framework and a thread static\nstack of cells being evaluated.\n"
    example: []
    syntax:
      content:
        CSharp: 'public static class Cell : object'
        VB: >-
          Public Module Cell

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Cephei.Cell.Cell.Parellel
      commentId: F:Cephei.Cell.Cell.Parellel
      language: CSharp
      name:
        CSharp: Parellel
        VB: Parellel
      nameWithType:
        CSharp: Cell.Parellel
        VB: Cell.Parellel
      qualifiedName:
        CSharp: Cephei.Cell.Cell.Parellel
        VB: Cephei.Cell.Cell.Parellel
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Parellel
        path: ../Cephei.Cell/ICell.cs
        startLine: 94
      summary: "\nflag to indicate whether parallel calculation should be used to evaluate the\ncells\n"
      example: []
      syntax:
        content:
          CSharp: public static bool Parellel
          VB: Public Shared Parellel As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.Lazy
      commentId: F:Cephei.Cell.Cell.Lazy
      language: CSharp
      name:
        CSharp: Lazy
        VB: Lazy
      nameWithType:
        CSharp: Cell.Lazy
        VB: Cell.Lazy
      qualifiedName:
        CSharp: Cephei.Cell.Cell.Lazy
        VB: Cephei.Cell.Cell.Lazy
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Lazy
        path: ../Cephei.Cell/ICell.cs
        startLine: 100
      summary: "\nflag to whether cells to evaluate on creation or wait for reference \ncells\n"
      example: []
      syntax:
        content:
          CSharp: public static bool Lazy
          VB: Public Shared Lazy As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.Current
      commentId: F:Cephei.Cell.Cell.Current
      language: CSharp
      name:
        CSharp: Current
        VB: Current
      nameWithType:
        CSharp: Cell.Current
        VB: Cell.Current
      qualifiedName:
        CSharp: Cephei.Cell.Cell.Current
        VB: Cephei.Cell.Cell.Current
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Current
        path: ../Cephei.Cell/ICell.cs
        startLine: 106
      summary: "\nThe current stack of cell being profiled. normally this stack will be empty.\nincluding a null item for safe peek\n"
      example: []
      syntax:
        content:
          CSharp: public static ThreadLocal<Stack<ICell>> Current
          VB: Public Shared Current As ThreadLocal(Of Stack(Of ICell))
        return:
          type: System.Threading.ThreadLocal{Stack{Cephei.Cell.ICell}}
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})
      commentId: M:Cephei.Cell.Cell.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})
      language: CSharp
      name:
        CSharp: Create<T>(FSharpFunc<Unit, T>)
        VB: Create(Of T)(FSharpFunc(Of Unit, T))
      nameWithType:
        CSharp: Cell.Create<T>(FSharpFunc<Unit, T>)
        VB: Cell.Create(Of T)(FSharpFunc(Of Unit, T))
      qualifiedName:
        CSharp: Cephei.Cell.Cell.Create<T>(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>)
        VB: Cephei.Cell.Cell.Create(Of T)(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Create
        path: ../Cephei.Cell/ICell.cs
        startLine: 113
      summary: "\nCrreate a cell with an F# function like\nlet cell = Cell.Create (fun i -> other_cell.Value.NPV(tenor.Value)\n"
      example: []
      syntax:
        content:
          CSharp: public static ICell<T> Create<T>(FSharpFunc<Unit, T> func)
          VB: Public Shared Function Create(Of T)(func As FSharpFunc(Of Unit, T)) As ICell(Of T)
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
          description: ''
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.Generic.ICell{{T}}
      overload: Cephei.Cell.Cell.Create*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)
      commentId: M:Cephei.Cell.Cell.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)
      language: CSharp
      name:
        CSharp: Create<T>(FSharpFunc<Unit, T>, String)
        VB: Create(Of T)(FSharpFunc(Of Unit, T), String)
      nameWithType:
        CSharp: Cell.Create<T>(FSharpFunc<Unit, T>, String)
        VB: Cell.Create(Of T)(FSharpFunc(Of Unit, T), String)
      qualifiedName:
        CSharp: Cephei.Cell.Cell.Create<T>(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>, System.String)
        VB: Cephei.Cell.Cell.Create(Of T)(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T), System.String)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Create
        path: ../Cephei.Cell/ICell.cs
        startLine: 124
      summary: "\nCrreate a cell with an F# function and name like\nlet cell = Cell.Create (fun i -> other_cell.Value.NPV(tenor.Value) &quot;other_cell\nNPV&quot;\n"
      example: []
      syntax:
        content:
          CSharp: public static ICell<T> Create<T>(FSharpFunc<Unit, T> func, string mnemonic)
          VB: Public Shared Function Create(Of T)(func As FSharpFunc(Of Unit, T), mnemonic As String) As ICell(Of T)
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
          description: ''
        - id: mnemonic
          type: System.String
          description: ''
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.Generic.ICell{{T}}
      overload: Cephei.Cell.Cell.Create*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.CreateTrivial``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})
      commentId: M:Cephei.Cell.Cell.CreateTrivial``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})
      language: CSharp
      name:
        CSharp: CreateTrivial<T>(FSharpFunc<Unit, T>)
        VB: CreateTrivial(Of T)(FSharpFunc(Of Unit, T))
      nameWithType:
        CSharp: Cell.CreateTrivial<T>(FSharpFunc<Unit, T>)
        VB: Cell.CreateTrivial(Of T)(FSharpFunc(Of Unit, T))
      qualifiedName:
        CSharp: Cephei.Cell.Cell.CreateTrivial<T>(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>)
        VB: Cephei.Cell.Cell.CreateTrivial(Of T)(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: CreateTrivial
        path: ../Cephei.Cell/ICell.cs
        startLine: 135
      summary: "\nCrreate a trivial cell with an F# function and name like\nlet cell = Cell.CreateTrivial (fun i -> other_cell :> expected) &quot;other_cell\nNPV&quot;\n"
      example: []
      syntax:
        content:
          CSharp: public static ICell<T> CreateTrivial<T>(FSharpFunc<Unit, T> func)
          VB: Public Shared Function CreateTrivial(Of T)(func As FSharpFunc(Of Unit, T)) As ICell(Of T)
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
          description: ''
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.Generic.ICell{{T}}
      overload: Cephei.Cell.Cell.CreateTrivial*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.CreateValue``1(``0)
      commentId: M:Cephei.Cell.Cell.CreateValue``1(``0)
      language: CSharp
      name:
        CSharp: CreateValue<T>(T)
        VB: CreateValue(Of T)(T)
      nameWithType:
        CSharp: Cell.CreateValue<T>(T)
        VB: Cell.CreateValue(Of T)(T)
      qualifiedName:
        CSharp: Cephei.Cell.Cell.CreateValue<T>(T)
        VB: Cephei.Cell.Cell.CreateValue(Of T)(T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: CreateValue
        path: ../Cephei.Cell/ICell.cs
        startLine: 144
      summary: "\nCreate a cell with a mutable value\n"
      example: []
      syntax:
        content:
          CSharp: public static Cell<T> CreateValue<T>(T value)
          VB: Public Shared Function CreateValue(Of T)(value As T) As Cell(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: ''
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.Generic.Cell{{T}}
      overload: Cephei.Cell.Cell.CreateValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.CreateValue``1(``0,System.String)
      commentId: M:Cephei.Cell.Cell.CreateValue``1(``0,System.String)
      language: CSharp
      name:
        CSharp: CreateValue<T>(T, String)
        VB: CreateValue(Of T)(T, String)
      nameWithType:
        CSharp: Cell.CreateValue<T>(T, String)
        VB: Cell.CreateValue(Of T)(T, String)
      qualifiedName:
        CSharp: Cephei.Cell.Cell.CreateValue<T>(T, System.String)
        VB: Cephei.Cell.Cell.CreateValue(Of T)(T, System.String)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: CreateValue
        path: ../Cephei.Cell/ICell.cs
        startLine: 153
      summary: "\nCreate a cell with a mutable value and mnemonic\n"
      example: []
      syntax:
        content:
          CSharp: public static Cell<T> CreateValue<T>(T value, string mnemonic)
          VB: Public Shared Function CreateValue(Of T)(value As T, mnemonic As String) As Cell(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: ''
        - id: mnemonic
          type: System.String
          description: ''
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.Generic.Cell{{T}}
      overload: Cephei.Cell.Cell.CreateValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.CreateFast``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})
      commentId: M:Cephei.Cell.Cell.CreateFast``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})
      language: CSharp
      name:
        CSharp: CreateFast<T>(FSharpFunc<Unit, T>)
        VB: CreateFast(Of T)(FSharpFunc(Of Unit, T))
      nameWithType:
        CSharp: Cell.CreateFast<T>(FSharpFunc<Unit, T>)
        VB: Cell.CreateFast(Of T)(FSharpFunc(Of Unit, T))
      qualifiedName:
        CSharp: Cephei.Cell.Cell.CreateFast<T>(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>)
        VB: Cephei.Cell.Cell.CreateFast(Of T)(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: CreateFast
        path: ../Cephei.Cell/ICell.cs
        startLine: 171
      syntax:
        content:
          CSharp: public static ICell<T> CreateFast<T>(FSharpFunc<Unit, T> func)
          VB: Public Shared Function CreateFast(Of T)(func As FSharpFunc(Of Unit, T)) As ICell(Of T)
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.Generic.ICell{{T}}
      overload: Cephei.Cell.Cell.CreateFast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.CreateFast``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)
      commentId: M:Cephei.Cell.Cell.CreateFast``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)
      language: CSharp
      name:
        CSharp: CreateFast<T>(FSharpFunc<Unit, T>, String)
        VB: CreateFast(Of T)(FSharpFunc(Of Unit, T), String)
      nameWithType:
        CSharp: Cell.CreateFast<T>(FSharpFunc<Unit, T>, String)
        VB: Cell.CreateFast(Of T)(FSharpFunc(Of Unit, T), String)
      qualifiedName:
        CSharp: Cephei.Cell.Cell.CreateFast<T>(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>, System.String)
        VB: Cephei.Cell.Cell.CreateFast(Of T)(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T), System.String)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: CreateFast
        path: ../Cephei.Cell/ICell.cs
        startLine: 184
      summary: "\nCreate a fast cell with a mnemonic\n"
      example: []
      syntax:
        content:
          CSharp: public static ICell<T> CreateFast<T>(FSharpFunc<Unit, T> func, string mnemonic)
          VB: Public Shared Function CreateFast(Of T)(func As FSharpFunc(Of Unit, T), mnemonic As String) As ICell(Of T)
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
          description: ''
        - id: mnemonic
          type: System.String
          description: ''
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.Generic.ICell{{T}}
      overload: Cephei.Cell.Cell.CreateFast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.CreateFastValue``1(``0)
      commentId: M:Cephei.Cell.Cell.CreateFastValue``1(``0)
      language: CSharp
      name:
        CSharp: CreateFastValue<T>(T)
        VB: CreateFastValue(Of T)(T)
      nameWithType:
        CSharp: Cell.CreateFastValue<T>(T)
        VB: Cell.CreateFastValue(Of T)(T)
      qualifiedName:
        CSharp: Cephei.Cell.Cell.CreateFastValue<T>(T)
        VB: Cephei.Cell.Cell.CreateFastValue(Of T)(T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: CreateFastValue
        path: ../Cephei.Cell/ICell.cs
        startLine: 198
      summary: "\nCreate a cell value where it is known at define-time that all the dependants\nwill use fast cells for evaluation.\nThis creates a cell that does not check for dependants needing profiling\n"
      example: []
      syntax:
        content:
          CSharp: public static ICell<T> CreateFastValue<T>(T value)
          VB: Public Shared Function CreateFastValue(Of T)(value As T) As ICell(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: ''
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.Generic.ICell{{T}}
      overload: Cephei.Cell.Cell.CreateFastValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.CreateFastValue``1(``0,System.String)
      commentId: M:Cephei.Cell.Cell.CreateFastValue``1(``0,System.String)
      language: CSharp
      name:
        CSharp: CreateFastValue<T>(T, String)
        VB: CreateFastValue(Of T)(T, String)
      nameWithType:
        CSharp: Cell.CreateFastValue<T>(T, String)
        VB: Cell.CreateFastValue(Of T)(T, String)
      qualifiedName:
        CSharp: Cephei.Cell.Cell.CreateFastValue<T>(T, System.String)
        VB: Cephei.Cell.Cell.CreateFastValue(Of T)(T, System.String)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: CreateFastValue
        path: ../Cephei.Cell/ICell.cs
        startLine: 209
      summary: "\nCreate a cell value with a mnemonic where it is known at define-time that all\nthe dependants will use fast cells for evaluation.\nThis creates a cell that does not check for dependants needing profiling\n"
      example: []
      syntax:
        content:
          CSharp: public static ICell<T> CreateFastValue<T>(T value, string mnemonic)
          VB: Public Shared Function CreateFastValue(Of T)(value As T, mnemonic As String) As ICell(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: ''
        - id: mnemonic
          type: System.String
          description: ''
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.Generic.ICell{{T}}
      overload: Cephei.Cell.Cell.CreateFastValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.CreateSpot``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})
      commentId: M:Cephei.Cell.Cell.CreateSpot``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})
      language: CSharp
      name:
        CSharp: CreateSpot<T>(FSharpFunc<Unit, T>)
        VB: CreateSpot(Of T)(FSharpFunc(Of Unit, T))
      nameWithType:
        CSharp: Cell.CreateSpot<T>(FSharpFunc<Unit, T>)
        VB: Cell.CreateSpot(Of T)(FSharpFunc(Of Unit, T))
      qualifiedName:
        CSharp: Cephei.Cell.Cell.CreateSpot<T>(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>)
        VB: Cephei.Cell.Cell.CreateSpot(Of T)(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: CreateSpot
        path: ../Cephei.Cell/ICell.cs
        startLine: 218
      summary: "\nCreate a Fast Cell that does not participate in sessions.  All calls to Value\nwill use the latest spot value of the cell\n"
      example: []
      syntax:
        content:
          CSharp: public static ICell<T> CreateSpot<T>(FSharpFunc<Unit, T> func)
          VB: Public Shared Function CreateSpot(Of T)(func As FSharpFunc(Of Unit, T)) As ICell(Of T)
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
          description: ''
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.Generic.ICell{{T}}
      overload: Cephei.Cell.Cell.CreateSpot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.CreateSpot``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)
      commentId: M:Cephei.Cell.Cell.CreateSpot``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)
      language: CSharp
      name:
        CSharp: CreateSpot<T>(FSharpFunc<Unit, T>, String)
        VB: CreateSpot(Of T)(FSharpFunc(Of Unit, T), String)
      nameWithType:
        CSharp: Cell.CreateSpot<T>(FSharpFunc<Unit, T>, String)
        VB: Cell.CreateSpot(Of T)(FSharpFunc(Of Unit, T), String)
      qualifiedName:
        CSharp: Cephei.Cell.Cell.CreateSpot<T>(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>, System.String)
        VB: Cephei.Cell.Cell.CreateSpot(Of T)(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T), System.String)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: CreateSpot
        path: ../Cephei.Cell/ICell.cs
        startLine: 232
      summary: "\nCreate a Fast Cell with an mnemonic that does not participate in sessions.  All\ncalls to Value will use the latest spot value of the cell\n"
      example: []
      syntax:
        content:
          CSharp: public static ICell<T> CreateSpot<T>(FSharpFunc<Unit, T> func, string mnemonic)
          VB: Public Shared Function CreateSpot(Of T)(func As FSharpFunc(Of Unit, T), mnemonic As String) As ICell(Of T)
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
          description: ''
        - id: mnemonic
          type: System.String
          description: ''
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.Generic.ICell{{T}}
      overload: Cephei.Cell.Cell.CreateSpot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.CreateSpotValue``1(``0)
      commentId: M:Cephei.Cell.Cell.CreateSpotValue``1(``0)
      language: CSharp
      name:
        CSharp: CreateSpotValue<T>(T)
        VB: CreateSpotValue(Of T)(T)
      nameWithType:
        CSharp: Cell.CreateSpotValue<T>(T)
        VB: Cell.CreateSpotValue(Of T)(T)
      qualifiedName:
        CSharp: Cephei.Cell.Cell.CreateSpotValue<T>(T)
        VB: Cephei.Cell.Cell.CreateSpotValue(Of T)(T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: CreateSpotValue
        path: ../Cephei.Cell/ICell.cs
        startLine: 247
      summary: "\nCreate a cell value where it is known at define-time that all the dependants\nwill use fast cells for evaluation and will not participate in sessions\nThis creates a cell that does not check for dependants needing profiling or\ncurrent sessions\n"
      example: []
      syntax:
        content:
          CSharp: public static ICell<T> CreateSpotValue<T>(T value)
          VB: Public Shared Function CreateSpotValue(Of T)(value As T) As ICell(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: ''
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.Generic.ICell{{T}}
      overload: Cephei.Cell.Cell.CreateSpotValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.CreateSpotValue``1(``0,System.String)
      commentId: M:Cephei.Cell.Cell.CreateSpotValue``1(``0,System.String)
      language: CSharp
      name:
        CSharp: CreateSpotValue<T>(T, String)
        VB: CreateSpotValue(Of T)(T, String)
      nameWithType:
        CSharp: Cell.CreateSpotValue<T>(T, String)
        VB: Cell.CreateSpotValue(Of T)(T, String)
      qualifiedName:
        CSharp: Cephei.Cell.Cell.CreateSpotValue<T>(T, System.String)
        VB: Cephei.Cell.Cell.CreateSpotValue(Of T)(T, System.String)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: CreateSpotValue
        path: ../Cephei.Cell/ICell.cs
        startLine: 260
      summary: "\nCreate a cell value with mnemonic where it is known at define-time that all the\ndependants will use fast cells for evaluation and will not participate in\nsessions\nThis creates a cell that does not check for dependants needing profiling or\ncurrent sessions\n"
      example: []
      syntax:
        content:
          CSharp: public static ICell<T> CreateSpotValue<T>(T value, string mnemonic)
          VB: Public Shared Function CreateSpotValue(Of T)(value As T, mnemonic As String) As ICell(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: ''
        - id: mnemonic
          type: System.String
          description: ''
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.Generic.ICell{{T}}
      overload: Cephei.Cell.Cell.CreateSpotValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Cell.Profile``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})
      commentId: M:Cephei.Cell.Cell.Profile``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})
      language: CSharp
      name:
        CSharp: Profile<T>(FSharpFunc<Unit, T>)
        VB: Profile(Of T)(FSharpFunc(Of Unit, T))
      nameWithType:
        CSharp: Cell.Profile<T>(FSharpFunc<Unit, T>)
        VB: Cell.Profile(Of T)(FSharpFunc(Of Unit, T))
      qualifiedName:
        CSharp: Cephei.Cell.Cell.Profile<T>(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>)
        VB: Cephei.Cell.Cell.Profile(Of T)(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Profile
        path: ../Cephei.Cell/ICell.cs
        startLine: 269
      summary: "\nprofile the closure to extract a list of the cells referenced\n"
      example: []
      syntax:
        content:
          CSharp: public static ICell[] Profile<T>(FSharpFunc<Unit, T> func)
          VB: Public Shared Function Profile(Of T)(func As FSharpFunc(Of Unit, T)) As ICell()
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
          description: ''
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.ICell[]
      overload: Cephei.Cell.Cell.Profile*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Cephei.Cell.SessionState
    commentId: T:Cephei.Cell.SessionState
    language: CSharp
    name:
      CSharp: SessionState
      VB: SessionState
    nameWithType:
      CSharp: SessionState
      VB: SessionState
    qualifiedName:
      CSharp: Cephei.Cell.SessionState
      VB: Cephei.Cell.SessionState
    type: Enum
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/ISession.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: SessionState
      path: ../Cephei.Cell/ISession.cs
      startLine: 12
    summary: "\nSession state is used to record the lifecycle of a session\n"
    example: []
    syntax:
      content:
        CSharp: 'public enum SessionState : int'
        VB: Public Enum SessionState As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Cephei.Cell.SessionState.Open
      commentId: F:Cephei.Cell.SessionState.Open
      language: CSharp
      name:
        CSharp: Open
        VB: Open
      nameWithType:
        CSharp: SessionState.Open
        VB: SessionState.Open
      qualifiedName:
        CSharp: Cephei.Cell.SessionState.Open
        VB: Cephei.Cell.SessionState.Open
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ISession.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Open
        path: ../Cephei.Cell/ISession.cs
        startLine: 20
      summary: "\nThe session has been created and is open to accept values with delayed event\nfire\n"
      example: []
      syntax:
        content:
          CSharp: Open = null
          VB: Open = Nothing
        return:
          type: Cephei.Cell.SessionState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Cephei.Cell.SessionState.Calculating
      commentId: F:Cephei.Cell.SessionState.Calculating
      language: CSharp
      name:
        CSharp: Calculating
        VB: Calculating
      nameWithType:
        CSharp: SessionState.Calculating
        VB: SessionState.Calculating
      qualifiedName:
        CSharp: Cephei.Cell.SessionState.Calculating
        VB: Cephei.Cell.SessionState.Calculating
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ISession.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Calculating
        path: ../Cephei.Cell/ISession.cs
        startLine: 26
      summary: "\nThe session has been disposed (the use context has finished), the session will\ncontinue to be available while referenced by cells undertaking calculation (or\nnotifying Session Observers.\n"
      example: []
      syntax:
        content:
          CSharp: Calculating = null
          VB: Calculating = Nothing
        return:
          type: Cephei.Cell.SessionState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Cephei.Cell.SessionState.Complete
      commentId: F:Cephei.Cell.SessionState.Complete
      language: CSharp
      name:
        CSharp: Complete
        VB: Complete
      nameWithType:
        CSharp: SessionState.Complete
        VB: SessionState.Complete
      qualifiedName:
        CSharp: Cephei.Cell.SessionState.Complete
        VB: Cephei.Cell.SessionState.Complete
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ISession.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Complete
        path: ../Cephei.Cell/ISession.cs
        startLine: 30
      summary: "\nThe session has completed and is available for Garbage Collection\n"
      example: []
      syntax:
        content:
          CSharp: Complete = null
          VB: Complete = Nothing
        return:
          type: Cephei.Cell.SessionState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Cephei.Cell.SessionComplete
    commentId: T:Cephei.Cell.SessionComplete
    language: CSharp
    name:
      CSharp: SessionComplete
      VB: SessionComplete
    nameWithType:
      CSharp: SessionComplete
      VB: SessionComplete
    qualifiedName:
      CSharp: Cephei.Cell.SessionComplete
      VB: Cephei.Cell.SessionComplete
    type: Delegate
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/ISession.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: SessionComplete
      path: ../Cephei.Cell/ISession.cs
      startLine: 39
    summary: "\nNotification that a session has completed \n"
    example: []
    syntax:
      content:
        CSharp: public delegate void SessionComplete(ISession session);
        VB: Public Delegate Sub SessionComplete(session As ISession)
      parameters:
      - id: session
        type: Cephei.Cell.ISession
        description: ''
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: Cephei.Cell.ISession
    commentId: T:Cephei.Cell.ISession
    language: CSharp
    name:
      CSharp: ISession
      VB: ISession
    nameWithType:
      CSharp: ISession
      VB: ISession
    qualifiedName:
      CSharp: Cephei.Cell.ISession
      VB: Cephei.Cell.ISession
    type: Interface
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/ISession.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: ISession
      path: ../Cephei.Cell/ISession.cs
      startLine: 57
    summary: "\nISession is a common interface for Data Sessions and for &quot;Null Session&quot;.  It is\nan interface because ThreadLocal store always requires a value even when\nthere\nis no active session.\n\nISession provides a mechanism to\n<ul>\n<li>delay publication of change events while related values are changed (e.g.\nspot-rate changes will cascade perturbations along a yield curve</li>\n</ul>\n<ul>\n<li>provide a bubbling mechanism that does not force real-time price chang to\nwait for the completion of complex calculations to avoid corruption</li>\n</ul>\n"
    example: []
    syntax:
      content:
        CSharp: 'public interface ISession : IDisposable, IEnumerable<ICell>'
        VB: >-
          Public Interface ISession

              Inherits IDisposable, IEnumerable(Of ICell)
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Cephei.Cell.ISession.State
      commentId: P:Cephei.Cell.ISession.State
      language: CSharp
      name:
        CSharp: State
        VB: State
      nameWithType:
        CSharp: ISession.State
        VB: ISession.State
      qualifiedName:
        CSharp: Cephei.Cell.ISession.State
        VB: Cephei.Cell.ISession.State
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ISession.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: State
        path: ../Cephei.Cell/ISession.cs
        startLine: 63
      summary: "\nReference to the state vector, used the trigger change events when  the state\nchanges\n"
      example: []
      syntax:
        content:
          CSharp: SessionState State { get; }
          VB: ReadOnly Property State As SessionState
        parameters: []
        return:
          type: Cephei.Cell.SessionState
      overload: Cephei.Cell.ISession.State*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Cephei.Cell.ISession.Mnemonic
      commentId: P:Cephei.Cell.ISession.Mnemonic
      language: CSharp
      name:
        CSharp: Mnemonic
        VB: Mnemonic
      nameWithType:
        CSharp: ISession.Mnemonic
        VB: ISession.Mnemonic
      qualifiedName:
        CSharp: Cephei.Cell.ISession.Mnemonic
        VB: Cephei.Cell.ISession.Mnemonic
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ISession.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Mnemonic
        path: ../Cephei.Cell/ISession.cs
        startLine: 68
      summary: "\nMnemonic provides a name to allow subscribers to correlate results with the\nsource of data\n"
      example: []
      syntax:
        content:
          CSharp: string Mnemonic { get; }
          VB: ReadOnly Property Mnemonic As String
        parameters: []
        return:
          type: System.String
      overload: Cephei.Cell.ISession.Mnemonic*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Cephei.Cell.ISession.Epoch
      commentId: P:Cephei.Cell.ISession.Epoch
      language: CSharp
      name:
        CSharp: Epoch
        VB: Epoch
      nameWithType:
        CSharp: ISession.Epoch
        VB: ISession.Epoch
      qualifiedName:
        CSharp: Cephei.Cell.ISession.Epoch
        VB: Cephei.Cell.ISession.Epoch
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ISession.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Epoch
        path: ../Cephei.Cell/ISession.cs
        startLine: 73
      summary: "\ntimestamp to prevent older sessions whose calculations may have been scheduled\nlater to update a more recent spot value\n"
      example: []
      syntax:
        content:
          CSharp: DateTime Epoch { get; }
          VB: ReadOnly Property Epoch As DateTime
        parameters: []
        return:
          type: DateTime
      overload: Cephei.Cell.ISession.Epoch*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Cephei.Cell.ISession.Join(Cephei.Cell.ICell)
      commentId: M:Cephei.Cell.ISession.Join(Cephei.Cell.ICell)
      language: CSharp
      name:
        CSharp: Join(ICell)
        VB: Join(ICell)
      nameWithType:
        CSharp: ISession.Join(ICell)
        VB: ISession.Join(ICell)
      qualifiedName:
        CSharp: Cephei.Cell.ISession.Join(Cephei.Cell.ICell)
        VB: Cephei.Cell.ISession.Join(Cephei.Cell.ICell)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ISession.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Join
        path: ../Cephei.Cell/ISession.cs
        startLine: 79
      summary: "\nJoin is triggered by the JoinSession event, and includes all the Cells that are\nimpacted by a change to a value associated with the session\n"
      example: []
      syntax:
        content:
          CSharp: void Join(ICell cell)
          VB: Sub Join(cell As ICell)
        parameters:
        - id: cell
          type: Cephei.Cell.ICell
          description: ''
      overload: Cephei.Cell.ISession.Join*
      modifiers:
        CSharp: []
        VB: []
    - id: Cephei.Cell.ISession.Leave(Cephei.Cell.ICell)
      commentId: M:Cephei.Cell.ISession.Leave(Cephei.Cell.ICell)
      language: CSharp
      name:
        CSharp: Leave(ICell)
        VB: Leave(ICell)
      nameWithType:
        CSharp: ISession.Leave(ICell)
        VB: ISession.Leave(ICell)
      qualifiedName:
        CSharp: Cephei.Cell.ISession.Leave(Cephei.Cell.ICell)
        VB: Cephei.Cell.ISession.Leave(Cephei.Cell.ICell)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ISession.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Leave
        path: ../Cephei.Cell/ISession.cs
        startLine: 84
      summary: "\nLeave is called once a calculation is complete for a Cell that had joined the\n"
      example: []
      syntax:
        content:
          CSharp: void Leave(ICell cell)
          VB: Sub Leave(cell As ICell)
        parameters:
        - id: cell
          type: Cephei.Cell.ICell
          description: ''
      overload: Cephei.Cell.ISession.Leave*
      modifiers:
        CSharp: []
        VB: []
    - id: Cephei.Cell.ISession.HasJoined(Cephei.Cell.ICell)
      commentId: M:Cephei.Cell.ISession.HasJoined(Cephei.Cell.ICell)
      language: CSharp
      name:
        CSharp: HasJoined(ICell)
        VB: HasJoined(ICell)
      nameWithType:
        CSharp: ISession.HasJoined(ICell)
        VB: ISession.HasJoined(ICell)
      qualifiedName:
        CSharp: Cephei.Cell.ISession.HasJoined(Cephei.Cell.ICell)
        VB: Cephei.Cell.ISession.HasJoined(Cephei.Cell.ICell)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ISession.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasJoined
        path: ../Cephei.Cell/ISession.cs
        startLine: 85
      syntax:
        content:
          CSharp: bool HasJoined(ICell cell)
          VB: Function HasJoined(cell As ICell) As Boolean
        parameters:
        - id: cell
          type: Cephei.Cell.ICell
        return:
          type: System.Boolean
      overload: Cephei.Cell.ISession.HasJoined*
      modifiers:
        CSharp: []
        VB: []
    - id: Cephei.Cell.ISession.GetValue``1(Cephei.Cell.ICell,``0@)
      commentId: M:Cephei.Cell.ISession.GetValue``1(Cephei.Cell.ICell,``0@)
      language: CSharp
      name:
        CSharp: GetValue<T>(ICell, ref T)
        VB: GetValue(Of T)(ICell, ByRef T)
      nameWithType:
        CSharp: ISession.GetValue<T>(ICell, ref T)
        VB: ISession.GetValue(Of T)(ICell, ByRef T)
      qualifiedName:
        CSharp: Cephei.Cell.ISession.GetValue<T>(Cephei.Cell.ICell, ref T)
        VB: Cephei.Cell.ISession.GetValue(Of T)(Cephei.Cell.ICell, ByRef T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ISession.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: GetValue
        path: ../Cephei.Cell/ISession.cs
        startLine: 95
      summary: "\nGet a value from the session.  Session values are written by pool-calculations,\n\nand a referenced from values in the session.  A Cell responding to streamed\nupdates may have a different current-value to the value calculated for the\nsession\n"
      example: []
      syntax:
        content:
          CSharp: bool GetValue<T>(ICell cell, ref T value)
          VB: Function GetValue(Of T)(cell As ICell, ByRef value As T) As Boolean
        parameters:
        - id: cell
          type: Cephei.Cell.ICell
          description: ''
        - id: value
          type: '{T}'
          description: ''
        typeParameters:
        - id: T
        return:
          type: System.Boolean
      overload: Cephei.Cell.ISession.GetValue*
      modifiers:
        CSharp: []
        VB: []
    - id: Cephei.Cell.ISession.SetValue``1(Cephei.Cell.ICell,``0)
      commentId: M:Cephei.Cell.ISession.SetValue``1(Cephei.Cell.ICell,``0)
      language: CSharp
      name:
        CSharp: SetValue<T>(ICell, T)
        VB: SetValue(Of T)(ICell, T)
      nameWithType:
        CSharp: ISession.SetValue<T>(ICell, T)
        VB: ISession.SetValue(Of T)(ICell, T)
      qualifiedName:
        CSharp: Cephei.Cell.ISession.SetValue<T>(Cephei.Cell.ICell, T)
        VB: Cephei.Cell.ISession.SetValue(Of T)(Cephei.Cell.ICell, T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ISession.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: SetValue
        path: ../Cephei.Cell/ISession.cs
        startLine: 103
      summary: "\nSet the value for this cell in the session cache, and ensure that all\ndependant\ncalculations for this session use this value\n"
      example: []
      syntax:
        content:
          CSharp: void SetValue<T>(ICell cell, T value)
          VB: Sub SetValue(Of T)(cell As ICell, value As T)
        parameters:
        - id: cell
          type: Cephei.Cell.ICell
          description: ''
        - id: value
          type: '{T}'
          description: ''
        typeParameters:
        - id: T
      overload: Cephei.Cell.ISession.SetValue*
      modifiers:
        CSharp: []
        VB: []
    - id: Cephei.Cell.ISession.Size
      commentId: P:Cephei.Cell.ISession.Size
      language: CSharp
      name:
        CSharp: Size
        VB: Size
      nameWithType:
        CSharp: ISession.Size
        VB: ISession.Size
      qualifiedName:
        CSharp: Cephei.Cell.ISession.Size
        VB: Cephei.Cell.ISession.Size
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ISession.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Size
        path: ../Cephei.Cell/ISession.cs
        startLine: 108
      summary: "\nSize of the session is the number of cells that are referenced by the session\n"
      example: []
      syntax:
        content:
          CSharp: int Size { get; }
          VB: ReadOnly Property Size As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Cephei.Cell.ISession.Size*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Cephei.Cell.ISession.PercentComplete
      commentId: P:Cephei.Cell.ISession.PercentComplete
      language: CSharp
      name:
        CSharp: PercentComplete
        VB: PercentComplete
      nameWithType:
        CSharp: ISession.PercentComplete
        VB: ISession.PercentComplete
      qualifiedName:
        CSharp: Cephei.Cell.ISession.PercentComplete
        VB: Cephei.Cell.ISession.PercentComplete
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ISession.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: PercentComplete
        path: ../Cephei.Cell/ISession.cs
        startLine: 113
      summary: "\nPercentComplete is the ratio of the number of values to the number of cells within the session\n"
      example: []
      syntax:
        content:
          CSharp: double PercentComplete { get; }
          VB: ReadOnly Property PercentComplete As Double
        parameters: []
        return:
          type: System.Double
      overload: Cephei.Cell.ISession.PercentComplete*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Cephei.Cell.ISession.Calculate
      commentId: M:Cephei.Cell.ISession.Calculate
      language: CSharp
      name:
        CSharp: Calculate()
        VB: Calculate()
      nameWithType:
        CSharp: ISession.Calculate()
        VB: ISession.Calculate()
      qualifiedName:
        CSharp: Cephei.Cell.ISession.Calculate()
        VB: Cephei.Cell.ISession.Calculate()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ISession.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Calculate
        path: ../Cephei.Cell/ISession.cs
        startLine: 119
      summary: "\nTrigger the Calculation phase of the Session (as an alternative to using IDisposable.Dispose in a using block)\n"
      example: []
      syntax:
        content:
          CSharp: void Calculate()
          VB: Sub Calculate
      overload: Cephei.Cell.ISession.Calculate*
      modifiers:
        CSharp: []
        VB: []
    - id: Cephei.Cell.ISession.Complete
      commentId: E:Cephei.Cell.ISession.Complete
      language: CSharp
      name:
        CSharp: Complete
        VB: Complete
      nameWithType:
        CSharp: ISession.Complete
        VB: ISession.Complete
      qualifiedName:
        CSharp: Cephei.Cell.ISession.Complete
        VB: Cephei.Cell.ISession.Complete
      type: Event
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ISession.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Complete
        path: ../Cephei.Cell/ISession.cs
        startLine: 124
      summary: "\nNotification that the calculation has completed\n"
      example: []
      syntax:
        content:
          CSharp: event SessionComplete Complete
          VB: Event Complete As SessionComplete
        return:
          type: Cephei.Cell.SessionComplete
      modifiers:
        CSharp: []
        VB: []
  - id: Cephei.Cell.List`1
    commentId: T:Cephei.Cell.List`1
    language: CSharp
    name:
      CSharp: List<T>
      VB: List(Of T)
    nameWithType:
      CSharp: List<T>
      VB: List(Of T)
    qualifiedName:
      CSharp: Cephei.Cell.List<T>
      VB: Cephei.Cell.List(Of T)
    type: Class
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/List.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: List
      path: ../Cephei.Cell/List.cs
      startLine: 11
    syntax:
      content:
        CSharp: 'public class List<T> : IList<ICell<T>>, ICell<T>, ICell, ICellEvent, IObservable<T>, IObservable<KeyValuePair<ISession, KeyValuePair<string, T>>>, IObservable<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>, IObserver<T>'
        VB: >-
          Public Class List(Of T)

              Inherits IList(Of ICell(Of T))

              Implements ICell(Of T), ICell, ICellEvent, IObservable(Of T), IObservable(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))), IObservable(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)), IObserver(Of T)
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - Cephei.Cell.Generic.ICell{{T}}
    - Cephei.Cell.ICell
    - Cephei.Cell.ICellEvent
    - IObservable{{T}}
    - IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
    - IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
    - IObserver{{T}}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Cephei.Cell.List`1.#ctor
      commentId: M:Cephei.Cell.List`1.#ctor
      language: CSharp
      name:
        CSharp: List()
        VB: List()
      nameWithType:
        CSharp: List<T>.List()
        VB: List(Of T).List()
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.List()
        VB: Cephei.Cell.List(Of T).List()
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/List.cs
        startLine: 14
      syntax:
        content:
          CSharp: public List()
          VB: Public Sub New
      overload: Cephei.Cell.List`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.#ctor(IList{Cephei.Cell.Generic.ICell{`0}})
      commentId: M:Cephei.Cell.List`1.#ctor(IList{Cephei.Cell.Generic.ICell{`0}})
      language: CSharp
      name:
        CSharp: List(IList<ICell<T>>)
        VB: List(IList(Of ICell(Of T)))
      nameWithType:
        CSharp: List<T>.List(IList<ICell<T>>)
        VB: List(Of T).List(IList(Of ICell(Of T)))
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.List(IList<Cephei.Cell.Generic.ICell<T>>)
        VB: Cephei.Cell.List(Of T).List(IList(Of Cephei.Cell.Generic.ICell(Of T)))
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/List.cs
        startLine: 22
      syntax:
        content:
          CSharp: public List(IList<ICell<T>> list)
          VB: Public Sub New(list As IList(Of ICell(Of T)))
        parameters:
        - id: list
          type: IList{Cephei.Cell.Generic.ICell{{T}}}
      overload: Cephei.Cell.List`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.#ctor(IEnumerable{Cephei.Cell.Generic.ICell{`0}})
      commentId: M:Cephei.Cell.List`1.#ctor(IEnumerable{Cephei.Cell.Generic.ICell{`0}})
      language: CSharp
      name:
        CSharp: List(IEnumerable<ICell<T>>)
        VB: List(IEnumerable(Of ICell(Of T)))
      nameWithType:
        CSharp: List<T>.List(IEnumerable<ICell<T>>)
        VB: List(Of T).List(IEnumerable(Of ICell(Of T)))
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.List(IEnumerable<Cephei.Cell.Generic.ICell<T>>)
        VB: Cephei.Cell.List(Of T).List(IEnumerable(Of Cephei.Cell.Generic.ICell(Of T)))
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/List.cs
        startLine: 39
      syntax:
        content:
          CSharp: public List(IEnumerable<ICell<T>> collection)
          VB: Public Sub New(collection As IEnumerable(Of ICell(Of T)))
        parameters:
        - id: collection
          type: IEnumerable{Cephei.Cell.Generic.ICell{{T}}}
      overload: Cephei.Cell.List`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.#ctor(System.Int32)
      commentId: M:Cephei.Cell.List`1.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: List(Int32)
        VB: List(Int32)
      nameWithType:
        CSharp: List<T>.List(Int32)
        VB: List(Of T).List(Int32)
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.List(System.Int32)
        VB: Cephei.Cell.List(Of T).List(System.Int32)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/List.cs
        startLine: 57
      syntax:
        content:
          CSharp: public List(int capacity)
          VB: Public Sub New(capacity As Integer)
        parameters:
        - id: capacity
          type: System.Int32
      overload: Cephei.Cell.List`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.Value
      commentId: P:Cephei.Cell.List`1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: List<T>.Value
        VB: List(Of T).Value
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Value
        VB: Cephei.Cell.List(Of T).Value
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Value
        path: ../Cephei.Cell/List.cs
        startLine: 63
      syntax:
        content:
          CSharp: public IList<ICell<T>> Value { get; set; }
          VB: Public Property Value As IList(Of ICell(Of T))
        parameters: []
        return:
          type: IList{Cephei.Cell.Generic.ICell{{T}}}
      overload: Cephei.Cell.List`1.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.List`1.Parent
      commentId: P:Cephei.Cell.List`1.Parent
      language: CSharp
      name:
        CSharp: Parent
        VB: Parent
      nameWithType:
        CSharp: List<T>.Parent
        VB: List(Of T).Parent
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Parent
        VB: Cephei.Cell.List(Of T).Parent
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Parent
        path: ../Cephei.Cell/List.cs
        startLine: 75
      syntax:
        content:
          CSharp: public ICell Parent { get; set; }
          VB: Public Property Parent As ICell
        parameters: []
        return:
          type: Cephei.Cell.ICell
      overload: Cephei.Cell.List`1.Parent*
      implements:
      - Cephei.Cell.ICell.Parent
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.List`1.Dependants
      commentId: P:Cephei.Cell.List`1.Dependants
      language: CSharp
      name:
        CSharp: Dependants
        VB: Dependants
      nameWithType:
        CSharp: List<T>.Dependants
        VB: List(Of T).Dependants
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Dependants
        VB: Cephei.Cell.List(Of T).Dependants
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dependants
        path: ../Cephei.Cell/List.cs
        startLine: 77
      syntax:
        content:
          CSharp: public IEnumerable<ICellEvent> Dependants { get; }
          VB: Public ReadOnly Property Dependants As IEnumerable(Of ICellEvent)
        parameters: []
        return:
          type: IEnumerable{Cephei.Cell.ICellEvent}
      overload: Cephei.Cell.List`1.Dependants*
      implements:
      - Cephei.Cell.ICell.Dependants
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.List`1.Mnemonic
      commentId: P:Cephei.Cell.List`1.Mnemonic
      language: CSharp
      name:
        CSharp: Mnemonic
        VB: Mnemonic
      nameWithType:
        CSharp: List<T>.Mnemonic
        VB: List(Of T).Mnemonic
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Mnemonic
        VB: Cephei.Cell.List(Of T).Mnemonic
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Mnemonic
        path: ../Cephei.Cell/List.cs
        startLine: 91
      syntax:
        content:
          CSharp: public string Mnemonic { get; set; }
          VB: Public Property Mnemonic As String
        parameters: []
        return:
          type: System.String
      overload: Cephei.Cell.List`1.Mnemonic*
      implements:
      - Cephei.Cell.ICell.Mnemonic
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - isEii: true
      id: Cephei.Cell.List`1.Cephei#Cell#Generic#ICell{T}#Value
      commentId: P:Cephei.Cell.List`1.Cephei#Cell#Generic#ICell{T}#Value
      language: CSharp
      name:
        CSharp: ICell<T>.Value
        VB: Cephei.Cell.Generic.ICell<T>.Value
      nameWithType:
        CSharp: List<T>.ICell<T>.Value
        VB: List(Of T).Cephei.Cell.Generic.ICell<T>.Value
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Cephei.Cell.Generic.ICell<T>.Value
        VB: Cephei.Cell.List(Of T).Cephei.Cell.Generic.ICell<T>.Value
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Cephei.Cell.Generic.ICell<T>.Value
        path: ../Cephei.Cell/List.cs
        startLine: 92
      syntax:
        content:
          CSharp: T ICell<T>.Value { get; set; }
          VB: ReadOnly WriteOnly Property Cephei.Cell.Generic.ICell<T>.Value As T Implements ICell(Of T).Value
        parameters: []
        return:
          type: '{T}'
      overload: Cephei.Cell.List`1.Cephei#Cell#Generic#ICell{T}#Value*
      implements:
      - Cephei.Cell.Generic.ICell{{T}}.Value
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: Cephei.Cell.List`1.Count
      commentId: P:Cephei.Cell.List`1.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: List<T>.Count
        VB: List(Of T).Count
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Count
        VB: Cephei.Cell.List(Of T).Count
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Count
        path: ../Cephei.Cell/List.cs
        startLine: 94
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Cephei.Cell.List`1.Count*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.List`1.IsReadOnly
      commentId: P:Cephei.Cell.List`1.IsReadOnly
      language: CSharp
      name:
        CSharp: IsReadOnly
        VB: IsReadOnly
      nameWithType:
        CSharp: List<T>.IsReadOnly
        VB: List(Of T).IsReadOnly
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.IsReadOnly
        VB: Cephei.Cell.List(Of T).IsReadOnly
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: IsReadOnly
        path: ../Cephei.Cell/List.cs
        startLine: 96
      syntax:
        content:
          CSharp: public bool IsReadOnly { get; }
          VB: Public ReadOnly Property IsReadOnly As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Cephei.Cell.List`1.IsReadOnly*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.List`1.Item(System.Int32)
      commentId: P:Cephei.Cell.List`1.Item(System.Int32)
      language: CSharp
      name:
        CSharp: Item[Int32]
        VB: Item(Int32)
      nameWithType:
        CSharp: List<T>.Item[Int32]
        VB: List(Of T).Item(Int32)
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Item[System.Int32]
        VB: Cephei.Cell.List(Of T).Item(System.Int32)
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: this[]
        path: ../Cephei.Cell/List.cs
        startLine: 98
      syntax:
        content:
          CSharp: public ICell<T> this[int index] { get; set; }
          VB: Public Property Item(index As Integer) As ICell(Of T)
        parameters:
        - id: index
          type: System.Int32
        return:
          type: Cephei.Cell.Generic.ICell{{T}}
      overload: Cephei.Cell.List`1.Item*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.List`1.Change
      commentId: E:Cephei.Cell.List`1.Change
      language: CSharp
      name:
        CSharp: Change
        VB: Change
      nameWithType:
        CSharp: List<T>.Change
        VB: List(Of T).Change
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Change
        VB: Cephei.Cell.List(Of T).Change
      type: Event
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Change
        path: ../Cephei.Cell/List.cs
        startLine: 123
      syntax:
        content:
          CSharp: public event CellChange Change
          VB: Public Event Change As CellChange
        return:
          type: Cephei.Cell.CellChange
      implements:
      - Cephei.Cell.ICell.Change
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.Dispose
      commentId: M:Cephei.Cell.List`1.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: List<T>.Dispose()
        VB: List(Of T).Dispose()
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Dispose()
        VB: Cephei.Cell.List(Of T).Dispose()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dispose
        path: ../Cephei.Cell/List.cs
        startLine: 125
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Cephei.Cell.List`1.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      commentId: M:Cephei.Cell.List`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      language: CSharp
      name:
        CSharp: OnChange(CellEvent, ICellEvent, DateTime, ISession)
        VB: OnChange(CellEvent, ICellEvent, DateTime, ISession)
      nameWithType:
        CSharp: List<T>.OnChange(CellEvent, ICellEvent, DateTime, ISession)
        VB: List(Of T).OnChange(CellEvent, ICellEvent, DateTime, ISession)
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
        VB: Cephei.Cell.List(Of T).OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnChange
        path: ../Cephei.Cell/List.cs
        startLine: 139
      syntax:
        content:
          CSharp: public void OnChange(CellEvent eventType, ICellEvent root, DateTime epoch, ISession session)
          VB: Public Sub OnChange(eventType As CellEvent, root As ICellEvent, epoch As DateTime, session As ISession)
        parameters:
        - id: eventType
          type: Cephei.Cell.CellEvent
        - id: root
          type: Cephei.Cell.ICellEvent
        - id: epoch
          type: DateTime
        - id: session
          type: Cephei.Cell.ISession
      overload: Cephei.Cell.List`1.OnChange*
      implements:
      - Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.Subscribe(IObserver{`0})
      commentId: M:Cephei.Cell.List`1.Subscribe(IObserver{`0})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<T>)
        VB: Subscribe(IObserver(Of T))
      nameWithType:
        CSharp: List<T>.Subscribe(IObserver<T>)
        VB: List(Of T).Subscribe(IObserver(Of T))
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Subscribe(IObserver<T>)
        VB: Cephei.Cell.List(Of T).Subscribe(IObserver(Of T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/List.cs
        startLine: 144
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<T> observer)
          VB: Public Function Subscribe(observer As IObserver(Of T)) As IDisposable
        parameters:
        - id: observer
          type: IObserver{{T}}
        return:
          type: IDisposable
      overload: Cephei.Cell.List`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
      commentId: M:Cephei.Cell.List`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>)
        VB: Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))))
      nameWithType:
        CSharp: List<T>.Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>)
        VB: List(Of T).Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))))
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Subscribe(IObserver<KeyValuePair<Cephei.Cell.ISession, KeyValuePair<System.String, T>>>)
        VB: Cephei.Cell.List(Of T).Subscribe(IObserver(Of KeyValuePair(Of Cephei.Cell.ISession, KeyValuePair(Of System.String, T))))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/List.cs
        startLine: 149
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<string, T>>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T)))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
        return:
          type: IDisposable
      overload: Cephei.Cell.List`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
      commentId: M:Cephei.Cell.List`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>)
        VB: Subscribe(IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)))
      nameWithType:
        CSharp: List<T>.Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>)
        VB: List(Of T).Subscribe(IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)))
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Subscribe(IObserver<Tuple<Cephei.Cell.ISession, Cephei.Cell.Generic.ICell<T>, Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime>>)
        VB: Cephei.Cell.List(Of T).Subscribe(IObserver(Of Tuple(Of Cephei.Cell.ISession, Cephei.Cell.Generic.ICell(Of T), Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime)))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/List.cs
        startLine: 154
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
        return:
          type: IDisposable
      overload: Cephei.Cell.List`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.HasFunction
      commentId: P:Cephei.Cell.List`1.HasFunction
      language: CSharp
      name:
        CSharp: HasFunction
        VB: HasFunction
      nameWithType:
        CSharp: List<T>.HasFunction
        VB: List(Of T).HasFunction
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.HasFunction
        VB: Cephei.Cell.List(Of T).HasFunction
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasFunction
        path: ../Cephei.Cell/List.cs
        startLine: 161
      example: []
      syntax:
        content:
          CSharp: public bool HasFunction { get; }
          VB: Public ReadOnly Property HasFunction As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Cephei.Cell.List`1.HasFunction*
      see:
      - linkId: Cephei.Cell.ICell.HasFunction
        commentId: P:Cephei.Cell.ICell.HasFunction
      implements:
      - Cephei.Cell.ICell.HasFunction
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Cephei.Cell.ICell.HasFunction: 
    - id: Cephei.Cell.List`1.HasValue
      commentId: P:Cephei.Cell.List`1.HasValue
      language: CSharp
      name:
        CSharp: HasValue
        VB: HasValue
      nameWithType:
        CSharp: List<T>.HasValue
        VB: List(Of T).HasValue
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.HasValue
        VB: Cephei.Cell.List(Of T).HasValue
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasValue
        path: ../Cephei.Cell/List.cs
        startLine: 163
      example: []
      syntax:
        content:
          CSharp: public bool HasValue { get; }
          VB: Public ReadOnly Property HasValue As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Cephei.Cell.List`1.HasValue*
      see:
      - linkId: Cephei.Cell.ICell.HasValue
        commentId: P:Cephei.Cell.ICell.HasValue
      implements:
      - Cephei.Cell.ICell.HasValue
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Cephei.Cell.ICell.HasValue: 
    - id: Cephei.Cell.List`1.Box
      commentId: P:Cephei.Cell.List`1.Box
      language: CSharp
      name:
        CSharp: Box
        VB: Box
      nameWithType:
        CSharp: List<T>.Box
        VB: List(Of T).Box
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Box
        VB: Cephei.Cell.List(Of T).Box
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Box
        path: ../Cephei.Cell/List.cs
        startLine: 166
      example: []
      syntax:
        content:
          CSharp: public object Box { get; set; }
          VB: Public Property Box As Object
        parameters: []
        return:
          type: System.Object
      overload: Cephei.Cell.List`1.Box*
      see:
      - linkId: Cephei.Cell.ICell.Box
        commentId: P:Cephei.Cell.ICell.Box
      implements:
      - Cephei.Cell.ICell.Box
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Cephei.Cell.ICell.Box: 
    - id: Cephei.Cell.List`1.OnCompleted
      commentId: M:Cephei.Cell.List`1.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: List<T>.OnCompleted()
        VB: List(Of T).OnCompleted()
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.OnCompleted()
        VB: Cephei.Cell.List(Of T).OnCompleted()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnCompleted
        path: ../Cephei.Cell/List.cs
        startLine: 185
      syntax:
        content:
          CSharp: public void OnCompleted()
          VB: Public Sub OnCompleted
      overload: Cephei.Cell.List`1.OnCompleted*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.OnError(Exception)
      commentId: M:Cephei.Cell.List`1.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: List<T>.OnError(Exception)
        VB: List(Of T).OnError(Exception)
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.OnError(Exception)
        VB: Cephei.Cell.List(Of T).OnError(Exception)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnError
        path: ../Cephei.Cell/List.cs
        startLine: 189
      syntax:
        content:
          CSharp: public void OnError(Exception error)
          VB: Public Sub OnError(error As Exception)
        parameters:
        - id: error
          type: Exception
      overload: Cephei.Cell.List`1.OnError*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.OnNext(`0)
      commentId: M:Cephei.Cell.List`1.OnNext(`0)
      language: CSharp
      name:
        CSharp: OnNext(T)
        VB: OnNext(T)
      nameWithType:
        CSharp: List<T>.OnNext(T)
        VB: List(Of T).OnNext(T)
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.OnNext(T)
        VB: Cephei.Cell.List(Of T).OnNext(T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnNext
        path: ../Cephei.Cell/List.cs
        startLine: 193
      syntax:
        content:
          CSharp: public void OnNext(T value)
          VB: Public Sub OnNext(value As T)
        parameters:
        - id: value
          type: '{T}'
      overload: Cephei.Cell.List`1.OnNext*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.IndexOf(Cephei.Cell.Generic.ICell{`0})
      commentId: M:Cephei.Cell.List`1.IndexOf(Cephei.Cell.Generic.ICell{`0})
      language: CSharp
      name:
        CSharp: IndexOf(ICell<T>)
        VB: IndexOf(ICell(Of T))
      nameWithType:
        CSharp: List<T>.IndexOf(ICell<T>)
        VB: List(Of T).IndexOf(ICell(Of T))
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.IndexOf(Cephei.Cell.Generic.ICell<T>)
        VB: Cephei.Cell.List(Of T).IndexOf(Cephei.Cell.Generic.ICell(Of T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: IndexOf
        path: ../Cephei.Cell/List.cs
        startLine: 200
      syntax:
        content:
          CSharp: public int IndexOf(ICell<T> item)
          VB: Public Function IndexOf(item As ICell(Of T)) As Integer
        parameters:
        - id: item
          type: Cephei.Cell.Generic.ICell{{T}}
        return:
          type: System.Int32
      overload: Cephei.Cell.List`1.IndexOf*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.Insert(System.Int32,Cephei.Cell.Generic.ICell{`0})
      commentId: M:Cephei.Cell.List`1.Insert(System.Int32,Cephei.Cell.Generic.ICell{`0})
      language: CSharp
      name:
        CSharp: Insert(Int32, ICell<T>)
        VB: Insert(Int32, ICell(Of T))
      nameWithType:
        CSharp: List<T>.Insert(Int32, ICell<T>)
        VB: List(Of T).Insert(Int32, ICell(Of T))
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Insert(System.Int32, Cephei.Cell.Generic.ICell<T>)
        VB: Cephei.Cell.List(Of T).Insert(System.Int32, Cephei.Cell.Generic.ICell(Of T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Insert
        path: ../Cephei.Cell/List.cs
        startLine: 205
      syntax:
        content:
          CSharp: public void Insert(int index, ICell<T> item)
          VB: Public Sub Insert(index As Integer, item As ICell(Of T))
        parameters:
        - id: index
          type: System.Int32
        - id: item
          type: Cephei.Cell.Generic.ICell{{T}}
      overload: Cephei.Cell.List`1.Insert*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.RemoveAt(System.Int32)
      commentId: M:Cephei.Cell.List`1.RemoveAt(System.Int32)
      language: CSharp
      name:
        CSharp: RemoveAt(Int32)
        VB: RemoveAt(Int32)
      nameWithType:
        CSharp: List<T>.RemoveAt(Int32)
        VB: List(Of T).RemoveAt(Int32)
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.RemoveAt(System.Int32)
        VB: Cephei.Cell.List(Of T).RemoveAt(System.Int32)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: RemoveAt
        path: ../Cephei.Cell/List.cs
        startLine: 212
      syntax:
        content:
          CSharp: public void RemoveAt(int index)
          VB: Public Sub RemoveAt(index As Integer)
        parameters:
        - id: index
          type: System.Int32
      overload: Cephei.Cell.List`1.RemoveAt*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.Add(Cephei.Cell.Generic.ICell{`0})
      commentId: M:Cephei.Cell.List`1.Add(Cephei.Cell.Generic.ICell{`0})
      language: CSharp
      name:
        CSharp: Add(ICell<T>)
        VB: Add(ICell(Of T))
      nameWithType:
        CSharp: List<T>.Add(ICell<T>)
        VB: List(Of T).Add(ICell(Of T))
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Add(Cephei.Cell.Generic.ICell<T>)
        VB: Cephei.Cell.List(Of T).Add(Cephei.Cell.Generic.ICell(Of T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Add
        path: ../Cephei.Cell/List.cs
        startLine: 222
      syntax:
        content:
          CSharp: public void Add(ICell<T> item)
          VB: Public Sub Add(item As ICell(Of T))
        parameters:
        - id: item
          type: Cephei.Cell.Generic.ICell{{T}}
      overload: Cephei.Cell.List`1.Add*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.Clear
      commentId: M:Cephei.Cell.List`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: List<T>.Clear()
        VB: List(Of T).Clear()
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Clear()
        VB: Cephei.Cell.List(Of T).Clear()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Clear
        path: ../Cephei.Cell/List.cs
        startLine: 229
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear
      overload: Cephei.Cell.List`1.Clear*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.Contains(Cephei.Cell.Generic.ICell{`0})
      commentId: M:Cephei.Cell.List`1.Contains(Cephei.Cell.Generic.ICell{`0})
      language: CSharp
      name:
        CSharp: Contains(ICell<T>)
        VB: Contains(ICell(Of T))
      nameWithType:
        CSharp: List<T>.Contains(ICell<T>)
        VB: List(Of T).Contains(ICell(Of T))
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Contains(Cephei.Cell.Generic.ICell<T>)
        VB: Cephei.Cell.List(Of T).Contains(Cephei.Cell.Generic.ICell(Of T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Contains
        path: ../Cephei.Cell/List.cs
        startLine: 235
      syntax:
        content:
          CSharp: public bool Contains(ICell<T> item)
          VB: Public Function Contains(item As ICell(Of T)) As Boolean
        parameters:
        - id: item
          type: Cephei.Cell.Generic.ICell{{T}}
        return:
          type: System.Boolean
      overload: Cephei.Cell.List`1.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.CopyTo(Cephei.Cell.Generic.ICell{`0}[],System.Int32)
      commentId: M:Cephei.Cell.List`1.CopyTo(Cephei.Cell.Generic.ICell{`0}[],System.Int32)
      language: CSharp
      name:
        CSharp: CopyTo(ICell<T>[], Int32)
        VB: CopyTo(ICell(Of T)(), Int32)
      nameWithType:
        CSharp: List<T>.CopyTo(ICell<T>[], Int32)
        VB: List(Of T).CopyTo(ICell(Of T)(), Int32)
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.CopyTo(Cephei.Cell.Generic.ICell<T>[], System.Int32)
        VB: Cephei.Cell.List(Of T).CopyTo(Cephei.Cell.Generic.ICell(Of T)(), System.Int32)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: CopyTo
        path: ../Cephei.Cell/List.cs
        startLine: 240
      syntax:
        content:
          CSharp: public void CopyTo(ICell<T>[] array, int arrayIndex)
          VB: Public Sub CopyTo(array As ICell(Of T)(), arrayIndex As Integer)
        parameters:
        - id: array
          type: Cephei.Cell.Generic.ICell{{T}}[]
        - id: arrayIndex
          type: System.Int32
      overload: Cephei.Cell.List`1.CopyTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.Remove(Cephei.Cell.Generic.ICell{`0})
      commentId: M:Cephei.Cell.List`1.Remove(Cephei.Cell.Generic.ICell{`0})
      language: CSharp
      name:
        CSharp: Remove(ICell<T>)
        VB: Remove(ICell(Of T))
      nameWithType:
        CSharp: List<T>.Remove(ICell<T>)
        VB: List(Of T).Remove(ICell(Of T))
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.Remove(Cephei.Cell.Generic.ICell<T>)
        VB: Cephei.Cell.List(Of T).Remove(Cephei.Cell.Generic.ICell(Of T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Remove
        path: ../Cephei.Cell/List.cs
        startLine: 245
      syntax:
        content:
          CSharp: public bool Remove(ICell<T> item)
          VB: Public Function Remove(item As ICell(Of T)) As Boolean
        parameters:
        - id: item
          type: Cephei.Cell.Generic.ICell{{T}}
        return:
          type: System.Boolean
      overload: Cephei.Cell.List`1.Remove*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.List`1.GetEnumerator
      commentId: M:Cephei.Cell.List`1.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: List<T>.GetEnumerator()
        VB: List(Of T).GetEnumerator()
      qualifiedName:
        CSharp: Cephei.Cell.List<T>.GetEnumerator()
        VB: Cephei.Cell.List(Of T).GetEnumerator()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/List.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: GetEnumerator
        path: ../Cephei.Cell/List.cs
        startLine: 257
      summary: "\nbefore eunumerating, add this list the dependants insetad of the content of the list\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerator<ICell<T>> GetEnumerator()
          VB: Public Function GetEnumerator As IEnumerator(Of ICell(Of T))
        return:
          type: IEnumerator{Cephei.Cell.Generic.ICell{{T}}}
          description: ''
      overload: Cephei.Cell.List`1.GetEnumerator*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Cephei.Cell.Model
    commentId: T:Cephei.Cell.Model
    language: CSharp
    name:
      CSharp: Model
      VB: Model
    nameWithType:
      CSharp: Model
      VB: Model
    qualifiedName:
      CSharp: Cephei.Cell.Model
      VB: Cephei.Cell.Model
    type: Class
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/Model.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: Model
      path: ../Cephei.Cell/Model.cs
      startLine: 14
    syntax:
      content:
        CSharp: 'public class Model : ConcurrentDictionary<string, ICell>, ICell, ICellEvent, IObservable<ICell>, IObservable<KeyValuePair<ISession, KeyValuePair<string, ICell>>>, IObservable<Tuple<ISession, Model, CellEvent, ICell, DateTime>>, IObservable<KeyValuePair<string, double>>, IObservable<KeyValuePair<string, int>>, IObservable<KeyValuePair<string, Decimal>>'
        VB: >-
          Public Class Model

              Inherits ConcurrentDictionary(Of String, ICell)

              Implements ICell, ICellEvent, IObservable(Of ICell), IObservable(Of KeyValuePair(Of ISession, KeyValuePair(Of String, ICell))), IObservable(Of Tuple(Of ISession, Model, CellEvent, ICell, DateTime)), IObservable(Of KeyValuePair(Of String, Double)), IObservable(Of KeyValuePair(Of String, Integer)), IObservable(Of KeyValuePair(Of String, Decimal))
    inheritance:
    - System.Object
    implements:
    - Cephei.Cell.ICell
    - Cephei.Cell.ICellEvent
    - IObservable{Cephei.Cell.ICell}
    - IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,Cephei.Cell.ICell}}}
    - IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
    - IObservable{KeyValuePair{System.String,System.Double}}
    - IObservable{KeyValuePair{System.String,System.Int32}}
    - IObservable{KeyValuePair{System.String,Decimal}}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Cephei.Cell.Model.Parent
      commentId: P:Cephei.Cell.Model.Parent
      language: CSharp
      name:
        CSharp: Parent
        VB: Parent
      nameWithType:
        CSharp: Model.Parent
        VB: Model.Parent
      qualifiedName:
        CSharp: Cephei.Cell.Model.Parent
        VB: Cephei.Cell.Model.Parent
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Parent
        path: ../Cephei.Cell/Model.cs
        startLine: 25
      syntax:
        content:
          CSharp: public ICell Parent { get; set; }
          VB: Public Property Parent As ICell
        parameters: []
        return:
          type: Cephei.Cell.ICell
      overload: Cephei.Cell.Model.Parent*
      implements:
      - Cephei.Cell.ICell.Parent
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Model.Dependants
      commentId: P:Cephei.Cell.Model.Dependants
      language: CSharp
      name:
        CSharp: Dependants
        VB: Dependants
      nameWithType:
        CSharp: Model.Dependants
        VB: Model.Dependants
      qualifiedName:
        CSharp: Cephei.Cell.Model.Dependants
        VB: Cephei.Cell.Model.Dependants
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dependants
        path: ../Cephei.Cell/Model.cs
        startLine: 27
      syntax:
        content:
          CSharp: public IEnumerable<ICellEvent> Dependants { get; }
          VB: Public ReadOnly Property Dependants As IEnumerable(Of ICellEvent)
        parameters: []
        return:
          type: IEnumerable{Cephei.Cell.ICellEvent}
      overload: Cephei.Cell.Model.Dependants*
      implements:
      - Cephei.Cell.ICell.Dependants
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.Model.Mnemonic
      commentId: P:Cephei.Cell.Model.Mnemonic
      language: CSharp
      name:
        CSharp: Mnemonic
        VB: Mnemonic
      nameWithType:
        CSharp: Model.Mnemonic
        VB: Model.Mnemonic
      qualifiedName:
        CSharp: Cephei.Cell.Model.Mnemonic
        VB: Cephei.Cell.Model.Mnemonic
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Mnemonic
        path: ../Cephei.Cell/Model.cs
        startLine: 46
      syntax:
        content:
          CSharp: public string Mnemonic { get; set; }
          VB: Public Property Mnemonic As String
        parameters: []
        return:
          type: System.String
      overload: Cephei.Cell.Model.Mnemonic*
      implements:
      - Cephei.Cell.ICell.Mnemonic
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Model.Change
      commentId: E:Cephei.Cell.Model.Change
      language: CSharp
      name:
        CSharp: Change
        VB: Change
      nameWithType:
        CSharp: Model.Change
        VB: Model.Change
      qualifiedName:
        CSharp: Cephei.Cell.Model.Change
        VB: Cephei.Cell.Model.Change
      type: Event
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Change
        path: ../Cephei.Cell/Model.cs
        startLine: 48
      syntax:
        content:
          CSharp: public event CellChange Change
          VB: Public Event Change As CellChange
        return:
          type: Cephei.Cell.CellChange
      implements:
      - Cephei.Cell.ICell.Change
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.Dispose
      commentId: M:Cephei.Cell.Model.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: Model.Dispose()
        VB: Model.Dispose()
      qualifiedName:
        CSharp: Cephei.Cell.Model.Dispose()
        VB: Cephei.Cell.Model.Dispose()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dispose
        path: ../Cephei.Cell/Model.cs
        startLine: 50
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Cephei.Cell.Model.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      commentId: M:Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      language: CSharp
      name:
        CSharp: OnChange(CellEvent, ICellEvent, DateTime, ISession)
        VB: OnChange(CellEvent, ICellEvent, DateTime, ISession)
      nameWithType:
        CSharp: Model.OnChange(CellEvent, ICellEvent, DateTime, ISession)
        VB: Model.OnChange(CellEvent, ICellEvent, DateTime, ISession)
      qualifiedName:
        CSharp: Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
        VB: Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnChange
        path: ../Cephei.Cell/Model.cs
        startLine: 55
      syntax:
        content:
          CSharp: public void OnChange(CellEvent eventType, ICellEvent root, DateTime epoch, ISession session)
          VB: Public Sub OnChange(eventType As CellEvent, root As ICellEvent, epoch As DateTime, session As ISession)
        parameters:
        - id: eventType
          type: Cephei.Cell.CellEvent
        - id: root
          type: Cephei.Cell.ICellEvent
        - id: epoch
          type: DateTime
        - id: session
          type: Cephei.Cell.ISession
      overload: Cephei.Cell.Model.OnChange*
      implements:
      - Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)
      commentId: M:Cephei.Cell.Model.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)
      language: CSharp
      name:
        CSharp: Create<T>(FSharpFunc<Unit, T>, String)
        VB: Create(Of T)(FSharpFunc(Of Unit, T), String)
      nameWithType:
        CSharp: Model.Create<T>(FSharpFunc<Unit, T>, String)
        VB: Model.Create(Of T)(FSharpFunc(Of Unit, T), String)
      qualifiedName:
        CSharp: Cephei.Cell.Model.Create<T>(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>, System.String)
        VB: Cephei.Cell.Model.Create(Of T)(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T), System.String)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Create
        path: ../Cephei.Cell/Model.cs
        startLine: 62
      syntax:
        content:
          CSharp: public Cell<T> Create<T>(FSharpFunc<Unit, T> func, string mnemonic)
          VB: Public Function Create(Of T)(func As FSharpFunc(Of Unit, T), mnemonic As String) As Cell(Of T)
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
        - id: mnemonic
          type: System.String
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.Generic.Cell{{T}}
      overload: Cephei.Cell.Model.Create*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.CreateValue``1(``0,System.String)
      commentId: M:Cephei.Cell.Model.CreateValue``1(``0,System.String)
      language: CSharp
      name:
        CSharp: CreateValue<T>(T, String)
        VB: CreateValue(Of T)(T, String)
      nameWithType:
        CSharp: Model.CreateValue<T>(T, String)
        VB: Model.CreateValue(Of T)(T, String)
      qualifiedName:
        CSharp: Cephei.Cell.Model.CreateValue<T>(T, System.String)
        VB: Cephei.Cell.Model.CreateValue(Of T)(T, System.String)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: CreateValue
        path: ../Cephei.Cell/Model.cs
        startLine: 86
      syntax:
        content:
          CSharp: public Cell<T> CreateValue<T>(T value, string mnemonic)
          VB: Public Function CreateValue(Of T)(value As T, mnemonic As String) As Cell(Of T)
        parameters:
        - id: value
          type: '{T}'
        - id: mnemonic
          type: System.String
        typeParameters:
        - id: T
        return:
          type: Cephei.Cell.Generic.Cell{{T}}
      overload: Cephei.Cell.Model.CreateValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.#ctor(System.String)
      commentId: M:Cephei.Cell.Model.#ctor(System.String)
      language: CSharp
      name:
        CSharp: Model(String)
        VB: Model(String)
      nameWithType:
        CSharp: Model.Model(String)
        VB: Model.Model(String)
      qualifiedName:
        CSharp: Cephei.Cell.Model.Model(System.String)
        VB: Cephei.Cell.Model.Model(System.String)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Model.cs
        startLine: 121
      syntax:
        content:
          CSharp: public Model(string mnemonic)
          VB: Public Sub New(mnemonic As String)
        parameters:
        - id: mnemonic
          type: System.String
      overload: Cephei.Cell.Model.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.#ctor
      commentId: M:Cephei.Cell.Model.#ctor
      language: CSharp
      name:
        CSharp: Model()
        VB: Model()
      nameWithType:
        CSharp: Model.Model()
        VB: Model.Model()
      qualifiedName:
        CSharp: Cephei.Cell.Model.Model()
        VB: Cephei.Cell.Model.Model()
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Model.cs
        startLine: 133
      syntax:
        content:
          CSharp: public Model()
          VB: Public Sub New
      overload: Cephei.Cell.Model.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.#ctor(IDictionary{System.String,Cephei.Cell.ICell})
      commentId: M:Cephei.Cell.Model.#ctor(IDictionary{System.String,Cephei.Cell.ICell})
      language: CSharp
      name:
        CSharp: Model(IDictionary<String, ICell>)
        VB: Model(IDictionary(Of String, ICell))
      nameWithType:
        CSharp: Model.Model(IDictionary<String, ICell>)
        VB: Model.Model(IDictionary(Of String, ICell))
      qualifiedName:
        CSharp: Cephei.Cell.Model.Model(IDictionary<System.String, Cephei.Cell.ICell>)
        VB: Cephei.Cell.Model.Model(IDictionary(Of System.String, Cephei.Cell.ICell))
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Model.cs
        startLine: 153
      syntax:
        content:
          CSharp: public Model(IDictionary<string, ICell> dictionary)
          VB: Public Sub New(dictionary As IDictionary(Of String, ICell))
        parameters:
        - id: dictionary
          type: IDictionary{System.String,Cephei.Cell.ICell}
      overload: Cephei.Cell.Model.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.#ctor(IEqualityComparer{System.String})
      commentId: M:Cephei.Cell.Model.#ctor(IEqualityComparer{System.String})
      language: CSharp
      name:
        CSharp: Model(IEqualityComparer<String>)
        VB: Model(IEqualityComparer(Of String))
      nameWithType:
        CSharp: Model.Model(IEqualityComparer<String>)
        VB: Model.Model(IEqualityComparer(Of String))
      qualifiedName:
        CSharp: Cephei.Cell.Model.Model(IEqualityComparer<System.String>)
        VB: Cephei.Cell.Model.Model(IEqualityComparer(Of System.String))
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Model.cs
        startLine: 166
      syntax:
        content:
          CSharp: public Model(IEqualityComparer<string> comparer)
          VB: Public Sub New(comparer As IEqualityComparer(Of String))
        parameters:
        - id: comparer
          type: IEqualityComparer{System.String}
      overload: Cephei.Cell.Model.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.#ctor(IDictionary{System.String,Cephei.Cell.ICell},IEqualityComparer{System.String})
      commentId: M:Cephei.Cell.Model.#ctor(IDictionary{System.String,Cephei.Cell.ICell},IEqualityComparer{System.String})
      language: CSharp
      name:
        CSharp: Model(IDictionary<String, ICell>, IEqualityComparer<String>)
        VB: Model(IDictionary(Of String, ICell), IEqualityComparer(Of String))
      nameWithType:
        CSharp: Model.Model(IDictionary<String, ICell>, IEqualityComparer<String>)
        VB: Model.Model(IDictionary(Of String, ICell), IEqualityComparer(Of String))
      qualifiedName:
        CSharp: Cephei.Cell.Model.Model(IDictionary<System.String, Cephei.Cell.ICell>, IEqualityComparer<System.String>)
        VB: Cephei.Cell.Model.Model(IDictionary(Of System.String, Cephei.Cell.ICell), IEqualityComparer(Of System.String))
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Model.cs
        startLine: 192
      syntax:
        content:
          CSharp: public Model(IDictionary<string, ICell> dictionary, IEqualityComparer<string> comparer)
          VB: Public Sub New(dictionary As IDictionary(Of String, ICell), comparer As IEqualityComparer(Of String))
        parameters:
        - id: dictionary
          type: IDictionary{System.String,Cephei.Cell.ICell}
        - id: comparer
          type: IEqualityComparer{System.String}
      overload: Cephei.Cell.Model.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.GetOrAdd(System.String,Cephei.Cell.ICell)
      commentId: M:Cephei.Cell.Model.GetOrAdd(System.String,Cephei.Cell.ICell)
      language: CSharp
      name:
        CSharp: GetOrAdd(String, ICell)
        VB: GetOrAdd(String, ICell)
      nameWithType:
        CSharp: Model.GetOrAdd(String, ICell)
        VB: Model.GetOrAdd(String, ICell)
      qualifiedName:
        CSharp: Cephei.Cell.Model.GetOrAdd(System.String, Cephei.Cell.ICell)
        VB: Cephei.Cell.Model.GetOrAdd(System.String, Cephei.Cell.ICell)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: GetOrAdd
        path: ../Cephei.Cell/Model.cs
        startLine: 219
      syntax:
        content:
          CSharp: public ICell GetOrAdd(string key, ICell value)
          VB: Public Function GetOrAdd(key As String, value As ICell) As ICell
        parameters:
        - id: key
          type: System.String
        - id: value
          type: Cephei.Cell.ICell
        return:
          type: Cephei.Cell.ICell
      overload: Cephei.Cell.Model.GetOrAdd*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.TryAdd(System.String,Cephei.Cell.ICell)
      commentId: M:Cephei.Cell.Model.TryAdd(System.String,Cephei.Cell.ICell)
      language: CSharp
      name:
        CSharp: TryAdd(String, ICell)
        VB: TryAdd(String, ICell)
      nameWithType:
        CSharp: Model.TryAdd(String, ICell)
        VB: Model.TryAdd(String, ICell)
      qualifiedName:
        CSharp: Cephei.Cell.Model.TryAdd(System.String, Cephei.Cell.ICell)
        VB: Cephei.Cell.Model.TryAdd(System.String, Cephei.Cell.ICell)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: TryAdd
        path: ../Cephei.Cell/Model.cs
        startLine: 246
      syntax:
        content:
          CSharp: public bool TryAdd(string key, ICell value)
          VB: Public Function TryAdd(key As String, value As ICell) As Boolean
        parameters:
        - id: key
          type: System.String
        - id: value
          type: Cephei.Cell.ICell
        return:
          type: System.Boolean
      overload: Cephei.Cell.Model.TryAdd*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.TryRemove(System.String,Cephei.Cell.ICell@)
      commentId: M:Cephei.Cell.Model.TryRemove(System.String,Cephei.Cell.ICell@)
      language: CSharp
      name:
        CSharp: TryRemove(String, out ICell)
        VB: TryRemove(String, ByRef ICell)
      nameWithType:
        CSharp: Model.TryRemove(String, out ICell)
        VB: Model.TryRemove(String, ByRef ICell)
      qualifiedName:
        CSharp: Cephei.Cell.Model.TryRemove(System.String, out Cephei.Cell.ICell)
        VB: Cephei.Cell.Model.TryRemove(System.String, ByRef Cephei.Cell.ICell)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: TryRemove
        path: ../Cephei.Cell/Model.cs
        startLine: 269
      syntax:
        content:
          CSharp: public bool TryRemove(string key, out ICell value)
          VB: Public Function TryRemove(key As String, ByRef value As ICell) As Boolean
        parameters:
        - id: key
          type: System.String
        - id: value
          type: Cephei.Cell.ICell
        return:
          type: System.Boolean
      overload: Cephei.Cell.Model.TryRemove*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.TryUpdate(System.String,Cephei.Cell.ICell,Cephei.Cell.ICell)
      commentId: M:Cephei.Cell.Model.TryUpdate(System.String,Cephei.Cell.ICell,Cephei.Cell.ICell)
      language: CSharp
      name:
        CSharp: TryUpdate(String, ICell, ICell)
        VB: TryUpdate(String, ICell, ICell)
      nameWithType:
        CSharp: Model.TryUpdate(String, ICell, ICell)
        VB: Model.TryUpdate(String, ICell, ICell)
      qualifiedName:
        CSharp: Cephei.Cell.Model.TryUpdate(System.String, Cephei.Cell.ICell, Cephei.Cell.ICell)
        VB: Cephei.Cell.Model.TryUpdate(System.String, Cephei.Cell.ICell, Cephei.Cell.ICell)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: TryUpdate
        path: ../Cephei.Cell/Model.cs
        startLine: 305
      syntax:
        content:
          CSharp: public bool TryUpdate(string key, ICell newValue, ICell comparisonValue)
          VB: Public Function TryUpdate(key As String, newValue As ICell, comparisonValue As ICell) As Boolean
        parameters:
        - id: key
          type: System.String
        - id: newValue
          type: Cephei.Cell.ICell
        - id: comparisonValue
          type: Cephei.Cell.ICell
        return:
          type: System.Boolean
      overload: Cephei.Cell.Model.TryUpdate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.Item(System.String)
      commentId: P:Cephei.Cell.Model.Item(System.String)
      language: CSharp
      name:
        CSharp: Item[String]
        VB: Item(String)
      nameWithType:
        CSharp: Model.Item[String]
        VB: Model.Item(String)
      qualifiedName:
        CSharp: Cephei.Cell.Model.Item[System.String]
        VB: Cephei.Cell.Model.Item(System.String)
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: this[]
        path: ../Cephei.Cell/Model.cs
        startLine: 339
      syntax:
        content:
          CSharp: public ICell this[string key] { get; set; }
          VB: Public Property Item(key As String) As ICell
        parameters:
        - id: key
          type: System.String
        return:
          type: Cephei.Cell.ICell
      overload: Cephei.Cell.Model.Item*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Model.As``1(System.String)
      commentId: M:Cephei.Cell.Model.As``1(System.String)
      language: CSharp
      name:
        CSharp: As<T>(String)
        VB: As(Of T)(String)
      nameWithType:
        CSharp: Model.As<T>(String)
        VB: Model.As(Of T)(String)
      qualifiedName:
        CSharp: Cephei.Cell.Model.As<T>(System.String)
        VB: Cephei.Cell.Model.As(Of T)(System.String)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: As
        path: ../Cephei.Cell/Model.cs
        startLine: 404
      summary: "\nGet the value of this[key] with a typecast\n"
      example: []
      syntax:
        content:
          CSharp: public ICell<T> As<T>(string key)
          VB: Public Function As(Of T)(key As String) As ICell(Of T)
        parameters:
        - id: key
          type: System.String
          description: mnemonic
        typeParameters:
        - id: T
          description: type expected
        return:
          type: Cephei.Cell.Generic.ICell{{T}}
          description: ''
      overload: Cephei.Cell.Model.As*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.Bind
      commentId: M:Cephei.Cell.Model.Bind
      language: CSharp
      name:
        CSharp: Bind()
        VB: Bind()
      nameWithType:
        CSharp: Model.Bind()
        VB: Model.Bind()
      qualifiedName:
        CSharp: Cephei.Cell.Model.Bind()
        VB: Cephei.Cell.Model.Bind()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Bind
        path: ../Cephei.Cell/Model.cs
        startLine: 427
      syntax:
        content:
          CSharp: public void Bind()
          VB: Public Sub Bind
      overload: Cephei.Cell.Model.Bind*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.HasFunction
      commentId: P:Cephei.Cell.Model.HasFunction
      language: CSharp
      name:
        CSharp: HasFunction
        VB: HasFunction
      nameWithType:
        CSharp: Model.HasFunction
        VB: Model.HasFunction
      qualifiedName:
        CSharp: Cephei.Cell.Model.HasFunction
        VB: Cephei.Cell.Model.HasFunction
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasFunction
        path: ../Cephei.Cell/Model.cs
        startLine: 452
      example: []
      syntax:
        content:
          CSharp: public bool HasFunction { get; }
          VB: Public ReadOnly Property HasFunction As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Cephei.Cell.Model.HasFunction*
      see:
      - linkId: Cephei.Cell.ICell.HasFunction
        commentId: P:Cephei.Cell.ICell.HasFunction
      implements:
      - Cephei.Cell.ICell.HasFunction
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Cephei.Cell.ICell.HasFunction: 
    - id: Cephei.Cell.Model.HasValue
      commentId: P:Cephei.Cell.Model.HasValue
      language: CSharp
      name:
        CSharp: HasValue
        VB: HasValue
      nameWithType:
        CSharp: Model.HasValue
        VB: Model.HasValue
      qualifiedName:
        CSharp: Cephei.Cell.Model.HasValue
        VB: Cephei.Cell.Model.HasValue
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasValue
        path: ../Cephei.Cell/Model.cs
        startLine: 454
      example: []
      syntax:
        content:
          CSharp: public bool HasValue { get; }
          VB: Public ReadOnly Property HasValue As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Cephei.Cell.Model.HasValue*
      see:
      - linkId: Cephei.Cell.ICell.HasValue
        commentId: P:Cephei.Cell.ICell.HasValue
      implements:
      - Cephei.Cell.ICell.HasValue
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Cephei.Cell.ICell.HasValue: 
    - id: Cephei.Cell.Model.Box
      commentId: P:Cephei.Cell.Model.Box
      language: CSharp
      name:
        CSharp: Box
        VB: Box
      nameWithType:
        CSharp: Model.Box
        VB: Model.Box
      qualifiedName:
        CSharp: Cephei.Cell.Model.Box
        VB: Cephei.Cell.Model.Box
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Box
        path: ../Cephei.Cell/Model.cs
        startLine: 457
      example: []
      syntax:
        content:
          CSharp: public object Box { get; set; }
          VB: Public Property Box As Object
        parameters: []
        return:
          type: System.Object
      overload: Cephei.Cell.Model.Box*
      see:
      - linkId: Cephei.Cell.ICell.Box
        commentId: P:Cephei.Cell.ICell.Box
      implements:
      - Cephei.Cell.ICell.Box
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Cephei.Cell.ICell.Box: 
    - id: Cephei.Cell.Model.Subscribe(IObserver{Cephei.Cell.ICell})
      commentId: M:Cephei.Cell.Model.Subscribe(IObserver{Cephei.Cell.ICell})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<ICell>)
        VB: Subscribe(IObserver(Of ICell))
      nameWithType:
        CSharp: Model.Subscribe(IObserver<ICell>)
        VB: Model.Subscribe(IObserver(Of ICell))
      qualifiedName:
        CSharp: Cephei.Cell.Model.Subscribe(IObserver<Cephei.Cell.ICell>)
        VB: Cephei.Cell.Model.Subscribe(IObserver(Of Cephei.Cell.ICell))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Model.cs
        startLine: 472
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<ICell> observer)
          VB: Public Function Subscribe(observer As IObserver(Of ICell)) As IDisposable
        parameters:
        - id: observer
          type: IObserver{Cephei.Cell.ICell}
        return:
          type: IDisposable
      overload: Cephei.Cell.Model.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,Cephei.Cell.ICell}}})
      commentId: M:Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,Cephei.Cell.ICell}}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, ICell>>>)
        VB: Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, ICell))))
      nameWithType:
        CSharp: Model.Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, ICell>>>)
        VB: Model.Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, ICell))))
      qualifiedName:
        CSharp: Cephei.Cell.Model.Subscribe(IObserver<KeyValuePair<Cephei.Cell.ISession, KeyValuePair<System.String, Cephei.Cell.ICell>>>)
        VB: Cephei.Cell.Model.Subscribe(IObserver(Of KeyValuePair(Of Cephei.Cell.ISession, KeyValuePair(Of System.String, Cephei.Cell.ICell))))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Model.cs
        startLine: 477
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<string, ICell>>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, ICell)))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,Cephei.Cell.ICell}}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Model.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
      commentId: M:Cephei.Cell.Model.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<Tuple<ISession, Model, CellEvent, ICell, DateTime>>)
        VB: Subscribe(IObserver(Of Tuple(Of ISession, Model, CellEvent, ICell, DateTime)))
      nameWithType:
        CSharp: Model.Subscribe(IObserver<Tuple<ISession, Model, CellEvent, ICell, DateTime>>)
        VB: Model.Subscribe(IObserver(Of Tuple(Of ISession, Model, CellEvent, ICell, DateTime)))
      qualifiedName:
        CSharp: Cephei.Cell.Model.Subscribe(IObserver<Tuple<Cephei.Cell.ISession, Cephei.Cell.Model, Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime>>)
        VB: Cephei.Cell.Model.Subscribe(IObserver(Of Tuple(Of Cephei.Cell.ISession, Cephei.Cell.Model, Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime)))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Model.cs
        startLine: 482
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<Tuple<ISession, Model, CellEvent, ICell, DateTime>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of Tuple(Of ISession, Model, CellEvent, ICell, DateTime))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Model.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Double}})
      commentId: M:Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Double}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<KeyValuePair<String, Double>>)
        VB: Subscribe(IObserver(Of KeyValuePair(Of String, Double)))
      nameWithType:
        CSharp: Model.Subscribe(IObserver<KeyValuePair<String, Double>>)
        VB: Model.Subscribe(IObserver(Of KeyValuePair(Of String, Double)))
      qualifiedName:
        CSharp: Cephei.Cell.Model.Subscribe(IObserver<KeyValuePair<System.String, System.Double>>)
        VB: Cephei.Cell.Model.Subscribe(IObserver(Of KeyValuePair(Of System.String, System.Double)))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Model.cs
        startLine: 487
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<KeyValuePair<string, double>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of KeyValuePair(Of String, Double))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{KeyValuePair{System.String,System.Double}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Model.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Int32}})
      commentId: M:Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Int32}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<KeyValuePair<String, Int32>>)
        VB: Subscribe(IObserver(Of KeyValuePair(Of String, Int32)))
      nameWithType:
        CSharp: Model.Subscribe(IObserver<KeyValuePair<String, Int32>>)
        VB: Model.Subscribe(IObserver(Of KeyValuePair(Of String, Int32)))
      qualifiedName:
        CSharp: Cephei.Cell.Model.Subscribe(IObserver<KeyValuePair<System.String, System.Int32>>)
        VB: Cephei.Cell.Model.Subscribe(IObserver(Of KeyValuePair(Of System.String, System.Int32)))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Model.cs
        startLine: 492
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<KeyValuePair<string, int>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of KeyValuePair(Of String, Integer))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{KeyValuePair{System.String,System.Int32}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Model.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Decimal}})
      commentId: M:Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Decimal}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<KeyValuePair<String, Decimal>>)
        VB: Subscribe(IObserver(Of KeyValuePair(Of String, Decimal)))
      nameWithType:
        CSharp: Model.Subscribe(IObserver<KeyValuePair<String, Decimal>>)
        VB: Model.Subscribe(IObserver(Of KeyValuePair(Of String, Decimal)))
      qualifiedName:
        CSharp: Cephei.Cell.Model.Subscribe(IObserver<KeyValuePair<System.String, System.Decimal>>)
        VB: Cephei.Cell.Model.Subscribe(IObserver(Of KeyValuePair(Of System.String, System.Decimal)))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Model.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Model.cs
        startLine: 497
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<KeyValuePair<string, decimal>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of KeyValuePair(Of String, Decimal))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{KeyValuePair{System.String,System.Decimal}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Model.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Cephei.Cell.ModelTraceSubscriber
    commentId: T:Cephei.Cell.ModelTraceSubscriber
    language: CSharp
    name:
      CSharp: ModelTraceSubscriber
      VB: ModelTraceSubscriber
    nameWithType:
      CSharp: ModelTraceSubscriber
      VB: ModelTraceSubscriber
    qualifiedName:
      CSharp: Cephei.Cell.ModelTraceSubscriber
      VB: Cephei.Cell.ModelTraceSubscriber
    type: Class
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/ModelObserver.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: ModelTraceSubscriber
      path: ../Cephei.Cell/ModelObserver.cs
      startLine: 213
    syntax:
      content:
        CSharp: 'public class ModelTraceSubscriber : IObserver<Tuple<ISession, Model, CellEvent, ICell, DateTime>>, IDisposable'
        VB: >-
          Public Class ModelTraceSubscriber

              Inherits IObserver(Of Tuple(Of ISession, Model, CellEvent, ICell, DateTime))

              Implements IDisposable
    inheritance:
    - System.Object
    implements:
    - IDisposable
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Cephei.Cell.ModelTraceSubscriber.#ctor(Cephei.Cell.Model,Microsoft.FSharp.Core.FSharpFunc{Cephei.Cell.ICell,System.String},System.String)
      commentId: M:Cephei.Cell.ModelTraceSubscriber.#ctor(Cephei.Cell.Model,Microsoft.FSharp.Core.FSharpFunc{Cephei.Cell.ICell,System.String},System.String)
      language: CSharp
      name:
        CSharp: ModelTraceSubscriber(Model, FSharpFunc<ICell, String>, String)
        VB: ModelTraceSubscriber(Model, FSharpFunc(Of ICell, String), String)
      nameWithType:
        CSharp: ModelTraceSubscriber.ModelTraceSubscriber(Model, FSharpFunc<ICell, String>, String)
        VB: ModelTraceSubscriber.ModelTraceSubscriber(Model, FSharpFunc(Of ICell, String), String)
      qualifiedName:
        CSharp: Cephei.Cell.ModelTraceSubscriber.ModelTraceSubscriber(Cephei.Cell.Model, Microsoft.FSharp.Core.FSharpFunc<Cephei.Cell.ICell, System.String>, System.String)
        VB: Cephei.Cell.ModelTraceSubscriber.ModelTraceSubscriber(Cephei.Cell.Model, Microsoft.FSharp.Core.FSharpFunc(Of Cephei.Cell.ICell, System.String), System.String)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ModelObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/ModelObserver.cs
        startLine: 218
      syntax:
        content:
          CSharp: public ModelTraceSubscriber(Model source, FSharpFunc<ICell, string> formater, string prefix = "")
          VB: Public Sub New(source As Model, formater As FSharpFunc(Of ICell, String), prefix As String = "")
        parameters:
        - id: source
          type: Cephei.Cell.Model
        - id: formater
          type: Microsoft.FSharp.Core.FSharpFunc{Cephei.Cell.ICell,System.String}
        - id: prefix
          type: System.String
      overload: Cephei.Cell.ModelTraceSubscriber.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.ModelTraceSubscriber.OnCompleted
      commentId: M:Cephei.Cell.ModelTraceSubscriber.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: ModelTraceSubscriber.OnCompleted()
        VB: ModelTraceSubscriber.OnCompleted()
      qualifiedName:
        CSharp: Cephei.Cell.ModelTraceSubscriber.OnCompleted()
        VB: Cephei.Cell.ModelTraceSubscriber.OnCompleted()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ModelObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnCompleted
        path: ../Cephei.Cell/ModelObserver.cs
        startLine: 225
      syntax:
        content:
          CSharp: public void OnCompleted()
          VB: Public Sub OnCompleted
      overload: Cephei.Cell.ModelTraceSubscriber.OnCompleted*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.ModelTraceSubscriber.OnError(Exception)
      commentId: M:Cephei.Cell.ModelTraceSubscriber.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: ModelTraceSubscriber.OnError(Exception)
        VB: ModelTraceSubscriber.OnError(Exception)
      qualifiedName:
        CSharp: Cephei.Cell.ModelTraceSubscriber.OnError(Exception)
        VB: Cephei.Cell.ModelTraceSubscriber.OnError(Exception)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ModelObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnError
        path: ../Cephei.Cell/ModelObserver.cs
        startLine: 230
      syntax:
        content:
          CSharp: public void OnError(Exception error)
          VB: Public Sub OnError(error As Exception)
        parameters:
        - id: error
          type: Exception
      overload: Cephei.Cell.ModelTraceSubscriber.OnError*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.ModelTraceSubscriber.OnNext(Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime})
      commentId: M:Cephei.Cell.ModelTraceSubscriber.OnNext(Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime})
      language: CSharp
      name:
        CSharp: OnNext(Tuple<ISession, Model, CellEvent, ICell, DateTime>)
        VB: OnNext(Tuple(Of ISession, Model, CellEvent, ICell, DateTime))
      nameWithType:
        CSharp: ModelTraceSubscriber.OnNext(Tuple<ISession, Model, CellEvent, ICell, DateTime>)
        VB: ModelTraceSubscriber.OnNext(Tuple(Of ISession, Model, CellEvent, ICell, DateTime))
      qualifiedName:
        CSharp: Cephei.Cell.ModelTraceSubscriber.OnNext(Tuple<Cephei.Cell.ISession, Cephei.Cell.Model, Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime>)
        VB: Cephei.Cell.ModelTraceSubscriber.OnNext(Tuple(Of Cephei.Cell.ISession, Cephei.Cell.Model, Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ModelObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnNext
        path: ../Cephei.Cell/ModelObserver.cs
        startLine: 235
      syntax:
        content:
          CSharp: public void OnNext(Tuple<ISession, Model, CellEvent, ICell, DateTime> value)
          VB: Public Sub OnNext(value As Tuple(Of ISession, Model, CellEvent, ICell, DateTime))
        parameters:
        - id: value
          type: Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}
      overload: Cephei.Cell.ModelTraceSubscriber.OnNext*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.ModelTraceSubscriber.Dispose
      commentId: M:Cephei.Cell.ModelTraceSubscriber.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ModelTraceSubscriber.Dispose()
        VB: ModelTraceSubscriber.Dispose()
      qualifiedName:
        CSharp: Cephei.Cell.ModelTraceSubscriber.Dispose()
        VB: Cephei.Cell.ModelTraceSubscriber.Dispose()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ModelObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dispose
        path: ../Cephei.Cell/ModelObserver.cs
        startLine: 240
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Cephei.Cell.ModelTraceSubscriber.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.ModelTraceSubscriber.Finalize
      commentId: M:Cephei.Cell.ModelTraceSubscriber.Finalize
      language: CSharp
      name:
        CSharp: Finalize()
        VB: Finalize()
      nameWithType:
        CSharp: ModelTraceSubscriber.Finalize()
        VB: ModelTraceSubscriber.Finalize()
      qualifiedName:
        CSharp: Cephei.Cell.ModelTraceSubscriber.Finalize()
        VB: Cephei.Cell.ModelTraceSubscriber.Finalize()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/ModelObserver.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Finalize
        path: ../Cephei.Cell/ModelObserver.cs
        startLine: 245
      syntax:
        content:
          CSharp: protected void Finalize()
          VB: Protected Sub Finalize
      overload: Cephei.Cell.ModelTraceSubscriber.Finalize*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
  - id: Cephei.Cell.Session
    commentId: T:Cephei.Cell.Session
    language: CSharp
    name:
      CSharp: Session
      VB: Session
    nameWithType:
      CSharp: Session
      VB: Session
    qualifiedName:
      CSharp: Cephei.Cell.Session
      VB: Cephei.Cell.Session
    type: Class
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/Session.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: Session
      path: ../Cephei.Cell/Session.cs
      startLine: 19
    summary: "\nThis is the only implementation of ISession, but is a separate class to allow\ndifferent session semantics to be provided\n"
    example:
    - "\nuse session = new Session()     // when the block completes\n"
    syntax:
      content:
        CSharp: 'public class Session : object, ISession, IDisposable, IEnumerable<ICell>'
        VB: >-
          Public Class Session

              Inherits Object

              Implements ISession, IDisposable, IEnumerable(Of ICell)
    inheritance:
    - System.Object
    implements:
    - Cephei.Cell.ISession
    - IDisposable
    - IEnumerable{Cephei.Cell.ICell}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Cephei.Cell.Session.Current
      commentId: F:Cephei.Cell.Session.Current
      language: CSharp
      name:
        CSharp: Current
        VB: Current
      nameWithType:
        CSharp: Session.Current
        VB: Session.Current
      qualifiedName:
        CSharp: Cephei.Cell.Session.Current
        VB: Cephei.Cell.Session.Current
      type: Field
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Current
        path: ../Cephei.Cell/Session.cs
        startLine: 45
      summary: "\nThread local reference to the current session to allow Cells to join the\nsession without explicit coding\n"
      example: []
      syntax:
        content:
          CSharp: public static ISession Current
          VB: Public Shared Current As ISession
        return:
          type: Cephei.Cell.ISession
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Session.Complete
      commentId: E:Cephei.Cell.Session.Complete
      language: CSharp
      name:
        CSharp: Complete
        VB: Complete
      nameWithType:
        CSharp: Session.Complete
        VB: Session.Complete
      qualifiedName:
        CSharp: Cephei.Cell.Session.Complete
        VB: Cephei.Cell.Session.Complete
      type: Event
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Complete
        path: ../Cephei.Cell/Session.cs
        startLine: 47
      syntax:
        content:
          CSharp: public event SessionComplete Complete
          VB: Public Event Complete As SessionComplete
        return:
          type: Cephei.Cell.SessionComplete
      implements:
      - Cephei.Cell.ISession.Complete
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Session.Create(System.String)
      commentId: M:Cephei.Cell.Session.Create(System.String)
      language: CSharp
      name:
        CSharp: Create(String)
        VB: Create(String)
      nameWithType:
        CSharp: Session.Create(String)
        VB: Session.Create(String)
      qualifiedName:
        CSharp: Cephei.Cell.Session.Create(System.String)
        VB: Cephei.Cell.Session.Create(System.String)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Create
        path: ../Cephei.Cell/Session.cs
        startLine: 49
      syntax:
        content:
          CSharp: public static Session Create(string mnemonic)
          VB: Public Shared Function Create(mnemonic As String) As Session
        parameters:
        - id: mnemonic
          type: System.String
        return:
          type: Cephei.Cell.Session
      overload: Cephei.Cell.Session.Create*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Cephei.Cell.Session.#ctor(System.String)
      commentId: M:Cephei.Cell.Session.#ctor(System.String)
      language: CSharp
      name:
        CSharp: Session(String)
        VB: Session(String)
      nameWithType:
        CSharp: Session.Session(String)
        VB: Session.Session(String)
      qualifiedName:
        CSharp: Cephei.Cell.Session.Session(System.String)
        VB: Cephei.Cell.Session.Session(System.String)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Session.cs
        startLine: 60
      syntax:
        content:
          CSharp: public Session(string mnemonic)
          VB: Public Sub New(mnemonic As String)
        parameters:
        - id: mnemonic
          type: System.String
      overload: Cephei.Cell.Session.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Session.State
      commentId: P:Cephei.Cell.Session.State
      language: CSharp
      name:
        CSharp: State
        VB: State
      nameWithType:
        CSharp: Session.State
        VB: Session.State
      qualifiedName:
        CSharp: Cephei.Cell.Session.State
        VB: Cephei.Cell.Session.State
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: State
        path: ../Cephei.Cell/Session.cs
        startLine: 66
      syntax:
        content:
          CSharp: public SessionState State { get; }
          VB: Public ReadOnly Property State As SessionState
        parameters: []
        return:
          type: Cephei.Cell.SessionState
      overload: Cephei.Cell.Session.State*
      implements:
      - Cephei.Cell.ISession.State
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.Session.Mnemonic
      commentId: P:Cephei.Cell.Session.Mnemonic
      language: CSharp
      name:
        CSharp: Mnemonic
        VB: Mnemonic
      nameWithType:
        CSharp: Session.Mnemonic
        VB: Session.Mnemonic
      qualifiedName:
        CSharp: Cephei.Cell.Session.Mnemonic
        VB: Cephei.Cell.Session.Mnemonic
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Mnemonic
        path: ../Cephei.Cell/Session.cs
        startLine: 68
      syntax:
        content:
          CSharp: public string Mnemonic { get; }
          VB: Public ReadOnly Property Mnemonic As String
        parameters: []
        return:
          type: System.String
      overload: Cephei.Cell.Session.Mnemonic*
      implements:
      - Cephei.Cell.ISession.Mnemonic
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.Session.Epoch
      commentId: P:Cephei.Cell.Session.Epoch
      language: CSharp
      name:
        CSharp: Epoch
        VB: Epoch
      nameWithType:
        CSharp: Session.Epoch
        VB: Session.Epoch
      qualifiedName:
        CSharp: Cephei.Cell.Session.Epoch
        VB: Cephei.Cell.Session.Epoch
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Epoch
        path: ../Cephei.Cell/Session.cs
        startLine: 70
      syntax:
        content:
          CSharp: public DateTime Epoch { get; }
          VB: Public ReadOnly Property Epoch As DateTime
        parameters: []
        return:
          type: DateTime
      overload: Cephei.Cell.Session.Epoch*
      implements:
      - Cephei.Cell.ISession.Epoch
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.Session.Size
      commentId: P:Cephei.Cell.Session.Size
      language: CSharp
      name:
        CSharp: Size
        VB: Size
      nameWithType:
        CSharp: Session.Size
        VB: Session.Size
      qualifiedName:
        CSharp: Cephei.Cell.Session.Size
        VB: Cephei.Cell.Session.Size
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Size
        path: ../Cephei.Cell/Session.cs
        startLine: 72
      syntax:
        content:
          CSharp: public int Size { get; }
          VB: Public ReadOnly Property Size As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Cephei.Cell.Session.Size*
      implements:
      - Cephei.Cell.ISession.Size
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.Session.PercentComplete
      commentId: P:Cephei.Cell.Session.PercentComplete
      language: CSharp
      name:
        CSharp: PercentComplete
        VB: PercentComplete
      nameWithType:
        CSharp: Session.PercentComplete
        VB: Session.PercentComplete
      qualifiedName:
        CSharp: Cephei.Cell.Session.PercentComplete
        VB: Cephei.Cell.Session.PercentComplete
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: PercentComplete
        path: ../Cephei.Cell/Session.cs
        startLine: 73
      syntax:
        content:
          CSharp: public double PercentComplete { get; }
          VB: Public ReadOnly Property PercentComplete As Double
        parameters: []
        return:
          type: System.Double
      overload: Cephei.Cell.Session.PercentComplete*
      implements:
      - Cephei.Cell.ISession.PercentComplete
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.Session.GetValue``1(Cephei.Cell.ICell,``0@)
      commentId: M:Cephei.Cell.Session.GetValue``1(Cephei.Cell.ICell,``0@)
      language: CSharp
      name:
        CSharp: GetValue<T>(ICell, ref T)
        VB: GetValue(Of T)(ICell, ByRef T)
      nameWithType:
        CSharp: Session.GetValue<T>(ICell, ref T)
        VB: Session.GetValue(Of T)(ICell, ByRef T)
      qualifiedName:
        CSharp: Cephei.Cell.Session.GetValue<T>(Cephei.Cell.ICell, ref T)
        VB: Cephei.Cell.Session.GetValue(Of T)(Cephei.Cell.ICell, ByRef T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: GetValue
        path: ../Cephei.Cell/Session.cs
        startLine: 75
      syntax:
        content:
          CSharp: public bool GetValue<T>(ICell cell, ref T value)
          VB: Public Function GetValue(Of T)(cell As ICell, ByRef value As T) As Boolean
        parameters:
        - id: cell
          type: Cephei.Cell.ICell
        - id: value
          type: '{T}'
        typeParameters:
        - id: T
        return:
          type: System.Boolean
      overload: Cephei.Cell.Session.GetValue*
      implements:
      - Cephei.Cell.ISession.GetValue``1(Cephei.Cell.ICell,{T}@)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Session.HasJoined(Cephei.Cell.ICell)
      commentId: M:Cephei.Cell.Session.HasJoined(Cephei.Cell.ICell)
      language: CSharp
      name:
        CSharp: HasJoined(ICell)
        VB: HasJoined(ICell)
      nameWithType:
        CSharp: Session.HasJoined(ICell)
        VB: Session.HasJoined(ICell)
      qualifiedName:
        CSharp: Cephei.Cell.Session.HasJoined(Cephei.Cell.ICell)
        VB: Cephei.Cell.Session.HasJoined(Cephei.Cell.ICell)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasJoined
        path: ../Cephei.Cell/Session.cs
        startLine: 87
      syntax:
        content:
          CSharp: public bool HasJoined(ICell cell)
          VB: Public Function HasJoined(cell As ICell) As Boolean
        parameters:
        - id: cell
          type: Cephei.Cell.ICell
        return:
          type: System.Boolean
      overload: Cephei.Cell.Session.HasJoined*
      implements:
      - Cephei.Cell.ISession.HasJoined(Cephei.Cell.ICell)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Session.Join(Cephei.Cell.ICell)
      commentId: M:Cephei.Cell.Session.Join(Cephei.Cell.ICell)
      language: CSharp
      name:
        CSharp: Join(ICell)
        VB: Join(ICell)
      nameWithType:
        CSharp: Session.Join(ICell)
        VB: Session.Join(ICell)
      qualifiedName:
        CSharp: Cephei.Cell.Session.Join(Cephei.Cell.ICell)
        VB: Cephei.Cell.Session.Join(Cephei.Cell.ICell)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Join
        path: ../Cephei.Cell/Session.cs
        startLine: 92
      syntax:
        content:
          CSharp: public void Join(ICell cell)
          VB: Public Sub Join(cell As ICell)
        parameters:
        - id: cell
          type: Cephei.Cell.ICell
      overload: Cephei.Cell.Session.Join*
      implements:
      - Cephei.Cell.ISession.Join(Cephei.Cell.ICell)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Session.Leave(Cephei.Cell.ICell)
      commentId: M:Cephei.Cell.Session.Leave(Cephei.Cell.ICell)
      language: CSharp
      name:
        CSharp: Leave(ICell)
        VB: Leave(ICell)
      nameWithType:
        CSharp: Session.Leave(ICell)
        VB: Session.Leave(ICell)
      qualifiedName:
        CSharp: Cephei.Cell.Session.Leave(Cephei.Cell.ICell)
        VB: Cephei.Cell.Session.Leave(Cephei.Cell.ICell)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Leave
        path: ../Cephei.Cell/Session.cs
        startLine: 99
      syntax:
        content:
          CSharp: public void Leave(ICell cell)
          VB: Public Sub Leave(cell As ICell)
        parameters:
        - id: cell
          type: Cephei.Cell.ICell
      overload: Cephei.Cell.Session.Leave*
      implements:
      - Cephei.Cell.ISession.Leave(Cephei.Cell.ICell)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Session.SetValue``1(Cephei.Cell.ICell,``0)
      commentId: M:Cephei.Cell.Session.SetValue``1(Cephei.Cell.ICell,``0)
      language: CSharp
      name:
        CSharp: SetValue<T>(ICell, T)
        VB: SetValue(Of T)(ICell, T)
      nameWithType:
        CSharp: Session.SetValue<T>(ICell, T)
        VB: Session.SetValue(Of T)(ICell, T)
      qualifiedName:
        CSharp: Cephei.Cell.Session.SetValue<T>(Cephei.Cell.ICell, T)
        VB: Cephei.Cell.Session.SetValue(Of T)(Cephei.Cell.ICell, T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: SetValue
        path: ../Cephei.Cell/Session.cs
        startLine: 110
      syntax:
        content:
          CSharp: public void SetValue<T>(ICell cell, T value)
          VB: Public Sub SetValue(Of T)(cell As ICell, value As T)
        parameters:
        - id: cell
          type: Cephei.Cell.ICell
        - id: value
          type: '{T}'
        typeParameters:
        - id: T
      overload: Cephei.Cell.Session.SetValue*
      implements:
      - Cephei.Cell.ISession.SetValue``1(Cephei.Cell.ICell,{T})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Session.Dispose
      commentId: M:Cephei.Cell.Session.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: Session.Dispose()
        VB: Session.Dispose()
      qualifiedName:
        CSharp: Cephei.Cell.Session.Dispose()
        VB: Cephei.Cell.Session.Dispose()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dispose
        path: ../Cephei.Cell/Session.cs
        startLine: 117
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Cephei.Cell.Session.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Session.Calculate
      commentId: M:Cephei.Cell.Session.Calculate
      language: CSharp
      name:
        CSharp: Calculate()
        VB: Calculate()
      nameWithType:
        CSharp: Session.Calculate()
        VB: Session.Calculate()
      qualifiedName:
        CSharp: Cephei.Cell.Session.Calculate()
        VB: Cephei.Cell.Session.Calculate()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Calculate
        path: ../Cephei.Cell/Session.cs
        startLine: 121
      syntax:
        content:
          CSharp: public void Calculate()
          VB: Public Sub Calculate
      overload: Cephei.Cell.Session.Calculate*
      implements:
      - Cephei.Cell.ISession.Calculate
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Session.GetEnumerator
      commentId: M:Cephei.Cell.Session.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: Session.GetEnumerator()
        VB: Session.GetEnumerator()
      qualifiedName:
        CSharp: Cephei.Cell.Session.GetEnumerator()
        VB: Cephei.Cell.Session.GetEnumerator()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: GetEnumerator
        path: ../Cephei.Cell/Session.cs
        startLine: 131
      syntax:
        content:
          CSharp: public IEnumerator<ICell> GetEnumerator()
          VB: Public Function GetEnumerator As IEnumerator(Of ICell)
        return:
          type: IEnumerator{Cephei.Cell.ICell}
      overload: Cephei.Cell.Session.GetEnumerator*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Cephei.Cell.SessionStream
    commentId: T:Cephei.Cell.SessionStream
    language: CSharp
    name:
      CSharp: SessionStream
      VB: SessionStream
    nameWithType:
      CSharp: SessionStream
      VB: SessionStream
    qualifiedName:
      CSharp: Cephei.Cell.SessionStream
      VB: Cephei.Cell.SessionStream
    type: Class
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell
    source:
      remote:
        path: Cephei.Cell/Session.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: SessionStream
      path: ../Cephei.Cell/Session.cs
      startLine: 150
    summary: "\nSessionStream is designed for overlapping sessions, where a new session is started whenever the cureent session completes\nUsefull for real-time risk where the end of a compute intensive calculation triggers the begining of a new one\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SessionStream : object, ISession, IDisposable, IEnumerable<ICell>'
        VB: >-
          Public Class SessionStream

              Inherits Object

              Implements ISession, IDisposable, IEnumerable(Of ICell)
    inheritance:
    - System.Object
    implements:
    - Cephei.Cell.ISession
    - IDisposable
    - IEnumerable{Cephei.Cell.ICell}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Cephei.Cell.SessionStream.#ctor(System.String)
      commentId: M:Cephei.Cell.SessionStream.#ctor(System.String)
      language: CSharp
      name:
        CSharp: SessionStream(String)
        VB: SessionStream(String)
      nameWithType:
        CSharp: SessionStream.SessionStream(String)
        VB: SessionStream.SessionStream(String)
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.SessionStream(System.String)
        VB: Cephei.Cell.SessionStream.SessionStream(System.String)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Session.cs
        startLine: 155
      syntax:
        content:
          CSharp: public SessionStream(string mnemonic)
          VB: Public Sub New(mnemonic As String)
        parameters:
        - id: mnemonic
          type: System.String
      overload: Cephei.Cell.SessionStream.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.SessionStream.Current
      commentId: P:Cephei.Cell.SessionStream.Current
      language: CSharp
      name:
        CSharp: Current
        VB: Current
      nameWithType:
        CSharp: SessionStream.Current
        VB: SessionStream.Current
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.Current
        VB: Cephei.Cell.SessionStream.Current
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Current
        path: ../Cephei.Cell/Session.cs
        startLine: 165
      syntax:
        content:
          CSharp: public ISession Current { get; }
          VB: Public ReadOnly Property Current As ISession
        parameters: []
        return:
          type: Cephei.Cell.ISession
      overload: Cephei.Cell.SessionStream.Current*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.SessionStream.State
      commentId: P:Cephei.Cell.SessionStream.State
      language: CSharp
      name:
        CSharp: State
        VB: State
      nameWithType:
        CSharp: SessionStream.State
        VB: SessionStream.State
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.State
        VB: Cephei.Cell.SessionStream.State
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: State
        path: ../Cephei.Cell/Session.cs
        startLine: 167
      syntax:
        content:
          CSharp: public SessionState State { get; }
          VB: Public ReadOnly Property State As SessionState
        parameters: []
        return:
          type: Cephei.Cell.SessionState
      overload: Cephei.Cell.SessionStream.State*
      implements:
      - Cephei.Cell.ISession.State
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.SessionStream.Mnemonic
      commentId: P:Cephei.Cell.SessionStream.Mnemonic
      language: CSharp
      name:
        CSharp: Mnemonic
        VB: Mnemonic
      nameWithType:
        CSharp: SessionStream.Mnemonic
        VB: SessionStream.Mnemonic
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.Mnemonic
        VB: Cephei.Cell.SessionStream.Mnemonic
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Mnemonic
        path: ../Cephei.Cell/Session.cs
        startLine: 169
      syntax:
        content:
          CSharp: public string Mnemonic { get; }
          VB: Public ReadOnly Property Mnemonic As String
        parameters: []
        return:
          type: System.String
      overload: Cephei.Cell.SessionStream.Mnemonic*
      implements:
      - Cephei.Cell.ISession.Mnemonic
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.SessionStream.Epoch
      commentId: P:Cephei.Cell.SessionStream.Epoch
      language: CSharp
      name:
        CSharp: Epoch
        VB: Epoch
      nameWithType:
        CSharp: SessionStream.Epoch
        VB: SessionStream.Epoch
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.Epoch
        VB: Cephei.Cell.SessionStream.Epoch
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Epoch
        path: ../Cephei.Cell/Session.cs
        startLine: 171
      syntax:
        content:
          CSharp: public DateTime Epoch { get; }
          VB: Public ReadOnly Property Epoch As DateTime
        parameters: []
        return:
          type: DateTime
      overload: Cephei.Cell.SessionStream.Epoch*
      implements:
      - Cephei.Cell.ISession.Epoch
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.SessionStream.Size
      commentId: P:Cephei.Cell.SessionStream.Size
      language: CSharp
      name:
        CSharp: Size
        VB: Size
      nameWithType:
        CSharp: SessionStream.Size
        VB: SessionStream.Size
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.Size
        VB: Cephei.Cell.SessionStream.Size
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Size
        path: ../Cephei.Cell/Session.cs
        startLine: 173
      syntax:
        content:
          CSharp: public int Size { get; }
          VB: Public ReadOnly Property Size As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Cephei.Cell.SessionStream.Size*
      implements:
      - Cephei.Cell.ISession.Size
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.SessionStream.PercentComplete
      commentId: P:Cephei.Cell.SessionStream.PercentComplete
      language: CSharp
      name:
        CSharp: PercentComplete
        VB: PercentComplete
      nameWithType:
        CSharp: SessionStream.PercentComplete
        VB: SessionStream.PercentComplete
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.PercentComplete
        VB: Cephei.Cell.SessionStream.PercentComplete
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: PercentComplete
        path: ../Cephei.Cell/Session.cs
        startLine: 175
      syntax:
        content:
          CSharp: public double PercentComplete { get; }
          VB: Public ReadOnly Property PercentComplete As Double
        parameters: []
        return:
          type: System.Double
      overload: Cephei.Cell.SessionStream.PercentComplete*
      implements:
      - Cephei.Cell.ISession.PercentComplete
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.SessionStream.Complete
      commentId: E:Cephei.Cell.SessionStream.Complete
      language: CSharp
      name:
        CSharp: Complete
        VB: Complete
      nameWithType:
        CSharp: SessionStream.Complete
        VB: SessionStream.Complete
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.Complete
        VB: Cephei.Cell.SessionStream.Complete
      type: Event
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Complete
        path: ../Cephei.Cell/Session.cs
        startLine: 177
      syntax:
        content:
          CSharp: public event SessionComplete Complete
          VB: Public Event Complete As SessionComplete
        return:
          type: Cephei.Cell.SessionComplete
      implements:
      - Cephei.Cell.ISession.Complete
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.SessionStream.Calculate
      commentId: M:Cephei.Cell.SessionStream.Calculate
      language: CSharp
      name:
        CSharp: Calculate()
        VB: Calculate()
      nameWithType:
        CSharp: SessionStream.Calculate()
        VB: SessionStream.Calculate()
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.Calculate()
        VB: Cephei.Cell.SessionStream.Calculate()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Calculate
        path: ../Cephei.Cell/Session.cs
        startLine: 179
      syntax:
        content:
          CSharp: public void Calculate()
          VB: Public Sub Calculate
      overload: Cephei.Cell.SessionStream.Calculate*
      implements:
      - Cephei.Cell.ISession.Calculate
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.SessionStream.Dispose
      commentId: M:Cephei.Cell.SessionStream.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: SessionStream.Dispose()
        VB: SessionStream.Dispose()
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.Dispose()
        VB: Cephei.Cell.SessionStream.Dispose()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dispose
        path: ../Cephei.Cell/Session.cs
        startLine: 184
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Cephei.Cell.SessionStream.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.SessionStream.GetValue``1(Cephei.Cell.ICell,``0@)
      commentId: M:Cephei.Cell.SessionStream.GetValue``1(Cephei.Cell.ICell,``0@)
      language: CSharp
      name:
        CSharp: GetValue<T>(ICell, ref T)
        VB: GetValue(Of T)(ICell, ByRef T)
      nameWithType:
        CSharp: SessionStream.GetValue<T>(ICell, ref T)
        VB: SessionStream.GetValue(Of T)(ICell, ByRef T)
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.GetValue<T>(Cephei.Cell.ICell, ref T)
        VB: Cephei.Cell.SessionStream.GetValue(Of T)(Cephei.Cell.ICell, ByRef T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: GetValue
        path: ../Cephei.Cell/Session.cs
        startLine: 189
      syntax:
        content:
          CSharp: public bool GetValue<T>(ICell cell, ref T value)
          VB: Public Function GetValue(Of T)(cell As ICell, ByRef value As T) As Boolean
        parameters:
        - id: cell
          type: Cephei.Cell.ICell
        - id: value
          type: '{T}'
        typeParameters:
        - id: T
        return:
          type: System.Boolean
      overload: Cephei.Cell.SessionStream.GetValue*
      implements:
      - Cephei.Cell.ISession.GetValue``1(Cephei.Cell.ICell,{T}@)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.SessionStream.HasJoined(Cephei.Cell.ICell)
      commentId: M:Cephei.Cell.SessionStream.HasJoined(Cephei.Cell.ICell)
      language: CSharp
      name:
        CSharp: HasJoined(ICell)
        VB: HasJoined(ICell)
      nameWithType:
        CSharp: SessionStream.HasJoined(ICell)
        VB: SessionStream.HasJoined(ICell)
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.HasJoined(Cephei.Cell.ICell)
        VB: Cephei.Cell.SessionStream.HasJoined(Cephei.Cell.ICell)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasJoined
        path: ../Cephei.Cell/Session.cs
        startLine: 197
      syntax:
        content:
          CSharp: public bool HasJoined(ICell cell)
          VB: Public Function HasJoined(cell As ICell) As Boolean
        parameters:
        - id: cell
          type: Cephei.Cell.ICell
        return:
          type: System.Boolean
      overload: Cephei.Cell.SessionStream.HasJoined*
      implements:
      - Cephei.Cell.ISession.HasJoined(Cephei.Cell.ICell)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.SessionStream.Join(Cephei.Cell.ICell)
      commentId: M:Cephei.Cell.SessionStream.Join(Cephei.Cell.ICell)
      language: CSharp
      name:
        CSharp: Join(ICell)
        VB: Join(ICell)
      nameWithType:
        CSharp: SessionStream.Join(ICell)
        VB: SessionStream.Join(ICell)
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.Join(Cephei.Cell.ICell)
        VB: Cephei.Cell.SessionStream.Join(Cephei.Cell.ICell)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Join
        path: ../Cephei.Cell/Session.cs
        startLine: 205
      syntax:
        content:
          CSharp: public void Join(ICell cell)
          VB: Public Sub Join(cell As ICell)
        parameters:
        - id: cell
          type: Cephei.Cell.ICell
      overload: Cephei.Cell.SessionStream.Join*
      implements:
      - Cephei.Cell.ISession.Join(Cephei.Cell.ICell)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.SessionStream.Leave(Cephei.Cell.ICell)
      commentId: M:Cephei.Cell.SessionStream.Leave(Cephei.Cell.ICell)
      language: CSharp
      name:
        CSharp: Leave(ICell)
        VB: Leave(ICell)
      nameWithType:
        CSharp: SessionStream.Leave(ICell)
        VB: SessionStream.Leave(ICell)
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.Leave(Cephei.Cell.ICell)
        VB: Cephei.Cell.SessionStream.Leave(Cephei.Cell.ICell)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Leave
        path: ../Cephei.Cell/Session.cs
        startLine: 213
      syntax:
        content:
          CSharp: public void Leave(ICell cell)
          VB: Public Sub Leave(cell As ICell)
        parameters:
        - id: cell
          type: Cephei.Cell.ICell
      overload: Cephei.Cell.SessionStream.Leave*
      implements:
      - Cephei.Cell.ISession.Leave(Cephei.Cell.ICell)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.SessionStream.SetValue``1(Cephei.Cell.ICell,``0)
      commentId: M:Cephei.Cell.SessionStream.SetValue``1(Cephei.Cell.ICell,``0)
      language: CSharp
      name:
        CSharp: SetValue<T>(ICell, T)
        VB: SetValue(Of T)(ICell, T)
      nameWithType:
        CSharp: SessionStream.SetValue<T>(ICell, T)
        VB: SessionStream.SetValue(Of T)(ICell, T)
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.SetValue<T>(Cephei.Cell.ICell, T)
        VB: Cephei.Cell.SessionStream.SetValue(Of T)(Cephei.Cell.ICell, T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: SetValue
        path: ../Cephei.Cell/Session.cs
        startLine: 221
      syntax:
        content:
          CSharp: public void SetValue<T>(ICell cell, T value)
          VB: Public Sub SetValue(Of T)(cell As ICell, value As T)
        parameters:
        - id: cell
          type: Cephei.Cell.ICell
        - id: value
          type: '{T}'
        typeParameters:
        - id: T
      overload: Cephei.Cell.SessionStream.SetValue*
      implements:
      - Cephei.Cell.ISession.SetValue``1(Cephei.Cell.ICell,{T})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.SessionStream.GetEnumerator
      commentId: M:Cephei.Cell.SessionStream.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: SessionStream.GetEnumerator()
        VB: SessionStream.GetEnumerator()
      qualifiedName:
        CSharp: Cephei.Cell.SessionStream.GetEnumerator()
        VB: Cephei.Cell.SessionStream.GetEnumerator()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell
      source:
        remote:
          path: Cephei.Cell/Session.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: GetEnumerator
        path: ../Cephei.Cell/Session.cs
        startLine: 237
      syntax:
        content:
          CSharp: public IEnumerator<ICell> GetEnumerator()
          VB: Public Function GetEnumerator As IEnumerator(Of ICell)
        return:
          type: IEnumerator{Cephei.Cell.ICell}
      overload: Cephei.Cell.SessionStream.GetEnumerator*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: Cephei.Cell.Generic
  commentId: N:Cephei.Cell.Generic
  language: CSharp
  name:
    CSharp: Cephei.Cell.Generic
    VB: Cephei.Cell.Generic
  nameWithType:
    CSharp: Cephei.Cell.Generic
    VB: Cephei.Cell.Generic
  qualifiedName:
    CSharp: Cephei.Cell.Generic
    VB: Cephei.Cell.Generic
  type: Namespace
  assemblies:
  - Cephei - Backup.Cell
  modifiers: {}
  items:
  - id: Cephei.Cell.Generic.Cell`1
    commentId: T:Cephei.Cell.Generic.Cell`1
    language: CSharp
    name:
      CSharp: Cell<T>
      VB: Cell(Of T)
    nameWithType:
      CSharp: Cell<T>
      VB: Cell(Of T)
    qualifiedName:
      CSharp: Cephei.Cell.Generic.Cell<T>
      VB: Cephei.Cell.Generic.Cell(Of T)
    type: Class
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell.Generic
    source:
      remote:
        path: Cephei.Cell/Generic/Cell.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: Cell
      path: ../Cephei.Cell/Generic/Cell.cs
      startLine: 30
    summary: "\nCell is a generic holder (<em>like lazy</em>), but the value is dependant on the\nfunctional relationship to the values that it is derived from. Irrespective of\nthe current value of the referenced cells, this cell&apos;s value will always\nreflect the value of its underling values.\nFor <em>x = f (y)</em> the formula <em>f </em>is treated as a relationship of the\nset of values of <em>x</em> that are related to the set of values of <em>y</em> by\nthe relationship <em>f</em>\n\nThe paradigm  is that of a spreadsheet that automatically recalculates, but\nwith the addition that the calculation is performed asynchronously in parallel\nfor large models.\n\ncells are best used when the function captures compute intensive calculations\n(like an PV function for a derivative contract.\n\nIf the model contains a thousand different possible values for an interest rate,\nthe model can define 1000 NPV functions and a cell that with the average\nexposure and the 95% confidence value of potential exposure.  When valued most\ncalculations will be performed in parallel.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Cell<T> : object, ICell<T>, ICell, ICellEvent, IObservable<T>, IObservable<KeyValuePair<ISession, KeyValuePair<string, T>>>, IObservable<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>, IObserver<T>'
        VB: >-
          Public Class Cell(Of T)

              Inherits Object

              Implements ICell(Of T), ICell, ICellEvent, IObservable(Of T), IObservable(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))), IObservable(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)), IObserver(Of T)
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - Cephei.Cell.Generic.ICell{{T}}
    - Cephei.Cell.ICell
    - Cephei.Cell.ICellEvent
    - IObservable{{T}}
    - IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
    - IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
    - IObserver{{T}}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Cephei.Cell.Generic.Cell`1.Mnemonic
      commentId: P:Cephei.Cell.Generic.Cell`1.Mnemonic
      language: CSharp
      name:
        CSharp: Mnemonic
        VB: Mnemonic
      nameWithType:
        CSharp: Cell<T>.Mnemonic
        VB: Cell(Of T).Mnemonic
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.Mnemonic
        VB: Cephei.Cell.Generic.Cell(Of T).Mnemonic
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Mnemonic
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 87
      syntax:
        content:
          CSharp: public string Mnemonic { get; set; }
          VB: Public Property Mnemonic As String
        parameters: []
        return:
          type: System.String
      overload: Cephei.Cell.Generic.Cell`1.Mnemonic*
      implements:
      - Cephei.Cell.ICell.Mnemonic
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Generic.Cell`1.Parent
      commentId: P:Cephei.Cell.Generic.Cell`1.Parent
      language: CSharp
      name:
        CSharp: Parent
        VB: Parent
      nameWithType:
        CSharp: Cell<T>.Parent
        VB: Cell(Of T).Parent
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.Parent
        VB: Cephei.Cell.Generic.Cell(Of T).Parent
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Parent
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 88
      syntax:
        content:
          CSharp: public ICell Parent { get; set; }
          VB: Public Property Parent As ICell
        parameters: []
        return:
          type: Cephei.Cell.ICell
      overload: Cephei.Cell.Generic.Cell`1.Parent*
      implements:
      - Cephei.Cell.ICell.Parent
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Generic.Cell`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0})
      commentId: M:Cephei.Cell.Generic.Cell`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0})
      language: CSharp
      name:
        CSharp: Cell(FSharpFunc<Unit, T>)
        VB: Cell(FSharpFunc(Of Unit, T))
      nameWithType:
        CSharp: Cell<T>.Cell(FSharpFunc<Unit, T>)
        VB: Cell(Of T).Cell(FSharpFunc(Of Unit, T))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.Cell(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>)
        VB: Cephei.Cell.Generic.Cell(Of T).Cell(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T))
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 96
      syntax:
        content:
          CSharp: public Cell(FSharpFunc<Unit, T> func)
          VB: Public Sub New(func As FSharpFunc(Of Unit, T))
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
      overload: Cephei.Cell.Generic.Cell`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Cell`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0},System.String)
      commentId: M:Cephei.Cell.Generic.Cell`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0},System.String)
      language: CSharp
      name:
        CSharp: Cell(FSharpFunc<Unit, T>, String)
        VB: Cell(FSharpFunc(Of Unit, T), String)
      nameWithType:
        CSharp: Cell<T>.Cell(FSharpFunc<Unit, T>, String)
        VB: Cell(Of T).Cell(FSharpFunc(Of Unit, T), String)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.Cell(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>, System.String)
        VB: Cephei.Cell.Generic.Cell(Of T).Cell(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T), System.String)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 109
      summary: "\nCreate a cell with a mnemonic reference\n"
      example: []
      syntax:
        content:
          CSharp: public Cell(FSharpFunc<Unit, T> func, string mnemonic)
          VB: Public Sub New(func As FSharpFunc(Of Unit, T), mnemonic As String)
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
          description: ''
        - id: mnemonic
          type: System.String
          description: ''
      overload: Cephei.Cell.Generic.Cell`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Cell`1.#ctor(`0)
      commentId: M:Cephei.Cell.Generic.Cell`1.#ctor(`0)
      language: CSharp
      name:
        CSharp: Cell(T)
        VB: Cell(T)
      nameWithType:
        CSharp: Cell<T>.Cell(T)
        VB: Cell(Of T).Cell(T)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.Cell(T)
        VB: Cephei.Cell.Generic.Cell(Of T).Cell(T)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 117
      summary: "\nCretate a cell with a a mutable value\n"
      example: []
      syntax:
        content:
          CSharp: public Cell(T value)
          VB: Public Sub New(value As T)
        parameters:
        - id: value
          type: '{T}'
          description: ''
      overload: Cephei.Cell.Generic.Cell`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Cell`1.#ctor(`0,System.String)
      commentId: M:Cephei.Cell.Generic.Cell`1.#ctor(`0,System.String)
      language: CSharp
      name:
        CSharp: Cell(T, String)
        VB: Cell(T, String)
      nameWithType:
        CSharp: Cell<T>.Cell(T, String)
        VB: Cell(Of T).Cell(T, String)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.Cell(T, System.String)
        VB: Cephei.Cell.Generic.Cell(Of T).Cell(T, System.String)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 127
      summary: "\nCreate a Cell with a value and a memonic reference\n"
      example: []
      syntax:
        content:
          CSharp: public Cell(T value, string mnemonic)
          VB: Public Sub New(value As T, mnemonic As String)
        parameters:
        - id: value
          type: '{T}'
          description: ''
        - id: mnemonic
          type: System.String
          description: ''
      overload: Cephei.Cell.Generic.Cell`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Cell`1.GetValue(System.Int32)
      commentId: M:Cephei.Cell.Generic.Cell`1.GetValue(System.Int32)
      language: CSharp
      name:
        CSharp: GetValue(Int32)
        VB: GetValue(Int32)
      nameWithType:
        CSharp: Cell<T>.GetValue(Int32)
        VB: Cell(Of T).GetValue(Int32)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.GetValue(System.Int32)
        VB: Cephei.Cell.Generic.Cell(Of T).GetValue(System.Int32)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: GetValue
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 276
      summary: "\nInternal function used by Value property to get the current value of a Cell.\nThis is a function to allow for lock contention and to retry if the state has\nchanged whilst waiting.\nIf the cell is dirty when a value is required, the caculate function is called\n"
      example: []
      syntax:
        content:
          CSharp: public T GetValue(int recurse)
          VB: Public Function GetValue(recurse As Integer) As T
        parameters:
        - id: recurse
          type: System.Int32
          description: ''
        return:
          type: '{T}'
      overload: Cephei.Cell.Generic.Cell`1.GetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Cell`1.Value
      commentId: P:Cephei.Cell.Generic.Cell`1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: Cell<T>.Value
        VB: Cell(Of T).Value
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.Value
        VB: Cephei.Cell.Generic.Cell(Of T).Value
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Value
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 342
      syntax:
        content:
          CSharp: public T Value { get; set; }
          VB: Public Property Value As T
        parameters: []
        return:
          type: '{T}'
      overload: Cephei.Cell.Generic.Cell`1.Value*
      implements:
      - Cephei.Cell.Generic.ICell{{T}}.Value
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Generic.Cell`1.Dependants
      commentId: P:Cephei.Cell.Generic.Cell`1.Dependants
      language: CSharp
      name:
        CSharp: Dependants
        VB: Dependants
      nameWithType:
        CSharp: Cell<T>.Dependants
        VB: Cell(Of T).Dependants
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.Dependants
        VB: Cephei.Cell.Generic.Cell(Of T).Dependants
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dependants
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 383
      syntax:
        content:
          CSharp: public IEnumerable<ICellEvent> Dependants { get; }
          VB: Public ReadOnly Property Dependants As IEnumerable(Of ICellEvent)
        parameters: []
        return:
          type: IEnumerable{Cephei.Cell.ICellEvent}
      overload: Cephei.Cell.Generic.Cell`1.Dependants*
      implements:
      - Cephei.Cell.ICell.Dependants
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.Generic.Cell`1.Change
      commentId: E:Cephei.Cell.Generic.Cell`1.Change
      language: CSharp
      name:
        CSharp: Change
        VB: Change
      nameWithType:
        CSharp: Cell<T>.Change
        VB: Cell(Of T).Change
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.Change
        VB: Cephei.Cell.Generic.Cell(Of T).Change
      type: Event
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Change
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 402
      syntax:
        content:
          CSharp: public event CellChange Change
          VB: Public Event Change As CellChange
        return:
          type: Cephei.Cell.CellChange
      implements:
      - Cephei.Cell.ICell.Change
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Cell`1.Dispose
      commentId: M:Cephei.Cell.Generic.Cell`1.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: Cell<T>.Dispose()
        VB: Cell(Of T).Dispose()
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.Dispose()
        VB: Cephei.Cell.Generic.Cell(Of T).Dispose()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dispose
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 404
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Cephei.Cell.Generic.Cell`1.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Cell`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      commentId: M:Cephei.Cell.Generic.Cell`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      language: CSharp
      name:
        CSharp: OnChange(CellEvent, ICellEvent, DateTime, ISession)
        VB: OnChange(CellEvent, ICellEvent, DateTime, ISession)
      nameWithType:
        CSharp: Cell<T>.OnChange(CellEvent, ICellEvent, DateTime, ISession)
        VB: Cell(Of T).OnChange(CellEvent, ICellEvent, DateTime, ISession)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
        VB: Cephei.Cell.Generic.Cell(Of T).OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnChange
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 439
      syntax:
        content:
          CSharp: public virtual void OnChange(CellEvent eventType, ICellEvent root, DateTime epoch, ISession session)
          VB: Public Overridable Sub OnChange(eventType As CellEvent, root As ICellEvent, epoch As DateTime, session As ISession)
        parameters:
        - id: eventType
          type: Cephei.Cell.CellEvent
        - id: root
          type: Cephei.Cell.ICellEvent
        - id: epoch
          type: DateTime
        - id: session
          type: Cephei.Cell.ISession
      overload: Cephei.Cell.Generic.Cell`1.OnChange*
      implements:
      - Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Cephei.Cell.Generic.Cell`1.HasFunction
      commentId: P:Cephei.Cell.Generic.Cell`1.HasFunction
      language: CSharp
      name:
        CSharp: HasFunction
        VB: HasFunction
      nameWithType:
        CSharp: Cell<T>.HasFunction
        VB: Cell(Of T).HasFunction
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.HasFunction
        VB: Cephei.Cell.Generic.Cell(Of T).HasFunction
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasFunction
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 497
      example: []
      syntax:
        content:
          CSharp: public bool HasFunction { get; }
          VB: Public ReadOnly Property HasFunction As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Cephei.Cell.Generic.Cell`1.HasFunction*
      see:
      - linkId: Cephei.Cell.ICell.HasFunction
        commentId: P:Cephei.Cell.ICell.HasFunction
      implements:
      - Cephei.Cell.ICell.HasFunction
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Cephei.Cell.ICell.HasFunction: 
    - id: Cephei.Cell.Generic.Cell`1.HasValue
      commentId: P:Cephei.Cell.Generic.Cell`1.HasValue
      language: CSharp
      name:
        CSharp: HasValue
        VB: HasValue
      nameWithType:
        CSharp: Cell<T>.HasValue
        VB: Cell(Of T).HasValue
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.HasValue
        VB: Cephei.Cell.Generic.Cell(Of T).HasValue
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasValue
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 499
      example: []
      syntax:
        content:
          CSharp: public bool HasValue { get; }
          VB: Public ReadOnly Property HasValue As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Cephei.Cell.Generic.Cell`1.HasValue*
      see:
      - linkId: Cephei.Cell.ICell.HasValue
        commentId: P:Cephei.Cell.ICell.HasValue
      implements:
      - Cephei.Cell.ICell.HasValue
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Cephei.Cell.ICell.HasValue: 
    - id: Cephei.Cell.Generic.Cell`1.Box
      commentId: P:Cephei.Cell.Generic.Cell`1.Box
      language: CSharp
      name:
        CSharp: Box
        VB: Box
      nameWithType:
        CSharp: Cell<T>.Box
        VB: Cell(Of T).Box
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.Box
        VB: Cephei.Cell.Generic.Cell(Of T).Box
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Box
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 502
      example: []
      syntax:
        content:
          CSharp: public object Box { get; set; }
          VB: Public Property Box As Object
        parameters: []
        return:
          type: System.Object
      overload: Cephei.Cell.Generic.Cell`1.Box*
      see:
      - linkId: Cephei.Cell.ICell.Box
        commentId: P:Cephei.Cell.ICell.Box
      implements:
      - Cephei.Cell.ICell.Box
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Cephei.Cell.ICell.Box: 
    - id: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{`0})
      commentId: M:Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{`0})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<T>)
        VB: Subscribe(IObserver(Of T))
      nameWithType:
        CSharp: Cell<T>.Subscribe(IObserver<T>)
        VB: Cell(Of T).Subscribe(IObserver(Of T))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.Subscribe(IObserver<T>)
        VB: Cephei.Cell.Generic.Cell(Of T).Subscribe(IObserver(Of T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 515
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<T> observer)
          VB: Public Function Subscribe(observer As IObserver(Of T)) As IDisposable
        parameters:
        - id: observer
          type: IObserver{{T}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Generic.Cell`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
      commentId: M:Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>)
        VB: Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))))
      nameWithType:
        CSharp: Cell<T>.Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>)
        VB: Cell(Of T).Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.Subscribe(IObserver<KeyValuePair<Cephei.Cell.ISession, KeyValuePair<System.String, T>>>)
        VB: Cephei.Cell.Generic.Cell(Of T).Subscribe(IObserver(Of KeyValuePair(Of Cephei.Cell.ISession, KeyValuePair(Of System.String, T))))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 521
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<string, T>>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T)))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Generic.Cell`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
      commentId: M:Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>)
        VB: Subscribe(IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)))
      nameWithType:
        CSharp: Cell<T>.Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>)
        VB: Cell(Of T).Subscribe(IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.Subscribe(IObserver<Tuple<Cephei.Cell.ISession, Cephei.Cell.Generic.ICell<T>, Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime>>)
        VB: Cephei.Cell.Generic.Cell(Of T).Subscribe(IObserver(Of Tuple(Of Cephei.Cell.ISession, Cephei.Cell.Generic.ICell(Of T), Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime)))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 527
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Generic.Cell`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Cell`1.OnCompleted
      commentId: M:Cephei.Cell.Generic.Cell`1.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: Cell<T>.OnCompleted()
        VB: Cell(Of T).OnCompleted()
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.OnCompleted()
        VB: Cephei.Cell.Generic.Cell(Of T).OnCompleted()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnCompleted
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 534
      syntax:
        content:
          CSharp: public void OnCompleted()
          VB: Public Sub OnCompleted
      overload: Cephei.Cell.Generic.Cell`1.OnCompleted*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Cell`1.OnError(Exception)
      commentId: M:Cephei.Cell.Generic.Cell`1.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: Cell<T>.OnError(Exception)
        VB: Cell(Of T).OnError(Exception)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.OnError(Exception)
        VB: Cephei.Cell.Generic.Cell(Of T).OnError(Exception)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnError
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 538
      syntax:
        content:
          CSharp: public void OnError(Exception error)
          VB: Public Sub OnError(error As Exception)
        parameters:
        - id: error
          type: Exception
      overload: Cephei.Cell.Generic.Cell`1.OnError*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Cell`1.OnNext(`0)
      commentId: M:Cephei.Cell.Generic.Cell`1.OnNext(`0)
      language: CSharp
      name:
        CSharp: OnNext(T)
        VB: OnNext(T)
      nameWithType:
        CSharp: Cell<T>.OnNext(T)
        VB: Cell(Of T).OnNext(T)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Cell<T>.OnNext(T)
        VB: Cephei.Cell.Generic.Cell(Of T).OnNext(T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/Cell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnNext
        path: ../Cephei.Cell/Generic/Cell.cs
        startLine: 544
      syntax:
        content:
          CSharp: public void OnNext(T value)
          VB: Public Sub OnNext(value As T)
        parameters:
        - id: value
          type: '{T}'
      overload: Cephei.Cell.Generic.Cell`1.OnNext*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Cephei.Cell.Generic.CellEmpty`1
    commentId: T:Cephei.Cell.Generic.CellEmpty`1
    language: CSharp
    name:
      CSharp: CellEmpty<T>
      VB: CellEmpty(Of T)
    nameWithType:
      CSharp: CellEmpty<T>
      VB: CellEmpty(Of T)
    qualifiedName:
      CSharp: Cephei.Cell.Generic.CellEmpty<T>
      VB: Cephei.Cell.Generic.CellEmpty(Of T)
    type: Class
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell.Generic
    source:
      remote:
        path: Cephei.Cell/Generic/CellEmpty.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: CellEmpty
      path: ../Cephei.Cell/Generic/CellEmpty.cs
      startLine: 13
    summary: "\nHolder class for forward reference of cells before definition\n"
    example: []
    syntax:
      content:
        CSharp: 'public class CellEmpty<T> : Cell<T>, ICell<T>, ICell, ICellEvent, IObservable<T>, IObservable<KeyValuePair<ISession, KeyValuePair<string, T>>>, IObservable<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>, IObserver<T>, ICellEmpty'
        VB: >-
          Public Class CellEmpty(Of T)

              Inherits Cell(Of T)

              Implements ICell(Of T), ICell, ICellEvent, IObservable(Of T), IObservable(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))), IObservable(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)), IObserver(Of T), ICellEmpty
      typeParameters:
      - id: T
        description: type
    inheritance:
    - System.Object
    - Cephei.Cell.Generic.Cell{{T}}
    implements:
    - Cephei.Cell.Generic.ICell{{T}}
    - Cephei.Cell.ICell
    - Cephei.Cell.ICellEvent
    - IObservable{{T}}
    - IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
    - IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
    - IObserver{{T}}
    inheritedMembers:
    - Cephei.Cell.Generic.Cell{{T}}.Mnemonic
    - Cephei.Cell.Generic.Cell{{T}}.Parent
    - Cephei.Cell.Generic.Cell{{T}}.GetValue(System.Int32)
    - Cephei.Cell.Generic.Cell{{T}}.Dependants
    - Cephei.Cell.Generic.Cell{{T}}.Change
    - Cephei.Cell.Generic.Cell{{T}}.Dispose
    - Cephei.Cell.Generic.Cell{{T}}.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
    - Cephei.Cell.Generic.Cell{{T}}.HasFunction
    - Cephei.Cell.Generic.Cell{{T}}.HasValue
    - Cephei.Cell.Generic.Cell{{T}}.Box
    - Cephei.Cell.Generic.Cell{{T}}.Subscribe(IObserver{{T}})
    - Cephei.Cell.Generic.Cell{{T}}.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}})
    - Cephei.Cell.Generic.Cell{{T}}.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
    - Cephei.Cell.Generic.Cell{{T}}.OnCompleted
    - Cephei.Cell.Generic.Cell{{T}}.OnError(Exception)
    - Cephei.Cell.Generic.Cell{{T}}.OnNext({T})
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Cephei.Cell.Generic.CellEmpty`1.#ctor
      commentId: M:Cephei.Cell.Generic.CellEmpty`1.#ctor
      language: CSharp
      name:
        CSharp: CellEmpty()
        VB: CellEmpty()
      nameWithType:
        CSharp: CellEmpty<T>.CellEmpty()
        VB: CellEmpty(Of T).CellEmpty()
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellEmpty<T>.CellEmpty()
        VB: Cephei.Cell.Generic.CellEmpty(Of T).CellEmpty()
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellEmpty.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/CellEmpty.cs
        startLine: 15
      syntax:
        content:
          CSharp: public CellEmpty()
          VB: Public Sub New
      overload: Cephei.Cell.Generic.CellEmpty`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellEmpty`1.#ctor(System.String)
      commentId: M:Cephei.Cell.Generic.CellEmpty`1.#ctor(System.String)
      language: CSharp
      name:
        CSharp: CellEmpty(String)
        VB: CellEmpty(String)
      nameWithType:
        CSharp: CellEmpty<T>.CellEmpty(String)
        VB: CellEmpty(Of T).CellEmpty(String)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellEmpty<T>.CellEmpty(System.String)
        VB: Cephei.Cell.Generic.CellEmpty(Of T).CellEmpty(System.String)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellEmpty.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/CellEmpty.cs
        startLine: 20
      syntax:
        content:
          CSharp: public CellEmpty(string mnemonic)
          VB: Public Sub New(mnemonic As String)
        parameters:
        - id: mnemonic
          type: System.String
      overload: Cephei.Cell.Generic.CellEmpty`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellEmpty`1.Value
      commentId: P:Cephei.Cell.Generic.CellEmpty`1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: CellEmpty<T>.Value
        VB: CellEmpty(Of T).Value
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellEmpty<T>.Value
        VB: Cephei.Cell.Generic.CellEmpty(Of T).Value
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellEmpty.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Value
        path: ../Cephei.Cell/Generic/CellEmpty.cs
        startLine: 25
      syntax:
        content:
          CSharp: public T Value { get; set; }
          VB: Public Property Value As T
        parameters: []
        return:
          type: '{T}'
      overload: Cephei.Cell.Generic.CellEmpty`1.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Cephei.Cell.Generic.CellFast`1
    commentId: T:Cephei.Cell.Generic.CellFast`1
    language: CSharp
    name:
      CSharp: CellFast<T>
      VB: CellFast(Of T)
    nameWithType:
      CSharp: CellFast<T>
      VB: CellFast(Of T)
    qualifiedName:
      CSharp: Cephei.Cell.Generic.CellFast<T>
      VB: Cephei.Cell.Generic.CellFast(Of T)
    type: Class
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell.Generic
    source:
      remote:
        path: Cephei.Cell/Generic/CellFast.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: CellFast
      path: ../Cephei.Cell/Generic/CellFast.cs
      startLine: 31
    syntax:
      content:
        CSharp: 'public class CellFast<T> : object, ICell<T>, ICell, ICellEvent, IObservable<T>, IObservable<KeyValuePair<ISession, KeyValuePair<string, T>>>, IObservable<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>, IObserver<T>'
        VB: >-
          Public Class CellFast(Of T)

              Inherits Object

              Implements ICell(Of T), ICell, ICellEvent, IObservable(Of T), IObservable(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))), IObservable(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)), IObserver(Of T)
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - Cephei.Cell.Generic.ICell{{T}}
    - Cephei.Cell.ICell
    - Cephei.Cell.ICellEvent
    - IObservable{{T}}
    - IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
    - IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
    - IObserver{{T}}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Cephei.Cell.Generic.CellFast`1.Mnemonic
      commentId: P:Cephei.Cell.Generic.CellFast`1.Mnemonic
      language: CSharp
      name:
        CSharp: Mnemonic
        VB: Mnemonic
      nameWithType:
        CSharp: CellFast<T>.Mnemonic
        VB: CellFast(Of T).Mnemonic
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.Mnemonic
        VB: Cephei.Cell.Generic.CellFast(Of T).Mnemonic
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Mnemonic
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 46
      syntax:
        content:
          CSharp: public string Mnemonic { get; set; }
          VB: Public Property Mnemonic As String
        parameters: []
        return:
          type: System.String
      overload: Cephei.Cell.Generic.CellFast`1.Mnemonic*
      implements:
      - Cephei.Cell.ICell.Mnemonic
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellFast`1.Parent
      commentId: P:Cephei.Cell.Generic.CellFast`1.Parent
      language: CSharp
      name:
        CSharp: Parent
        VB: Parent
      nameWithType:
        CSharp: CellFast<T>.Parent
        VB: CellFast(Of T).Parent
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.Parent
        VB: Cephei.Cell.Generic.CellFast(Of T).Parent
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Parent
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 47
      syntax:
        content:
          CSharp: public ICell Parent { get; set; }
          VB: Public Property Parent As ICell
        parameters: []
        return:
          type: Cephei.Cell.ICell
      overload: Cephei.Cell.Generic.CellFast`1.Parent*
      implements:
      - Cephei.Cell.ICell.Parent
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellFast`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0},Cephei.Cell.ICell[])
      commentId: M:Cephei.Cell.Generic.CellFast`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0},Cephei.Cell.ICell[])
      language: CSharp
      name:
        CSharp: CellFast(FSharpFunc<Unit, T>, ICell[])
        VB: CellFast(FSharpFunc(Of Unit, T), ICell())
      nameWithType:
        CSharp: CellFast<T>.CellFast(FSharpFunc<Unit, T>, ICell[])
        VB: CellFast(Of T).CellFast(FSharpFunc(Of Unit, T), ICell())
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.CellFast(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>, Cephei.Cell.ICell[])
        VB: Cephei.Cell.Generic.CellFast(Of T).CellFast(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T), Cephei.Cell.ICell())
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 49
      syntax:
        content:
          CSharp: public CellFast(FSharpFunc<Unit, T> func, ICell[] dependancies)
          VB: Public Sub New(func As FSharpFunc(Of Unit, T), dependancies As ICell())
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
        - id: dependancies
          type: Cephei.Cell.ICell[]
      overload: Cephei.Cell.Generic.CellFast`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellFast`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0},Cephei.Cell.ICell[],System.String)
      commentId: M:Cephei.Cell.Generic.CellFast`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0},Cephei.Cell.ICell[],System.String)
      language: CSharp
      name:
        CSharp: CellFast(FSharpFunc<Unit, T>, ICell[], String)
        VB: CellFast(FSharpFunc(Of Unit, T), ICell(), String)
      nameWithType:
        CSharp: CellFast<T>.CellFast(FSharpFunc<Unit, T>, ICell[], String)
        VB: CellFast(Of T).CellFast(FSharpFunc(Of Unit, T), ICell(), String)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.CellFast(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>, Cephei.Cell.ICell[], System.String)
        VB: Cephei.Cell.Generic.CellFast(Of T).CellFast(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T), Cephei.Cell.ICell(), System.String)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 57
      syntax:
        content:
          CSharp: public CellFast(FSharpFunc<Unit, T> func, ICell[] dependancies, string mnemonic)
          VB: Public Sub New(func As FSharpFunc(Of Unit, T), dependancies As ICell(), mnemonic As String)
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
        - id: dependancies
          type: Cephei.Cell.ICell[]
        - id: mnemonic
          type: System.String
      overload: Cephei.Cell.Generic.CellFast`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellFast`1.#ctor(`0)
      commentId: M:Cephei.Cell.Generic.CellFast`1.#ctor(`0)
      language: CSharp
      name:
        CSharp: CellFast(T)
        VB: CellFast(T)
      nameWithType:
        CSharp: CellFast<T>.CellFast(T)
        VB: CellFast(Of T).CellFast(T)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.CellFast(T)
        VB: Cephei.Cell.Generic.CellFast(Of T).CellFast(T)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 61
      syntax:
        content:
          CSharp: public CellFast(T value)
          VB: Public Sub New(value As T)
        parameters:
        - id: value
          type: '{T}'
      overload: Cephei.Cell.Generic.CellFast`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellFast`1.#ctor(`0,System.String)
      commentId: M:Cephei.Cell.Generic.CellFast`1.#ctor(`0,System.String)
      language: CSharp
      name:
        CSharp: CellFast(T, String)
        VB: CellFast(T, String)
      nameWithType:
        CSharp: CellFast<T>.CellFast(T, String)
        VB: CellFast(Of T).CellFast(T, String)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.CellFast(T, System.String)
        VB: Cephei.Cell.Generic.CellFast(Of T).CellFast(T, System.String)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 66
      syntax:
        content:
          CSharp: public CellFast(T value, string mnemonic)
          VB: Public Sub New(value As T, mnemonic As String)
        parameters:
        - id: value
          type: '{T}'
        - id: mnemonic
          type: System.String
      overload: Cephei.Cell.Generic.CellFast`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellFast`1.GetValue(System.Int32)
      commentId: M:Cephei.Cell.Generic.CellFast`1.GetValue(System.Int32)
      language: CSharp
      name:
        CSharp: GetValue(Int32)
        VB: GetValue(Int32)
      nameWithType:
        CSharp: CellFast<T>.GetValue(Int32)
        VB: CellFast(Of T).GetValue(Int32)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.GetValue(System.Int32)
        VB: Cephei.Cell.Generic.CellFast(Of T).GetValue(System.Int32)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: GetValue
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 143
      syntax:
        content:
          CSharp: public T GetValue(int recurse)
          VB: Public Function GetValue(recurse As Integer) As T
        parameters:
        - id: recurse
          type: System.Int32
        return:
          type: '{T}'
      overload: Cephei.Cell.Generic.CellFast`1.GetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellFast`1.Value
      commentId: P:Cephei.Cell.Generic.CellFast`1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: CellFast<T>.Value
        VB: CellFast(Of T).Value
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.Value
        VB: Cephei.Cell.Generic.CellFast(Of T).Value
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Value
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 210
      syntax:
        content:
          CSharp: public T Value { get; set; }
          VB: Public Property Value As T
        parameters: []
        return:
          type: '{T}'
      overload: Cephei.Cell.Generic.CellFast`1.Value*
      implements:
      - Cephei.Cell.Generic.ICell{{T}}.Value
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellFast`1.Dependants
      commentId: P:Cephei.Cell.Generic.CellFast`1.Dependants
      language: CSharp
      name:
        CSharp: Dependants
        VB: Dependants
      nameWithType:
        CSharp: CellFast<T>.Dependants
        VB: CellFast(Of T).Dependants
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.Dependants
        VB: Cephei.Cell.Generic.CellFast(Of T).Dependants
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dependants
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 246
      syntax:
        content:
          CSharp: public IEnumerable<ICellEvent> Dependants { get; }
          VB: Public ReadOnly Property Dependants As IEnumerable(Of ICellEvent)
        parameters: []
        return:
          type: IEnumerable{Cephei.Cell.ICellEvent}
      overload: Cephei.Cell.Generic.CellFast`1.Dependants*
      implements:
      - Cephei.Cell.ICell.Dependants
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.Generic.CellFast`1.Change
      commentId: E:Cephei.Cell.Generic.CellFast`1.Change
      language: CSharp
      name:
        CSharp: Change
        VB: Change
      nameWithType:
        CSharp: CellFast<T>.Change
        VB: CellFast(Of T).Change
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.Change
        VB: Cephei.Cell.Generic.CellFast(Of T).Change
      type: Event
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Change
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 265
      syntax:
        content:
          CSharp: public event CellChange Change
          VB: Public Event Change As CellChange
        return:
          type: Cephei.Cell.CellChange
      implements:
      - Cephei.Cell.ICell.Change
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellFast`1.Dispose
      commentId: M:Cephei.Cell.Generic.CellFast`1.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: CellFast<T>.Dispose()
        VB: CellFast(Of T).Dispose()
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.Dispose()
        VB: Cephei.Cell.Generic.CellFast(Of T).Dispose()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dispose
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 267
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Cephei.Cell.Generic.CellFast`1.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellFast`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      commentId: M:Cephei.Cell.Generic.CellFast`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      language: CSharp
      name:
        CSharp: OnChange(CellEvent, ICellEvent, DateTime, ISession)
        VB: OnChange(CellEvent, ICellEvent, DateTime, ISession)
      nameWithType:
        CSharp: CellFast<T>.OnChange(CellEvent, ICellEvent, DateTime, ISession)
        VB: CellFast(Of T).OnChange(CellEvent, ICellEvent, DateTime, ISession)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
        VB: Cephei.Cell.Generic.CellFast(Of T).OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnChange
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 302
      syntax:
        content:
          CSharp: public virtual void OnChange(CellEvent eventType, ICellEvent root, DateTime epoch, ISession session)
          VB: Public Overridable Sub OnChange(eventType As CellEvent, root As ICellEvent, epoch As DateTime, session As ISession)
        parameters:
        - id: eventType
          type: Cephei.Cell.CellEvent
        - id: root
          type: Cephei.Cell.ICellEvent
        - id: epoch
          type: DateTime
        - id: session
          type: Cephei.Cell.ISession
      overload: Cephei.Cell.Generic.CellFast`1.OnChange*
      implements:
      - Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Cephei.Cell.Generic.CellFast`1.HasFunction
      commentId: P:Cephei.Cell.Generic.CellFast`1.HasFunction
      language: CSharp
      name:
        CSharp: HasFunction
        VB: HasFunction
      nameWithType:
        CSharp: CellFast<T>.HasFunction
        VB: CellFast(Of T).HasFunction
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.HasFunction
        VB: Cephei.Cell.Generic.CellFast(Of T).HasFunction
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasFunction
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 350
      example: []
      syntax:
        content:
          CSharp: public bool HasFunction { get; }
          VB: Public ReadOnly Property HasFunction As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Cephei.Cell.Generic.CellFast`1.HasFunction*
      see:
      - linkId: Cephei.Cell.ICell.HasFunction
        commentId: P:Cephei.Cell.ICell.HasFunction
      implements:
      - Cephei.Cell.ICell.HasFunction
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Cephei.Cell.ICell.HasFunction: 
    - id: Cephei.Cell.Generic.CellFast`1.HasValue
      commentId: P:Cephei.Cell.Generic.CellFast`1.HasValue
      language: CSharp
      name:
        CSharp: HasValue
        VB: HasValue
      nameWithType:
        CSharp: CellFast<T>.HasValue
        VB: CellFast(Of T).HasValue
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.HasValue
        VB: Cephei.Cell.Generic.CellFast(Of T).HasValue
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasValue
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 352
      example: []
      syntax:
        content:
          CSharp: public bool HasValue { get; }
          VB: Public ReadOnly Property HasValue As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Cephei.Cell.Generic.CellFast`1.HasValue*
      see:
      - linkId: Cephei.Cell.ICell.HasValue
        commentId: P:Cephei.Cell.ICell.HasValue
      implements:
      - Cephei.Cell.ICell.HasValue
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Cephei.Cell.ICell.HasValue: 
    - id: Cephei.Cell.Generic.CellFast`1.Box
      commentId: P:Cephei.Cell.Generic.CellFast`1.Box
      language: CSharp
      name:
        CSharp: Box
        VB: Box
      nameWithType:
        CSharp: CellFast<T>.Box
        VB: CellFast(Of T).Box
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.Box
        VB: Cephei.Cell.Generic.CellFast(Of T).Box
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Box
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 355
      example: []
      syntax:
        content:
          CSharp: public object Box { get; set; }
          VB: Public Property Box As Object
        parameters: []
        return:
          type: System.Object
      overload: Cephei.Cell.Generic.CellFast`1.Box*
      see:
      - linkId: Cephei.Cell.ICell.Box
        commentId: P:Cephei.Cell.ICell.Box
      implements:
      - Cephei.Cell.ICell.Box
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Cephei.Cell.ICell.Box: 
    - id: Cephei.Cell.Generic.CellFast`1.Subscribe(IObserver{`0})
      commentId: M:Cephei.Cell.Generic.CellFast`1.Subscribe(IObserver{`0})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<T>)
        VB: Subscribe(IObserver(Of T))
      nameWithType:
        CSharp: CellFast<T>.Subscribe(IObserver<T>)
        VB: CellFast(Of T).Subscribe(IObserver(Of T))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.Subscribe(IObserver<T>)
        VB: Cephei.Cell.Generic.CellFast(Of T).Subscribe(IObserver(Of T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 368
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<T> observer)
          VB: Public Function Subscribe(observer As IObserver(Of T)) As IDisposable
        parameters:
        - id: observer
          type: IObserver{{T}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Generic.CellFast`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellFast`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
      commentId: M:Cephei.Cell.Generic.CellFast`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>)
        VB: Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))))
      nameWithType:
        CSharp: CellFast<T>.Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>)
        VB: CellFast(Of T).Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.Subscribe(IObserver<KeyValuePair<Cephei.Cell.ISession, KeyValuePair<System.String, T>>>)
        VB: Cephei.Cell.Generic.CellFast(Of T).Subscribe(IObserver(Of KeyValuePair(Of Cephei.Cell.ISession, KeyValuePair(Of System.String, T))))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 374
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<string, T>>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T)))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Generic.CellFast`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellFast`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
      commentId: M:Cephei.Cell.Generic.CellFast`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>)
        VB: Subscribe(IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)))
      nameWithType:
        CSharp: CellFast<T>.Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>)
        VB: CellFast(Of T).Subscribe(IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.Subscribe(IObserver<Tuple<Cephei.Cell.ISession, Cephei.Cell.Generic.ICell<T>, Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime>>)
        VB: Cephei.Cell.Generic.CellFast(Of T).Subscribe(IObserver(Of Tuple(Of Cephei.Cell.ISession, Cephei.Cell.Generic.ICell(Of T), Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime)))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 380
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Generic.CellFast`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellFast`1.OnCompleted
      commentId: M:Cephei.Cell.Generic.CellFast`1.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: CellFast<T>.OnCompleted()
        VB: CellFast(Of T).OnCompleted()
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.OnCompleted()
        VB: Cephei.Cell.Generic.CellFast(Of T).OnCompleted()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnCompleted
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 387
      syntax:
        content:
          CSharp: public void OnCompleted()
          VB: Public Sub OnCompleted
      overload: Cephei.Cell.Generic.CellFast`1.OnCompleted*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellFast`1.OnError(Exception)
      commentId: M:Cephei.Cell.Generic.CellFast`1.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: CellFast<T>.OnError(Exception)
        VB: CellFast(Of T).OnError(Exception)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.OnError(Exception)
        VB: Cephei.Cell.Generic.CellFast(Of T).OnError(Exception)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnError
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 391
      syntax:
        content:
          CSharp: public void OnError(Exception error)
          VB: Public Sub OnError(error As Exception)
        parameters:
        - id: error
          type: Exception
      overload: Cephei.Cell.Generic.CellFast`1.OnError*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellFast`1.OnNext(`0)
      commentId: M:Cephei.Cell.Generic.CellFast`1.OnNext(`0)
      language: CSharp
      name:
        CSharp: OnNext(T)
        VB: OnNext(T)
      nameWithType:
        CSharp: CellFast<T>.OnNext(T)
        VB: CellFast(Of T).OnNext(T)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellFast<T>.OnNext(T)
        VB: Cephei.Cell.Generic.CellFast(Of T).OnNext(T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellFast.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnNext
        path: ../Cephei.Cell/Generic/CellFast.cs
        startLine: 397
      syntax:
        content:
          CSharp: public void OnNext(T value)
          VB: Public Sub OnNext(value As T)
        parameters:
        - id: value
          type: '{T}'
      overload: Cephei.Cell.Generic.CellFast`1.OnNext*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Cephei.Cell.Generic.CellTrivial`1
    commentId: T:Cephei.Cell.Generic.CellTrivial`1
    language: CSharp
    name:
      CSharp: CellTrivial<T>
      VB: CellTrivial(Of T)
    nameWithType:
      CSharp: CellTrivial<T>
      VB: CellTrivial(Of T)
    qualifiedName:
      CSharp: Cephei.Cell.Generic.CellTrivial<T>
      VB: Cephei.Cell.Generic.CellTrivial(Of T)
    type: Class
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell.Generic
    source:
      remote:
        path: Cephei.Cell/Generic/CellITrivial.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: CellTrivial
      path: ../Cephei.Cell/Generic/CellITrivial.cs
      startLine: 13
    summary: "\nCellInline is a variant of Cell that performs calculation inline like a \nnormal function but with Cell samntics\n"
    example: []
    syntax:
      content:
        CSharp: 'public class CellTrivial<T> : object, ICell<T>, ICell, ICellEvent, IObservable<T>, IObservable<KeyValuePair<ISession, KeyValuePair<string, T>>>, IObservable<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>, IObserver<T>'
        VB: >-
          Public Class CellTrivial(Of T)

              Inherits Object

              Implements ICell(Of T), ICell, ICellEvent, IObservable(Of T), IObservable(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))), IObservable(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)), IObserver(Of T)
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - Cephei.Cell.Generic.ICell{{T}}
    - Cephei.Cell.ICell
    - Cephei.Cell.ICellEvent
    - IObservable{{T}}
    - IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
    - IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
    - IObserver{{T}}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Cephei.Cell.Generic.CellTrivial`1.Mnemonic
      commentId: P:Cephei.Cell.Generic.CellTrivial`1.Mnemonic
      language: CSharp
      name:
        CSharp: Mnemonic
        VB: Mnemonic
      nameWithType:
        CSharp: CellTrivial<T>.Mnemonic
        VB: CellTrivial(Of T).Mnemonic
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.Mnemonic
        VB: Cephei.Cell.Generic.CellTrivial(Of T).Mnemonic
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Mnemonic
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 21
      syntax:
        content:
          CSharp: public string Mnemonic { get; set; }
          VB: Public Property Mnemonic As String
        parameters: []
        return:
          type: System.String
      overload: Cephei.Cell.Generic.CellTrivial`1.Mnemonic*
      implements:
      - Cephei.Cell.ICell.Mnemonic
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellTrivial`1.Parent
      commentId: P:Cephei.Cell.Generic.CellTrivial`1.Parent
      language: CSharp
      name:
        CSharp: Parent
        VB: Parent
      nameWithType:
        CSharp: CellTrivial<T>.Parent
        VB: CellTrivial(Of T).Parent
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.Parent
        VB: Cephei.Cell.Generic.CellTrivial(Of T).Parent
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Parent
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 22
      syntax:
        content:
          CSharp: public ICell Parent { get; set; }
          VB: Public Property Parent As ICell
        parameters: []
        return:
          type: Cephei.Cell.ICell
      overload: Cephei.Cell.Generic.CellTrivial`1.Parent*
      implements:
      - Cephei.Cell.ICell.Parent
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellTrivial`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0})
      commentId: M:Cephei.Cell.Generic.CellTrivial`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0})
      language: CSharp
      name:
        CSharp: CellTrivial(FSharpFunc<Unit, T>)
        VB: CellTrivial(FSharpFunc(Of Unit, T))
      nameWithType:
        CSharp: CellTrivial<T>.CellTrivial(FSharpFunc<Unit, T>)
        VB: CellTrivial(Of T).CellTrivial(FSharpFunc(Of Unit, T))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.CellTrivial(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>)
        VB: Cephei.Cell.Generic.CellTrivial(Of T).CellTrivial(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T))
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 30
      syntax:
        content:
          CSharp: public CellTrivial(FSharpFunc<Unit, T> func)
          VB: Public Sub New(func As FSharpFunc(Of Unit, T))
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
      overload: Cephei.Cell.Generic.CellTrivial`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellTrivial`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0},System.String)
      commentId: M:Cephei.Cell.Generic.CellTrivial`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0},System.String)
      language: CSharp
      name:
        CSharp: CellTrivial(FSharpFunc<Unit, T>, String)
        VB: CellTrivial(FSharpFunc(Of Unit, T), String)
      nameWithType:
        CSharp: CellTrivial<T>.CellTrivial(FSharpFunc<Unit, T>, String)
        VB: CellTrivial(Of T).CellTrivial(FSharpFunc(Of Unit, T), String)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.CellTrivial(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>, System.String)
        VB: Cephei.Cell.Generic.CellTrivial(Of T).CellTrivial(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T), System.String)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 39
      summary: "\nCreate a cell with a mnemonic reference\n"
      example: []
      syntax:
        content:
          CSharp: public CellTrivial(FSharpFunc<Unit, T> func, string mnemonic)
          VB: Public Sub New(func As FSharpFunc(Of Unit, T), mnemonic As String)
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
          description: ''
        - id: mnemonic
          type: System.String
          description: ''
      overload: Cephei.Cell.Generic.CellTrivial`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellTrivial`1.Value
      commentId: P:Cephei.Cell.Generic.CellTrivial`1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: CellTrivial<T>.Value
        VB: CellTrivial(Of T).Value
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.Value
        VB: Cephei.Cell.Generic.CellTrivial(Of T).Value
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Value
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 43
      syntax:
        content:
          CSharp: public T Value { get; set; }
          VB: Public Property Value As T
        parameters: []
        return:
          type: '{T}'
      overload: Cephei.Cell.Generic.CellTrivial`1.Value*
      implements:
      - Cephei.Cell.Generic.ICell{{T}}.Value
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellTrivial`1.Change
      commentId: E:Cephei.Cell.Generic.CellTrivial`1.Change
      language: CSharp
      name:
        CSharp: Change
        VB: Change
      nameWithType:
        CSharp: CellTrivial<T>.Change
        VB: CellTrivial(Of T).Change
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.Change
        VB: Cephei.Cell.Generic.CellTrivial(Of T).Change
      type: Event
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Change
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 54
      syntax:
        content:
          CSharp: public event CellChange Change
          VB: Public Event Change As CellChange
        return:
          type: Cephei.Cell.CellChange
      implements:
      - Cephei.Cell.ICell.Change
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellTrivial`1.Dispose
      commentId: M:Cephei.Cell.Generic.CellTrivial`1.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: CellTrivial<T>.Dispose()
        VB: CellTrivial(Of T).Dispose()
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.Dispose()
        VB: Cephei.Cell.Generic.CellTrivial(Of T).Dispose()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dispose
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 56
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Cephei.Cell.Generic.CellTrivial`1.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellTrivial`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      commentId: M:Cephei.Cell.Generic.CellTrivial`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      language: CSharp
      name:
        CSharp: OnChange(CellEvent, ICellEvent, DateTime, ISession)
        VB: OnChange(CellEvent, ICellEvent, DateTime, ISession)
      nameWithType:
        CSharp: CellTrivial<T>.OnChange(CellEvent, ICellEvent, DateTime, ISession)
        VB: CellTrivial(Of T).OnChange(CellEvent, ICellEvent, DateTime, ISession)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
        VB: Cephei.Cell.Generic.CellTrivial(Of T).OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnChange
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 60
      syntax:
        content:
          CSharp: public virtual void OnChange(CellEvent eventType, ICellEvent root, DateTime epoch, ISession session)
          VB: Public Overridable Sub OnChange(eventType As CellEvent, root As ICellEvent, epoch As DateTime, session As ISession)
        parameters:
        - id: eventType
          type: Cephei.Cell.CellEvent
        - id: root
          type: Cephei.Cell.ICellEvent
        - id: epoch
          type: DateTime
        - id: session
          type: Cephei.Cell.ISession
      overload: Cephei.Cell.Generic.CellTrivial`1.OnChange*
      implements:
      - Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Cephei.Cell.Generic.CellTrivial`1.HasFunction
      commentId: P:Cephei.Cell.Generic.CellTrivial`1.HasFunction
      language: CSharp
      name:
        CSharp: HasFunction
        VB: HasFunction
      nameWithType:
        CSharp: CellTrivial<T>.HasFunction
        VB: CellTrivial(Of T).HasFunction
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.HasFunction
        VB: Cephei.Cell.Generic.CellTrivial(Of T).HasFunction
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasFunction
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 67
      example: []
      syntax:
        content:
          CSharp: public bool HasFunction { get; }
          VB: Public ReadOnly Property HasFunction As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Cephei.Cell.Generic.CellTrivial`1.HasFunction*
      see:
      - linkId: Cephei.Cell.ICell.HasFunction
        commentId: P:Cephei.Cell.ICell.HasFunction
      implements:
      - Cephei.Cell.ICell.HasFunction
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Cephei.Cell.ICell.HasFunction: 
    - id: Cephei.Cell.Generic.CellTrivial`1.HasValue
      commentId: P:Cephei.Cell.Generic.CellTrivial`1.HasValue
      language: CSharp
      name:
        CSharp: HasValue
        VB: HasValue
      nameWithType:
        CSharp: CellTrivial<T>.HasValue
        VB: CellTrivial(Of T).HasValue
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.HasValue
        VB: Cephei.Cell.Generic.CellTrivial(Of T).HasValue
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasValue
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 69
      example: []
      syntax:
        content:
          CSharp: public bool HasValue { get; }
          VB: Public ReadOnly Property HasValue As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Cephei.Cell.Generic.CellTrivial`1.HasValue*
      see:
      - linkId: Cephei.Cell.ICell.HasValue
        commentId: P:Cephei.Cell.ICell.HasValue
      implements:
      - Cephei.Cell.ICell.HasValue
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Cephei.Cell.ICell.HasValue: 
    - id: Cephei.Cell.Generic.CellTrivial`1.Box
      commentId: P:Cephei.Cell.Generic.CellTrivial`1.Box
      language: CSharp
      name:
        CSharp: Box
        VB: Box
      nameWithType:
        CSharp: CellTrivial<T>.Box
        VB: CellTrivial(Of T).Box
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.Box
        VB: Cephei.Cell.Generic.CellTrivial(Of T).Box
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Box
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 72
      example: []
      syntax:
        content:
          CSharp: public object Box { get; set; }
          VB: Public Property Box As Object
        parameters: []
        return:
          type: System.Object
      overload: Cephei.Cell.Generic.CellTrivial`1.Box*
      see:
      - linkId: Cephei.Cell.ICell.Box
        commentId: P:Cephei.Cell.ICell.Box
      implements:
      - Cephei.Cell.ICell.Box
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Cephei.Cell.ICell.Box: 
    - id: Cephei.Cell.Generic.CellTrivial`1.Dependants
      commentId: P:Cephei.Cell.Generic.CellTrivial`1.Dependants
      language: CSharp
      name:
        CSharp: Dependants
        VB: Dependants
      nameWithType:
        CSharp: CellTrivial<T>.Dependants
        VB: CellTrivial(Of T).Dependants
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.Dependants
        VB: Cephei.Cell.Generic.CellTrivial(Of T).Dependants
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dependants
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 83
      syntax:
        content:
          CSharp: public IEnumerable<ICellEvent> Dependants { get; }
          VB: Public ReadOnly Property Dependants As IEnumerable(Of ICellEvent)
        parameters: []
        return:
          type: IEnumerable{Cephei.Cell.ICellEvent}
      overload: Cephei.Cell.Generic.CellTrivial`1.Dependants*
      implements:
      - Cephei.Cell.ICell.Dependants
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.Generic.CellTrivial`1.Subscribe(IObserver{`0})
      commentId: M:Cephei.Cell.Generic.CellTrivial`1.Subscribe(IObserver{`0})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<T>)
        VB: Subscribe(IObserver(Of T))
      nameWithType:
        CSharp: CellTrivial<T>.Subscribe(IObserver<T>)
        VB: CellTrivial(Of T).Subscribe(IObserver(Of T))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.Subscribe(IObserver<T>)
        VB: Cephei.Cell.Generic.CellTrivial(Of T).Subscribe(IObserver(Of T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 103
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<T> observer)
          VB: Public Function Subscribe(observer As IObserver(Of T)) As IDisposable
        parameters:
        - id: observer
          type: IObserver{{T}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Generic.CellTrivial`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellTrivial`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
      commentId: M:Cephei.Cell.Generic.CellTrivial`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>)
        VB: Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))))
      nameWithType:
        CSharp: CellTrivial<T>.Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>)
        VB: CellTrivial(Of T).Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.Subscribe(IObserver<KeyValuePair<Cephei.Cell.ISession, KeyValuePair<System.String, T>>>)
        VB: Cephei.Cell.Generic.CellTrivial(Of T).Subscribe(IObserver(Of KeyValuePair(Of Cephei.Cell.ISession, KeyValuePair(Of System.String, T))))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 108
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<string, T>>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T)))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Generic.CellTrivial`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellTrivial`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
      commentId: M:Cephei.Cell.Generic.CellTrivial`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>)
        VB: Subscribe(IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)))
      nameWithType:
        CSharp: CellTrivial<T>.Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>)
        VB: CellTrivial(Of T).Subscribe(IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.Subscribe(IObserver<Tuple<Cephei.Cell.ISession, Cephei.Cell.Generic.ICell<T>, Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime>>)
        VB: Cephei.Cell.Generic.CellTrivial(Of T).Subscribe(IObserver(Of Tuple(Of Cephei.Cell.ISession, Cephei.Cell.Generic.ICell(Of T), Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime)))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 113
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Generic.CellTrivial`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellTrivial`1.OnCompleted
      commentId: M:Cephei.Cell.Generic.CellTrivial`1.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: CellTrivial<T>.OnCompleted()
        VB: CellTrivial(Of T).OnCompleted()
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.OnCompleted()
        VB: Cephei.Cell.Generic.CellTrivial(Of T).OnCompleted()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnCompleted
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 119
      syntax:
        content:
          CSharp: public void OnCompleted()
          VB: Public Sub OnCompleted
      overload: Cephei.Cell.Generic.CellTrivial`1.OnCompleted*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellTrivial`1.OnError(Exception)
      commentId: M:Cephei.Cell.Generic.CellTrivial`1.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: CellTrivial<T>.OnError(Exception)
        VB: CellTrivial(Of T).OnError(Exception)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.OnError(Exception)
        VB: Cephei.Cell.Generic.CellTrivial(Of T).OnError(Exception)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnError
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 123
      syntax:
        content:
          CSharp: public void OnError(Exception error)
          VB: Public Sub OnError(error As Exception)
        parameters:
        - id: error
          type: Exception
      overload: Cephei.Cell.Generic.CellTrivial`1.OnError*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellTrivial`1.OnNext(`0)
      commentId: M:Cephei.Cell.Generic.CellTrivial`1.OnNext(`0)
      language: CSharp
      name:
        CSharp: OnNext(T)
        VB: OnNext(T)
      nameWithType:
        CSharp: CellTrivial<T>.OnNext(T)
        VB: CellTrivial(Of T).OnNext(T)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellTrivial<T>.OnNext(T)
        VB: Cephei.Cell.Generic.CellTrivial(Of T).OnNext(T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellITrivial.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnNext
        path: ../Cephei.Cell/Generic/CellITrivial.cs
        startLine: 127
      syntax:
        content:
          CSharp: public void OnNext(T value)
          VB: Public Sub OnNext(value As T)
        parameters:
        - id: value
          type: '{T}'
      overload: Cephei.Cell.Generic.CellTrivial`1.OnNext*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Cephei.Cell.Generic.CellSpot`1
    commentId: T:Cephei.Cell.Generic.CellSpot`1
    language: CSharp
    name:
      CSharp: CellSpot<T>
      VB: CellSpot(Of T)
    nameWithType:
      CSharp: CellSpot<T>
      VB: CellSpot(Of T)
    qualifiedName:
      CSharp: Cephei.Cell.Generic.CellSpot<T>
      VB: Cephei.Cell.Generic.CellSpot(Of T)
    type: Class
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell.Generic
    source:
      remote:
        path: Cephei.Cell/Generic/CellSpot.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: CellSpot
      path: ../Cephei.Cell/Generic/CellSpot.cs
      startLine: 15
    summary: "\nCellSpot is a further specialization of Cell from CellFast for cells where the\nSpot value is only ever used and not referenced within a session.\nSpot cells nevery enlist in  session and never use session values for\ncalculations\n"
    example: []
    syntax:
      content:
        CSharp: 'public class CellSpot<T> : object, ICell<T>, ICell, ICellEvent, IObservable<T>, IObservable<KeyValuePair<ISession, KeyValuePair<string, T>>>, IObservable<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>, IObserver<T>'
        VB: >-
          Public Class CellSpot(Of T)

              Inherits Object

              Implements ICell(Of T), ICell, ICellEvent, IObservable(Of T), IObservable(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))), IObservable(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)), IObserver(Of T)
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - Cephei.Cell.Generic.ICell{{T}}
    - Cephei.Cell.ICell
    - Cephei.Cell.ICellEvent
    - IObservable{{T}}
    - IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
    - IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
    - IObserver{{T}}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Cephei.Cell.Generic.CellSpot`1.Mnemonic
      commentId: P:Cephei.Cell.Generic.CellSpot`1.Mnemonic
      language: CSharp
      name:
        CSharp: Mnemonic
        VB: Mnemonic
      nameWithType:
        CSharp: CellSpot<T>.Mnemonic
        VB: CellSpot(Of T).Mnemonic
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.Mnemonic
        VB: Cephei.Cell.Generic.CellSpot(Of T).Mnemonic
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Mnemonic
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 30
      syntax:
        content:
          CSharp: public string Mnemonic { get; set; }
          VB: Public Property Mnemonic As String
        parameters: []
        return:
          type: System.String
      overload: Cephei.Cell.Generic.CellSpot`1.Mnemonic*
      implements:
      - Cephei.Cell.ICell.Mnemonic
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellSpot`1.Parent
      commentId: P:Cephei.Cell.Generic.CellSpot`1.Parent
      language: CSharp
      name:
        CSharp: Parent
        VB: Parent
      nameWithType:
        CSharp: CellSpot<T>.Parent
        VB: CellSpot(Of T).Parent
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.Parent
        VB: Cephei.Cell.Generic.CellSpot(Of T).Parent
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Parent
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 31
      syntax:
        content:
          CSharp: public ICell Parent { get; set; }
          VB: Public Property Parent As ICell
        parameters: []
        return:
          type: Cephei.Cell.ICell
      overload: Cephei.Cell.Generic.CellSpot`1.Parent*
      implements:
      - Cephei.Cell.ICell.Parent
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellSpot`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0},Cephei.Cell.ICell[])
      commentId: M:Cephei.Cell.Generic.CellSpot`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0},Cephei.Cell.ICell[])
      language: CSharp
      name:
        CSharp: CellSpot(FSharpFunc<Unit, T>, ICell[])
        VB: CellSpot(FSharpFunc(Of Unit, T), ICell())
      nameWithType:
        CSharp: CellSpot<T>.CellSpot(FSharpFunc<Unit, T>, ICell[])
        VB: CellSpot(Of T).CellSpot(FSharpFunc(Of Unit, T), ICell())
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.CellSpot(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>, Cephei.Cell.ICell[])
        VB: Cephei.Cell.Generic.CellSpot(Of T).CellSpot(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T), Cephei.Cell.ICell())
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 33
      syntax:
        content:
          CSharp: public CellSpot(FSharpFunc<Unit, T> func, ICell[] dependancies)
          VB: Public Sub New(func As FSharpFunc(Of Unit, T), dependancies As ICell())
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
        - id: dependancies
          type: Cephei.Cell.ICell[]
      overload: Cephei.Cell.Generic.CellSpot`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellSpot`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0},Cephei.Cell.ICell[],System.String)
      commentId: M:Cephei.Cell.Generic.CellSpot`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0},Cephei.Cell.ICell[],System.String)
      language: CSharp
      name:
        CSharp: CellSpot(FSharpFunc<Unit, T>, ICell[], String)
        VB: CellSpot(FSharpFunc(Of Unit, T), ICell(), String)
      nameWithType:
        CSharp: CellSpot<T>.CellSpot(FSharpFunc<Unit, T>, ICell[], String)
        VB: CellSpot(Of T).CellSpot(FSharpFunc(Of Unit, T), ICell(), String)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.CellSpot(Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit, T>, Cephei.Cell.ICell[], System.String)
        VB: Cephei.Cell.Generic.CellSpot(Of T).CellSpot(Microsoft.FSharp.Core.FSharpFunc(Of Microsoft.FSharp.Core.Unit, T), Cephei.Cell.ICell(), System.String)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 41
      syntax:
        content:
          CSharp: public CellSpot(FSharpFunc<Unit, T> func, ICell[] dependancies, string mnemonic)
          VB: Public Sub New(func As FSharpFunc(Of Unit, T), dependancies As ICell(), mnemonic As String)
        parameters:
        - id: func
          type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}
        - id: dependancies
          type: Cephei.Cell.ICell[]
        - id: mnemonic
          type: System.String
      overload: Cephei.Cell.Generic.CellSpot`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellSpot`1.#ctor(`0)
      commentId: M:Cephei.Cell.Generic.CellSpot`1.#ctor(`0)
      language: CSharp
      name:
        CSharp: CellSpot(T)
        VB: CellSpot(T)
      nameWithType:
        CSharp: CellSpot<T>.CellSpot(T)
        VB: CellSpot(Of T).CellSpot(T)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.CellSpot(T)
        VB: Cephei.Cell.Generic.CellSpot(Of T).CellSpot(T)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 45
      syntax:
        content:
          CSharp: public CellSpot(T value)
          VB: Public Sub New(value As T)
        parameters:
        - id: value
          type: '{T}'
      overload: Cephei.Cell.Generic.CellSpot`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellSpot`1.#ctor(`0,System.String)
      commentId: M:Cephei.Cell.Generic.CellSpot`1.#ctor(`0,System.String)
      language: CSharp
      name:
        CSharp: CellSpot(T, String)
        VB: CellSpot(T, String)
      nameWithType:
        CSharp: CellSpot<T>.CellSpot(T, String)
        VB: CellSpot(Of T).CellSpot(T, String)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.CellSpot(T, System.String)
        VB: Cephei.Cell.Generic.CellSpot(Of T).CellSpot(T, System.String)
      type: Constructor
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: .ctor
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 50
      syntax:
        content:
          CSharp: public CellSpot(T value, string mnemonic)
          VB: Public Sub New(value As T, mnemonic As String)
        parameters:
        - id: value
          type: '{T}'
        - id: mnemonic
          type: System.String
      overload: Cephei.Cell.Generic.CellSpot`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellSpot`1.GetValue(System.Int32)
      commentId: M:Cephei.Cell.Generic.CellSpot`1.GetValue(System.Int32)
      language: CSharp
      name:
        CSharp: GetValue(Int32)
        VB: GetValue(Int32)
      nameWithType:
        CSharp: CellSpot<T>.GetValue(Int32)
        VB: CellSpot(Of T).GetValue(Int32)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.GetValue(System.Int32)
        VB: Cephei.Cell.Generic.CellSpot(Of T).GetValue(System.Int32)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: GetValue
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 119
      syntax:
        content:
          CSharp: public T GetValue(int recurse)
          VB: Public Function GetValue(recurse As Integer) As T
        parameters:
        - id: recurse
          type: System.Int32
        return:
          type: '{T}'
      overload: Cephei.Cell.Generic.CellSpot`1.GetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellSpot`1.Value
      commentId: P:Cephei.Cell.Generic.CellSpot`1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: CellSpot<T>.Value
        VB: CellSpot(Of T).Value
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.Value
        VB: Cephei.Cell.Generic.CellSpot(Of T).Value
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Value
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 179
      syntax:
        content:
          CSharp: public T Value { get; set; }
          VB: Public Property Value As T
        parameters: []
        return:
          type: '{T}'
      overload: Cephei.Cell.Generic.CellSpot`1.Value*
      implements:
      - Cephei.Cell.Generic.ICell{{T}}.Value
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellSpot`1.Dependants
      commentId: P:Cephei.Cell.Generic.CellSpot`1.Dependants
      language: CSharp
      name:
        CSharp: Dependants
        VB: Dependants
      nameWithType:
        CSharp: CellSpot<T>.Dependants
        VB: CellSpot(Of T).Dependants
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.Dependants
        VB: Cephei.Cell.Generic.CellSpot(Of T).Dependants
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dependants
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 208
      syntax:
        content:
          CSharp: public IEnumerable<ICellEvent> Dependants { get; }
          VB: Public ReadOnly Property Dependants As IEnumerable(Of ICellEvent)
        parameters: []
        return:
          type: IEnumerable{Cephei.Cell.ICellEvent}
      overload: Cephei.Cell.Generic.CellSpot`1.Dependants*
      implements:
      - Cephei.Cell.ICell.Dependants
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Cephei.Cell.Generic.CellSpot`1.Change
      commentId: E:Cephei.Cell.Generic.CellSpot`1.Change
      language: CSharp
      name:
        CSharp: Change
        VB: Change
      nameWithType:
        CSharp: CellSpot<T>.Change
        VB: CellSpot(Of T).Change
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.Change
        VB: Cephei.Cell.Generic.CellSpot(Of T).Change
      type: Event
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Change
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 227
      syntax:
        content:
          CSharp: public event CellChange Change
          VB: Public Event Change As CellChange
        return:
          type: Cephei.Cell.CellChange
      implements:
      - Cephei.Cell.ICell.Change
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellSpot`1.Dispose
      commentId: M:Cephei.Cell.Generic.CellSpot`1.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: CellSpot<T>.Dispose()
        VB: CellSpot(Of T).Dispose()
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.Dispose()
        VB: Cephei.Cell.Generic.CellSpot(Of T).Dispose()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Dispose
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 229
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Cephei.Cell.Generic.CellSpot`1.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellSpot`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      commentId: M:Cephei.Cell.Generic.CellSpot`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      language: CSharp
      name:
        CSharp: OnChange(CellEvent, ICellEvent, DateTime, ISession)
        VB: OnChange(CellEvent, ICellEvent, DateTime, ISession)
      nameWithType:
        CSharp: CellSpot<T>.OnChange(CellEvent, ICellEvent, DateTime, ISession)
        VB: CellSpot(Of T).OnChange(CellEvent, ICellEvent, DateTime, ISession)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
        VB: Cephei.Cell.Generic.CellSpot(Of T).OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnChange
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 264
      syntax:
        content:
          CSharp: public virtual void OnChange(CellEvent eventType, ICellEvent root, DateTime epoch, ISession session)
          VB: Public Overridable Sub OnChange(eventType As CellEvent, root As ICellEvent, epoch As DateTime, session As ISession)
        parameters:
        - id: eventType
          type: Cephei.Cell.CellEvent
        - id: root
          type: Cephei.Cell.ICellEvent
        - id: epoch
          type: DateTime
        - id: session
          type: Cephei.Cell.ISession
      overload: Cephei.Cell.Generic.CellSpot`1.OnChange*
      implements:
      - Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Cephei.Cell.Generic.CellSpot`1.HasFunction
      commentId: P:Cephei.Cell.Generic.CellSpot`1.HasFunction
      language: CSharp
      name:
        CSharp: HasFunction
        VB: HasFunction
      nameWithType:
        CSharp: CellSpot<T>.HasFunction
        VB: CellSpot(Of T).HasFunction
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.HasFunction
        VB: Cephei.Cell.Generic.CellSpot(Of T).HasFunction
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasFunction
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 312
      example: []
      syntax:
        content:
          CSharp: public bool HasFunction { get; }
          VB: Public ReadOnly Property HasFunction As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Cephei.Cell.Generic.CellSpot`1.HasFunction*
      see:
      - linkId: Cephei.Cell.ICell.HasFunction
        commentId: P:Cephei.Cell.ICell.HasFunction
      implements:
      - Cephei.Cell.ICell.HasFunction
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Cephei.Cell.ICell.HasFunction: 
    - id: Cephei.Cell.Generic.CellSpot`1.HasValue
      commentId: P:Cephei.Cell.Generic.CellSpot`1.HasValue
      language: CSharp
      name:
        CSharp: HasValue
        VB: HasValue
      nameWithType:
        CSharp: CellSpot<T>.HasValue
        VB: CellSpot(Of T).HasValue
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.HasValue
        VB: Cephei.Cell.Generic.CellSpot(Of T).HasValue
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: HasValue
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 314
      example: []
      syntax:
        content:
          CSharp: public bool HasValue { get; }
          VB: Public ReadOnly Property HasValue As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Cephei.Cell.Generic.CellSpot`1.HasValue*
      see:
      - linkId: Cephei.Cell.ICell.HasValue
        commentId: P:Cephei.Cell.ICell.HasValue
      implements:
      - Cephei.Cell.ICell.HasValue
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Cephei.Cell.ICell.HasValue: 
    - id: Cephei.Cell.Generic.CellSpot`1.Box
      commentId: P:Cephei.Cell.Generic.CellSpot`1.Box
      language: CSharp
      name:
        CSharp: Box
        VB: Box
      nameWithType:
        CSharp: CellSpot<T>.Box
        VB: CellSpot(Of T).Box
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.Box
        VB: Cephei.Cell.Generic.CellSpot(Of T).Box
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Box
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 317
      example: []
      syntax:
        content:
          CSharp: public object Box { get; set; }
          VB: Public Property Box As Object
        parameters: []
        return:
          type: System.Object
      overload: Cephei.Cell.Generic.CellSpot`1.Box*
      see:
      - linkId: Cephei.Cell.ICell.Box
        commentId: P:Cephei.Cell.ICell.Box
      implements:
      - Cephei.Cell.ICell.Box
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Cephei.Cell.ICell.Box: 
    - id: Cephei.Cell.Generic.CellSpot`1.Subscribe(IObserver{`0})
      commentId: M:Cephei.Cell.Generic.CellSpot`1.Subscribe(IObserver{`0})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<T>)
        VB: Subscribe(IObserver(Of T))
      nameWithType:
        CSharp: CellSpot<T>.Subscribe(IObserver<T>)
        VB: CellSpot(Of T).Subscribe(IObserver(Of T))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.Subscribe(IObserver<T>)
        VB: Cephei.Cell.Generic.CellSpot(Of T).Subscribe(IObserver(Of T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 331
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<T> observer)
          VB: Public Function Subscribe(observer As IObserver(Of T)) As IDisposable
        parameters:
        - id: observer
          type: IObserver{{T}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Generic.CellSpot`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellSpot`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
      commentId: M:Cephei.Cell.Generic.CellSpot`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>)
        VB: Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))))
      nameWithType:
        CSharp: CellSpot<T>.Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>)
        VB: CellSpot(Of T).Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.Subscribe(IObserver<KeyValuePair<Cephei.Cell.ISession, KeyValuePair<System.String, T>>>)
        VB: Cephei.Cell.Generic.CellSpot(Of T).Subscribe(IObserver(Of KeyValuePair(Of Cephei.Cell.ISession, KeyValuePair(Of System.String, T))))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 337
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<string, T>>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T)))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Generic.CellSpot`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellSpot`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
      commentId: M:Cephei.Cell.Generic.CellSpot`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>)
        VB: Subscribe(IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)))
      nameWithType:
        CSharp: CellSpot<T>.Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>)
        VB: CellSpot(Of T).Subscribe(IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.Subscribe(IObserver<Tuple<Cephei.Cell.ISession, Cephei.Cell.Generic.ICell<T>, Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime>>)
        VB: Cephei.Cell.Generic.CellSpot(Of T).Subscribe(IObserver(Of Tuple(Of Cephei.Cell.ISession, Cephei.Cell.Generic.ICell(Of T), Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime)))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 343
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Generic.CellSpot`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellSpot`1.OnCompleted
      commentId: M:Cephei.Cell.Generic.CellSpot`1.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: CellSpot<T>.OnCompleted()
        VB: CellSpot(Of T).OnCompleted()
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.OnCompleted()
        VB: Cephei.Cell.Generic.CellSpot(Of T).OnCompleted()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnCompleted
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 350
      syntax:
        content:
          CSharp: public void OnCompleted()
          VB: Public Sub OnCompleted
      overload: Cephei.Cell.Generic.CellSpot`1.OnCompleted*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellSpot`1.OnError(Exception)
      commentId: M:Cephei.Cell.Generic.CellSpot`1.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: CellSpot<T>.OnError(Exception)
        VB: CellSpot(Of T).OnError(Exception)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.OnError(Exception)
        VB: Cephei.Cell.Generic.CellSpot(Of T).OnError(Exception)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnError
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 354
      syntax:
        content:
          CSharp: public void OnError(Exception error)
          VB: Public Sub OnError(error As Exception)
        parameters:
        - id: error
          type: Exception
      overload: Cephei.Cell.Generic.CellSpot`1.OnError*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.CellSpot`1.OnNext(`0)
      commentId: M:Cephei.Cell.Generic.CellSpot`1.OnNext(`0)
      language: CSharp
      name:
        CSharp: OnNext(T)
        VB: OnNext(T)
      nameWithType:
        CSharp: CellSpot<T>.OnNext(T)
        VB: CellSpot(Of T).OnNext(T)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.CellSpot<T>.OnNext(T)
        VB: Cephei.Cell.Generic.CellSpot(Of T).OnNext(T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/CellSpot.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnNext
        path: ../Cephei.Cell/Generic/CellSpot.cs
        startLine: 360
      syntax:
        content:
          CSharp: public void OnNext(T value)
          VB: Public Sub OnNext(value As T)
        parameters:
        - id: value
          type: '{T}'
      overload: Cephei.Cell.Generic.CellSpot`1.OnNext*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Cephei.Cell.Generic.ICell`1
    commentId: T:Cephei.Cell.Generic.ICell`1
    language: CSharp
    name:
      CSharp: ICell<T>
      VB: ICell(Of T)
    nameWithType:
      CSharp: ICell<T>
      VB: ICell(Of T)
    qualifiedName:
      CSharp: Cephei.Cell.Generic.ICell<T>
      VB: Cephei.Cell.Generic.ICell(Of T)
    type: Interface
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell.Generic
    source:
      remote:
        path: Cephei.Cell/Generic/ICell.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: ICell
      path: ../Cephei.Cell/Generic/ICell.cs
      startLine: 11
    summary: "\nCells have a single interface, but multiple implementations depending on the\nsession semantics and/or optimized construction\n"
    example: []
    syntax:
      content:
        CSharp: 'public interface ICell<T> : ICell, ICellEvent, IObservable<T>, IObservable<KeyValuePair<ISession, KeyValuePair<string, T>>>, IObservable<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>, IObserver<T>'
        VB: >-
          Public Interface ICell(Of T)

              Inherits ICell, IObservable(Of T), IObservable(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))), IObservable(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)), IObserver(Of T)
      typeParameters:
      - id: T
    inheritedMembers:
    - Cephei.Cell.ICell.Parent
    - Cephei.Cell.ICell.Dependants
    - Cephei.Cell.ICell.Mnemonic
    - Cephei.Cell.ICell.Change
    - Cephei.Cell.ICell.HasFunction
    - Cephei.Cell.ICell.HasValue
    - Cephei.Cell.ICell.Box
    - Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Cephei.Cell.Generic.ICell`1.Value
      commentId: P:Cephei.Cell.Generic.ICell`1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ICell<T>.Value
        VB: ICell(Of T).Value
      qualifiedName:
        CSharp: Cephei.Cell.Generic.ICell<T>.Value
        VB: Cephei.Cell.Generic.ICell(Of T).Value
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/ICell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Value
        path: ../Cephei.Cell/Generic/ICell.cs
        startLine: 21
      summary: "\nEither the Value of the Cell, or the appropriate value for the current session\n"
      example: []
      syntax:
        content:
          CSharp: T Value { get; set; }
          VB: Property Value As T
        parameters: []
        return:
          type: '{T}'
      overload: Cephei.Cell.Generic.ICell`1.Value*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
  - id: Cephei.Cell.Generic.Model`1
    commentId: T:Cephei.Cell.Generic.Model`1
    language: CSharp
    name:
      CSharp: Model<T>
      VB: Model(Of T)
    nameWithType:
      CSharp: Model<T>
      VB: Model(Of T)
    qualifiedName:
      CSharp: Cephei.Cell.Generic.Model<T>
      VB: Cephei.Cell.Generic.Model(Of T)
    type: Class
    assemblies:
    - Cephei - Backup.Cell
    namespace: Cephei.Cell.Generic
    source:
      remote:
        path: Cephei.Cell/Generic/ModelCell.cs
        branch: master
        repo: https://github.com/channell/Cephei
      id: Model
      path: ../Cephei.Cell/Generic/ModelCell.cs
      startLine: 10
    summary: "\nSpecialisation of Model for recipes models that add cell functions to an oject\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Model<T> : Model, IObservable<ICell>, IObservable<KeyValuePair<ISession, KeyValuePair<string, ICell>>>, IObservable<Tuple<ISession, Model, CellEvent, ICell, DateTime>>, IObservable<KeyValuePair<string, double>>, IObservable<KeyValuePair<string, int>>, IObservable<KeyValuePair<string, Decimal>>, ICell<T>, ICell, ICellEvent, IObservable<T>, IObservable<KeyValuePair<ISession, KeyValuePair<string, T>>>, IObservable<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>, IObserver<T>'
        VB: >-
          Public Class Model(Of T)

              Inherits Model

              Implements IObservable(Of ICell), IObservable(Of KeyValuePair(Of ISession, KeyValuePair(Of String, ICell))), IObservable(Of Tuple(Of ISession, Model, CellEvent, ICell, DateTime)), IObservable(Of KeyValuePair(Of String, Double)), IObservable(Of KeyValuePair(Of String, Integer)), IObservable(Of KeyValuePair(Of String, Decimal)), ICell(Of T), ICell, ICellEvent, IObservable(Of T), IObservable(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))), IObservable(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)), IObserver(Of T)
      typeParameters:
      - id: T
        description: ''
    inheritance:
    - System.Object
    - Cephei.Cell.Model
    implements:
    - IObservable{Cephei.Cell.ICell}
    - IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,Cephei.Cell.ICell}}}
    - IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
    - IObservable{KeyValuePair{System.String,System.Double}}
    - IObservable{KeyValuePair{System.String,System.Int32}}
    - IObservable{KeyValuePair{System.String,Decimal}}
    - Cephei.Cell.Generic.ICell{{T}}
    - Cephei.Cell.ICell
    - Cephei.Cell.ICellEvent
    - IObservable{{T}}
    - IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
    - IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
    - IObserver{{T}}
    inheritedMembers:
    - Cephei.Cell.Model.Parent
    - Cephei.Cell.Model.Dependants
    - Cephei.Cell.Model.Mnemonic
    - Cephei.Cell.Model.Change
    - Cephei.Cell.Model.Dispose
    - Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
    - Cephei.Cell.Model.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}},System.String)
    - Cephei.Cell.Model.CreateValue``1({T},System.String)
    - Cephei.Cell.Model.GetOrAdd(System.String,Cephei.Cell.ICell)
    - Cephei.Cell.Model.TryAdd(System.String,Cephei.Cell.ICell)
    - Cephei.Cell.Model.TryRemove(System.String,Cephei.Cell.ICell@)
    - Cephei.Cell.Model.TryUpdate(System.String,Cephei.Cell.ICell,Cephei.Cell.ICell)
    - Cephei.Cell.Model.Item(System.String)
    - Cephei.Cell.Model.As``1(System.String)
    - Cephei.Cell.Model.Bind
    - Cephei.Cell.Model.HasFunction
    - Cephei.Cell.Model.HasValue
    - Cephei.Cell.Model.Box
    - Cephei.Cell.Model.Subscribe(IObserver{Cephei.Cell.ICell})
    - Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,Cephei.Cell.ICell}}})
    - Cephei.Cell.Model.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
    - Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Double}})
    - Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Int32}})
    - Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Decimal}})
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell{`0})
      commentId: M:Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell{`0})
      language: CSharp
      name:
        CSharp: Bind(ICell<T>)
        VB: Bind(ICell(Of T))
      nameWithType:
        CSharp: Model<T>.Bind(ICell<T>)
        VB: Model(Of T).Bind(ICell(Of T))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Model<T>.Bind(Cephei.Cell.Generic.ICell<T>)
        VB: Cephei.Cell.Generic.Model(Of T).Bind(Cephei.Cell.Generic.ICell(Of T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/ModelCell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Bind
        path: ../Cephei.Cell/Generic/ModelCell.cs
        startLine: 14
      syntax:
        content:
          CSharp: public void Bind(ICell<T> cell)
          VB: Public Sub Bind(cell As ICell(Of T))
        parameters:
        - id: cell
          type: Cephei.Cell.Generic.ICell{{T}}
      overload: Cephei.Cell.Generic.Model`1.Bind*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Model`1.Value
      commentId: P:Cephei.Cell.Generic.Model`1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: Model<T>.Value
        VB: Model(Of T).Value
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Model<T>.Value
        VB: Cephei.Cell.Generic.Model(Of T).Value
      type: Property
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/ModelCell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Value
        path: ../Cephei.Cell/Generic/ModelCell.cs
        startLine: 20
      syntax:
        content:
          CSharp: public T Value { get; set; }
          VB: Public Property Value As T
        parameters: []
        return:
          type: '{T}'
      overload: Cephei.Cell.Generic.Model`1.Value*
      implements:
      - Cephei.Cell.Generic.ICell{{T}}.Value
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Cephei.Cell.Generic.Model`1.OnCompleted
      commentId: M:Cephei.Cell.Generic.Model`1.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: Model<T>.OnCompleted()
        VB: Model(Of T).OnCompleted()
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Model<T>.OnCompleted()
        VB: Cephei.Cell.Generic.Model(Of T).OnCompleted()
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/ModelCell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnCompleted
        path: ../Cephei.Cell/Generic/ModelCell.cs
        startLine: 22
      syntax:
        content:
          CSharp: public void OnCompleted()
          VB: Public Sub OnCompleted
      overload: Cephei.Cell.Generic.Model`1.OnCompleted*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Model`1.OnError(Exception)
      commentId: M:Cephei.Cell.Generic.Model`1.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: Model<T>.OnError(Exception)
        VB: Model(Of T).OnError(Exception)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Model<T>.OnError(Exception)
        VB: Cephei.Cell.Generic.Model(Of T).OnError(Exception)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/ModelCell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnError
        path: ../Cephei.Cell/Generic/ModelCell.cs
        startLine: 27
      syntax:
        content:
          CSharp: public void OnError(Exception error)
          VB: Public Sub OnError(error As Exception)
        parameters:
        - id: error
          type: Exception
      overload: Cephei.Cell.Generic.Model`1.OnError*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Model`1.OnNext(`0)
      commentId: M:Cephei.Cell.Generic.Model`1.OnNext(`0)
      language: CSharp
      name:
        CSharp: OnNext(T)
        VB: OnNext(T)
      nameWithType:
        CSharp: Model<T>.OnNext(T)
        VB: Model(Of T).OnNext(T)
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Model<T>.OnNext(T)
        VB: Cephei.Cell.Generic.Model(Of T).OnNext(T)
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/ModelCell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: OnNext
        path: ../Cephei.Cell/Generic/ModelCell.cs
        startLine: 32
      syntax:
        content:
          CSharp: public void OnNext(T value)
          VB: Public Sub OnNext(value As T)
        parameters:
        - id: value
          type: '{T}'
      overload: Cephei.Cell.Generic.Model`1.OnNext*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Model`1.Subscribe(IObserver{`0})
      commentId: M:Cephei.Cell.Generic.Model`1.Subscribe(IObserver{`0})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<T>)
        VB: Subscribe(IObserver(Of T))
      nameWithType:
        CSharp: Model<T>.Subscribe(IObserver<T>)
        VB: Model(Of T).Subscribe(IObserver(Of T))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Model<T>.Subscribe(IObserver<T>)
        VB: Cephei.Cell.Generic.Model(Of T).Subscribe(IObserver(Of T))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/ModelCell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Generic/ModelCell.cs
        startLine: 37
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<T> observer)
          VB: Public Function Subscribe(observer As IObserver(Of T)) As IDisposable
        parameters:
        - id: observer
          type: IObserver{{T}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Generic.Model`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Model`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
      commentId: M:Cephei.Cell.Generic.Model`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>)
        VB: Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))))
      nameWithType:
        CSharp: Model<T>.Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>)
        VB: Model(Of T).Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Model<T>.Subscribe(IObserver<KeyValuePair<Cephei.Cell.ISession, KeyValuePair<System.String, T>>>)
        VB: Cephei.Cell.Generic.Model(Of T).Subscribe(IObserver(Of KeyValuePair(Of Cephei.Cell.ISession, KeyValuePair(Of System.String, T))))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/ModelCell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Generic/ModelCell.cs
        startLine: 42
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<string, T>>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T)))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Generic.Model`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Cephei.Cell.Generic.Model`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
      commentId: M:Cephei.Cell.Generic.Model`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>)
        VB: Subscribe(IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)))
      nameWithType:
        CSharp: Model<T>.Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>)
        VB: Model(Of T).Subscribe(IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)))
      qualifiedName:
        CSharp: Cephei.Cell.Generic.Model<T>.Subscribe(IObserver<Tuple<Cephei.Cell.ISession, Cephei.Cell.Generic.ICell<T>, Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime>>)
        VB: Cephei.Cell.Generic.Model(Of T).Subscribe(IObserver(Of Tuple(Of Cephei.Cell.ISession, Cephei.Cell.Generic.ICell(Of T), Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime)))
      type: Method
      assemblies:
      - Cephei - Backup.Cell
      namespace: Cephei.Cell.Generic
      source:
        remote:
          path: Cephei.Cell/Generic/ModelCell.cs
          branch: master
          repo: https://github.com/channell/Cephei
        id: Subscribe
        path: ../Cephei.Cell/Generic/ModelCell.cs
        startLine: 47
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>> observer)
          VB: Public Function Subscribe(observer As IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime))) As IDisposable
        parameters:
        - id: observer
          type: IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
        return:
          type: IDisposable
      overload: Cephei.Cell.Generic.Model`1.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
references:
  IDisposable:
    name:
      CSharp:
      - id: IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: IDisposable
        isExternal: true
      VB:
      - id: IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: IDisposable
        isExternal: true
    isDefinition: true
  Cephei.Cell.Generic.ICell`1:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Cephei.Cell.Generic.ICell`1
  Cephei.Cell.Generic:
    name:
      CSharp:
      - name: Cephei.Cell.Generic
        nameWithType: Cephei.Cell.Generic
        qualifiedName: Cephei.Cell.Generic
      VB:
      - name: Cephei.Cell.Generic
        nameWithType: Cephei.Cell.Generic
        qualifiedName: Cephei.Cell.Generic
    isDefinition: true
    commentId: N:Cephei.Cell.Generic
  Cephei.Cell.Generic.ICell{{T}}:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Cephei.Cell.Generic.ICell`1
    parent: Cephei.Cell.Generic
    commentId: T:Cephei.Cell.Generic.ICell{`0}
  Microsoft.FSharp.Core.FSharpFunc`2:
    name:
      CSharp:
      - id: Microsoft.FSharp.Core.FSharpFunc`2
        name: FSharpFunc
        nameWithType: FSharpFunc
        qualifiedName: Microsoft.FSharp.Core.FSharpFunc
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Microsoft.FSharp.Core.FSharpFunc`2
        name: FSharpFunc
        nameWithType: FSharpFunc
        qualifiedName: Microsoft.FSharp.Core.FSharpFunc
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Microsoft.FSharp.Core.FSharpFunc`2
  Microsoft.FSharp.Core:
    name:
      CSharp:
      - name: Microsoft.FSharp.Core
        nameWithType: Microsoft.FSharp.Core
        qualifiedName: Microsoft.FSharp.Core
        isExternal: true
      VB:
      - name: Microsoft.FSharp.Core
        nameWithType: Microsoft.FSharp.Core
        qualifiedName: Microsoft.FSharp.Core
    isDefinition: true
    commentId: N:Microsoft.FSharp.Core
  Microsoft.FSharp.Core.FSharpFunc{{T},System.String}:
    name:
      CSharp:
      - id: Microsoft.FSharp.Core.FSharpFunc`2
        name: FSharpFunc
        nameWithType: FSharpFunc
        qualifiedName: Microsoft.FSharp.Core.FSharpFunc
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Microsoft.FSharp.Core.FSharpFunc`2
        name: FSharpFunc
        nameWithType: FSharpFunc
        qualifiedName: Microsoft.FSharp.Core.FSharpFunc
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Microsoft.FSharp.Core.FSharpFunc`2
    parent: Microsoft.FSharp.Core
    commentId: T:Microsoft.FSharp.Core.FSharpFunc{`0,System.String}
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
  Cephei.Cell.TraceSubscriber`1.#ctor*:
    name:
      CSharp:
      - id: Cephei.Cell.TraceSubscriber`1.#ctor*
        name: TraceSubscriber
        nameWithType: TraceSubscriber<T>.TraceSubscriber
        qualifiedName: Cephei.Cell.TraceSubscriber<T>.TraceSubscriber
      VB:
      - id: Cephei.Cell.TraceSubscriber`1.#ctor*
        name: TraceSubscriber
        nameWithType: TraceSubscriber(Of T).TraceSubscriber
        qualifiedName: Cephei.Cell.TraceSubscriber(Of T).TraceSubscriber
    isDefinition: true
    commentId: Overload:Cephei.Cell.TraceSubscriber`1.#ctor
  Cephei.Cell.TraceSubscriber`1.OnCompleted*:
    name:
      CSharp:
      - id: Cephei.Cell.TraceSubscriber`1.OnCompleted*
        name: OnCompleted
        nameWithType: TraceSubscriber<T>.OnCompleted
        qualifiedName: Cephei.Cell.TraceSubscriber<T>.OnCompleted
      VB:
      - id: Cephei.Cell.TraceSubscriber`1.OnCompleted*
        name: OnCompleted
        nameWithType: TraceSubscriber(Of T).OnCompleted
        qualifiedName: Cephei.Cell.TraceSubscriber(Of T).OnCompleted
    isDefinition: true
    commentId: Overload:Cephei.Cell.TraceSubscriber`1.OnCompleted
  Exception:
    name:
      CSharp:
      - id: Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: Exception
        isExternal: true
      VB:
      - id: Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: Exception
        isExternal: true
    isDefinition: true
  Cephei.Cell.TraceSubscriber`1.OnError*:
    name:
      CSharp:
      - id: Cephei.Cell.TraceSubscriber`1.OnError*
        name: OnError
        nameWithType: TraceSubscriber<T>.OnError
        qualifiedName: Cephei.Cell.TraceSubscriber<T>.OnError
      VB:
      - id: Cephei.Cell.TraceSubscriber`1.OnError*
        name: OnError
        nameWithType: TraceSubscriber(Of T).OnError
        qualifiedName: Cephei.Cell.TraceSubscriber(Of T).OnError
    isDefinition: true
    commentId: Overload:Cephei.Cell.TraceSubscriber`1.OnError
  Tuple`5:
    name:
      CSharp:
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}:
    name:
      CSharp:
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Tuple`5
    commentId: '!:Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}'
  Cephei.Cell.TraceSubscriber`1.OnNext*:
    name:
      CSharp:
      - id: Cephei.Cell.TraceSubscriber`1.OnNext*
        name: OnNext
        nameWithType: TraceSubscriber<T>.OnNext
        qualifiedName: Cephei.Cell.TraceSubscriber<T>.OnNext
      VB:
      - id: Cephei.Cell.TraceSubscriber`1.OnNext*
        name: OnNext
        nameWithType: TraceSubscriber(Of T).OnNext
        qualifiedName: Cephei.Cell.TraceSubscriber(Of T).OnNext
    isDefinition: true
    commentId: Overload:Cephei.Cell.TraceSubscriber`1.OnNext
  Cephei.Cell.TraceSubscriber`1.Dispose*:
    name:
      CSharp:
      - id: Cephei.Cell.TraceSubscriber`1.Dispose*
        name: Dispose
        nameWithType: TraceSubscriber<T>.Dispose
        qualifiedName: Cephei.Cell.TraceSubscriber<T>.Dispose
      VB:
      - id: Cephei.Cell.TraceSubscriber`1.Dispose*
        name: Dispose
        nameWithType: TraceSubscriber(Of T).Dispose
        qualifiedName: Cephei.Cell.TraceSubscriber(Of T).Dispose
    isDefinition: true
    commentId: Overload:Cephei.Cell.TraceSubscriber`1.Dispose
  Cephei.Cell.TraceSubscriber`1.Finalize*:
    name:
      CSharp:
      - id: Cephei.Cell.TraceSubscriber`1.Finalize*
        name: Finalize
        nameWithType: TraceSubscriber<T>.Finalize
        qualifiedName: Cephei.Cell.TraceSubscriber<T>.Finalize
      VB:
      - id: Cephei.Cell.TraceSubscriber`1.Finalize*
        name: Finalize
        nameWithType: TraceSubscriber(Of T).Finalize
        qualifiedName: Cephei.Cell.TraceSubscriber(Of T).Finalize
    isDefinition: true
    commentId: Overload:Cephei.Cell.TraceSubscriber`1.Finalize
  Cephei.Cell.TraceSubscriber`1:
    name:
      CSharp:
      - id: Cephei.Cell.TraceSubscriber`1
        name: TraceSubscriber
        nameWithType: TraceSubscriber
        qualifiedName: Cephei.Cell.TraceSubscriber
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Cephei.Cell.TraceSubscriber`1
        name: TraceSubscriber
        nameWithType: TraceSubscriber
        qualifiedName: Cephei.Cell.TraceSubscriber
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Cephei.Cell.TraceSubscriber`1
  Cephei.Cell.ConsoleSubscriber`1.#ctor*:
    name:
      CSharp:
      - id: Cephei.Cell.ConsoleSubscriber`1.#ctor*
        name: ConsoleSubscriber
        nameWithType: ConsoleSubscriber<T>.ConsoleSubscriber
        qualifiedName: Cephei.Cell.ConsoleSubscriber<T>.ConsoleSubscriber
      VB:
      - id: Cephei.Cell.ConsoleSubscriber`1.#ctor*
        name: ConsoleSubscriber
        nameWithType: ConsoleSubscriber(Of T).ConsoleSubscriber
        qualifiedName: Cephei.Cell.ConsoleSubscriber(Of T).ConsoleSubscriber
    isDefinition: true
    commentId: Overload:Cephei.Cell.ConsoleSubscriber`1.#ctor
  Cephei.Cell.ConsoleSubscriber`1.OnCompleted*:
    name:
      CSharp:
      - id: Cephei.Cell.ConsoleSubscriber`1.OnCompleted*
        name: OnCompleted
        nameWithType: ConsoleSubscriber<T>.OnCompleted
        qualifiedName: Cephei.Cell.ConsoleSubscriber<T>.OnCompleted
      VB:
      - id: Cephei.Cell.ConsoleSubscriber`1.OnCompleted*
        name: OnCompleted
        nameWithType: ConsoleSubscriber(Of T).OnCompleted
        qualifiedName: Cephei.Cell.ConsoleSubscriber(Of T).OnCompleted
    isDefinition: true
    commentId: Overload:Cephei.Cell.ConsoleSubscriber`1.OnCompleted
  Cephei.Cell.ConsoleSubscriber`1.OnError*:
    name:
      CSharp:
      - id: Cephei.Cell.ConsoleSubscriber`1.OnError*
        name: OnError
        nameWithType: ConsoleSubscriber<T>.OnError
        qualifiedName: Cephei.Cell.ConsoleSubscriber<T>.OnError
      VB:
      - id: Cephei.Cell.ConsoleSubscriber`1.OnError*
        name: OnError
        nameWithType: ConsoleSubscriber(Of T).OnError
        qualifiedName: Cephei.Cell.ConsoleSubscriber(Of T).OnError
    isDefinition: true
    commentId: Overload:Cephei.Cell.ConsoleSubscriber`1.OnError
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  Cephei.Cell.ConsoleSubscriber`1.OnNext*:
    name:
      CSharp:
      - id: Cephei.Cell.ConsoleSubscriber`1.OnNext*
        name: OnNext
        nameWithType: ConsoleSubscriber<T>.OnNext
        qualifiedName: Cephei.Cell.ConsoleSubscriber<T>.OnNext
      VB:
      - id: Cephei.Cell.ConsoleSubscriber`1.OnNext*
        name: OnNext
        nameWithType: ConsoleSubscriber(Of T).OnNext
        qualifiedName: Cephei.Cell.ConsoleSubscriber(Of T).OnNext
    isDefinition: true
    commentId: Overload:Cephei.Cell.ConsoleSubscriber`1.OnNext
  Cephei.Cell.ConsoleSubscriber`1.Dispose*:
    name:
      CSharp:
      - id: Cephei.Cell.ConsoleSubscriber`1.Dispose*
        name: Dispose
        nameWithType: ConsoleSubscriber<T>.Dispose
        qualifiedName: Cephei.Cell.ConsoleSubscriber<T>.Dispose
      VB:
      - id: Cephei.Cell.ConsoleSubscriber`1.Dispose*
        name: Dispose
        nameWithType: ConsoleSubscriber(Of T).Dispose
        qualifiedName: Cephei.Cell.ConsoleSubscriber(Of T).Dispose
    isDefinition: true
    commentId: Overload:Cephei.Cell.ConsoleSubscriber`1.Dispose
  Cephei.Cell.ConsoleSubscriber`1.Finalize*:
    name:
      CSharp:
      - id: Cephei.Cell.ConsoleSubscriber`1.Finalize*
        name: Finalize
        nameWithType: ConsoleSubscriber<T>.Finalize
        qualifiedName: Cephei.Cell.ConsoleSubscriber<T>.Finalize
      VB:
      - id: Cephei.Cell.ConsoleSubscriber`1.Finalize*
        name: Finalize
        nameWithType: ConsoleSubscriber(Of T).Finalize
        qualifiedName: Cephei.Cell.ConsoleSubscriber(Of T).Finalize
    isDefinition: true
    commentId: Overload:Cephei.Cell.ConsoleSubscriber`1.Finalize
  Cephei.Cell.ConsoleSubscriber`1:
    name:
      CSharp:
      - id: Cephei.Cell.ConsoleSubscriber`1
        name: ConsoleSubscriber
        nameWithType: ConsoleSubscriber
        qualifiedName: Cephei.Cell.ConsoleSubscriber
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Cephei.Cell.ConsoleSubscriber`1
        name: ConsoleSubscriber
        nameWithType: ConsoleSubscriber
        qualifiedName: Cephei.Cell.ConsoleSubscriber
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Cephei.Cell.ConsoleSubscriber`1
  Cephei.Cell.ConsoleSessionSubscriber`1.#ctor*:
    name:
      CSharp:
      - id: Cephei.Cell.ConsoleSessionSubscriber`1.#ctor*
        name: ConsoleSessionSubscriber
        nameWithType: ConsoleSessionSubscriber<T>.ConsoleSessionSubscriber
        qualifiedName: Cephei.Cell.ConsoleSessionSubscriber<T>.ConsoleSessionSubscriber
      VB:
      - id: Cephei.Cell.ConsoleSessionSubscriber`1.#ctor*
        name: ConsoleSessionSubscriber
        nameWithType: ConsoleSessionSubscriber(Of T).ConsoleSessionSubscriber
        qualifiedName: Cephei.Cell.ConsoleSessionSubscriber(Of T).ConsoleSessionSubscriber
    isDefinition: true
    commentId: Overload:Cephei.Cell.ConsoleSessionSubscriber`1.#ctor
  Cephei.Cell.ConsoleSessionSubscriber`1.OnCompleted*:
    name:
      CSharp:
      - id: Cephei.Cell.ConsoleSessionSubscriber`1.OnCompleted*
        name: OnCompleted
        nameWithType: ConsoleSessionSubscriber<T>.OnCompleted
        qualifiedName: Cephei.Cell.ConsoleSessionSubscriber<T>.OnCompleted
      VB:
      - id: Cephei.Cell.ConsoleSessionSubscriber`1.OnCompleted*
        name: OnCompleted
        nameWithType: ConsoleSessionSubscriber(Of T).OnCompleted
        qualifiedName: Cephei.Cell.ConsoleSessionSubscriber(Of T).OnCompleted
    isDefinition: true
    commentId: Overload:Cephei.Cell.ConsoleSessionSubscriber`1.OnCompleted
  Cephei.Cell.ConsoleSessionSubscriber`1.OnError*:
    name:
      CSharp:
      - id: Cephei.Cell.ConsoleSessionSubscriber`1.OnError*
        name: OnError
        nameWithType: ConsoleSessionSubscriber<T>.OnError
        qualifiedName: Cephei.Cell.ConsoleSessionSubscriber<T>.OnError
      VB:
      - id: Cephei.Cell.ConsoleSessionSubscriber`1.OnError*
        name: OnError
        nameWithType: ConsoleSessionSubscriber(Of T).OnError
        qualifiedName: Cephei.Cell.ConsoleSessionSubscriber(Of T).OnError
    isDefinition: true
    commentId: Overload:Cephei.Cell.ConsoleSessionSubscriber`1.OnError
  KeyValuePair`2:
    name:
      CSharp:
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:KeyValuePair`2'
  KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}:
    name:
      CSharp:
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: KeyValuePair`2
    commentId: '!:KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}'
  Cephei.Cell.ConsoleSessionSubscriber`1.OnNext*:
    name:
      CSharp:
      - id: Cephei.Cell.ConsoleSessionSubscriber`1.OnNext*
        name: OnNext
        nameWithType: ConsoleSessionSubscriber<T>.OnNext
        qualifiedName: Cephei.Cell.ConsoleSessionSubscriber<T>.OnNext
      VB:
      - id: Cephei.Cell.ConsoleSessionSubscriber`1.OnNext*
        name: OnNext
        nameWithType: ConsoleSessionSubscriber(Of T).OnNext
        qualifiedName: Cephei.Cell.ConsoleSessionSubscriber(Of T).OnNext
    isDefinition: true
    commentId: Overload:Cephei.Cell.ConsoleSessionSubscriber`1.OnNext
  Cephei.Cell.ConsoleSessionSubscriber`1.Dispose*:
    name:
      CSharp:
      - id: Cephei.Cell.ConsoleSessionSubscriber`1.Dispose*
        name: Dispose
        nameWithType: ConsoleSessionSubscriber<T>.Dispose
        qualifiedName: Cephei.Cell.ConsoleSessionSubscriber<T>.Dispose
      VB:
      - id: Cephei.Cell.ConsoleSessionSubscriber`1.Dispose*
        name: Dispose
        nameWithType: ConsoleSessionSubscriber(Of T).Dispose
        qualifiedName: Cephei.Cell.ConsoleSessionSubscriber(Of T).Dispose
    isDefinition: true
    commentId: Overload:Cephei.Cell.ConsoleSessionSubscriber`1.Dispose
  Cephei.Cell.ConsoleSessionSubscriber`1.Finalize*:
    name:
      CSharp:
      - id: Cephei.Cell.ConsoleSessionSubscriber`1.Finalize*
        name: Finalize
        nameWithType: ConsoleSessionSubscriber<T>.Finalize
        qualifiedName: Cephei.Cell.ConsoleSessionSubscriber<T>.Finalize
      VB:
      - id: Cephei.Cell.ConsoleSessionSubscriber`1.Finalize*
        name: Finalize
        nameWithType: ConsoleSessionSubscriber(Of T).Finalize
        qualifiedName: Cephei.Cell.ConsoleSessionSubscriber(Of T).Finalize
    isDefinition: true
    commentId: Overload:Cephei.Cell.ConsoleSessionSubscriber`1.Finalize
  Cephei.Cell.ConsoleSessionSubscriber`1:
    name:
      CSharp:
      - id: Cephei.Cell.ConsoleSessionSubscriber`1
        name: ConsoleSessionSubscriber
        nameWithType: ConsoleSessionSubscriber
        qualifiedName: Cephei.Cell.ConsoleSessionSubscriber
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Cephei.Cell.ConsoleSessionSubscriber`1
        name: ConsoleSessionSubscriber
        nameWithType: ConsoleSessionSubscriber
        qualifiedName: Cephei.Cell.ConsoleSessionSubscriber
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Cephei.Cell.ConsoleSessionSubscriber`1
  Cephei.Cell:
    name:
      CSharp:
      - name: Cephei.Cell
        nameWithType: Cephei.Cell
        qualifiedName: Cephei.Cell
      VB:
      - name: Cephei.Cell
        nameWithType: Cephei.Cell
        qualifiedName: Cephei.Cell
    isDefinition: true
    commentId: N:Cephei.Cell
  Cephei.Cell.CellEvent:
    name:
      CSharp:
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      VB:
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
    isDefinition: true
    parent: Cephei.Cell
    commentId: T:Cephei.Cell.CellEvent
  Cephei.Cell.CellState:
    name:
      CSharp:
      - id: Cephei.Cell.CellState
        name: CellState
        nameWithType: CellState
        qualifiedName: Cephei.Cell.CellState
      VB:
      - id: Cephei.Cell.CellState
        name: CellState
        nameWithType: CellState
        qualifiedName: Cephei.Cell.CellState
    isDefinition: true
    parent: Cephei.Cell
    commentId: T:Cephei.Cell.CellState
  Cephei.Cell.ICellEvent:
    name:
      CSharp:
      - id: Cephei.Cell.ICellEvent
        name: ICellEvent
        nameWithType: ICellEvent
        qualifiedName: Cephei.Cell.ICellEvent
      VB:
      - id: Cephei.Cell.ICellEvent
        name: ICellEvent
        nameWithType: ICellEvent
        qualifiedName: Cephei.Cell.ICellEvent
    isDefinition: true
    parent: Cephei.Cell
    commentId: T:Cephei.Cell.ICellEvent
  DateTime:
    name:
      CSharp:
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      VB:
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
    isDefinition: true
  Cephei.Cell.ISession:
    name:
      CSharp:
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      VB:
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
    isDefinition: true
    parent: Cephei.Cell
    commentId: T:Cephei.Cell.ISession
  Cephei.Cell.CellChange:
    name:
      CSharp:
      - id: Cephei.Cell.CellChange
        name: CellChange
        nameWithType: CellChange
        qualifiedName: Cephei.Cell.CellChange
      VB:
      - id: Cephei.Cell.CellChange
        name: CellChange
        nameWithType: CellChange
        qualifiedName: Cephei.Cell.CellChange
    isDefinition: true
    parent: Cephei.Cell
    commentId: T:Cephei.Cell.CellChange
  Cephei.Cell.ICellEvent.OnChange*:
    name:
      CSharp:
      - id: Cephei.Cell.ICellEvent.OnChange*
        name: OnChange
        nameWithType: ICellEvent.OnChange
        qualifiedName: Cephei.Cell.ICellEvent.OnChange
      VB:
      - id: Cephei.Cell.ICellEvent.OnChange*
        name: OnChange
        nameWithType: ICellEvent.OnChange
        qualifiedName: Cephei.Cell.ICellEvent.OnChange
    isDefinition: true
    commentId: Overload:Cephei.Cell.ICellEvent.OnChange
  Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession):
    name:
      CSharp:
      - id: Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
        name: OnChange
        nameWithType: ICellEvent.OnChange
        qualifiedName: Cephei.Cell.ICellEvent.OnChange
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICellEvent
        name: ICellEvent
        nameWithType: ICellEvent
        qualifiedName: Cephei.Cell.ICellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
        name: OnChange
        nameWithType: ICellEvent.OnChange
        qualifiedName: Cephei.Cell.ICellEvent.OnChange
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICellEvent
        name: ICellEvent
        nameWithType: ICellEvent
        qualifiedName: Cephei.Cell.ICellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.ICellEvent
    commentId: M:Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
  Cephei.Cell.ICell:
    name:
      CSharp:
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      VB:
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
    isDefinition: true
    parent: Cephei.Cell
    commentId: T:Cephei.Cell.ICell
  Cephei.Cell.ICell.Parent*:
    name:
      CSharp:
      - id: Cephei.Cell.ICell.Parent*
        name: Parent
        nameWithType: ICell.Parent
        qualifiedName: Cephei.Cell.ICell.Parent
      VB:
      - id: Cephei.Cell.ICell.Parent*
        name: Parent
        nameWithType: ICell.Parent
        qualifiedName: Cephei.Cell.ICell.Parent
    isDefinition: true
    commentId: Overload:Cephei.Cell.ICell.Parent
  IEnumerable`1:
    name:
      CSharp:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  IEnumerable{Cephei.Cell.ICellEvent}:
    name:
      CSharp:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ICellEvent
        name: ICellEvent
        nameWithType: ICellEvent
        qualifiedName: Cephei.Cell.ICellEvent
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ICellEvent
        name: ICellEvent
        nameWithType: ICellEvent
        qualifiedName: Cephei.Cell.ICellEvent
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IEnumerable`1
    commentId: '!:IEnumerable{Cephei.Cell.ICellEvent}'
  Cephei.Cell.ICell.Dependants*:
    name:
      CSharp:
      - id: Cephei.Cell.ICell.Dependants*
        name: Dependants
        nameWithType: ICell.Dependants
        qualifiedName: Cephei.Cell.ICell.Dependants
      VB:
      - id: Cephei.Cell.ICell.Dependants*
        name: Dependants
        nameWithType: ICell.Dependants
        qualifiedName: Cephei.Cell.ICell.Dependants
    isDefinition: true
    commentId: Overload:Cephei.Cell.ICell.Dependants
  Cephei.Cell.ICell.Mnemonic*:
    name:
      CSharp:
      - id: Cephei.Cell.ICell.Mnemonic*
        name: Mnemonic
        nameWithType: ICell.Mnemonic
        qualifiedName: Cephei.Cell.ICell.Mnemonic
      VB:
      - id: Cephei.Cell.ICell.Mnemonic*
        name: Mnemonic
        nameWithType: ICell.Mnemonic
        qualifiedName: Cephei.Cell.ICell.Mnemonic
    isDefinition: true
    commentId: Overload:Cephei.Cell.ICell.Mnemonic
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
  Cephei.Cell.ICell.HasFunction*:
    name:
      CSharp:
      - id: Cephei.Cell.ICell.HasFunction*
        name: HasFunction
        nameWithType: ICell.HasFunction
        qualifiedName: Cephei.Cell.ICell.HasFunction
      VB:
      - id: Cephei.Cell.ICell.HasFunction*
        name: HasFunction
        nameWithType: ICell.HasFunction
        qualifiedName: Cephei.Cell.ICell.HasFunction
    isDefinition: true
    commentId: Overload:Cephei.Cell.ICell.HasFunction
  Cephei.Cell.ICell.HasValue*:
    name:
      CSharp:
      - id: Cephei.Cell.ICell.HasValue*
        name: HasValue
        nameWithType: ICell.HasValue
        qualifiedName: Cephei.Cell.ICell.HasValue
      VB:
      - id: Cephei.Cell.ICell.HasValue*
        name: HasValue
        nameWithType: ICell.HasValue
        qualifiedName: Cephei.Cell.ICell.HasValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.ICell.HasValue
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
  Cephei.Cell.ICell.Box*:
    name:
      CSharp:
      - id: Cephei.Cell.ICell.Box*
        name: Box
        nameWithType: ICell.Box
        qualifiedName: Cephei.Cell.ICell.Box
      VB:
      - id: Cephei.Cell.ICell.Box*
        name: Box
        nameWithType: ICell.Box
        qualifiedName: Cephei.Cell.ICell.Box
    isDefinition: true
    commentId: Overload:Cephei.Cell.ICell.Box
  System.Threading.ThreadLocal`1:
    name:
      CSharp:
      - id: System.Threading.ThreadLocal`1
        name: ThreadLocal
        nameWithType: ThreadLocal
        qualifiedName: System.Threading.ThreadLocal
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.ThreadLocal`1
        name: ThreadLocal
        nameWithType: ThreadLocal
        qualifiedName: System.Threading.ThreadLocal
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:System.Threading.ThreadLocal`1'
  System.Threading.ThreadLocal{Stack{Cephei.Cell.ICell}}:
    name:
      CSharp:
      - id: System.Threading.ThreadLocal`1
        name: ThreadLocal
        nameWithType: ThreadLocal
        qualifiedName: System.Threading.ThreadLocal
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Stack`1
        name: Stack
        nameWithType: Stack
        qualifiedName: Stack
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.ThreadLocal`1
        name: ThreadLocal
        nameWithType: ThreadLocal
        qualifiedName: System.Threading.ThreadLocal
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Stack`1
        name: Stack
        nameWithType: Stack
        qualifiedName: Stack
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.ThreadLocal`1
    commentId: '!:System.Threading.ThreadLocal{Stack{Cephei.Cell.ICell}}'
  Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}}:
    name:
      CSharp:
      - id: Microsoft.FSharp.Core.FSharpFunc`2
        name: FSharpFunc
        nameWithType: FSharpFunc
        qualifiedName: Microsoft.FSharp.Core.FSharpFunc
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Microsoft.FSharp.Core.Unit
        name: Unit
        nameWithType: Unit
        qualifiedName: Microsoft.FSharp.Core.Unit
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Microsoft.FSharp.Core.FSharpFunc`2
        name: FSharpFunc
        nameWithType: FSharpFunc
        qualifiedName: Microsoft.FSharp.Core.FSharpFunc
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Microsoft.FSharp.Core.Unit
        name: Unit
        nameWithType: Unit
        qualifiedName: Microsoft.FSharp.Core.Unit
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Microsoft.FSharp.Core.FSharpFunc`2
    parent: Microsoft.FSharp.Core
    commentId: T:Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0}
  Cephei.Cell.Cell.Create*:
    name:
      CSharp:
      - id: Cephei.Cell.Cell.Create*
        name: Create
        nameWithType: Cell.Create
        qualifiedName: Cephei.Cell.Cell.Create
      VB:
      - id: Cephei.Cell.Cell.Create*
        name: Create
        nameWithType: Cell.Create
        qualifiedName: Cephei.Cell.Cell.Create
    isDefinition: true
    commentId: Overload:Cephei.Cell.Cell.Create
  Cephei.Cell.Cell.CreateTrivial*:
    name:
      CSharp:
      - id: Cephei.Cell.Cell.CreateTrivial*
        name: CreateTrivial
        nameWithType: Cell.CreateTrivial
        qualifiedName: Cephei.Cell.Cell.CreateTrivial
      VB:
      - id: Cephei.Cell.Cell.CreateTrivial*
        name: CreateTrivial
        nameWithType: Cell.CreateTrivial
        qualifiedName: Cephei.Cell.Cell.CreateTrivial
    isDefinition: true
    commentId: Overload:Cephei.Cell.Cell.CreateTrivial
  Cephei.Cell.Generic.Cell`1:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1
        name: Cell
        nameWithType: Cell
        qualifiedName: Cephei.Cell.Generic.Cell
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Cephei.Cell.Generic.Cell`1
        name: Cell
        nameWithType: Cell
        qualifiedName: Cephei.Cell.Generic.Cell
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Cephei.Cell.Generic.Cell`1
  Cephei.Cell.Generic.Cell{{T}}:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1
        name: Cell
        nameWithType: Cell
        qualifiedName: Cephei.Cell.Generic.Cell
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Cephei.Cell.Generic.Cell`1
        name: Cell
        nameWithType: Cell
        qualifiedName: Cephei.Cell.Generic.Cell
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1
    parent: Cephei.Cell.Generic
    commentId: T:Cephei.Cell.Generic.Cell{``0}
  Cephei.Cell.Cell.CreateValue*:
    name:
      CSharp:
      - id: Cephei.Cell.Cell.CreateValue*
        name: CreateValue
        nameWithType: Cell.CreateValue
        qualifiedName: Cephei.Cell.Cell.CreateValue
      VB:
      - id: Cephei.Cell.Cell.CreateValue*
        name: CreateValue
        nameWithType: Cell.CreateValue
        qualifiedName: Cephei.Cell.Cell.CreateValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.Cell.CreateValue
  Cephei.Cell.Cell.CreateFast*:
    name:
      CSharp:
      - id: Cephei.Cell.Cell.CreateFast*
        name: CreateFast
        nameWithType: Cell.CreateFast
        qualifiedName: Cephei.Cell.Cell.CreateFast
      VB:
      - id: Cephei.Cell.Cell.CreateFast*
        name: CreateFast
        nameWithType: Cell.CreateFast
        qualifiedName: Cephei.Cell.Cell.CreateFast
    isDefinition: true
    commentId: Overload:Cephei.Cell.Cell.CreateFast
  Cephei.Cell.Cell.CreateFastValue*:
    name:
      CSharp:
      - id: Cephei.Cell.Cell.CreateFastValue*
        name: CreateFastValue
        nameWithType: Cell.CreateFastValue
        qualifiedName: Cephei.Cell.Cell.CreateFastValue
      VB:
      - id: Cephei.Cell.Cell.CreateFastValue*
        name: CreateFastValue
        nameWithType: Cell.CreateFastValue
        qualifiedName: Cephei.Cell.Cell.CreateFastValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.Cell.CreateFastValue
  Cephei.Cell.Cell.CreateSpot*:
    name:
      CSharp:
      - id: Cephei.Cell.Cell.CreateSpot*
        name: CreateSpot
        nameWithType: Cell.CreateSpot
        qualifiedName: Cephei.Cell.Cell.CreateSpot
      VB:
      - id: Cephei.Cell.Cell.CreateSpot*
        name: CreateSpot
        nameWithType: Cell.CreateSpot
        qualifiedName: Cephei.Cell.Cell.CreateSpot
    isDefinition: true
    commentId: Overload:Cephei.Cell.Cell.CreateSpot
  Cephei.Cell.Cell.CreateSpotValue*:
    name:
      CSharp:
      - id: Cephei.Cell.Cell.CreateSpotValue*
        name: CreateSpotValue
        nameWithType: Cell.CreateSpotValue
        qualifiedName: Cephei.Cell.Cell.CreateSpotValue
      VB:
      - id: Cephei.Cell.Cell.CreateSpotValue*
        name: CreateSpotValue
        nameWithType: Cell.CreateSpotValue
        qualifiedName: Cephei.Cell.Cell.CreateSpotValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.Cell.CreateSpotValue
  Cephei.Cell.ICell[]:
    name:
      CSharp:
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Cephei.Cell.Cell.Profile*:
    name:
      CSharp:
      - id: Cephei.Cell.Cell.Profile*
        name: Profile
        nameWithType: Cell.Profile
        qualifiedName: Cephei.Cell.Cell.Profile
      VB:
      - id: Cephei.Cell.Cell.Profile*
        name: Profile
        nameWithType: Cell.Profile
        qualifiedName: Cephei.Cell.Cell.Profile
    isDefinition: true
    commentId: Overload:Cephei.Cell.Cell.Profile
  Cephei.Cell.Cell:
    name:
      CSharp:
      - id: Cephei.Cell.Cell
        name: Cell
        nameWithType: Cell
        qualifiedName: Cephei.Cell.Cell
      VB:
      - id: Cephei.Cell.Cell
        name: Cell
        nameWithType: Cell
        qualifiedName: Cephei.Cell.Cell
    isDefinition: true
    commentId: T:Cephei.Cell.Cell
  Cephei.Cell.SessionState:
    name:
      CSharp:
      - id: Cephei.Cell.SessionState
        name: SessionState
        nameWithType: SessionState
        qualifiedName: Cephei.Cell.SessionState
      VB:
      - id: Cephei.Cell.SessionState
        name: SessionState
        nameWithType: SessionState
        qualifiedName: Cephei.Cell.SessionState
    isDefinition: true
    parent: Cephei.Cell
    commentId: T:Cephei.Cell.SessionState
  Cephei.Cell.SessionComplete:
    name:
      CSharp:
      - id: Cephei.Cell.SessionComplete
        name: SessionComplete
        nameWithType: SessionComplete
        qualifiedName: Cephei.Cell.SessionComplete
      VB:
      - id: Cephei.Cell.SessionComplete
        name: SessionComplete
        nameWithType: SessionComplete
        qualifiedName: Cephei.Cell.SessionComplete
    isDefinition: true
    parent: Cephei.Cell
    commentId: T:Cephei.Cell.SessionComplete
  Cephei.Cell.ISession.State*:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.State*
        name: State
        nameWithType: ISession.State
        qualifiedName: Cephei.Cell.ISession.State
      VB:
      - id: Cephei.Cell.ISession.State*
        name: State
        nameWithType: ISession.State
        qualifiedName: Cephei.Cell.ISession.State
    isDefinition: true
    commentId: Overload:Cephei.Cell.ISession.State
  Cephei.Cell.ISession.Mnemonic*:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.Mnemonic*
        name: Mnemonic
        nameWithType: ISession.Mnemonic
        qualifiedName: Cephei.Cell.ISession.Mnemonic
      VB:
      - id: Cephei.Cell.ISession.Mnemonic*
        name: Mnemonic
        nameWithType: ISession.Mnemonic
        qualifiedName: Cephei.Cell.ISession.Mnemonic
    isDefinition: true
    commentId: Overload:Cephei.Cell.ISession.Mnemonic
  Cephei.Cell.ISession.Epoch*:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.Epoch*
        name: Epoch
        nameWithType: ISession.Epoch
        qualifiedName: Cephei.Cell.ISession.Epoch
      VB:
      - id: Cephei.Cell.ISession.Epoch*
        name: Epoch
        nameWithType: ISession.Epoch
        qualifiedName: Cephei.Cell.ISession.Epoch
    isDefinition: true
    commentId: Overload:Cephei.Cell.ISession.Epoch
  Cephei.Cell.ISession.Join*:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.Join*
        name: Join
        nameWithType: ISession.Join
        qualifiedName: Cephei.Cell.ISession.Join
      VB:
      - id: Cephei.Cell.ISession.Join*
        name: Join
        nameWithType: ISession.Join
        qualifiedName: Cephei.Cell.ISession.Join
    isDefinition: true
    commentId: Overload:Cephei.Cell.ISession.Join
  Cephei.Cell.ISession.Leave*:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.Leave*
        name: Leave
        nameWithType: ISession.Leave
        qualifiedName: Cephei.Cell.ISession.Leave
      VB:
      - id: Cephei.Cell.ISession.Leave*
        name: Leave
        nameWithType: ISession.Leave
        qualifiedName: Cephei.Cell.ISession.Leave
    isDefinition: true
    commentId: Overload:Cephei.Cell.ISession.Leave
  Cephei.Cell.ISession.HasJoined*:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.HasJoined*
        name: HasJoined
        nameWithType: ISession.HasJoined
        qualifiedName: Cephei.Cell.ISession.HasJoined
      VB:
      - id: Cephei.Cell.ISession.HasJoined*
        name: HasJoined
        nameWithType: ISession.HasJoined
        qualifiedName: Cephei.Cell.ISession.HasJoined
    isDefinition: true
    commentId: Overload:Cephei.Cell.ISession.HasJoined
  Cephei.Cell.ISession.GetValue*:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.GetValue*
        name: GetValue
        nameWithType: ISession.GetValue
        qualifiedName: Cephei.Cell.ISession.GetValue
      VB:
      - id: Cephei.Cell.ISession.GetValue*
        name: GetValue
        nameWithType: ISession.GetValue
        qualifiedName: Cephei.Cell.ISession.GetValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.ISession.GetValue
  Cephei.Cell.ISession.SetValue*:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.SetValue*
        name: SetValue
        nameWithType: ISession.SetValue
        qualifiedName: Cephei.Cell.ISession.SetValue
      VB:
      - id: Cephei.Cell.ISession.SetValue*
        name: SetValue
        nameWithType: ISession.SetValue
        qualifiedName: Cephei.Cell.ISession.SetValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.ISession.SetValue
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
  Cephei.Cell.ISession.Size*:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.Size*
        name: Size
        nameWithType: ISession.Size
        qualifiedName: Cephei.Cell.ISession.Size
      VB:
      - id: Cephei.Cell.ISession.Size*
        name: Size
        nameWithType: ISession.Size
        qualifiedName: Cephei.Cell.ISession.Size
    isDefinition: true
    commentId: Overload:Cephei.Cell.ISession.Size
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
  Cephei.Cell.ISession.PercentComplete*:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.PercentComplete*
        name: PercentComplete
        nameWithType: ISession.PercentComplete
        qualifiedName: Cephei.Cell.ISession.PercentComplete
      VB:
      - id: Cephei.Cell.ISession.PercentComplete*
        name: PercentComplete
        nameWithType: ISession.PercentComplete
        qualifiedName: Cephei.Cell.ISession.PercentComplete
    isDefinition: true
    commentId: Overload:Cephei.Cell.ISession.PercentComplete
  Cephei.Cell.ISession.Calculate*:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.Calculate*
        name: Calculate
        nameWithType: ISession.Calculate
        qualifiedName: Cephei.Cell.ISession.Calculate
      VB:
      - id: Cephei.Cell.ISession.Calculate*
        name: Calculate
        nameWithType: ISession.Calculate
        qualifiedName: Cephei.Cell.ISession.Calculate
    isDefinition: true
    commentId: Overload:Cephei.Cell.ISession.Calculate
  IObservable`1:
    name:
      CSharp:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  IObservable{{T}}:
    name:
      CSharp:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObservable`1
    commentId: '!:IObservable{`0}'
  IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}:
    name:
      CSharp:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObservable`1
    commentId: '!:IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}}'
  IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}:
    name:
      CSharp:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObservable`1
    commentId: '!:IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}'
  IObserver`1:
    name:
      CSharp:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  IObserver{{T}}:
    name:
      CSharp:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObserver`1
    commentId: '!:IObserver{`0}'
  Cephei.Cell.List`1.#ctor*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.#ctor*
        name: List
        nameWithType: List<T>.List
        qualifiedName: Cephei.Cell.List<T>.List
      VB:
      - id: Cephei.Cell.List`1.#ctor*
        name: List
        nameWithType: List(Of T).List
        qualifiedName: Cephei.Cell.List(Of T).List
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.#ctor
  IList`1:
    name:
      CSharp:
      - id: IList`1
        name: IList
        nameWithType: IList
        qualifiedName: IList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IList`1
        name: IList
        nameWithType: IList
        qualifiedName: IList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  IList{Cephei.Cell.Generic.ICell{{T}}}:
    name:
      CSharp:
      - id: IList`1
        name: IList
        nameWithType: IList
        qualifiedName: IList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IList`1
        name: IList
        nameWithType: IList
        qualifiedName: IList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IList`1
    commentId: '!:IList{Cephei.Cell.Generic.ICell{`0}}'
  IEnumerable{Cephei.Cell.Generic.ICell{{T}}}:
    name:
      CSharp:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IEnumerable`1
    commentId: '!:IEnumerable{Cephei.Cell.Generic.ICell{`0}}'
  Cephei.Cell.List`1.Value*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.Value*
        name: Value
        nameWithType: List<T>.Value
        qualifiedName: Cephei.Cell.List<T>.Value
      VB:
      - id: Cephei.Cell.List`1.Value*
        name: Value
        nameWithType: List(Of T).Value
        qualifiedName: Cephei.Cell.List(Of T).Value
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.Value
  Cephei.Cell.List`1.Parent*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.Parent*
        name: Parent
        nameWithType: List<T>.Parent
        qualifiedName: Cephei.Cell.List<T>.Parent
      VB:
      - id: Cephei.Cell.List`1.Parent*
        name: Parent
        nameWithType: List(Of T).Parent
        qualifiedName: Cephei.Cell.List(Of T).Parent
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.Parent
  Cephei.Cell.ICell.Parent:
    name:
      CSharp:
      - id: Cephei.Cell.ICell.Parent
        name: Parent
        nameWithType: ICell.Parent
        qualifiedName: Cephei.Cell.ICell.Parent
      VB:
      - id: Cephei.Cell.ICell.Parent
        name: Parent
        nameWithType: ICell.Parent
        qualifiedName: Cephei.Cell.ICell.Parent
    isDefinition: true
    parent: Cephei.Cell.ICell
    commentId: P:Cephei.Cell.ICell.Parent
  Cephei.Cell.List`1.Dependants*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.Dependants*
        name: Dependants
        nameWithType: List<T>.Dependants
        qualifiedName: Cephei.Cell.List<T>.Dependants
      VB:
      - id: Cephei.Cell.List`1.Dependants*
        name: Dependants
        nameWithType: List(Of T).Dependants
        qualifiedName: Cephei.Cell.List(Of T).Dependants
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.Dependants
  Cephei.Cell.ICell.Dependants:
    name:
      CSharp:
      - id: Cephei.Cell.ICell.Dependants
        name: Dependants
        nameWithType: ICell.Dependants
        qualifiedName: Cephei.Cell.ICell.Dependants
      VB:
      - id: Cephei.Cell.ICell.Dependants
        name: Dependants
        nameWithType: ICell.Dependants
        qualifiedName: Cephei.Cell.ICell.Dependants
    isDefinition: true
    parent: Cephei.Cell.ICell
    commentId: P:Cephei.Cell.ICell.Dependants
  Cephei.Cell.List`1.Mnemonic*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.Mnemonic*
        name: Mnemonic
        nameWithType: List<T>.Mnemonic
        qualifiedName: Cephei.Cell.List<T>.Mnemonic
      VB:
      - id: Cephei.Cell.List`1.Mnemonic*
        name: Mnemonic
        nameWithType: List(Of T).Mnemonic
        qualifiedName: Cephei.Cell.List(Of T).Mnemonic
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.Mnemonic
  Cephei.Cell.ICell.Mnemonic:
    name:
      CSharp:
      - id: Cephei.Cell.ICell.Mnemonic
        name: Mnemonic
        nameWithType: ICell.Mnemonic
        qualifiedName: Cephei.Cell.ICell.Mnemonic
      VB:
      - id: Cephei.Cell.ICell.Mnemonic
        name: Mnemonic
        nameWithType: ICell.Mnemonic
        qualifiedName: Cephei.Cell.ICell.Mnemonic
    isDefinition: true
    parent: Cephei.Cell.ICell
    commentId: P:Cephei.Cell.ICell.Mnemonic
  Cephei.Cell.List`1.Cephei#Cell#Generic#ICell{T}#Value*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.Cephei#Cell#Generic#ICell{T}#Value*
        name: ICell<T>.Value
        nameWithType: List<T>.ICell<T>.Value
        qualifiedName: Cephei.Cell.List<T>.Cephei.Cell.Generic.ICell<T>.Value
      VB:
      - id: Cephei.Cell.List`1.Cephei#Cell#Generic#ICell{T}#Value*
        name: Cephei.Cell.Generic.ICell<T>.Value
        nameWithType: List(Of T).Cephei.Cell.Generic.ICell<T>.Value
        qualifiedName: Cephei.Cell.List(Of T).Cephei.Cell.Generic.ICell<T>.Value
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.Cephei#Cell#Generic#ICell{T}#Value
  Cephei.Cell.Generic.ICell`1.Value:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.ICell`1.Value
        name: Value
        nameWithType: ICell<T>.Value
        qualifiedName: Cephei.Cell.Generic.ICell<T>.Value
      VB:
      - id: Cephei.Cell.Generic.ICell`1.Value
        name: Value
        nameWithType: ICell(Of T).Value
        qualifiedName: Cephei.Cell.Generic.ICell(Of T).Value
    isDefinition: true
    commentId: P:Cephei.Cell.Generic.ICell`1.Value
  Cephei.Cell.Generic.ICell{{T}}.Value:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.ICell`1.Value
        name: Value
        nameWithType: ICell<T>.Value
        qualifiedName: Cephei.Cell.Generic.ICell<T>.Value
      VB:
      - id: Cephei.Cell.Generic.ICell`1.Value
        name: Value
        nameWithType: ICell(Of T).Value
        qualifiedName: Cephei.Cell.Generic.ICell(Of T).Value
    isDefinition: false
    definition: Cephei.Cell.Generic.ICell`1.Value
    parent: Cephei.Cell.Generic.ICell{{T}}
    commentId: P:Cephei.Cell.Generic.ICell{`0}.Value
  Cephei.Cell.List`1.Count*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.Count*
        name: Count
        nameWithType: List<T>.Count
        qualifiedName: Cephei.Cell.List<T>.Count
      VB:
      - id: Cephei.Cell.List`1.Count*
        name: Count
        nameWithType: List(Of T).Count
        qualifiedName: Cephei.Cell.List(Of T).Count
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.Count
  Cephei.Cell.List`1.IsReadOnly*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.IsReadOnly*
        name: IsReadOnly
        nameWithType: List<T>.IsReadOnly
        qualifiedName: Cephei.Cell.List<T>.IsReadOnly
      VB:
      - id: Cephei.Cell.List`1.IsReadOnly*
        name: IsReadOnly
        nameWithType: List(Of T).IsReadOnly
        qualifiedName: Cephei.Cell.List(Of T).IsReadOnly
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.IsReadOnly
  Cephei.Cell.List`1.Item*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.Item*
        name: Item
        nameWithType: List<T>.Item
        qualifiedName: Cephei.Cell.List<T>.Item
      VB:
      - id: Cephei.Cell.List`1.Item*
        name: Item
        nameWithType: List(Of T).Item
        qualifiedName: Cephei.Cell.List(Of T).Item
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.Item
  Cephei.Cell.ICell.Change:
    name:
      CSharp:
      - id: Cephei.Cell.ICell.Change
        name: Change
        nameWithType: ICell.Change
        qualifiedName: Cephei.Cell.ICell.Change
      VB:
      - id: Cephei.Cell.ICell.Change
        name: Change
        nameWithType: ICell.Change
        qualifiedName: Cephei.Cell.ICell.Change
    isDefinition: true
    parent: Cephei.Cell.ICell
    commentId: E:Cephei.Cell.ICell.Change
  Cephei.Cell.List`1.Dispose*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.Dispose*
        name: Dispose
        nameWithType: List<T>.Dispose
        qualifiedName: Cephei.Cell.List<T>.Dispose
      VB:
      - id: Cephei.Cell.List`1.Dispose*
        name: Dispose
        nameWithType: List(Of T).Dispose
        qualifiedName: Cephei.Cell.List(Of T).Dispose
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.Dispose
  Cephei.Cell.List`1.OnChange*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.OnChange*
        name: OnChange
        nameWithType: List<T>.OnChange
        qualifiedName: Cephei.Cell.List<T>.OnChange
      VB:
      - id: Cephei.Cell.List`1.OnChange*
        name: OnChange
        nameWithType: List(Of T).OnChange
        qualifiedName: Cephei.Cell.List(Of T).OnChange
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.OnChange
  Cephei.Cell.List`1.Subscribe*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.Subscribe*
        name: Subscribe
        nameWithType: List<T>.Subscribe
        qualifiedName: Cephei.Cell.List<T>.Subscribe
      VB:
      - id: Cephei.Cell.List`1.Subscribe*
        name: Subscribe
        nameWithType: List(Of T).Subscribe
        qualifiedName: Cephei.Cell.List(Of T).Subscribe
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.Subscribe
  IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}:
    name:
      CSharp:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObserver`1
    commentId: '!:IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}}'
  IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}:
    name:
      CSharp:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObserver`1
    commentId: '!:IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}'
  Cephei.Cell.ICell.HasFunction:
    name:
      CSharp:
      - id: Cephei.Cell.ICell.HasFunction
        name: HasFunction
        nameWithType: ICell.HasFunction
        qualifiedName: Cephei.Cell.ICell.HasFunction
      VB:
      - id: Cephei.Cell.ICell.HasFunction
        name: HasFunction
        nameWithType: ICell.HasFunction
        qualifiedName: Cephei.Cell.ICell.HasFunction
    isDefinition: true
    parent: Cephei.Cell.ICell
    commentId: P:Cephei.Cell.ICell.HasFunction
  Cephei.Cell.List`1.HasFunction*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.HasFunction*
        name: HasFunction
        nameWithType: List<T>.HasFunction
        qualifiedName: Cephei.Cell.List<T>.HasFunction
      VB:
      - id: Cephei.Cell.List`1.HasFunction*
        name: HasFunction
        nameWithType: List(Of T).HasFunction
        qualifiedName: Cephei.Cell.List(Of T).HasFunction
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.HasFunction
  Cephei.Cell.ICell.HasValue:
    name:
      CSharp:
      - id: Cephei.Cell.ICell.HasValue
        name: HasValue
        nameWithType: ICell.HasValue
        qualifiedName: Cephei.Cell.ICell.HasValue
      VB:
      - id: Cephei.Cell.ICell.HasValue
        name: HasValue
        nameWithType: ICell.HasValue
        qualifiedName: Cephei.Cell.ICell.HasValue
    isDefinition: true
    parent: Cephei.Cell.ICell
    commentId: P:Cephei.Cell.ICell.HasValue
  Cephei.Cell.List`1.HasValue*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.HasValue*
        name: HasValue
        nameWithType: List<T>.HasValue
        qualifiedName: Cephei.Cell.List<T>.HasValue
      VB:
      - id: Cephei.Cell.List`1.HasValue*
        name: HasValue
        nameWithType: List(Of T).HasValue
        qualifiedName: Cephei.Cell.List(Of T).HasValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.HasValue
  Cephei.Cell.ICell.Box:
    name:
      CSharp:
      - id: Cephei.Cell.ICell.Box
        name: Box
        nameWithType: ICell.Box
        qualifiedName: Cephei.Cell.ICell.Box
      VB:
      - id: Cephei.Cell.ICell.Box
        name: Box
        nameWithType: ICell.Box
        qualifiedName: Cephei.Cell.ICell.Box
    isDefinition: true
    parent: Cephei.Cell.ICell
    commentId: P:Cephei.Cell.ICell.Box
  Cephei.Cell.List`1.Box*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.Box*
        name: Box
        nameWithType: List<T>.Box
        qualifiedName: Cephei.Cell.List<T>.Box
      VB:
      - id: Cephei.Cell.List`1.Box*
        name: Box
        nameWithType: List(Of T).Box
        qualifiedName: Cephei.Cell.List(Of T).Box
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.Box
  Cephei.Cell.List`1.OnCompleted*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.OnCompleted*
        name: OnCompleted
        nameWithType: List<T>.OnCompleted
        qualifiedName: Cephei.Cell.List<T>.OnCompleted
      VB:
      - id: Cephei.Cell.List`1.OnCompleted*
        name: OnCompleted
        nameWithType: List(Of T).OnCompleted
        qualifiedName: Cephei.Cell.List(Of T).OnCompleted
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.OnCompleted
  Cephei.Cell.List`1.OnError*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.OnError*
        name: OnError
        nameWithType: List<T>.OnError
        qualifiedName: Cephei.Cell.List<T>.OnError
      VB:
      - id: Cephei.Cell.List`1.OnError*
        name: OnError
        nameWithType: List(Of T).OnError
        qualifiedName: Cephei.Cell.List(Of T).OnError
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.OnError
  Cephei.Cell.List`1.OnNext*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.OnNext*
        name: OnNext
        nameWithType: List<T>.OnNext
        qualifiedName: Cephei.Cell.List<T>.OnNext
      VB:
      - id: Cephei.Cell.List`1.OnNext*
        name: OnNext
        nameWithType: List(Of T).OnNext
        qualifiedName: Cephei.Cell.List(Of T).OnNext
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.OnNext
  Cephei.Cell.List`1.IndexOf*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.IndexOf*
        name: IndexOf
        nameWithType: List<T>.IndexOf
        qualifiedName: Cephei.Cell.List<T>.IndexOf
      VB:
      - id: Cephei.Cell.List`1.IndexOf*
        name: IndexOf
        nameWithType: List(Of T).IndexOf
        qualifiedName: Cephei.Cell.List(Of T).IndexOf
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.IndexOf
  Cephei.Cell.List`1.Insert*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.Insert*
        name: Insert
        nameWithType: List<T>.Insert
        qualifiedName: Cephei.Cell.List<T>.Insert
      VB:
      - id: Cephei.Cell.List`1.Insert*
        name: Insert
        nameWithType: List(Of T).Insert
        qualifiedName: Cephei.Cell.List(Of T).Insert
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.Insert
  Cephei.Cell.List`1.RemoveAt*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.RemoveAt*
        name: RemoveAt
        nameWithType: List<T>.RemoveAt
        qualifiedName: Cephei.Cell.List<T>.RemoveAt
      VB:
      - id: Cephei.Cell.List`1.RemoveAt*
        name: RemoveAt
        nameWithType: List(Of T).RemoveAt
        qualifiedName: Cephei.Cell.List(Of T).RemoveAt
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.RemoveAt
  Cephei.Cell.List`1.Add*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.Add*
        name: Add
        nameWithType: List<T>.Add
        qualifiedName: Cephei.Cell.List<T>.Add
      VB:
      - id: Cephei.Cell.List`1.Add*
        name: Add
        nameWithType: List(Of T).Add
        qualifiedName: Cephei.Cell.List(Of T).Add
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.Add
  Cephei.Cell.List`1.Clear*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.Clear*
        name: Clear
        nameWithType: List<T>.Clear
        qualifiedName: Cephei.Cell.List<T>.Clear
      VB:
      - id: Cephei.Cell.List`1.Clear*
        name: Clear
        nameWithType: List(Of T).Clear
        qualifiedName: Cephei.Cell.List(Of T).Clear
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.Clear
  Cephei.Cell.List`1.Contains*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.Contains*
        name: Contains
        nameWithType: List<T>.Contains
        qualifiedName: Cephei.Cell.List<T>.Contains
      VB:
      - id: Cephei.Cell.List`1.Contains*
        name: Contains
        nameWithType: List(Of T).Contains
        qualifiedName: Cephei.Cell.List(Of T).Contains
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.Contains
  Cephei.Cell.Generic.ICell{{T}}[]:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Cephei.Cell.List`1.CopyTo*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.CopyTo*
        name: CopyTo
        nameWithType: List<T>.CopyTo
        qualifiedName: Cephei.Cell.List<T>.CopyTo
      VB:
      - id: Cephei.Cell.List`1.CopyTo*
        name: CopyTo
        nameWithType: List(Of T).CopyTo
        qualifiedName: Cephei.Cell.List(Of T).CopyTo
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.CopyTo
  Cephei.Cell.List`1.Remove*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.Remove*
        name: Remove
        nameWithType: List<T>.Remove
        qualifiedName: Cephei.Cell.List<T>.Remove
      VB:
      - id: Cephei.Cell.List`1.Remove*
        name: Remove
        nameWithType: List(Of T).Remove
        qualifiedName: Cephei.Cell.List(Of T).Remove
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.Remove
  IEnumerator`1:
    name:
      CSharp:
      - id: IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  IEnumerator{Cephei.Cell.Generic.ICell{{T}}}:
    name:
      CSharp:
      - id: IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IEnumerator`1
    commentId: '!:IEnumerator{Cephei.Cell.Generic.ICell{`0}}'
  Cephei.Cell.List`1.GetEnumerator*:
    name:
      CSharp:
      - id: Cephei.Cell.List`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: List<T>.GetEnumerator
        qualifiedName: Cephei.Cell.List<T>.GetEnumerator
      VB:
      - id: Cephei.Cell.List`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: List(Of T).GetEnumerator
        qualifiedName: Cephei.Cell.List(Of T).GetEnumerator
    isDefinition: true
    commentId: Overload:Cephei.Cell.List`1.GetEnumerator
  Cephei.Cell.List`1:
    name:
      CSharp:
      - id: Cephei.Cell.List`1
        name: List
        nameWithType: List
        qualifiedName: Cephei.Cell.List
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Cephei.Cell.List`1
        name: List
        nameWithType: List
        qualifiedName: Cephei.Cell.List
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Cephei.Cell.List`1
  IObservable{Cephei.Cell.ICell}:
    name:
      CSharp:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObservable`1
    commentId: '!:IObservable{Cephei.Cell.ICell}'
  IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,Cephei.Cell.ICell}}}:
    name:
      CSharp:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObservable`1
    commentId: '!:IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,Cephei.Cell.ICell}}}'
  IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}:
    name:
      CSharp:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Model
        name: Model
        nameWithType: Model
        qualifiedName: Cephei.Cell.Model
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Model
        name: Model
        nameWithType: Model
        qualifiedName: Cephei.Cell.Model
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObservable`1
    commentId: '!:IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}'
  IObservable{KeyValuePair{System.String,System.Double}}:
    name:
      CSharp:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObservable`1
    commentId: '!:IObservable{KeyValuePair{System.String,System.Double}}'
  IObservable{KeyValuePair{System.String,System.Int32}}:
    name:
      CSharp:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObservable`1
    commentId: '!:IObservable{KeyValuePair{System.String,System.Int32}}'
  IObservable{KeyValuePair{System.String,Decimal}}:
    name:
      CSharp:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Decimal
        name: Decimal
        nameWithType: Decimal
        qualifiedName: Decimal
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObservable`1
        name: IObservable
        nameWithType: IObservable
        qualifiedName: IObservable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Decimal
        name: Decimal
        nameWithType: Decimal
        qualifiedName: Decimal
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObservable`1
    commentId: '!:IObservable{KeyValuePair{System.String,Decimal}}'
  Cephei.Cell.Model.Parent*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Parent*
        name: Parent
        nameWithType: Model.Parent
        qualifiedName: Cephei.Cell.Model.Parent
      VB:
      - id: Cephei.Cell.Model.Parent*
        name: Parent
        nameWithType: Model.Parent
        qualifiedName: Cephei.Cell.Model.Parent
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.Parent
  Cephei.Cell.Model.Dependants*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Dependants*
        name: Dependants
        nameWithType: Model.Dependants
        qualifiedName: Cephei.Cell.Model.Dependants
      VB:
      - id: Cephei.Cell.Model.Dependants*
        name: Dependants
        nameWithType: Model.Dependants
        qualifiedName: Cephei.Cell.Model.Dependants
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.Dependants
  Cephei.Cell.Model.Mnemonic*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Mnemonic*
        name: Mnemonic
        nameWithType: Model.Mnemonic
        qualifiedName: Cephei.Cell.Model.Mnemonic
      VB:
      - id: Cephei.Cell.Model.Mnemonic*
        name: Mnemonic
        nameWithType: Model.Mnemonic
        qualifiedName: Cephei.Cell.Model.Mnemonic
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.Mnemonic
  Cephei.Cell.Model.Dispose*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Dispose*
        name: Dispose
        nameWithType: Model.Dispose
        qualifiedName: Cephei.Cell.Model.Dispose
      VB:
      - id: Cephei.Cell.Model.Dispose*
        name: Dispose
        nameWithType: Model.Dispose
        qualifiedName: Cephei.Cell.Model.Dispose
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.Dispose
  Cephei.Cell.Model.OnChange*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.OnChange*
        name: OnChange
        nameWithType: Model.OnChange
        qualifiedName: Cephei.Cell.Model.OnChange
      VB:
      - id: Cephei.Cell.Model.OnChange*
        name: OnChange
        nameWithType: Model.OnChange
        qualifiedName: Cephei.Cell.Model.OnChange
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.OnChange
  Cephei.Cell.Model.Create*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Create*
        name: Create
        nameWithType: Model.Create
        qualifiedName: Cephei.Cell.Model.Create
      VB:
      - id: Cephei.Cell.Model.Create*
        name: Create
        nameWithType: Model.Create
        qualifiedName: Cephei.Cell.Model.Create
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.Create
  Cephei.Cell.Model.CreateValue*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.CreateValue*
        name: CreateValue
        nameWithType: Model.CreateValue
        qualifiedName: Cephei.Cell.Model.CreateValue
      VB:
      - id: Cephei.Cell.Model.CreateValue*
        name: CreateValue
        nameWithType: Model.CreateValue
        qualifiedName: Cephei.Cell.Model.CreateValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.CreateValue
  Cephei.Cell.Model.#ctor*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.#ctor*
        name: Model
        nameWithType: Model.Model
        qualifiedName: Cephei.Cell.Model.Model
      VB:
      - id: Cephei.Cell.Model.#ctor*
        name: Model
        nameWithType: Model.Model
        qualifiedName: Cephei.Cell.Model.Model
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.#ctor
  IDictionary`2:
    name:
      CSharp:
      - id: IDictionary`2
        name: IDictionary
        nameWithType: IDictionary
        qualifiedName: IDictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IDictionary`2
        name: IDictionary
        nameWithType: IDictionary
        qualifiedName: IDictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  IDictionary{System.String,Cephei.Cell.ICell}:
    name:
      CSharp:
      - id: IDictionary`2
        name: IDictionary
        nameWithType: IDictionary
        qualifiedName: IDictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IDictionary`2
        name: IDictionary
        nameWithType: IDictionary
        qualifiedName: IDictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IDictionary`2
    commentId: '!:IDictionary{System.String,Cephei.Cell.ICell}'
  IEqualityComparer`1:
    name:
      CSharp:
      - id: IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  IEqualityComparer{System.String}:
    name:
      CSharp:
      - id: IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IEqualityComparer`1
    commentId: '!:IEqualityComparer{System.String}'
  Cephei.Cell.Model.GetOrAdd*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.GetOrAdd*
        name: GetOrAdd
        nameWithType: Model.GetOrAdd
        qualifiedName: Cephei.Cell.Model.GetOrAdd
      VB:
      - id: Cephei.Cell.Model.GetOrAdd*
        name: GetOrAdd
        nameWithType: Model.GetOrAdd
        qualifiedName: Cephei.Cell.Model.GetOrAdd
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.GetOrAdd
  Cephei.Cell.Model.TryAdd*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.TryAdd*
        name: TryAdd
        nameWithType: Model.TryAdd
        qualifiedName: Cephei.Cell.Model.TryAdd
      VB:
      - id: Cephei.Cell.Model.TryAdd*
        name: TryAdd
        nameWithType: Model.TryAdd
        qualifiedName: Cephei.Cell.Model.TryAdd
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.TryAdd
  Cephei.Cell.Model.TryRemove*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.TryRemove*
        name: TryRemove
        nameWithType: Model.TryRemove
        qualifiedName: Cephei.Cell.Model.TryRemove
      VB:
      - id: Cephei.Cell.Model.TryRemove*
        name: TryRemove
        nameWithType: Model.TryRemove
        qualifiedName: Cephei.Cell.Model.TryRemove
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.TryRemove
  Cephei.Cell.Model.TryUpdate*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.TryUpdate*
        name: TryUpdate
        nameWithType: Model.TryUpdate
        qualifiedName: Cephei.Cell.Model.TryUpdate
      VB:
      - id: Cephei.Cell.Model.TryUpdate*
        name: TryUpdate
        nameWithType: Model.TryUpdate
        qualifiedName: Cephei.Cell.Model.TryUpdate
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.TryUpdate
  Cephei.Cell.Model.Item*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Item*
        name: Item
        nameWithType: Model.Item
        qualifiedName: Cephei.Cell.Model.Item
      VB:
      - id: Cephei.Cell.Model.Item*
        name: Item
        nameWithType: Model.Item
        qualifiedName: Cephei.Cell.Model.Item
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.Item
  Cephei.Cell.Model.As*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.As*
        name: As
        nameWithType: Model.As
        qualifiedName: Cephei.Cell.Model.As
      VB:
      - id: Cephei.Cell.Model.As*
        name: As
        nameWithType: Model.As
        qualifiedName: Cephei.Cell.Model.As
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.As
  Cephei.Cell.Model.Bind*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Bind*
        name: Bind
        nameWithType: Model.Bind
        qualifiedName: Cephei.Cell.Model.Bind
      VB:
      - id: Cephei.Cell.Model.Bind*
        name: Bind
        nameWithType: Model.Bind
        qualifiedName: Cephei.Cell.Model.Bind
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.Bind
  Cephei.Cell.Model.HasFunction*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.HasFunction*
        name: HasFunction
        nameWithType: Model.HasFunction
        qualifiedName: Cephei.Cell.Model.HasFunction
      VB:
      - id: Cephei.Cell.Model.HasFunction*
        name: HasFunction
        nameWithType: Model.HasFunction
        qualifiedName: Cephei.Cell.Model.HasFunction
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.HasFunction
  Cephei.Cell.Model.HasValue*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.HasValue*
        name: HasValue
        nameWithType: Model.HasValue
        qualifiedName: Cephei.Cell.Model.HasValue
      VB:
      - id: Cephei.Cell.Model.HasValue*
        name: HasValue
        nameWithType: Model.HasValue
        qualifiedName: Cephei.Cell.Model.HasValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.HasValue
  Cephei.Cell.Model.Box*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Box*
        name: Box
        nameWithType: Model.Box
        qualifiedName: Cephei.Cell.Model.Box
      VB:
      - id: Cephei.Cell.Model.Box*
        name: Box
        nameWithType: Model.Box
        qualifiedName: Cephei.Cell.Model.Box
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.Box
  IObserver{Cephei.Cell.ICell}:
    name:
      CSharp:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObserver`1
    commentId: '!:IObserver{Cephei.Cell.ICell}'
  Cephei.Cell.Model.Subscribe*:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Subscribe*
        name: Subscribe
        nameWithType: Model.Subscribe
        qualifiedName: Cephei.Cell.Model.Subscribe
      VB:
      - id: Cephei.Cell.Model.Subscribe*
        name: Subscribe
        nameWithType: Model.Subscribe
        qualifiedName: Cephei.Cell.Model.Subscribe
    isDefinition: true
    commentId: Overload:Cephei.Cell.Model.Subscribe
  IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,Cephei.Cell.ICell}}}:
    name:
      CSharp:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObserver`1
    commentId: '!:IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,Cephei.Cell.ICell}}}'
  IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}:
    name:
      CSharp:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Model
        name: Model
        nameWithType: Model
        qualifiedName: Cephei.Cell.Model
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Model
        name: Model
        nameWithType: Model
        qualifiedName: Cephei.Cell.Model
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObserver`1
    commentId: '!:IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}'
  IObserver{KeyValuePair{System.String,System.Double}}:
    name:
      CSharp:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObserver`1
    commentId: '!:IObserver{KeyValuePair{System.String,System.Double}}'
  IObserver{KeyValuePair{System.String,System.Int32}}:
    name:
      CSharp:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObserver`1
    commentId: '!:IObserver{KeyValuePair{System.String,System.Int32}}'
  IObserver{KeyValuePair{System.String,System.Decimal}}:
    name:
      CSharp:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Decimal
        name: Decimal
        nameWithType: Decimal
        qualifiedName: System.Decimal
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Decimal
        name: Decimal
        nameWithType: Decimal
        qualifiedName: System.Decimal
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IObserver`1
    commentId: '!:IObserver{KeyValuePair{System.String,System.Decimal}}'
  Cephei.Cell.Model:
    name:
      CSharp:
      - id: Cephei.Cell.Model
        name: Model
        nameWithType: Model
        qualifiedName: Cephei.Cell.Model
      VB:
      - id: Cephei.Cell.Model
        name: Model
        nameWithType: Model
        qualifiedName: Cephei.Cell.Model
    isDefinition: true
    parent: Cephei.Cell
    commentId: T:Cephei.Cell.Model
  Microsoft.FSharp.Core.FSharpFunc{Cephei.Cell.ICell,System.String}:
    name:
      CSharp:
      - id: Microsoft.FSharp.Core.FSharpFunc`2
        name: FSharpFunc
        nameWithType: FSharpFunc
        qualifiedName: Microsoft.FSharp.Core.FSharpFunc
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Microsoft.FSharp.Core.FSharpFunc`2
        name: FSharpFunc
        nameWithType: FSharpFunc
        qualifiedName: Microsoft.FSharp.Core.FSharpFunc
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Microsoft.FSharp.Core.FSharpFunc`2
    parent: Microsoft.FSharp.Core
    commentId: T:Microsoft.FSharp.Core.FSharpFunc{Cephei.Cell.ICell,System.String}
  Cephei.Cell.ModelTraceSubscriber.#ctor*:
    name:
      CSharp:
      - id: Cephei.Cell.ModelTraceSubscriber.#ctor*
        name: ModelTraceSubscriber
        nameWithType: ModelTraceSubscriber.ModelTraceSubscriber
        qualifiedName: Cephei.Cell.ModelTraceSubscriber.ModelTraceSubscriber
      VB:
      - id: Cephei.Cell.ModelTraceSubscriber.#ctor*
        name: ModelTraceSubscriber
        nameWithType: ModelTraceSubscriber.ModelTraceSubscriber
        qualifiedName: Cephei.Cell.ModelTraceSubscriber.ModelTraceSubscriber
    isDefinition: true
    commentId: Overload:Cephei.Cell.ModelTraceSubscriber.#ctor
  Cephei.Cell.ModelTraceSubscriber.OnCompleted*:
    name:
      CSharp:
      - id: Cephei.Cell.ModelTraceSubscriber.OnCompleted*
        name: OnCompleted
        nameWithType: ModelTraceSubscriber.OnCompleted
        qualifiedName: Cephei.Cell.ModelTraceSubscriber.OnCompleted
      VB:
      - id: Cephei.Cell.ModelTraceSubscriber.OnCompleted*
        name: OnCompleted
        nameWithType: ModelTraceSubscriber.OnCompleted
        qualifiedName: Cephei.Cell.ModelTraceSubscriber.OnCompleted
    isDefinition: true
    commentId: Overload:Cephei.Cell.ModelTraceSubscriber.OnCompleted
  Cephei.Cell.ModelTraceSubscriber.OnError*:
    name:
      CSharp:
      - id: Cephei.Cell.ModelTraceSubscriber.OnError*
        name: OnError
        nameWithType: ModelTraceSubscriber.OnError
        qualifiedName: Cephei.Cell.ModelTraceSubscriber.OnError
      VB:
      - id: Cephei.Cell.ModelTraceSubscriber.OnError*
        name: OnError
        nameWithType: ModelTraceSubscriber.OnError
        qualifiedName: Cephei.Cell.ModelTraceSubscriber.OnError
    isDefinition: true
    commentId: Overload:Cephei.Cell.ModelTraceSubscriber.OnError
  Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}:
    name:
      CSharp:
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Model
        name: Model
        nameWithType: Model
        qualifiedName: Cephei.Cell.Model
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Model
        name: Model
        nameWithType: Model
        qualifiedName: Cephei.Cell.Model
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Tuple`5
    commentId: '!:Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}'
  Cephei.Cell.ModelTraceSubscriber.OnNext*:
    name:
      CSharp:
      - id: Cephei.Cell.ModelTraceSubscriber.OnNext*
        name: OnNext
        nameWithType: ModelTraceSubscriber.OnNext
        qualifiedName: Cephei.Cell.ModelTraceSubscriber.OnNext
      VB:
      - id: Cephei.Cell.ModelTraceSubscriber.OnNext*
        name: OnNext
        nameWithType: ModelTraceSubscriber.OnNext
        qualifiedName: Cephei.Cell.ModelTraceSubscriber.OnNext
    isDefinition: true
    commentId: Overload:Cephei.Cell.ModelTraceSubscriber.OnNext
  Cephei.Cell.ModelTraceSubscriber.Dispose*:
    name:
      CSharp:
      - id: Cephei.Cell.ModelTraceSubscriber.Dispose*
        name: Dispose
        nameWithType: ModelTraceSubscriber.Dispose
        qualifiedName: Cephei.Cell.ModelTraceSubscriber.Dispose
      VB:
      - id: Cephei.Cell.ModelTraceSubscriber.Dispose*
        name: Dispose
        nameWithType: ModelTraceSubscriber.Dispose
        qualifiedName: Cephei.Cell.ModelTraceSubscriber.Dispose
    isDefinition: true
    commentId: Overload:Cephei.Cell.ModelTraceSubscriber.Dispose
  Cephei.Cell.ModelTraceSubscriber.Finalize*:
    name:
      CSharp:
      - id: Cephei.Cell.ModelTraceSubscriber.Finalize*
        name: Finalize
        nameWithType: ModelTraceSubscriber.Finalize
        qualifiedName: Cephei.Cell.ModelTraceSubscriber.Finalize
      VB:
      - id: Cephei.Cell.ModelTraceSubscriber.Finalize*
        name: Finalize
        nameWithType: ModelTraceSubscriber.Finalize
        qualifiedName: Cephei.Cell.ModelTraceSubscriber.Finalize
    isDefinition: true
    commentId: Overload:Cephei.Cell.ModelTraceSubscriber.Finalize
  Cephei.Cell.ModelTraceSubscriber:
    name:
      CSharp:
      - id: Cephei.Cell.ModelTraceSubscriber
        name: ModelTraceSubscriber
        nameWithType: ModelTraceSubscriber
        qualifiedName: Cephei.Cell.ModelTraceSubscriber
      VB:
      - id: Cephei.Cell.ModelTraceSubscriber
        name: ModelTraceSubscriber
        nameWithType: ModelTraceSubscriber
        qualifiedName: Cephei.Cell.ModelTraceSubscriber
    isDefinition: true
    commentId: T:Cephei.Cell.ModelTraceSubscriber
  IEnumerable{Cephei.Cell.ICell}:
    name:
      CSharp:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IEnumerable`1
    commentId: '!:IEnumerable{Cephei.Cell.ICell}'
  Cephei.Cell.ISession.Complete:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.Complete
        name: Complete
        nameWithType: ISession.Complete
        qualifiedName: Cephei.Cell.ISession.Complete
      VB:
      - id: Cephei.Cell.ISession.Complete
        name: Complete
        nameWithType: ISession.Complete
        qualifiedName: Cephei.Cell.ISession.Complete
    isDefinition: true
    parent: Cephei.Cell.ISession
    commentId: E:Cephei.Cell.ISession.Complete
  Cephei.Cell.Session:
    name:
      CSharp:
      - id: Cephei.Cell.Session
        name: Session
        nameWithType: Session
        qualifiedName: Cephei.Cell.Session
      VB:
      - id: Cephei.Cell.Session
        name: Session
        nameWithType: Session
        qualifiedName: Cephei.Cell.Session
    isDefinition: true
    parent: Cephei.Cell
    commentId: T:Cephei.Cell.Session
  Cephei.Cell.Session.Create*:
    name:
      CSharp:
      - id: Cephei.Cell.Session.Create*
        name: Create
        nameWithType: Session.Create
        qualifiedName: Cephei.Cell.Session.Create
      VB:
      - id: Cephei.Cell.Session.Create*
        name: Create
        nameWithType: Session.Create
        qualifiedName: Cephei.Cell.Session.Create
    isDefinition: true
    commentId: Overload:Cephei.Cell.Session.Create
  Cephei.Cell.Session.#ctor*:
    name:
      CSharp:
      - id: Cephei.Cell.Session.#ctor*
        name: Session
        nameWithType: Session.Session
        qualifiedName: Cephei.Cell.Session.Session
      VB:
      - id: Cephei.Cell.Session.#ctor*
        name: Session
        nameWithType: Session.Session
        qualifiedName: Cephei.Cell.Session.Session
    isDefinition: true
    commentId: Overload:Cephei.Cell.Session.#ctor
  Cephei.Cell.Session.State*:
    name:
      CSharp:
      - id: Cephei.Cell.Session.State*
        name: State
        nameWithType: Session.State
        qualifiedName: Cephei.Cell.Session.State
      VB:
      - id: Cephei.Cell.Session.State*
        name: State
        nameWithType: Session.State
        qualifiedName: Cephei.Cell.Session.State
    isDefinition: true
    commentId: Overload:Cephei.Cell.Session.State
  Cephei.Cell.ISession.State:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.State
        name: State
        nameWithType: ISession.State
        qualifiedName: Cephei.Cell.ISession.State
      VB:
      - id: Cephei.Cell.ISession.State
        name: State
        nameWithType: ISession.State
        qualifiedName: Cephei.Cell.ISession.State
    isDefinition: true
    parent: Cephei.Cell.ISession
    commentId: P:Cephei.Cell.ISession.State
  Cephei.Cell.Session.Mnemonic*:
    name:
      CSharp:
      - id: Cephei.Cell.Session.Mnemonic*
        name: Mnemonic
        nameWithType: Session.Mnemonic
        qualifiedName: Cephei.Cell.Session.Mnemonic
      VB:
      - id: Cephei.Cell.Session.Mnemonic*
        name: Mnemonic
        nameWithType: Session.Mnemonic
        qualifiedName: Cephei.Cell.Session.Mnemonic
    isDefinition: true
    commentId: Overload:Cephei.Cell.Session.Mnemonic
  Cephei.Cell.ISession.Mnemonic:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.Mnemonic
        name: Mnemonic
        nameWithType: ISession.Mnemonic
        qualifiedName: Cephei.Cell.ISession.Mnemonic
      VB:
      - id: Cephei.Cell.ISession.Mnemonic
        name: Mnemonic
        nameWithType: ISession.Mnemonic
        qualifiedName: Cephei.Cell.ISession.Mnemonic
    isDefinition: true
    parent: Cephei.Cell.ISession
    commentId: P:Cephei.Cell.ISession.Mnemonic
  Cephei.Cell.Session.Epoch*:
    name:
      CSharp:
      - id: Cephei.Cell.Session.Epoch*
        name: Epoch
        nameWithType: Session.Epoch
        qualifiedName: Cephei.Cell.Session.Epoch
      VB:
      - id: Cephei.Cell.Session.Epoch*
        name: Epoch
        nameWithType: Session.Epoch
        qualifiedName: Cephei.Cell.Session.Epoch
    isDefinition: true
    commentId: Overload:Cephei.Cell.Session.Epoch
  Cephei.Cell.ISession.Epoch:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.Epoch
        name: Epoch
        nameWithType: ISession.Epoch
        qualifiedName: Cephei.Cell.ISession.Epoch
      VB:
      - id: Cephei.Cell.ISession.Epoch
        name: Epoch
        nameWithType: ISession.Epoch
        qualifiedName: Cephei.Cell.ISession.Epoch
    isDefinition: true
    parent: Cephei.Cell.ISession
    commentId: P:Cephei.Cell.ISession.Epoch
  Cephei.Cell.Session.Size*:
    name:
      CSharp:
      - id: Cephei.Cell.Session.Size*
        name: Size
        nameWithType: Session.Size
        qualifiedName: Cephei.Cell.Session.Size
      VB:
      - id: Cephei.Cell.Session.Size*
        name: Size
        nameWithType: Session.Size
        qualifiedName: Cephei.Cell.Session.Size
    isDefinition: true
    commentId: Overload:Cephei.Cell.Session.Size
  Cephei.Cell.ISession.Size:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.Size
        name: Size
        nameWithType: ISession.Size
        qualifiedName: Cephei.Cell.ISession.Size
      VB:
      - id: Cephei.Cell.ISession.Size
        name: Size
        nameWithType: ISession.Size
        qualifiedName: Cephei.Cell.ISession.Size
    isDefinition: true
    parent: Cephei.Cell.ISession
    commentId: P:Cephei.Cell.ISession.Size
  Cephei.Cell.Session.PercentComplete*:
    name:
      CSharp:
      - id: Cephei.Cell.Session.PercentComplete*
        name: PercentComplete
        nameWithType: Session.PercentComplete
        qualifiedName: Cephei.Cell.Session.PercentComplete
      VB:
      - id: Cephei.Cell.Session.PercentComplete*
        name: PercentComplete
        nameWithType: Session.PercentComplete
        qualifiedName: Cephei.Cell.Session.PercentComplete
    isDefinition: true
    commentId: Overload:Cephei.Cell.Session.PercentComplete
  Cephei.Cell.ISession.PercentComplete:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.PercentComplete
        name: PercentComplete
        nameWithType: ISession.PercentComplete
        qualifiedName: Cephei.Cell.ISession.PercentComplete
      VB:
      - id: Cephei.Cell.ISession.PercentComplete
        name: PercentComplete
        nameWithType: ISession.PercentComplete
        qualifiedName: Cephei.Cell.ISession.PercentComplete
    isDefinition: true
    parent: Cephei.Cell.ISession
    commentId: P:Cephei.Cell.ISession.PercentComplete
  Cephei.Cell.Session.GetValue*:
    name:
      CSharp:
      - id: Cephei.Cell.Session.GetValue*
        name: GetValue
        nameWithType: Session.GetValue
        qualifiedName: Cephei.Cell.Session.GetValue
      VB:
      - id: Cephei.Cell.Session.GetValue*
        name: GetValue
        nameWithType: Session.GetValue
        qualifiedName: Cephei.Cell.Session.GetValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.Session.GetValue
  Cephei.Cell.ISession.GetValue``1(Cephei.Cell.ICell,``0@):
    name:
      CSharp:
      - id: Cephei.Cell.ISession.GetValue``1(Cephei.Cell.ICell,``0@)
        name: GetValue<T>
        nameWithType: ISession.GetValue<T>
        qualifiedName: Cephei.Cell.ISession.GetValue<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.ISession.GetValue``1(Cephei.Cell.ICell,``0@)
        name: GetValue(Of T)
        nameWithType: ISession.GetValue(Of T)
        qualifiedName: Cephei.Cell.ISession.GetValue(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Cephei.Cell.ISession.GetValue``1(Cephei.Cell.ICell,``0@)
  Cephei.Cell.ISession.GetValue``1(Cephei.Cell.ICell,{T}@):
    name:
      CSharp:
      - id: Cephei.Cell.ISession.GetValue``1(Cephei.Cell.ICell,``0@)
        name: GetValue<T>
        nameWithType: ISession.GetValue<T>
        qualifiedName: Cephei.Cell.ISession.GetValue<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.ISession.GetValue``1(Cephei.Cell.ICell,``0@)
        name: GetValue(Of T)
        nameWithType: ISession.GetValue(Of T)
        qualifiedName: Cephei.Cell.ISession.GetValue(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Cephei.Cell.ISession.GetValue``1(Cephei.Cell.ICell,``0@)
    parent: Cephei.Cell.ISession
    commentId: M:Cephei.Cell.ISession.GetValue``1(Cephei.Cell.ICell,``0@)
  Cephei.Cell.Session.HasJoined*:
    name:
      CSharp:
      - id: Cephei.Cell.Session.HasJoined*
        name: HasJoined
        nameWithType: Session.HasJoined
        qualifiedName: Cephei.Cell.Session.HasJoined
      VB:
      - id: Cephei.Cell.Session.HasJoined*
        name: HasJoined
        nameWithType: Session.HasJoined
        qualifiedName: Cephei.Cell.Session.HasJoined
    isDefinition: true
    commentId: Overload:Cephei.Cell.Session.HasJoined
  Cephei.Cell.ISession.HasJoined(Cephei.Cell.ICell):
    name:
      CSharp:
      - id: Cephei.Cell.ISession.HasJoined(Cephei.Cell.ICell)
        name: HasJoined
        nameWithType: ISession.HasJoined
        qualifiedName: Cephei.Cell.ISession.HasJoined
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.ISession.HasJoined(Cephei.Cell.ICell)
        name: HasJoined
        nameWithType: ISession.HasJoined
        qualifiedName: Cephei.Cell.ISession.HasJoined
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.ISession
    commentId: M:Cephei.Cell.ISession.HasJoined(Cephei.Cell.ICell)
  Cephei.Cell.Session.Join*:
    name:
      CSharp:
      - id: Cephei.Cell.Session.Join*
        name: Join
        nameWithType: Session.Join
        qualifiedName: Cephei.Cell.Session.Join
      VB:
      - id: Cephei.Cell.Session.Join*
        name: Join
        nameWithType: Session.Join
        qualifiedName: Cephei.Cell.Session.Join
    isDefinition: true
    commentId: Overload:Cephei.Cell.Session.Join
  Cephei.Cell.ISession.Join(Cephei.Cell.ICell):
    name:
      CSharp:
      - id: Cephei.Cell.ISession.Join(Cephei.Cell.ICell)
        name: Join
        nameWithType: ISession.Join
        qualifiedName: Cephei.Cell.ISession.Join
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.ISession.Join(Cephei.Cell.ICell)
        name: Join
        nameWithType: ISession.Join
        qualifiedName: Cephei.Cell.ISession.Join
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.ISession
    commentId: M:Cephei.Cell.ISession.Join(Cephei.Cell.ICell)
  Cephei.Cell.Session.Leave*:
    name:
      CSharp:
      - id: Cephei.Cell.Session.Leave*
        name: Leave
        nameWithType: Session.Leave
        qualifiedName: Cephei.Cell.Session.Leave
      VB:
      - id: Cephei.Cell.Session.Leave*
        name: Leave
        nameWithType: Session.Leave
        qualifiedName: Cephei.Cell.Session.Leave
    isDefinition: true
    commentId: Overload:Cephei.Cell.Session.Leave
  Cephei.Cell.ISession.Leave(Cephei.Cell.ICell):
    name:
      CSharp:
      - id: Cephei.Cell.ISession.Leave(Cephei.Cell.ICell)
        name: Leave
        nameWithType: ISession.Leave
        qualifiedName: Cephei.Cell.ISession.Leave
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.ISession.Leave(Cephei.Cell.ICell)
        name: Leave
        nameWithType: ISession.Leave
        qualifiedName: Cephei.Cell.ISession.Leave
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.ISession
    commentId: M:Cephei.Cell.ISession.Leave(Cephei.Cell.ICell)
  Cephei.Cell.Session.SetValue*:
    name:
      CSharp:
      - id: Cephei.Cell.Session.SetValue*
        name: SetValue
        nameWithType: Session.SetValue
        qualifiedName: Cephei.Cell.Session.SetValue
      VB:
      - id: Cephei.Cell.Session.SetValue*
        name: SetValue
        nameWithType: Session.SetValue
        qualifiedName: Cephei.Cell.Session.SetValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.Session.SetValue
  Cephei.Cell.ISession.SetValue``1(Cephei.Cell.ICell,``0):
    name:
      CSharp:
      - id: Cephei.Cell.ISession.SetValue``1(Cephei.Cell.ICell,``0)
        name: SetValue<T>
        nameWithType: ISession.SetValue<T>
        qualifiedName: Cephei.Cell.ISession.SetValue<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.ISession.SetValue``1(Cephei.Cell.ICell,``0)
        name: SetValue(Of T)
        nameWithType: ISession.SetValue(Of T)
        qualifiedName: Cephei.Cell.ISession.SetValue(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Cephei.Cell.ISession.SetValue``1(Cephei.Cell.ICell,``0)
  Cephei.Cell.ISession.SetValue``1(Cephei.Cell.ICell,{T}):
    name:
      CSharp:
      - id: Cephei.Cell.ISession.SetValue``1(Cephei.Cell.ICell,``0)
        name: SetValue<T>
        nameWithType: ISession.SetValue<T>
        qualifiedName: Cephei.Cell.ISession.SetValue<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.ISession.SetValue``1(Cephei.Cell.ICell,``0)
        name: SetValue(Of T)
        nameWithType: ISession.SetValue(Of T)
        qualifiedName: Cephei.Cell.ISession.SetValue(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Cephei.Cell.ISession.SetValue``1(Cephei.Cell.ICell,``0)
    parent: Cephei.Cell.ISession
    commentId: M:Cephei.Cell.ISession.SetValue``1(Cephei.Cell.ICell,``0)
  Cephei.Cell.Session.Dispose*:
    name:
      CSharp:
      - id: Cephei.Cell.Session.Dispose*
        name: Dispose
        nameWithType: Session.Dispose
        qualifiedName: Cephei.Cell.Session.Dispose
      VB:
      - id: Cephei.Cell.Session.Dispose*
        name: Dispose
        nameWithType: Session.Dispose
        qualifiedName: Cephei.Cell.Session.Dispose
    isDefinition: true
    commentId: Overload:Cephei.Cell.Session.Dispose
  Cephei.Cell.Session.Calculate*:
    name:
      CSharp:
      - id: Cephei.Cell.Session.Calculate*
        name: Calculate
        nameWithType: Session.Calculate
        qualifiedName: Cephei.Cell.Session.Calculate
      VB:
      - id: Cephei.Cell.Session.Calculate*
        name: Calculate
        nameWithType: Session.Calculate
        qualifiedName: Cephei.Cell.Session.Calculate
    isDefinition: true
    commentId: Overload:Cephei.Cell.Session.Calculate
  Cephei.Cell.ISession.Calculate:
    name:
      CSharp:
      - id: Cephei.Cell.ISession.Calculate
        name: Calculate
        nameWithType: ISession.Calculate
        qualifiedName: Cephei.Cell.ISession.Calculate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.ISession.Calculate
        name: Calculate
        nameWithType: ISession.Calculate
        qualifiedName: Cephei.Cell.ISession.Calculate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.ISession
    commentId: M:Cephei.Cell.ISession.Calculate
  IEnumerator{Cephei.Cell.ICell}:
    name:
      CSharp:
      - id: IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IEnumerator`1
    commentId: '!:IEnumerator{Cephei.Cell.ICell}'
  Cephei.Cell.Session.GetEnumerator*:
    name:
      CSharp:
      - id: Cephei.Cell.Session.GetEnumerator*
        name: GetEnumerator
        nameWithType: Session.GetEnumerator
        qualifiedName: Cephei.Cell.Session.GetEnumerator
      VB:
      - id: Cephei.Cell.Session.GetEnumerator*
        name: GetEnumerator
        nameWithType: Session.GetEnumerator
        qualifiedName: Cephei.Cell.Session.GetEnumerator
    isDefinition: true
    commentId: Overload:Cephei.Cell.Session.GetEnumerator
  Cephei.Cell.SessionStream.#ctor*:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream.#ctor*
        name: SessionStream
        nameWithType: SessionStream.SessionStream
        qualifiedName: Cephei.Cell.SessionStream.SessionStream
      VB:
      - id: Cephei.Cell.SessionStream.#ctor*
        name: SessionStream
        nameWithType: SessionStream.SessionStream
        qualifiedName: Cephei.Cell.SessionStream.SessionStream
    isDefinition: true
    commentId: Overload:Cephei.Cell.SessionStream.#ctor
  Cephei.Cell.SessionStream.Current*:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream.Current*
        name: Current
        nameWithType: SessionStream.Current
        qualifiedName: Cephei.Cell.SessionStream.Current
      VB:
      - id: Cephei.Cell.SessionStream.Current*
        name: Current
        nameWithType: SessionStream.Current
        qualifiedName: Cephei.Cell.SessionStream.Current
    isDefinition: true
    commentId: Overload:Cephei.Cell.SessionStream.Current
  Cephei.Cell.SessionStream.State*:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream.State*
        name: State
        nameWithType: SessionStream.State
        qualifiedName: Cephei.Cell.SessionStream.State
      VB:
      - id: Cephei.Cell.SessionStream.State*
        name: State
        nameWithType: SessionStream.State
        qualifiedName: Cephei.Cell.SessionStream.State
    isDefinition: true
    commentId: Overload:Cephei.Cell.SessionStream.State
  Cephei.Cell.SessionStream.Mnemonic*:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream.Mnemonic*
        name: Mnemonic
        nameWithType: SessionStream.Mnemonic
        qualifiedName: Cephei.Cell.SessionStream.Mnemonic
      VB:
      - id: Cephei.Cell.SessionStream.Mnemonic*
        name: Mnemonic
        nameWithType: SessionStream.Mnemonic
        qualifiedName: Cephei.Cell.SessionStream.Mnemonic
    isDefinition: true
    commentId: Overload:Cephei.Cell.SessionStream.Mnemonic
  Cephei.Cell.SessionStream.Epoch*:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream.Epoch*
        name: Epoch
        nameWithType: SessionStream.Epoch
        qualifiedName: Cephei.Cell.SessionStream.Epoch
      VB:
      - id: Cephei.Cell.SessionStream.Epoch*
        name: Epoch
        nameWithType: SessionStream.Epoch
        qualifiedName: Cephei.Cell.SessionStream.Epoch
    isDefinition: true
    commentId: Overload:Cephei.Cell.SessionStream.Epoch
  Cephei.Cell.SessionStream.Size*:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream.Size*
        name: Size
        nameWithType: SessionStream.Size
        qualifiedName: Cephei.Cell.SessionStream.Size
      VB:
      - id: Cephei.Cell.SessionStream.Size*
        name: Size
        nameWithType: SessionStream.Size
        qualifiedName: Cephei.Cell.SessionStream.Size
    isDefinition: true
    commentId: Overload:Cephei.Cell.SessionStream.Size
  Cephei.Cell.SessionStream.PercentComplete*:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream.PercentComplete*
        name: PercentComplete
        nameWithType: SessionStream.PercentComplete
        qualifiedName: Cephei.Cell.SessionStream.PercentComplete
      VB:
      - id: Cephei.Cell.SessionStream.PercentComplete*
        name: PercentComplete
        nameWithType: SessionStream.PercentComplete
        qualifiedName: Cephei.Cell.SessionStream.PercentComplete
    isDefinition: true
    commentId: Overload:Cephei.Cell.SessionStream.PercentComplete
  Cephei.Cell.SessionStream.Calculate*:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream.Calculate*
        name: Calculate
        nameWithType: SessionStream.Calculate
        qualifiedName: Cephei.Cell.SessionStream.Calculate
      VB:
      - id: Cephei.Cell.SessionStream.Calculate*
        name: Calculate
        nameWithType: SessionStream.Calculate
        qualifiedName: Cephei.Cell.SessionStream.Calculate
    isDefinition: true
    commentId: Overload:Cephei.Cell.SessionStream.Calculate
  Cephei.Cell.SessionStream.Dispose*:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream.Dispose*
        name: Dispose
        nameWithType: SessionStream.Dispose
        qualifiedName: Cephei.Cell.SessionStream.Dispose
      VB:
      - id: Cephei.Cell.SessionStream.Dispose*
        name: Dispose
        nameWithType: SessionStream.Dispose
        qualifiedName: Cephei.Cell.SessionStream.Dispose
    isDefinition: true
    commentId: Overload:Cephei.Cell.SessionStream.Dispose
  Cephei.Cell.SessionStream.GetValue*:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream.GetValue*
        name: GetValue
        nameWithType: SessionStream.GetValue
        qualifiedName: Cephei.Cell.SessionStream.GetValue
      VB:
      - id: Cephei.Cell.SessionStream.GetValue*
        name: GetValue
        nameWithType: SessionStream.GetValue
        qualifiedName: Cephei.Cell.SessionStream.GetValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.SessionStream.GetValue
  Cephei.Cell.SessionStream.HasJoined*:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream.HasJoined*
        name: HasJoined
        nameWithType: SessionStream.HasJoined
        qualifiedName: Cephei.Cell.SessionStream.HasJoined
      VB:
      - id: Cephei.Cell.SessionStream.HasJoined*
        name: HasJoined
        nameWithType: SessionStream.HasJoined
        qualifiedName: Cephei.Cell.SessionStream.HasJoined
    isDefinition: true
    commentId: Overload:Cephei.Cell.SessionStream.HasJoined
  Cephei.Cell.SessionStream.Join*:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream.Join*
        name: Join
        nameWithType: SessionStream.Join
        qualifiedName: Cephei.Cell.SessionStream.Join
      VB:
      - id: Cephei.Cell.SessionStream.Join*
        name: Join
        nameWithType: SessionStream.Join
        qualifiedName: Cephei.Cell.SessionStream.Join
    isDefinition: true
    commentId: Overload:Cephei.Cell.SessionStream.Join
  Cephei.Cell.SessionStream.Leave*:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream.Leave*
        name: Leave
        nameWithType: SessionStream.Leave
        qualifiedName: Cephei.Cell.SessionStream.Leave
      VB:
      - id: Cephei.Cell.SessionStream.Leave*
        name: Leave
        nameWithType: SessionStream.Leave
        qualifiedName: Cephei.Cell.SessionStream.Leave
    isDefinition: true
    commentId: Overload:Cephei.Cell.SessionStream.Leave
  Cephei.Cell.SessionStream.SetValue*:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream.SetValue*
        name: SetValue
        nameWithType: SessionStream.SetValue
        qualifiedName: Cephei.Cell.SessionStream.SetValue
      VB:
      - id: Cephei.Cell.SessionStream.SetValue*
        name: SetValue
        nameWithType: SessionStream.SetValue
        qualifiedName: Cephei.Cell.SessionStream.SetValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.SessionStream.SetValue
  Cephei.Cell.SessionStream.GetEnumerator*:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream.GetEnumerator*
        name: GetEnumerator
        nameWithType: SessionStream.GetEnumerator
        qualifiedName: Cephei.Cell.SessionStream.GetEnumerator
      VB:
      - id: Cephei.Cell.SessionStream.GetEnumerator*
        name: GetEnumerator
        nameWithType: SessionStream.GetEnumerator
        qualifiedName: Cephei.Cell.SessionStream.GetEnumerator
    isDefinition: true
    commentId: Overload:Cephei.Cell.SessionStream.GetEnumerator
  Cephei.Cell.SessionStream:
    name:
      CSharp:
      - id: Cephei.Cell.SessionStream
        name: SessionStream
        nameWithType: SessionStream
        qualifiedName: Cephei.Cell.SessionStream
      VB:
      - id: Cephei.Cell.SessionStream
        name: SessionStream
        nameWithType: SessionStream
        qualifiedName: Cephei.Cell.SessionStream
    isDefinition: true
    commentId: T:Cephei.Cell.SessionStream
  Cephei.Cell.Generic.Cell`1.Mnemonic*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Mnemonic*
        name: Mnemonic
        nameWithType: Cell<T>.Mnemonic
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Mnemonic
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Mnemonic*
        name: Mnemonic
        nameWithType: Cell(Of T).Mnemonic
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Mnemonic
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Cell`1.Mnemonic
  Cephei.Cell.Generic.Cell`1.Parent*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Parent*
        name: Parent
        nameWithType: Cell<T>.Parent
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Parent
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Parent*
        name: Parent
        nameWithType: Cell(Of T).Parent
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Parent
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Cell`1.Parent
  Cephei.Cell.Generic.Cell`1.#ctor*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.#ctor*
        name: Cell
        nameWithType: Cell<T>.Cell
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Cell
      VB:
      - id: Cephei.Cell.Generic.Cell`1.#ctor*
        name: Cell
        nameWithType: Cell(Of T).Cell
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Cell
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Cell`1.#ctor
  Cephei.Cell.Generic.Cell`1.GetValue*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.GetValue*
        name: GetValue
        nameWithType: Cell<T>.GetValue
        qualifiedName: Cephei.Cell.Generic.Cell<T>.GetValue
      VB:
      - id: Cephei.Cell.Generic.Cell`1.GetValue*
        name: GetValue
        nameWithType: Cell(Of T).GetValue
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).GetValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Cell`1.GetValue
  Cephei.Cell.Generic.Cell`1.Value*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Value*
        name: Value
        nameWithType: Cell<T>.Value
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Value
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Value*
        name: Value
        nameWithType: Cell(Of T).Value
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Value
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Cell`1.Value
  Cephei.Cell.Generic.Cell`1.Dependants*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Dependants*
        name: Dependants
        nameWithType: Cell<T>.Dependants
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Dependants
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Dependants*
        name: Dependants
        nameWithType: Cell(Of T).Dependants
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Dependants
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Cell`1.Dependants
  Cephei.Cell.Generic.Cell`1.Dispose*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Dispose*
        name: Dispose
        nameWithType: Cell<T>.Dispose
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Dispose
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Dispose*
        name: Dispose
        nameWithType: Cell(Of T).Dispose
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Dispose
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Cell`1.Dispose
  Cephei.Cell.Generic.Cell`1.OnChange*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.OnChange*
        name: OnChange
        nameWithType: Cell<T>.OnChange
        qualifiedName: Cephei.Cell.Generic.Cell<T>.OnChange
      VB:
      - id: Cephei.Cell.Generic.Cell`1.OnChange*
        name: OnChange
        nameWithType: Cell(Of T).OnChange
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).OnChange
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Cell`1.OnChange
  Cephei.Cell.Generic.Cell`1.HasFunction*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.HasFunction*
        name: HasFunction
        nameWithType: Cell<T>.HasFunction
        qualifiedName: Cephei.Cell.Generic.Cell<T>.HasFunction
      VB:
      - id: Cephei.Cell.Generic.Cell`1.HasFunction*
        name: HasFunction
        nameWithType: Cell(Of T).HasFunction
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).HasFunction
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Cell`1.HasFunction
  Cephei.Cell.Generic.Cell`1.HasValue*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.HasValue*
        name: HasValue
        nameWithType: Cell<T>.HasValue
        qualifiedName: Cephei.Cell.Generic.Cell<T>.HasValue
      VB:
      - id: Cephei.Cell.Generic.Cell`1.HasValue*
        name: HasValue
        nameWithType: Cell(Of T).HasValue
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).HasValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Cell`1.HasValue
  Cephei.Cell.Generic.Cell`1.Box*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Box*
        name: Box
        nameWithType: Cell<T>.Box
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Box
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Box*
        name: Box
        nameWithType: Cell(Of T).Box
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Box
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Cell`1.Box
  Cephei.Cell.Generic.Cell`1.Subscribe*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Subscribe*
        name: Subscribe
        nameWithType: Cell<T>.Subscribe
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Subscribe
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Subscribe*
        name: Subscribe
        nameWithType: Cell(Of T).Subscribe
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Subscribe
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Cell`1.Subscribe
  Cephei.Cell.Generic.Cell`1.OnCompleted*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.OnCompleted*
        name: OnCompleted
        nameWithType: Cell<T>.OnCompleted
        qualifiedName: Cephei.Cell.Generic.Cell<T>.OnCompleted
      VB:
      - id: Cephei.Cell.Generic.Cell`1.OnCompleted*
        name: OnCompleted
        nameWithType: Cell(Of T).OnCompleted
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).OnCompleted
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Cell`1.OnCompleted
  Cephei.Cell.Generic.Cell`1.OnError*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.OnError*
        name: OnError
        nameWithType: Cell<T>.OnError
        qualifiedName: Cephei.Cell.Generic.Cell<T>.OnError
      VB:
      - id: Cephei.Cell.Generic.Cell`1.OnError*
        name: OnError
        nameWithType: Cell(Of T).OnError
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).OnError
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Cell`1.OnError
  Cephei.Cell.Generic.Cell`1.OnNext*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.OnNext*
        name: OnNext
        nameWithType: Cell<T>.OnNext
        qualifiedName: Cephei.Cell.Generic.Cell<T>.OnNext
      VB:
      - id: Cephei.Cell.Generic.Cell`1.OnNext*
        name: OnNext
        nameWithType: Cell(Of T).OnNext
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).OnNext
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Cell`1.OnNext
  Cephei.Cell.Generic.Cell`1.Mnemonic:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Mnemonic
        name: Mnemonic
        nameWithType: Cell<T>.Mnemonic
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Mnemonic
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Mnemonic
        name: Mnemonic
        nameWithType: Cell(Of T).Mnemonic
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Mnemonic
    isDefinition: true
    commentId: P:Cephei.Cell.Generic.Cell`1.Mnemonic
  Cephei.Cell.Generic.Cell{{T}}.Mnemonic:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Mnemonic
        name: Mnemonic
        nameWithType: Cell<T>.Mnemonic
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Mnemonic
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Mnemonic
        name: Mnemonic
        nameWithType: Cell(Of T).Mnemonic
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Mnemonic
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.Mnemonic
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: P:Cephei.Cell.Generic.Cell{`0}.Mnemonic
  Cephei.Cell.Generic.Cell`1.Parent:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Parent
        name: Parent
        nameWithType: Cell<T>.Parent
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Parent
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Parent
        name: Parent
        nameWithType: Cell(Of T).Parent
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Parent
    isDefinition: true
    commentId: P:Cephei.Cell.Generic.Cell`1.Parent
  Cephei.Cell.Generic.Cell{{T}}.Parent:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Parent
        name: Parent
        nameWithType: Cell<T>.Parent
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Parent
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Parent
        name: Parent
        nameWithType: Cell(Of T).Parent
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Parent
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.Parent
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: P:Cephei.Cell.Generic.Cell{`0}.Parent
  Cephei.Cell.Generic.Cell`1.GetValue(System.Int32):
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.GetValue(System.Int32)
        name: GetValue
        nameWithType: Cell<T>.GetValue
        qualifiedName: Cephei.Cell.Generic.Cell<T>.GetValue
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.GetValue(System.Int32)
        name: GetValue
        nameWithType: Cell(Of T).GetValue
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).GetValue
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Cephei.Cell.Generic.Cell`1.GetValue(System.Int32)
  Cephei.Cell.Generic.Cell{{T}}.GetValue(System.Int32):
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.GetValue(System.Int32)
        name: GetValue
        nameWithType: Cell<T>.GetValue
        qualifiedName: Cephei.Cell.Generic.Cell<T>.GetValue
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.GetValue(System.Int32)
        name: GetValue
        nameWithType: Cell(Of T).GetValue
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).GetValue
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.GetValue(System.Int32)
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: M:Cephei.Cell.Generic.Cell{`0}.GetValue(System.Int32)
  Cephei.Cell.Generic.Cell`1.Dependants:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Dependants
        name: Dependants
        nameWithType: Cell<T>.Dependants
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Dependants
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Dependants
        name: Dependants
        nameWithType: Cell(Of T).Dependants
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Dependants
    isDefinition: true
    commentId: P:Cephei.Cell.Generic.Cell`1.Dependants
  Cephei.Cell.Generic.Cell{{T}}.Dependants:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Dependants
        name: Dependants
        nameWithType: Cell<T>.Dependants
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Dependants
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Dependants
        name: Dependants
        nameWithType: Cell(Of T).Dependants
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Dependants
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.Dependants
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: P:Cephei.Cell.Generic.Cell{`0}.Dependants
  Cephei.Cell.Generic.Cell`1.Change:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Change
        name: Change
        nameWithType: Cell<T>.Change
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Change
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Change
        name: Change
        nameWithType: Cell(Of T).Change
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Change
    isDefinition: true
    commentId: E:Cephei.Cell.Generic.Cell`1.Change
  Cephei.Cell.Generic.Cell{{T}}.Change:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Change
        name: Change
        nameWithType: Cell<T>.Change
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Change
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Change
        name: Change
        nameWithType: Cell(Of T).Change
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Change
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.Change
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: E:Cephei.Cell.Generic.Cell{`0}.Change
  Cephei.Cell.Generic.Cell`1.Dispose:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Dispose
        name: Dispose
        nameWithType: Cell<T>.Dispose
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Dispose
        name: Dispose
        nameWithType: Cell(Of T).Dispose
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Cephei.Cell.Generic.Cell`1.Dispose
  Cephei.Cell.Generic.Cell{{T}}.Dispose:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Dispose
        name: Dispose
        nameWithType: Cell<T>.Dispose
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Dispose
        name: Dispose
        nameWithType: Cell(Of T).Dispose
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.Dispose
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: M:Cephei.Cell.Generic.Cell{`0}.Dispose
  Cephei.Cell.Generic.Cell`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession):
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
        name: OnChange
        nameWithType: Cell<T>.OnChange
        qualifiedName: Cephei.Cell.Generic.Cell<T>.OnChange
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICellEvent
        name: ICellEvent
        nameWithType: ICellEvent
        qualifiedName: Cephei.Cell.ICellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
        name: OnChange
        nameWithType: Cell(Of T).OnChange
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).OnChange
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICellEvent
        name: ICellEvent
        nameWithType: ICellEvent
        qualifiedName: Cephei.Cell.ICellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Cephei.Cell.Generic.Cell`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
  Cephei.Cell.Generic.Cell{{T}}.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession):
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
        name: OnChange
        nameWithType: Cell<T>.OnChange
        qualifiedName: Cephei.Cell.Generic.Cell<T>.OnChange
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICellEvent
        name: ICellEvent
        nameWithType: ICellEvent
        qualifiedName: Cephei.Cell.ICellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
        name: OnChange
        nameWithType: Cell(Of T).OnChange
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).OnChange
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICellEvent
        name: ICellEvent
        nameWithType: ICellEvent
        qualifiedName: Cephei.Cell.ICellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: M:Cephei.Cell.Generic.Cell{`0}.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
  Cephei.Cell.Generic.Cell`1.HasFunction:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.HasFunction
        name: HasFunction
        nameWithType: Cell<T>.HasFunction
        qualifiedName: Cephei.Cell.Generic.Cell<T>.HasFunction
      VB:
      - id: Cephei.Cell.Generic.Cell`1.HasFunction
        name: HasFunction
        nameWithType: Cell(Of T).HasFunction
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).HasFunction
    isDefinition: true
    commentId: P:Cephei.Cell.Generic.Cell`1.HasFunction
  Cephei.Cell.Generic.Cell{{T}}.HasFunction:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.HasFunction
        name: HasFunction
        nameWithType: Cell<T>.HasFunction
        qualifiedName: Cephei.Cell.Generic.Cell<T>.HasFunction
      VB:
      - id: Cephei.Cell.Generic.Cell`1.HasFunction
        name: HasFunction
        nameWithType: Cell(Of T).HasFunction
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).HasFunction
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.HasFunction
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: P:Cephei.Cell.Generic.Cell{`0}.HasFunction
  Cephei.Cell.Generic.Cell`1.HasValue:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.HasValue
        name: HasValue
        nameWithType: Cell<T>.HasValue
        qualifiedName: Cephei.Cell.Generic.Cell<T>.HasValue
      VB:
      - id: Cephei.Cell.Generic.Cell`1.HasValue
        name: HasValue
        nameWithType: Cell(Of T).HasValue
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).HasValue
    isDefinition: true
    commentId: P:Cephei.Cell.Generic.Cell`1.HasValue
  Cephei.Cell.Generic.Cell{{T}}.HasValue:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.HasValue
        name: HasValue
        nameWithType: Cell<T>.HasValue
        qualifiedName: Cephei.Cell.Generic.Cell<T>.HasValue
      VB:
      - id: Cephei.Cell.Generic.Cell`1.HasValue
        name: HasValue
        nameWithType: Cell(Of T).HasValue
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).HasValue
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.HasValue
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: P:Cephei.Cell.Generic.Cell{`0}.HasValue
  Cephei.Cell.Generic.Cell`1.Box:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Box
        name: Box
        nameWithType: Cell<T>.Box
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Box
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Box
        name: Box
        nameWithType: Cell(Of T).Box
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Box
    isDefinition: true
    commentId: P:Cephei.Cell.Generic.Cell`1.Box
  Cephei.Cell.Generic.Cell{{T}}.Box:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Box
        name: Box
        nameWithType: Cell<T>.Box
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Box
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Box
        name: Box
        nameWithType: Cell(Of T).Box
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Box
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.Box
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: P:Cephei.Cell.Generic.Cell{`0}.Box
  Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{`0}):
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{`0})
        name: Subscribe
        nameWithType: Cell<T>.Subscribe
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{`0})
        name: Subscribe
        nameWithType: Cell(Of T).Subscribe
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{`0})
  Cephei.Cell.Generic.Cell{{T}}.Subscribe(IObserver{{T}}):
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{`0})
        name: Subscribe
        nameWithType: Cell<T>.Subscribe
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{`0})
        name: Subscribe
        nameWithType: Cell(Of T).Subscribe
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{`0})
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: M:Cephei.Cell.Generic.Cell{`0}.Subscribe(IObserver{`0})
  Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}}):
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
        name: Subscribe
        nameWithType: Cell<T>.Subscribe
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
        name: Subscribe
        nameWithType: Cell(Of T).Subscribe
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
  Cephei.Cell.Generic.Cell{{T}}.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}):
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
        name: Subscribe
        nameWithType: Cell<T>.Subscribe
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
        name: Subscribe
        nameWithType: Cell(Of T).Subscribe
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: M:Cephei.Cell.Generic.Cell{`0}.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
  ? Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
  : name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
        name: Subscribe
        nameWithType: Cell<T>.Subscribe
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
        name: Subscribe
        nameWithType: Cell(Of T).Subscribe
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
  ? Cephei.Cell.Generic.Cell{{T}}.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
  : name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
        name: Subscribe
        nameWithType: Cell<T>.Subscribe
        qualifiedName: Cephei.Cell.Generic.Cell<T>.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
        name: Subscribe
        nameWithType: Cell(Of T).Subscribe
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Generic.ICell`1
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.Generic.ICell
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: M:Cephei.Cell.Generic.Cell{`0}.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
  Cephei.Cell.Generic.Cell`1.OnCompleted:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.OnCompleted
        name: OnCompleted
        nameWithType: Cell<T>.OnCompleted
        qualifiedName: Cephei.Cell.Generic.Cell<T>.OnCompleted
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.OnCompleted
        name: OnCompleted
        nameWithType: Cell(Of T).OnCompleted
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).OnCompleted
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Cephei.Cell.Generic.Cell`1.OnCompleted
  Cephei.Cell.Generic.Cell{{T}}.OnCompleted:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.OnCompleted
        name: OnCompleted
        nameWithType: Cell<T>.OnCompleted
        qualifiedName: Cephei.Cell.Generic.Cell<T>.OnCompleted
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.OnCompleted
        name: OnCompleted
        nameWithType: Cell(Of T).OnCompleted
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).OnCompleted
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.OnCompleted
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: M:Cephei.Cell.Generic.Cell{`0}.OnCompleted
  Cephei.Cell.Generic.Cell`1.OnError(Exception):
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.OnError(Exception)
        name: OnError
        nameWithType: Cell<T>.OnError
        qualifiedName: Cephei.Cell.Generic.Cell<T>.OnError
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.OnError(Exception)
        name: OnError
        nameWithType: Cell(Of T).OnError
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).OnError
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Cephei.Cell.Generic.Cell`1.OnError(Exception)
  Cephei.Cell.Generic.Cell{{T}}.OnError(Exception):
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.OnError(Exception)
        name: OnError
        nameWithType: Cell<T>.OnError
        qualifiedName: Cephei.Cell.Generic.Cell<T>.OnError
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.OnError(Exception)
        name: OnError
        nameWithType: Cell(Of T).OnError
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).OnError
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.OnError(Exception)
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: M:Cephei.Cell.Generic.Cell{`0}.OnError(Exception)
  Cephei.Cell.Generic.Cell`1.OnNext(`0):
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.OnNext(`0)
        name: OnNext
        nameWithType: Cell<T>.OnNext
        qualifiedName: Cephei.Cell.Generic.Cell<T>.OnNext
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.OnNext(`0)
        name: OnNext
        nameWithType: Cell(Of T).OnNext
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).OnNext
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Cephei.Cell.Generic.Cell`1.OnNext(`0)
  Cephei.Cell.Generic.Cell{{T}}.OnNext({T}):
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Cell`1.OnNext(`0)
        name: OnNext
        nameWithType: Cell<T>.OnNext
        qualifiedName: Cephei.Cell.Generic.Cell<T>.OnNext
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Generic.Cell`1.OnNext(`0)
        name: OnNext
        nameWithType: Cell(Of T).OnNext
        qualifiedName: Cephei.Cell.Generic.Cell(Of T).OnNext
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Cephei.Cell.Generic.Cell`1.OnNext(`0)
    parent: Cephei.Cell.Generic.Cell{{T}}
    commentId: M:Cephei.Cell.Generic.Cell{`0}.OnNext(`0)
  Cephei.Cell.Generic.CellEmpty`1.#ctor*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellEmpty`1.#ctor*
        name: CellEmpty
        nameWithType: CellEmpty<T>.CellEmpty
        qualifiedName: Cephei.Cell.Generic.CellEmpty<T>.CellEmpty
      VB:
      - id: Cephei.Cell.Generic.CellEmpty`1.#ctor*
        name: CellEmpty
        nameWithType: CellEmpty(Of T).CellEmpty
        qualifiedName: Cephei.Cell.Generic.CellEmpty(Of T).CellEmpty
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellEmpty`1.#ctor
  Cephei.Cell.Generic.CellEmpty`1.Value*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellEmpty`1.Value*
        name: Value
        nameWithType: CellEmpty<T>.Value
        qualifiedName: Cephei.Cell.Generic.CellEmpty<T>.Value
      VB:
      - id: Cephei.Cell.Generic.CellEmpty`1.Value*
        name: Value
        nameWithType: CellEmpty(Of T).Value
        qualifiedName: Cephei.Cell.Generic.CellEmpty(Of T).Value
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellEmpty`1.Value
  Cephei.Cell.Generic.CellEmpty`1:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellEmpty`1
        name: CellEmpty
        nameWithType: CellEmpty
        qualifiedName: Cephei.Cell.Generic.CellEmpty
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Cephei.Cell.Generic.CellEmpty`1
        name: CellEmpty
        nameWithType: CellEmpty
        qualifiedName: Cephei.Cell.Generic.CellEmpty
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Cephei.Cell.Generic.CellEmpty`1
  Cephei.Cell.Generic.CellFast`1.Mnemonic*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1.Mnemonic*
        name: Mnemonic
        nameWithType: CellFast<T>.Mnemonic
        qualifiedName: Cephei.Cell.Generic.CellFast<T>.Mnemonic
      VB:
      - id: Cephei.Cell.Generic.CellFast`1.Mnemonic*
        name: Mnemonic
        nameWithType: CellFast(Of T).Mnemonic
        qualifiedName: Cephei.Cell.Generic.CellFast(Of T).Mnemonic
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellFast`1.Mnemonic
  Cephei.Cell.Generic.CellFast`1.Parent*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1.Parent*
        name: Parent
        nameWithType: CellFast<T>.Parent
        qualifiedName: Cephei.Cell.Generic.CellFast<T>.Parent
      VB:
      - id: Cephei.Cell.Generic.CellFast`1.Parent*
        name: Parent
        nameWithType: CellFast(Of T).Parent
        qualifiedName: Cephei.Cell.Generic.CellFast(Of T).Parent
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellFast`1.Parent
  Cephei.Cell.Generic.CellFast`1.#ctor*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1.#ctor*
        name: CellFast
        nameWithType: CellFast<T>.CellFast
        qualifiedName: Cephei.Cell.Generic.CellFast<T>.CellFast
      VB:
      - id: Cephei.Cell.Generic.CellFast`1.#ctor*
        name: CellFast
        nameWithType: CellFast(Of T).CellFast
        qualifiedName: Cephei.Cell.Generic.CellFast(Of T).CellFast
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellFast`1.#ctor
  Cephei.Cell.Generic.CellFast`1.GetValue*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1.GetValue*
        name: GetValue
        nameWithType: CellFast<T>.GetValue
        qualifiedName: Cephei.Cell.Generic.CellFast<T>.GetValue
      VB:
      - id: Cephei.Cell.Generic.CellFast`1.GetValue*
        name: GetValue
        nameWithType: CellFast(Of T).GetValue
        qualifiedName: Cephei.Cell.Generic.CellFast(Of T).GetValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellFast`1.GetValue
  Cephei.Cell.Generic.CellFast`1.Value*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1.Value*
        name: Value
        nameWithType: CellFast<T>.Value
        qualifiedName: Cephei.Cell.Generic.CellFast<T>.Value
      VB:
      - id: Cephei.Cell.Generic.CellFast`1.Value*
        name: Value
        nameWithType: CellFast(Of T).Value
        qualifiedName: Cephei.Cell.Generic.CellFast(Of T).Value
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellFast`1.Value
  Cephei.Cell.Generic.CellFast`1.Dependants*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1.Dependants*
        name: Dependants
        nameWithType: CellFast<T>.Dependants
        qualifiedName: Cephei.Cell.Generic.CellFast<T>.Dependants
      VB:
      - id: Cephei.Cell.Generic.CellFast`1.Dependants*
        name: Dependants
        nameWithType: CellFast(Of T).Dependants
        qualifiedName: Cephei.Cell.Generic.CellFast(Of T).Dependants
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellFast`1.Dependants
  Cephei.Cell.Generic.CellFast`1.Dispose*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1.Dispose*
        name: Dispose
        nameWithType: CellFast<T>.Dispose
        qualifiedName: Cephei.Cell.Generic.CellFast<T>.Dispose
      VB:
      - id: Cephei.Cell.Generic.CellFast`1.Dispose*
        name: Dispose
        nameWithType: CellFast(Of T).Dispose
        qualifiedName: Cephei.Cell.Generic.CellFast(Of T).Dispose
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellFast`1.Dispose
  Cephei.Cell.Generic.CellFast`1.OnChange*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1.OnChange*
        name: OnChange
        nameWithType: CellFast<T>.OnChange
        qualifiedName: Cephei.Cell.Generic.CellFast<T>.OnChange
      VB:
      - id: Cephei.Cell.Generic.CellFast`1.OnChange*
        name: OnChange
        nameWithType: CellFast(Of T).OnChange
        qualifiedName: Cephei.Cell.Generic.CellFast(Of T).OnChange
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellFast`1.OnChange
  Cephei.Cell.Generic.CellFast`1.HasFunction*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1.HasFunction*
        name: HasFunction
        nameWithType: CellFast<T>.HasFunction
        qualifiedName: Cephei.Cell.Generic.CellFast<T>.HasFunction
      VB:
      - id: Cephei.Cell.Generic.CellFast`1.HasFunction*
        name: HasFunction
        nameWithType: CellFast(Of T).HasFunction
        qualifiedName: Cephei.Cell.Generic.CellFast(Of T).HasFunction
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellFast`1.HasFunction
  Cephei.Cell.Generic.CellFast`1.HasValue*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1.HasValue*
        name: HasValue
        nameWithType: CellFast<T>.HasValue
        qualifiedName: Cephei.Cell.Generic.CellFast<T>.HasValue
      VB:
      - id: Cephei.Cell.Generic.CellFast`1.HasValue*
        name: HasValue
        nameWithType: CellFast(Of T).HasValue
        qualifiedName: Cephei.Cell.Generic.CellFast(Of T).HasValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellFast`1.HasValue
  Cephei.Cell.Generic.CellFast`1.Box*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1.Box*
        name: Box
        nameWithType: CellFast<T>.Box
        qualifiedName: Cephei.Cell.Generic.CellFast<T>.Box
      VB:
      - id: Cephei.Cell.Generic.CellFast`1.Box*
        name: Box
        nameWithType: CellFast(Of T).Box
        qualifiedName: Cephei.Cell.Generic.CellFast(Of T).Box
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellFast`1.Box
  Cephei.Cell.Generic.CellFast`1.Subscribe*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1.Subscribe*
        name: Subscribe
        nameWithType: CellFast<T>.Subscribe
        qualifiedName: Cephei.Cell.Generic.CellFast<T>.Subscribe
      VB:
      - id: Cephei.Cell.Generic.CellFast`1.Subscribe*
        name: Subscribe
        nameWithType: CellFast(Of T).Subscribe
        qualifiedName: Cephei.Cell.Generic.CellFast(Of T).Subscribe
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellFast`1.Subscribe
  Cephei.Cell.Generic.CellFast`1.OnCompleted*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1.OnCompleted*
        name: OnCompleted
        nameWithType: CellFast<T>.OnCompleted
        qualifiedName: Cephei.Cell.Generic.CellFast<T>.OnCompleted
      VB:
      - id: Cephei.Cell.Generic.CellFast`1.OnCompleted*
        name: OnCompleted
        nameWithType: CellFast(Of T).OnCompleted
        qualifiedName: Cephei.Cell.Generic.CellFast(Of T).OnCompleted
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellFast`1.OnCompleted
  Cephei.Cell.Generic.CellFast`1.OnError*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1.OnError*
        name: OnError
        nameWithType: CellFast<T>.OnError
        qualifiedName: Cephei.Cell.Generic.CellFast<T>.OnError
      VB:
      - id: Cephei.Cell.Generic.CellFast`1.OnError*
        name: OnError
        nameWithType: CellFast(Of T).OnError
        qualifiedName: Cephei.Cell.Generic.CellFast(Of T).OnError
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellFast`1.OnError
  Cephei.Cell.Generic.CellFast`1.OnNext*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1.OnNext*
        name: OnNext
        nameWithType: CellFast<T>.OnNext
        qualifiedName: Cephei.Cell.Generic.CellFast<T>.OnNext
      VB:
      - id: Cephei.Cell.Generic.CellFast`1.OnNext*
        name: OnNext
        nameWithType: CellFast(Of T).OnNext
        qualifiedName: Cephei.Cell.Generic.CellFast(Of T).OnNext
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellFast`1.OnNext
  Cephei.Cell.Generic.CellFast`1:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellFast`1
        name: CellFast
        nameWithType: CellFast
        qualifiedName: Cephei.Cell.Generic.CellFast
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Cephei.Cell.Generic.CellFast`1
        name: CellFast
        nameWithType: CellFast
        qualifiedName: Cephei.Cell.Generic.CellFast
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Cephei.Cell.Generic.CellFast`1
  Cephei.Cell.Generic.CellTrivial`1.Mnemonic*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellTrivial`1.Mnemonic*
        name: Mnemonic
        nameWithType: CellTrivial<T>.Mnemonic
        qualifiedName: Cephei.Cell.Generic.CellTrivial<T>.Mnemonic
      VB:
      - id: Cephei.Cell.Generic.CellTrivial`1.Mnemonic*
        name: Mnemonic
        nameWithType: CellTrivial(Of T).Mnemonic
        qualifiedName: Cephei.Cell.Generic.CellTrivial(Of T).Mnemonic
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellTrivial`1.Mnemonic
  Cephei.Cell.Generic.CellTrivial`1.Parent*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellTrivial`1.Parent*
        name: Parent
        nameWithType: CellTrivial<T>.Parent
        qualifiedName: Cephei.Cell.Generic.CellTrivial<T>.Parent
      VB:
      - id: Cephei.Cell.Generic.CellTrivial`1.Parent*
        name: Parent
        nameWithType: CellTrivial(Of T).Parent
        qualifiedName: Cephei.Cell.Generic.CellTrivial(Of T).Parent
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellTrivial`1.Parent
  Cephei.Cell.Generic.CellTrivial`1.#ctor*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellTrivial`1.#ctor*
        name: CellTrivial
        nameWithType: CellTrivial<T>.CellTrivial
        qualifiedName: Cephei.Cell.Generic.CellTrivial<T>.CellTrivial
      VB:
      - id: Cephei.Cell.Generic.CellTrivial`1.#ctor*
        name: CellTrivial
        nameWithType: CellTrivial(Of T).CellTrivial
        qualifiedName: Cephei.Cell.Generic.CellTrivial(Of T).CellTrivial
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellTrivial`1.#ctor
  Cephei.Cell.Generic.CellTrivial`1.Value*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellTrivial`1.Value*
        name: Value
        nameWithType: CellTrivial<T>.Value
        qualifiedName: Cephei.Cell.Generic.CellTrivial<T>.Value
      VB:
      - id: Cephei.Cell.Generic.CellTrivial`1.Value*
        name: Value
        nameWithType: CellTrivial(Of T).Value
        qualifiedName: Cephei.Cell.Generic.CellTrivial(Of T).Value
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellTrivial`1.Value
  Cephei.Cell.Generic.CellTrivial`1.Dispose*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellTrivial`1.Dispose*
        name: Dispose
        nameWithType: CellTrivial<T>.Dispose
        qualifiedName: Cephei.Cell.Generic.CellTrivial<T>.Dispose
      VB:
      - id: Cephei.Cell.Generic.CellTrivial`1.Dispose*
        name: Dispose
        nameWithType: CellTrivial(Of T).Dispose
        qualifiedName: Cephei.Cell.Generic.CellTrivial(Of T).Dispose
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellTrivial`1.Dispose
  Cephei.Cell.Generic.CellTrivial`1.OnChange*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellTrivial`1.OnChange*
        name: OnChange
        nameWithType: CellTrivial<T>.OnChange
        qualifiedName: Cephei.Cell.Generic.CellTrivial<T>.OnChange
      VB:
      - id: Cephei.Cell.Generic.CellTrivial`1.OnChange*
        name: OnChange
        nameWithType: CellTrivial(Of T).OnChange
        qualifiedName: Cephei.Cell.Generic.CellTrivial(Of T).OnChange
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellTrivial`1.OnChange
  Cephei.Cell.Generic.CellTrivial`1.HasFunction*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellTrivial`1.HasFunction*
        name: HasFunction
        nameWithType: CellTrivial<T>.HasFunction
        qualifiedName: Cephei.Cell.Generic.CellTrivial<T>.HasFunction
      VB:
      - id: Cephei.Cell.Generic.CellTrivial`1.HasFunction*
        name: HasFunction
        nameWithType: CellTrivial(Of T).HasFunction
        qualifiedName: Cephei.Cell.Generic.CellTrivial(Of T).HasFunction
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellTrivial`1.HasFunction
  Cephei.Cell.Generic.CellTrivial`1.HasValue*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellTrivial`1.HasValue*
        name: HasValue
        nameWithType: CellTrivial<T>.HasValue
        qualifiedName: Cephei.Cell.Generic.CellTrivial<T>.HasValue
      VB:
      - id: Cephei.Cell.Generic.CellTrivial`1.HasValue*
        name: HasValue
        nameWithType: CellTrivial(Of T).HasValue
        qualifiedName: Cephei.Cell.Generic.CellTrivial(Of T).HasValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellTrivial`1.HasValue
  Cephei.Cell.Generic.CellTrivial`1.Box*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellTrivial`1.Box*
        name: Box
        nameWithType: CellTrivial<T>.Box
        qualifiedName: Cephei.Cell.Generic.CellTrivial<T>.Box
      VB:
      - id: Cephei.Cell.Generic.CellTrivial`1.Box*
        name: Box
        nameWithType: CellTrivial(Of T).Box
        qualifiedName: Cephei.Cell.Generic.CellTrivial(Of T).Box
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellTrivial`1.Box
  Cephei.Cell.Generic.CellTrivial`1.Dependants*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellTrivial`1.Dependants*
        name: Dependants
        nameWithType: CellTrivial<T>.Dependants
        qualifiedName: Cephei.Cell.Generic.CellTrivial<T>.Dependants
      VB:
      - id: Cephei.Cell.Generic.CellTrivial`1.Dependants*
        name: Dependants
        nameWithType: CellTrivial(Of T).Dependants
        qualifiedName: Cephei.Cell.Generic.CellTrivial(Of T).Dependants
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellTrivial`1.Dependants
  Cephei.Cell.Generic.CellTrivial`1.Subscribe*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellTrivial`1.Subscribe*
        name: Subscribe
        nameWithType: CellTrivial<T>.Subscribe
        qualifiedName: Cephei.Cell.Generic.CellTrivial<T>.Subscribe
      VB:
      - id: Cephei.Cell.Generic.CellTrivial`1.Subscribe*
        name: Subscribe
        nameWithType: CellTrivial(Of T).Subscribe
        qualifiedName: Cephei.Cell.Generic.CellTrivial(Of T).Subscribe
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellTrivial`1.Subscribe
  Cephei.Cell.Generic.CellTrivial`1.OnCompleted*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellTrivial`1.OnCompleted*
        name: OnCompleted
        nameWithType: CellTrivial<T>.OnCompleted
        qualifiedName: Cephei.Cell.Generic.CellTrivial<T>.OnCompleted
      VB:
      - id: Cephei.Cell.Generic.CellTrivial`1.OnCompleted*
        name: OnCompleted
        nameWithType: CellTrivial(Of T).OnCompleted
        qualifiedName: Cephei.Cell.Generic.CellTrivial(Of T).OnCompleted
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellTrivial`1.OnCompleted
  Cephei.Cell.Generic.CellTrivial`1.OnError*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellTrivial`1.OnError*
        name: OnError
        nameWithType: CellTrivial<T>.OnError
        qualifiedName: Cephei.Cell.Generic.CellTrivial<T>.OnError
      VB:
      - id: Cephei.Cell.Generic.CellTrivial`1.OnError*
        name: OnError
        nameWithType: CellTrivial(Of T).OnError
        qualifiedName: Cephei.Cell.Generic.CellTrivial(Of T).OnError
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellTrivial`1.OnError
  Cephei.Cell.Generic.CellTrivial`1.OnNext*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellTrivial`1.OnNext*
        name: OnNext
        nameWithType: CellTrivial<T>.OnNext
        qualifiedName: Cephei.Cell.Generic.CellTrivial<T>.OnNext
      VB:
      - id: Cephei.Cell.Generic.CellTrivial`1.OnNext*
        name: OnNext
        nameWithType: CellTrivial(Of T).OnNext
        qualifiedName: Cephei.Cell.Generic.CellTrivial(Of T).OnNext
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellTrivial`1.OnNext
  Cephei.Cell.Generic.CellTrivial`1:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellTrivial`1
        name: CellTrivial
        nameWithType: CellTrivial
        qualifiedName: Cephei.Cell.Generic.CellTrivial
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Cephei.Cell.Generic.CellTrivial`1
        name: CellTrivial
        nameWithType: CellTrivial
        qualifiedName: Cephei.Cell.Generic.CellTrivial
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Cephei.Cell.Generic.CellTrivial`1
  Cephei.Cell.Generic.CellSpot`1.Mnemonic*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1.Mnemonic*
        name: Mnemonic
        nameWithType: CellSpot<T>.Mnemonic
        qualifiedName: Cephei.Cell.Generic.CellSpot<T>.Mnemonic
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1.Mnemonic*
        name: Mnemonic
        nameWithType: CellSpot(Of T).Mnemonic
        qualifiedName: Cephei.Cell.Generic.CellSpot(Of T).Mnemonic
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellSpot`1.Mnemonic
  Cephei.Cell.Generic.CellSpot`1.Parent*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1.Parent*
        name: Parent
        nameWithType: CellSpot<T>.Parent
        qualifiedName: Cephei.Cell.Generic.CellSpot<T>.Parent
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1.Parent*
        name: Parent
        nameWithType: CellSpot(Of T).Parent
        qualifiedName: Cephei.Cell.Generic.CellSpot(Of T).Parent
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellSpot`1.Parent
  Cephei.Cell.Generic.CellSpot`1.#ctor*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1.#ctor*
        name: CellSpot
        nameWithType: CellSpot<T>.CellSpot
        qualifiedName: Cephei.Cell.Generic.CellSpot<T>.CellSpot
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1.#ctor*
        name: CellSpot
        nameWithType: CellSpot(Of T).CellSpot
        qualifiedName: Cephei.Cell.Generic.CellSpot(Of T).CellSpot
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellSpot`1.#ctor
  Cephei.Cell.Generic.CellSpot`1.GetValue*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1.GetValue*
        name: GetValue
        nameWithType: CellSpot<T>.GetValue
        qualifiedName: Cephei.Cell.Generic.CellSpot<T>.GetValue
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1.GetValue*
        name: GetValue
        nameWithType: CellSpot(Of T).GetValue
        qualifiedName: Cephei.Cell.Generic.CellSpot(Of T).GetValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellSpot`1.GetValue
  Cephei.Cell.Generic.CellSpot`1.Value*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1.Value*
        name: Value
        nameWithType: CellSpot<T>.Value
        qualifiedName: Cephei.Cell.Generic.CellSpot<T>.Value
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1.Value*
        name: Value
        nameWithType: CellSpot(Of T).Value
        qualifiedName: Cephei.Cell.Generic.CellSpot(Of T).Value
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellSpot`1.Value
  Cephei.Cell.Generic.CellSpot`1.Dependants*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1.Dependants*
        name: Dependants
        nameWithType: CellSpot<T>.Dependants
        qualifiedName: Cephei.Cell.Generic.CellSpot<T>.Dependants
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1.Dependants*
        name: Dependants
        nameWithType: CellSpot(Of T).Dependants
        qualifiedName: Cephei.Cell.Generic.CellSpot(Of T).Dependants
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellSpot`1.Dependants
  Cephei.Cell.Generic.CellSpot`1.Dispose*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1.Dispose*
        name: Dispose
        nameWithType: CellSpot<T>.Dispose
        qualifiedName: Cephei.Cell.Generic.CellSpot<T>.Dispose
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1.Dispose*
        name: Dispose
        nameWithType: CellSpot(Of T).Dispose
        qualifiedName: Cephei.Cell.Generic.CellSpot(Of T).Dispose
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellSpot`1.Dispose
  Cephei.Cell.Generic.CellSpot`1.OnChange*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1.OnChange*
        name: OnChange
        nameWithType: CellSpot<T>.OnChange
        qualifiedName: Cephei.Cell.Generic.CellSpot<T>.OnChange
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1.OnChange*
        name: OnChange
        nameWithType: CellSpot(Of T).OnChange
        qualifiedName: Cephei.Cell.Generic.CellSpot(Of T).OnChange
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellSpot`1.OnChange
  Cephei.Cell.Generic.CellSpot`1.HasFunction*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1.HasFunction*
        name: HasFunction
        nameWithType: CellSpot<T>.HasFunction
        qualifiedName: Cephei.Cell.Generic.CellSpot<T>.HasFunction
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1.HasFunction*
        name: HasFunction
        nameWithType: CellSpot(Of T).HasFunction
        qualifiedName: Cephei.Cell.Generic.CellSpot(Of T).HasFunction
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellSpot`1.HasFunction
  Cephei.Cell.Generic.CellSpot`1.HasValue*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1.HasValue*
        name: HasValue
        nameWithType: CellSpot<T>.HasValue
        qualifiedName: Cephei.Cell.Generic.CellSpot<T>.HasValue
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1.HasValue*
        name: HasValue
        nameWithType: CellSpot(Of T).HasValue
        qualifiedName: Cephei.Cell.Generic.CellSpot(Of T).HasValue
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellSpot`1.HasValue
  Cephei.Cell.Generic.CellSpot`1.Box*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1.Box*
        name: Box
        nameWithType: CellSpot<T>.Box
        qualifiedName: Cephei.Cell.Generic.CellSpot<T>.Box
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1.Box*
        name: Box
        nameWithType: CellSpot(Of T).Box
        qualifiedName: Cephei.Cell.Generic.CellSpot(Of T).Box
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellSpot`1.Box
  Cephei.Cell.Generic.CellSpot`1.Subscribe*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1.Subscribe*
        name: Subscribe
        nameWithType: CellSpot<T>.Subscribe
        qualifiedName: Cephei.Cell.Generic.CellSpot<T>.Subscribe
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1.Subscribe*
        name: Subscribe
        nameWithType: CellSpot(Of T).Subscribe
        qualifiedName: Cephei.Cell.Generic.CellSpot(Of T).Subscribe
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellSpot`1.Subscribe
  Cephei.Cell.Generic.CellSpot`1.OnCompleted*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1.OnCompleted*
        name: OnCompleted
        nameWithType: CellSpot<T>.OnCompleted
        qualifiedName: Cephei.Cell.Generic.CellSpot<T>.OnCompleted
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1.OnCompleted*
        name: OnCompleted
        nameWithType: CellSpot(Of T).OnCompleted
        qualifiedName: Cephei.Cell.Generic.CellSpot(Of T).OnCompleted
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellSpot`1.OnCompleted
  Cephei.Cell.Generic.CellSpot`1.OnError*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1.OnError*
        name: OnError
        nameWithType: CellSpot<T>.OnError
        qualifiedName: Cephei.Cell.Generic.CellSpot<T>.OnError
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1.OnError*
        name: OnError
        nameWithType: CellSpot(Of T).OnError
        qualifiedName: Cephei.Cell.Generic.CellSpot(Of T).OnError
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellSpot`1.OnError
  Cephei.Cell.Generic.CellSpot`1.OnNext*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1.OnNext*
        name: OnNext
        nameWithType: CellSpot<T>.OnNext
        qualifiedName: Cephei.Cell.Generic.CellSpot<T>.OnNext
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1.OnNext*
        name: OnNext
        nameWithType: CellSpot(Of T).OnNext
        qualifiedName: Cephei.Cell.Generic.CellSpot(Of T).OnNext
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.CellSpot`1.OnNext
  Cephei.Cell.Generic.CellSpot`1:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.CellSpot`1
        name: CellSpot
        nameWithType: CellSpot
        qualifiedName: Cephei.Cell.Generic.CellSpot
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Cephei.Cell.Generic.CellSpot`1
        name: CellSpot
        nameWithType: CellSpot
        qualifiedName: Cephei.Cell.Generic.CellSpot
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Cephei.Cell.Generic.CellSpot`1
  Cephei.Cell.Generic.ICell`1.Value*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.ICell`1.Value*
        name: Value
        nameWithType: ICell<T>.Value
        qualifiedName: Cephei.Cell.Generic.ICell<T>.Value
      VB:
      - id: Cephei.Cell.Generic.ICell`1.Value*
        name: Value
        nameWithType: ICell(Of T).Value
        qualifiedName: Cephei.Cell.Generic.ICell(Of T).Value
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.ICell`1.Value
  Cephei.Cell.Model.Parent:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Parent
        name: Parent
        nameWithType: Model.Parent
        qualifiedName: Cephei.Cell.Model.Parent
      VB:
      - id: Cephei.Cell.Model.Parent
        name: Parent
        nameWithType: Model.Parent
        qualifiedName: Cephei.Cell.Model.Parent
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: P:Cephei.Cell.Model.Parent
  Cephei.Cell.Model.Dependants:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Dependants
        name: Dependants
        nameWithType: Model.Dependants
        qualifiedName: Cephei.Cell.Model.Dependants
      VB:
      - id: Cephei.Cell.Model.Dependants
        name: Dependants
        nameWithType: Model.Dependants
        qualifiedName: Cephei.Cell.Model.Dependants
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: P:Cephei.Cell.Model.Dependants
  Cephei.Cell.Model.Mnemonic:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Mnemonic
        name: Mnemonic
        nameWithType: Model.Mnemonic
        qualifiedName: Cephei.Cell.Model.Mnemonic
      VB:
      - id: Cephei.Cell.Model.Mnemonic
        name: Mnemonic
        nameWithType: Model.Mnemonic
        qualifiedName: Cephei.Cell.Model.Mnemonic
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: P:Cephei.Cell.Model.Mnemonic
  Cephei.Cell.Model.Change:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Change
        name: Change
        nameWithType: Model.Change
        qualifiedName: Cephei.Cell.Model.Change
      VB:
      - id: Cephei.Cell.Model.Change
        name: Change
        nameWithType: Model.Change
        qualifiedName: Cephei.Cell.Model.Change
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: E:Cephei.Cell.Model.Change
  Cephei.Cell.Model.Dispose:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Dispose
        name: Dispose
        nameWithType: Model.Dispose
        qualifiedName: Cephei.Cell.Model.Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.Dispose
        name: Dispose
        nameWithType: Model.Dispose
        qualifiedName: Cephei.Cell.Model.Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.Dispose
  Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession):
    name:
      CSharp:
      - id: Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
        name: OnChange
        nameWithType: Model.OnChange
        qualifiedName: Cephei.Cell.Model.OnChange
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICellEvent
        name: ICellEvent
        nameWithType: ICellEvent
        qualifiedName: Cephei.Cell.ICellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
        name: OnChange
        nameWithType: Model.OnChange
        qualifiedName: Cephei.Cell.Model.OnChange
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICellEvent
        name: ICellEvent
        nameWithType: ICellEvent
        qualifiedName: Cephei.Cell.ICellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
  Cephei.Cell.Model.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String):
    name:
      CSharp:
      - id: Cephei.Cell.Model.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)
        name: Create<T>
        nameWithType: Model.Create<T>
        qualifiedName: Cephei.Cell.Model.Create<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Microsoft.FSharp.Core.FSharpFunc`2
        name: FSharpFunc
        nameWithType: FSharpFunc
        qualifiedName: Microsoft.FSharp.Core.FSharpFunc
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Microsoft.FSharp.Core.Unit
        name: Unit
        nameWithType: Unit
        qualifiedName: Microsoft.FSharp.Core.Unit
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)
        name: Create(Of T)
        nameWithType: Model.Create(Of T)
        qualifiedName: Cephei.Cell.Model.Create(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Microsoft.FSharp.Core.FSharpFunc`2
        name: FSharpFunc
        nameWithType: FSharpFunc
        qualifiedName: Microsoft.FSharp.Core.FSharpFunc
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Microsoft.FSharp.Core.Unit
        name: Unit
        nameWithType: Unit
        qualifiedName: Microsoft.FSharp.Core.Unit
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Cephei.Cell.Model.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)
  Cephei.Cell.Model.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,{T}},System.String):
    name:
      CSharp:
      - id: Cephei.Cell.Model.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)
        name: Create<T>
        nameWithType: Model.Create<T>
        qualifiedName: Cephei.Cell.Model.Create<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Microsoft.FSharp.Core.FSharpFunc`2
        name: FSharpFunc
        nameWithType: FSharpFunc
        qualifiedName: Microsoft.FSharp.Core.FSharpFunc
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Microsoft.FSharp.Core.Unit
        name: Unit
        nameWithType: Unit
        qualifiedName: Microsoft.FSharp.Core.Unit
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)
        name: Create(Of T)
        nameWithType: Model.Create(Of T)
        qualifiedName: Cephei.Cell.Model.Create(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Microsoft.FSharp.Core.FSharpFunc`2
        name: FSharpFunc
        nameWithType: FSharpFunc
        qualifiedName: Microsoft.FSharp.Core.FSharpFunc
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Microsoft.FSharp.Core.Unit
        name: Unit
        nameWithType: Unit
        qualifiedName: Microsoft.FSharp.Core.Unit
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Cephei.Cell.Model.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)
  Cephei.Cell.Model.CreateValue``1(``0,System.String):
    name:
      CSharp:
      - id: Cephei.Cell.Model.CreateValue``1(``0,System.String)
        name: CreateValue<T>
        nameWithType: Model.CreateValue<T>
        qualifiedName: Cephei.Cell.Model.CreateValue<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.CreateValue``1(``0,System.String)
        name: CreateValue(Of T)
        nameWithType: Model.CreateValue(Of T)
        qualifiedName: Cephei.Cell.Model.CreateValue(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Cephei.Cell.Model.CreateValue``1(``0,System.String)
  Cephei.Cell.Model.CreateValue``1({T},System.String):
    name:
      CSharp:
      - id: Cephei.Cell.Model.CreateValue``1(``0,System.String)
        name: CreateValue<T>
        nameWithType: Model.CreateValue<T>
        qualifiedName: Cephei.Cell.Model.CreateValue<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.CreateValue``1(``0,System.String)
        name: CreateValue(Of T)
        nameWithType: Model.CreateValue(Of T)
        qualifiedName: Cephei.Cell.Model.CreateValue(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Cephei.Cell.Model.CreateValue``1(``0,System.String)
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.CreateValue``1(``0,System.String)
  Cephei.Cell.Model.GetOrAdd(System.String,Cephei.Cell.ICell):
    name:
      CSharp:
      - id: Cephei.Cell.Model.GetOrAdd(System.String,Cephei.Cell.ICell)
        name: GetOrAdd
        nameWithType: Model.GetOrAdd
        qualifiedName: Cephei.Cell.Model.GetOrAdd
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.GetOrAdd(System.String,Cephei.Cell.ICell)
        name: GetOrAdd
        nameWithType: Model.GetOrAdd
        qualifiedName: Cephei.Cell.Model.GetOrAdd
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.GetOrAdd(System.String,Cephei.Cell.ICell)
  Cephei.Cell.Model.TryAdd(System.String,Cephei.Cell.ICell):
    name:
      CSharp:
      - id: Cephei.Cell.Model.TryAdd(System.String,Cephei.Cell.ICell)
        name: TryAdd
        nameWithType: Model.TryAdd
        qualifiedName: Cephei.Cell.Model.TryAdd
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.TryAdd(System.String,Cephei.Cell.ICell)
        name: TryAdd
        nameWithType: Model.TryAdd
        qualifiedName: Cephei.Cell.Model.TryAdd
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.TryAdd(System.String,Cephei.Cell.ICell)
  Cephei.Cell.Model.TryRemove(System.String,Cephei.Cell.ICell@):
    name:
      CSharp:
      - id: Cephei.Cell.Model.TryRemove(System.String,Cephei.Cell.ICell@)
        name: TryRemove
        nameWithType: Model.TryRemove
        qualifiedName: Cephei.Cell.Model.TryRemove
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.TryRemove(System.String,Cephei.Cell.ICell@)
        name: TryRemove
        nameWithType: Model.TryRemove
        qualifiedName: Cephei.Cell.Model.TryRemove
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.TryRemove(System.String,Cephei.Cell.ICell@)
  Cephei.Cell.Model.TryUpdate(System.String,Cephei.Cell.ICell,Cephei.Cell.ICell):
    name:
      CSharp:
      - id: Cephei.Cell.Model.TryUpdate(System.String,Cephei.Cell.ICell,Cephei.Cell.ICell)
        name: TryUpdate
        nameWithType: Model.TryUpdate
        qualifiedName: Cephei.Cell.Model.TryUpdate
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.TryUpdate(System.String,Cephei.Cell.ICell,Cephei.Cell.ICell)
        name: TryUpdate
        nameWithType: Model.TryUpdate
        qualifiedName: Cephei.Cell.Model.TryUpdate
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.TryUpdate(System.String,Cephei.Cell.ICell,Cephei.Cell.ICell)
  Cephei.Cell.Model.Item(System.String):
    name:
      CSharp:
      - id: Cephei.Cell.Model.Item(System.String)
        name: Item
        nameWithType: Model.Item
        qualifiedName: Cephei.Cell.Model.Item
      - name: '['
        nameWithType: '['
        qualifiedName: '['
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ']'
        nameWithType: ']'
        qualifiedName: ']'
      VB:
      - id: Cephei.Cell.Model.Item(System.String)
        name: Item
        nameWithType: Model.Item
        qualifiedName: Cephei.Cell.Model.Item
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: P:Cephei.Cell.Model.Item(System.String)
  Cephei.Cell.Model.As``1(System.String):
    name:
      CSharp:
      - id: Cephei.Cell.Model.As``1(System.String)
        name: As<T>
        nameWithType: Model.As<T>
        qualifiedName: Cephei.Cell.Model.As<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.As``1(System.String)
        name: As(Of T)
        nameWithType: Model.As(Of T)
        qualifiedName: Cephei.Cell.Model.As(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.As``1(System.String)
  Cephei.Cell.Model.Bind:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Bind
        name: Bind
        nameWithType: Model.Bind
        qualifiedName: Cephei.Cell.Model.Bind
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.Bind
        name: Bind
        nameWithType: Model.Bind
        qualifiedName: Cephei.Cell.Model.Bind
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.Bind
  Cephei.Cell.Model.HasFunction:
    name:
      CSharp:
      - id: Cephei.Cell.Model.HasFunction
        name: HasFunction
        nameWithType: Model.HasFunction
        qualifiedName: Cephei.Cell.Model.HasFunction
      VB:
      - id: Cephei.Cell.Model.HasFunction
        name: HasFunction
        nameWithType: Model.HasFunction
        qualifiedName: Cephei.Cell.Model.HasFunction
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: P:Cephei.Cell.Model.HasFunction
  Cephei.Cell.Model.HasValue:
    name:
      CSharp:
      - id: Cephei.Cell.Model.HasValue
        name: HasValue
        nameWithType: Model.HasValue
        qualifiedName: Cephei.Cell.Model.HasValue
      VB:
      - id: Cephei.Cell.Model.HasValue
        name: HasValue
        nameWithType: Model.HasValue
        qualifiedName: Cephei.Cell.Model.HasValue
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: P:Cephei.Cell.Model.HasValue
  Cephei.Cell.Model.Box:
    name:
      CSharp:
      - id: Cephei.Cell.Model.Box
        name: Box
        nameWithType: Model.Box
        qualifiedName: Cephei.Cell.Model.Box
      VB:
      - id: Cephei.Cell.Model.Box
        name: Box
        nameWithType: Model.Box
        qualifiedName: Cephei.Cell.Model.Box
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: P:Cephei.Cell.Model.Box
  Cephei.Cell.Model.Subscribe(IObserver{Cephei.Cell.ICell}):
    name:
      CSharp:
      - id: Cephei.Cell.Model.Subscribe(IObserver{Cephei.Cell.ICell})
        name: Subscribe
        nameWithType: Model.Subscribe
        qualifiedName: Cephei.Cell.Model.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.Subscribe(IObserver{Cephei.Cell.ICell})
        name: Subscribe
        nameWithType: Model.Subscribe
        qualifiedName: Cephei.Cell.Model.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.Subscribe(IObserver{Cephei.Cell.ICell})
  Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,Cephei.Cell.ICell}}}):
    name:
      CSharp:
      - id: Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,Cephei.Cell.ICell}}})
        name: Subscribe
        nameWithType: Model.Subscribe
        qualifiedName: Cephei.Cell.Model.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,Cephei.Cell.ICell}}})
        name: Subscribe
        nameWithType: Model.Subscribe
        qualifiedName: Cephei.Cell.Model.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,Cephei.Cell.ICell}}})
  ? Cephei.Cell.Model.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
  : name:
      CSharp:
      - id: Cephei.Cell.Model.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
        name: Subscribe
        nameWithType: Model.Subscribe
        qualifiedName: Cephei.Cell.Model.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Model
        name: Model
        nameWithType: Model
        qualifiedName: Cephei.Cell.Model
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
        name: Subscribe
        nameWithType: Model.Subscribe
        qualifiedName: Cephei.Cell.Model.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Tuple`5
        name: Tuple
        nameWithType: Tuple
        qualifiedName: Tuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Cephei.Cell.ISession
        name: ISession
        nameWithType: ISession
        qualifiedName: Cephei.Cell.ISession
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.Model
        name: Model
        nameWithType: Model
        qualifiedName: Cephei.Cell.Model
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.CellEvent
        name: CellEvent
        nameWithType: CellEvent
        qualifiedName: Cephei.Cell.CellEvent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Cephei.Cell.ICell
        name: ICell
        nameWithType: ICell
        qualifiedName: Cephei.Cell.ICell
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Model,Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
  Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Double}}):
    name:
      CSharp:
      - id: Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Double}})
        name: Subscribe
        nameWithType: Model.Subscribe
        qualifiedName: Cephei.Cell.Model.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Double}})
        name: Subscribe
        nameWithType: Model.Subscribe
        qualifiedName: Cephei.Cell.Model.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Double}})
  Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Int32}}):
    name:
      CSharp:
      - id: Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Int32}})
        name: Subscribe
        nameWithType: Model.Subscribe
        qualifiedName: Cephei.Cell.Model.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Int32}})
        name: Subscribe
        nameWithType: Model.Subscribe
        qualifiedName: Cephei.Cell.Model.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Int32}})
  Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Decimal}}):
    name:
      CSharp:
      - id: Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Decimal}})
        name: Subscribe
        nameWithType: Model.Subscribe
        qualifiedName: Cephei.Cell.Model.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Decimal
        name: Decimal
        nameWithType: Decimal
        qualifiedName: System.Decimal
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Decimal}})
        name: Subscribe
        nameWithType: Model.Subscribe
        qualifiedName: Cephei.Cell.Model.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Decimal
        name: Decimal
        nameWithType: Decimal
        qualifiedName: System.Decimal
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Cephei.Cell.Model
    commentId: M:Cephei.Cell.Model.Subscribe(IObserver{KeyValuePair{System.String,System.Decimal}})
  Cephei.Cell.Generic.Model`1.Bind*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Model`1.Bind*
        name: Bind
        nameWithType: Model<T>.Bind
        qualifiedName: Cephei.Cell.Generic.Model<T>.Bind
      VB:
      - id: Cephei.Cell.Generic.Model`1.Bind*
        name: Bind
        nameWithType: Model(Of T).Bind
        qualifiedName: Cephei.Cell.Generic.Model(Of T).Bind
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Model`1.Bind
  Cephei.Cell.Generic.Model`1.Value*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Model`1.Value*
        name: Value
        nameWithType: Model<T>.Value
        qualifiedName: Cephei.Cell.Generic.Model<T>.Value
      VB:
      - id: Cephei.Cell.Generic.Model`1.Value*
        name: Value
        nameWithType: Model(Of T).Value
        qualifiedName: Cephei.Cell.Generic.Model(Of T).Value
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Model`1.Value
  Cephei.Cell.Generic.Model`1.OnCompleted*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Model`1.OnCompleted*
        name: OnCompleted
        nameWithType: Model<T>.OnCompleted
        qualifiedName: Cephei.Cell.Generic.Model<T>.OnCompleted
      VB:
      - id: Cephei.Cell.Generic.Model`1.OnCompleted*
        name: OnCompleted
        nameWithType: Model(Of T).OnCompleted
        qualifiedName: Cephei.Cell.Generic.Model(Of T).OnCompleted
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Model`1.OnCompleted
  Cephei.Cell.Generic.Model`1.OnError*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Model`1.OnError*
        name: OnError
        nameWithType: Model<T>.OnError
        qualifiedName: Cephei.Cell.Generic.Model<T>.OnError
      VB:
      - id: Cephei.Cell.Generic.Model`1.OnError*
        name: OnError
        nameWithType: Model(Of T).OnError
        qualifiedName: Cephei.Cell.Generic.Model(Of T).OnError
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Model`1.OnError
  Cephei.Cell.Generic.Model`1.OnNext*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Model`1.OnNext*
        name: OnNext
        nameWithType: Model<T>.OnNext
        qualifiedName: Cephei.Cell.Generic.Model<T>.OnNext
      VB:
      - id: Cephei.Cell.Generic.Model`1.OnNext*
        name: OnNext
        nameWithType: Model(Of T).OnNext
        qualifiedName: Cephei.Cell.Generic.Model(Of T).OnNext
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Model`1.OnNext
  Cephei.Cell.Generic.Model`1.Subscribe*:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Model`1.Subscribe*
        name: Subscribe
        nameWithType: Model<T>.Subscribe
        qualifiedName: Cephei.Cell.Generic.Model<T>.Subscribe
      VB:
      - id: Cephei.Cell.Generic.Model`1.Subscribe*
        name: Subscribe
        nameWithType: Model(Of T).Subscribe
        qualifiedName: Cephei.Cell.Generic.Model(Of T).Subscribe
    isDefinition: true
    commentId: Overload:Cephei.Cell.Generic.Model`1.Subscribe
  Cephei.Cell.Generic.Model`1:
    name:
      CSharp:
      - id: Cephei.Cell.Generic.Model`1
        name: Model
        nameWithType: Model
        qualifiedName: Cephei.Cell.Generic.Model
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Cephei.Cell.Generic.Model`1
        name: Model
        nameWithType: Model
        qualifiedName: Cephei.Cell.Generic.Model
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Cephei.Cell.Generic.Model`1
