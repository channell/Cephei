<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ILGPU</name>
    </assembly>
    <members>
        <member name="T:ILGPU.IArrayView`2">
            <summary>
            Represents an abstract array view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="P:ILGPU.IArrayView`2.IsValid">
            <summary>
            Returns true if this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView`2.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView`2.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView`2.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView`2.Item(`1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.IArrayView`2.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="T:ILGPU.IArrayView`3">
            <summary>
            Represents an abstract array view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The 32-bit index type.</typeparam>
            <typeparam name="TLongIndex">The 64-bit index type.</typeparam>
        </member>
        <member name="P:ILGPU.IArrayView`3.IntLength">
            <summary>
            Returns the 32-bit length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView`3.IntExtent">
            <summary>
            Returns the 32-bit extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView`3.Item(`1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="T:ILGPU.IArrayView`1">
            <summary>
            Represents an abstract array view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="T:ILGPU.ArrayView`1">
            <summary>
            Represents a generic view to a contiguous chunk of memory.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:ILGPU.ArrayView`1.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView`1.#ctor(ILGPU.Runtime.ArrayViewSource,System.Int64,System.Int64)">
            <summary>
            Constructs a new array view.
            </summary>
            <param name="source">The source.</param>
            <param name="index">The base index.</param>
            <param name="length">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.ArrayView`1.Source">
            <summary>
            Returns the associated view source.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.AcceleratorType">
            <summary>
            Returns the associated accelerator type.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.IsValid">
            <summary>
            Returns true if this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Index">
            <summary>
            Returns the index of this view.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView`1.EnsureCPUBuffer">
            <summary>
            Ensures that the current view is valid CPU buffer.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.IntExtent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.IntLength">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Item(ILGPU.Index1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.ArrayView`1.Item(ILGPU.LongIndex1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.ArrayView`1.Item(System.Int32)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.ArrayView`1.Item(System.Int64)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.GetLinearElementAddress``1(``0,``0)">
            <summary>
            Loads a linear element address using the given multi-dimensional indices.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="index">The element index.</param>
            <param name="dimension">The dimension specifications.</param>
            <returns>A reference to the i-th element.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.LoadEffectiveAddress">
            <summary>
            Loads the effective address of the current view.
            </summary>
            <returns>The effective address.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.GetSubView(System.Int64)">
            <summary>
            Returns a sub view of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <returns>The new sub view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.GetSubView(System.Int32,System.Int32)">
            <summary>
            Returns a sub view of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="subViewLength">The extent of the new sub view.</param>
            <returns>The new sub view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.GetSubView(System.Int64,System.Int64)">
            <summary>
            Returns a sub view of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="subViewLength">The extent of the new sub view.</param>
            <returns>The new sub view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.Cast``1">
            <summary>
            Casts the current array view into another array-view type.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.ToIntView">
            <summary>
            Returns the associated 32-buffer view.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView`1.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.op_Implicit(ILGPU.ArrayView{`0})~ILGPU.ArrayView{`0,ILGPU.Index1}">
            <summary>
            Converts a generic array view into an intrinsic array view.
            </summary>
            <param name="view">The view instance to convert.</param>
        </member>
        <member name="M:ILGPU.ArrayView`1.op_Implicit(ILGPU.ArrayView{`0})~ILGPU.ArrayView{`0,ILGPU.LongIndex1}">
            <summary>
            Converts an intrinsic array view into a generic array view.
            </summary>
            <param name="view">The view instance to convert.</param>
            <remarks>Required due to backwards compatibility.</remarks>
        </member>
        <member name="M:ILGPU.ArrayView`1.op_Implicit(ILGPU.ArrayView{`0,ILGPU.Index1})~ILGPU.ArrayView{`0}">
            <summary>
            Converts an intrinsic array view into a generic array view.
            </summary>
            <param name="view">The view instance to convert.</param>
        </member>
        <member name="M:ILGPU.ArrayView`1.op_Implicit(ILGPU.ArrayView{`0,ILGPU.LongIndex1})~ILGPU.ArrayView{`0}">
            <summary>
            Converts an intrinsic array view into a generic array view.
            </summary>
            <param name="view">The view instance to convert.</param>
        </member>
        <member name="T:ILGPU.ArrayView`2">
            <summary>
            Represents a generic view to an n-dimensional chunk of memory.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The integer index type.</typeparam>
        </member>
        <member name="P:ILGPU.ArrayView`2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView`2.#ctor(ILGPU.ArrayView{`0},`1)">
            <summary>
            Constructs a new array view.
            </summary>
            <param name="baseView">The base view.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.ArrayView`2.BaseView">
            <summary>
            Returns the base view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.IsValid">
            <summary>
            Returns true if this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.IntLength">
            <summary>
            Returns the 32-bit length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.Item(`1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.GetSubView(`1,ILGPU.LongIndex1)">
            <summary>
            Returns a sub view of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="subViewExtent">The extent of the new sub view.</param>
            <returns>The new raw sub view.</returns>
            <remarks>
            Note that this function interprets the memory view as a linear contiguous
            chunk of memory that does not pay attention to the actual
            <see cref="P:ILGPU.ArrayView`2.Extent"/>. Instead, it converts the (potentially multidimensional)
            indices to linear indices and returns a raw view that spans a contiguous
            region of memory.
            </remarks>
        </member>
        <member name="M:ILGPU.ArrayView`2.Cast``1">
            <summary>
            Casts the current array view into another array-view type.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.GetVariableView(`1)">
            <summary>
            Returns a variable view that points to the element at the specified index.
            </summary>
            <param name="index">The variable index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="T:ILGPU.ArrayViewExtensions">
            <summary>
            Array view extension methods
            </summary>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.LoadEffectiveAddress``1(ILGPU.ArrayView{``0})">
            <summary>
            Loads the effective address of the current view.
            This operation is not supported on accelerators.
            </summary>
            <remarks>
            Use with caution since this operation does not make sense with respect to all
            target platforms.
            </remarks>
            <returns>The effective address.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As2DView``1(ILGPU.ArrayView{``0},System.Int64)">
            <summary>
            Converts this view into a new 2D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="height">The height (number of elements in y direction).</param>
            <returns>The converted 2D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As2DView``1(ILGPU.ArrayView{``0},System.Int64,System.Int64)">
            <summary>
            Converts this view into a new 2D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <returns>The converted 2D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As2DView``1(ILGPU.ArrayView{``0},ILGPU.LongIndex2)">
            <summary>
            Converts this view into a new 2D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="extent">The extent.</param>
            <returns>The converted 2D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As3DView``1(ILGPU.ArrayView{``0},System.Int64,System.Int64)">
            <summary>
            Converts this view into a new 3D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As3DView``1(ILGPU.ArrayView{``0},ILGPU.LongIndex2)">
            <summary>
            Converts this view into a new 3D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="extent">
            The height (number of elements in y direction) and depth (number of elements
            in z direction).
            </param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As3DView``1(ILGPU.ArrayView{``0},System.Int64,System.Int64,System.Int64)">
            <summary>
            Converts this view into a new 3D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As3DView``1(ILGPU.ArrayView{``0},ILGPU.LongIndex2,System.Int64)">
            <summary>
            Converts this view into a new 3D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="extent">
            The width (number of elements in x direction) and height (number of elements
            in y direction).
            </param>
            <param name="depth">The depth (number of elements in z direction).</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As3DView``1(ILGPU.ArrayView{``0},System.Int64,ILGPU.LongIndex2)">
            <summary>
            Converts this view into a new 3D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="extent">
            The height (number of elements in y direction) and depth (number of elements
            in z direction).
            </param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As3DView``1(ILGPU.ArrayView{``0},ILGPU.LongIndex3)">
            <summary>
            Converts this view into a new 3D view.
            </summary>
            <param name="view">The view.</param>
            <param name="extent">The extent.</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.GetVariableView``1(ILGPU.ArrayView{``0})">
            <summary>
            Returns a variable view to the first element.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.GetVariableView``1(ILGPU.ArrayView{``0},ILGPU.Index1)">
            <summary>
            Returns a variable view to the given element.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="element">The element index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.GetVariableView``1(ILGPU.ArrayView{``0},ILGPU.LongIndex1)">
            <summary>
            Returns a variable view to the given element.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="element">The element index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="T:ILGPU.ArrayView2D`1">
            <summary>
            Represents a general view to an array on an accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.#ctor(ILGPU.ArrayView{`0},System.Int64)">
            <summary>
            Constructs a new 2D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="height">The height (number of elements in y direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.#ctor(ILGPU.ArrayView{`0},System.Int64,System.Int64)">
            <summary>
            Constructs a new 2D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.#ctor(ILGPU.ArrayView{`0},ILGPU.LongIndex2)">
            <summary>
            Constructs a new 2D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="extent">The extent (width, height) (number of elements).</param>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Width">
            <summary>
            Returns the Width of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Height">
            <summary>
            Returns the height of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Rows">
            <summary>
            Returns the rows of this view that represents
            an implicitly transposed matrix.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Columns">
            <summary>
            Returns the columns of this view that represents
            an implicitly transposed matrix.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Accesses the element at the given index.
            </summary>
            <param name="x">The x index.</param>
            <param name="y">The y index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Item(System.Int64,System.Int64)">
            <summary>
            Accesses the element at the given index.
            </summary>
            <param name="x">The x index.</param>
            <param name="y">The y index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.GetRowView(System.Int64)">
            <summary>
            Returns a linear view to a single row.
            </summary>
            <param name="y">The y index of the row.</param>
            <returns>A linear view to a single row.</returns>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.#ctor(ILGPU.ArrayView{`0,ILGPU.LongIndex2})">
            <summary>
            Constructs a new 2D array view.
            </summary>
            <param name="baseView">The source view.</param>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.BaseView">
            <summary>
            Returns the associated buffer.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.IsValid">
            <summary>
            Returns true if this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.IntLength">
            <summary>
            Returns the 32-bit length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.IntExtent">
            <summary>
            Returns the 32-bit extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Item(ILGPU.Index2)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Item(ILGPU.LongIndex2)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.GetSubView(ILGPU.LongIndex2,System.Int64)">
            <summary>
            Returns a sub view of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="subViewExtent">The extent of the new sub view.</param>
            <returns>The new raw sub view.</returns>
            <remarks>
            Note that this function interprets the memory view as a linear contiguous
            chunk of memory that does not pay attention to the actual
            <see cref="P:ILGPU.ArrayView2D`1.Extent"/>. Instead, it converts the (potentially multidimensional)
            indices to linear indices and returns a raw view that spans a contiguous
            region of memory.
            </remarks>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.Cast``1">
            <summary>
            Casts the current array view into another array-view type.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.ToIntView">
            <summary>
            Returns the associated 32-buffer view.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.GetVariableView(ILGPU.LongIndex2)">
            <summary>
            Returns a variable view that points to the element at the specified index.
            </summary>
            <param name="index">The variable index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.op_Implicit(ILGPU.ArrayView2D{`0})~ILGPU.ArrayView{`0,ILGPU.LongIndex2}">
            <summary>
            Converts the given specialized array view into a corresponding generic view.
            </summary>
            <returns>The corresponding generic view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.op_Explicit(ILGPU.ArrayView2D{`0})~ILGPU.ArrayView{`0,ILGPU.Index2}">
            <summary>
            Converts the given specialized array view into a corresponding generic view.
            </summary>
            <returns>The corresponding generic view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.op_Implicit(ILGPU.ArrayView{`0,ILGPU.LongIndex2})~ILGPU.ArrayView2D{`0}">
            <summary>
            Converts the given generic array view into a corresponding specialized view.
            </summary>
            <returns>The corresponding specialized view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.op_Implicit(ILGPU.ArrayView{`0,ILGPU.Index2})~ILGPU.ArrayView2D{`0}">
            <summary>
            Converts the given specialized array view into a corresponding generic view.
            </summary>
            <returns>The corresponding generic view.</returns>
        </member>
        <member name="T:ILGPU.ArrayView3D`1">
            <summary>
            Represents a general view to an array on an accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0},System.Int64,System.Int64)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0},System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0},ILGPU.LongIndex2,System.Int64)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="extent">
            The width (number of elements in x direction) and height (number of elements
            in y direction).
            </param>
            <param name="depth">The depth (number of elements in z direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0},System.Int64,ILGPU.LongIndex2)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="extent">
            The height (number of elements in y direction) and depth (number of elements
            in z direction).
            </param>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0},ILGPU.LongIndex3)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="extent">
            The extent (width, height, depth) (number of elements).
            </param>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Width">
            <summary>
            Returns the Width of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Height">
            <summary>
            Returns the height of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Depth">
            <summary>
            Returns the depth of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Accesses the element at the given index.
            </summary>
            <param name="x">The x index.</param>
            <param name="y">The y index.</param>
            <param name="z">The z index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Item(ILGPU.Index2,System.Int32)">
            <summary>
            Accesses the element at the given index.
            </summary>
            <param name="xy">The x and y indices.</param>
            <param name="z">The z index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Item(System.Int32,ILGPU.Index2)">
            <summary>
            Accesses the element at the given index.
            </summary>
            <param name="x">The x index.</param>
            <param name="yz">The z and y indices.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetRowView(ILGPU.LongIndex2)">
            <summary>
            Returns a linear view to a single row.
            </summary>
            <param name="index">
            The y index of the row and the z index of the slice.
            </param>
            <returns>A linear view to a single row.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetRowView(System.Int64,System.Int64)">
            <summary>
            Returns a linear view to a single row.
            </summary>
            <param name="y">The y index of the row.</param>
            <param name="z">The z index of the slice.</param>
            <returns>A linear view to a single row.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetSliceView(System.Int64)">
            <summary>
            Returns a 2D view to a single slice.
            </summary>
            <param name="z">The z index of the slice.</param>
            <returns>A 2D view to a single slice.</returns>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0,ILGPU.LongIndex3})">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="baseView">The source view.</param>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.BaseView">
            <summary>
            Returns the associated buffer.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.IsValid">
            <summary>
            Returns true if this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.IntLength">
            <summary>
            Returns the 32-bit length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.IntExtent">
            <summary>
            Returns the 32-bit extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Item(ILGPU.Index3)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Item(ILGPU.LongIndex3)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetSubView(ILGPU.LongIndex3,System.Int64)">
            <summary>
            Returns a sub view of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="subViewExtent">The extent of the new sub view.</param>
            <returns>The new raw sub view.</returns>
            <remarks>
            Note that this function interprets the memory view as a linear contiguous
            chunk of memory that does not pay attention to the actual
            <see cref="P:ILGPU.ArrayView3D`1.Extent"/>. Instead, it converts the (potentially multidimensional)
            indices to linear indices and returns a raw view that spans a contiguous
            region of memory.
            </remarks>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.Cast``1">
            <summary>
            Casts the current array view into another array-view type.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.ToIntView">
            <summary>
            Returns the associated 32-buffer view.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetVariableView(ILGPU.LongIndex3)">
            <summary>
            Returns a variable view that points to the element at the specified index.
            </summary>
            <param name="index">The variable index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.op_Implicit(ILGPU.ArrayView3D{`0})~ILGPU.ArrayView{`0,ILGPU.LongIndex3}">
            <summary>
            Converts the given specialized array view into a corresponding generic view.
            </summary>
            <returns>The corresponding generic view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.op_Explicit(ILGPU.ArrayView3D{`0})~ILGPU.ArrayView{`0,ILGPU.Index3}">
            <summary>
            Converts the given specialized array view into a corresponding generic view.
            </summary>
            <returns>The corresponding generic view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.op_Implicit(ILGPU.ArrayView{`0,ILGPU.LongIndex3})~ILGPU.ArrayView3D{`0}">
            <summary>
            Converts the given generic array view into a corresponding specialized view.
            </summary>
            <returns>The corresponding specialized view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.op_Implicit(ILGPU.ArrayView{`0,ILGPU.Index3})~ILGPU.ArrayView3D{`0}">
            <summary>
            Converts the given specialized array view into a corresponding generic view.
            </summary>
            <returns>The corresponding generic view.</returns>
        </member>
        <member name="T:ILGPU.Runtime.DebugArrayView`1">
            <summary>public
            Represents a debugger array view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.DebugArrayView`1.#ctor(ILGPU.ArrayView2D{`0})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="source">The target array view.</param>
        </member>
        <member name="M:ILGPU.Runtime.DebugArrayView`1.#ctor(ILGPU.ArrayView3D{`0})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="source">The target array view.</param>
        </member>
        <member name="M:ILGPU.Runtime.DebugArrayView`1.#ctor(ILGPU.ArrayView{`0})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="source">The target array view.</param>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorType">
            <summary>
            Represents the general type of an accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.AcceleratorType.CPU">
            <summary>
            Represents a CPU accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.AcceleratorType.Cuda">
            <summary>
            Represents a Cuda accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.AcceleratorType.OpenCL">
            <summary>
            Represents an OpenCL accelerator (CPU/GPU via OpenCL).
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorExtension">
            <summary>
            Represents an abstract accelerator extension that can store additional data.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator">
            <summary>
            Represents a general abstract accelerator.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.#cctor">
            <summary>
            Detects all accelerators.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Accelerators">
            <summary>
            Represents all available accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Create(ILGPU.Context,ILGPU.Runtime.AcceleratorId)">
            <summary>
            Creates the specified accelerator using the provided accelerator id.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="acceleratorId">The specified accelerator id.</param>
            <returns>The created accelerator.</returns>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CurrentType">
            <summary>
            Returns the current accelerator type.
            </summary>
            <remarks>
            Note that this static property is also accessible within kernels.
            </remarks>
        </member>
        <member name="E:ILGPU.Runtime.Accelerator.Disposed">
            <summary>
            Will be raised if the accelerator is disposed.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.syncRoot">
            <summary>
            Main object for accelerator synchronization.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.memoryCache">
            <summary>
            The default memory cache for operations that require additional
            temporary memory.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.#ctor(ILGPU.Context,ILGPU.Runtime.AcceleratorType)">
            <summary>
            Constructs a new accelerator.
            </summary>
            <param name="context">The target context.</param>
            <param name="type">The target accelerator type.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Context">
            <summary>
            Returns the associated ILGPU context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.DefaultStream">
            <summary>
            Returns the default stream of this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.AcceleratorType">
            <summary>
            Returns the type of the accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MemorySize">
            <summary>
            Returns the memory size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Name">
            <summary>
            Returns the name of the device.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxGridSize">
            <summary>
            Returns the max grid size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxNumThreadsPerGroup">
            <summary>
            Returns the maximum number of threads in a group.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxThreadsPerGroup">
            <summary>
            Returns the maximum number of threads in a group.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxSharedMemoryPerGroup">
            <summary>
            Returns the maximum number of shared memory per thread group in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxConstantMemory">
            <summary>
            Returns the maximum number of constant memory in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.WarpSize">
            <summary>
            Return the warp size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.NumMultiprocessors">
            <summary>
            Returns the number of available multiprocessors.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxNumThreadsPerMultiprocessor">
            <summary>
            Returns the maximum number of threads per multiprocessor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxNumThreads">
            <summary>
            Returns the maximum number of threads of this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxNumGroupsExtent">
            <summary>
            Returns a kernel extent (a grouped index) with the maximum number of groups
            using the maximum number of threads per group to launch common grid-stride
            loop kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Backend">
            <summary>
            Returns the primary backend of this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MemoryCache">
            <summary>
            Returns the default memory-buffer cache that can be used by several
            operations.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.AutomaticBufferDisposalEnabled">
            <summary>
            See <see cref="F:ILGPU.ContextFlags.DisableAutomaticBufferDisposal"/> for more
            information.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.AutomaticKernelDisposalEnabled">
            <summary>
            See <see cref="F:ILGPU.ContextFlags.DisableAutomaticKernelDisposal"/> for more
            information.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Init(ILGPU.Backends.Backend)">
            <summary>
            Initializes the current accelerator instance.
            </summary>
            <param name="backend">The backend to use.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.OnAcceleratorCreated">
            <summary>
            Invoked when the accelerator instance has been created.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CreateExtension``2(``1)">
            <summary>
            Creates a new accelerator extension using the given provider.
            </summary>
            <typeparam name="TExtension">The type of the extension to create.</typeparam>
            <typeparam name="TExtensionProvider">
            The extension provided type to create the extension.
            </typeparam>
            <param name="provider">
            The extension provided to create the extension.
            </param>
            <returns>The created extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``2(``1)">
            <summary>
            Allocates a buffer with the specified number of elements on this accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.AllocateInternal``2(``1)">
            <summary>
            Allocates a buffer with the specified number of elements on this accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``1(System.Int64)">
            <summary>
            Allocates a 1D buffer with the specified number of elements on this
            accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated 1D buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``1(ILGPU.LongIndex2)">
            <summary>
            Allocates a 2D buffer with the specified number of elements on this
            accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated 2D buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``1(System.Int64,System.Int64)">
            <summary>
            Allocates a 2D buffer with the specified number of elements on this
            accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="width">The width of the 2D buffer.</param>
            <param name="height">The height of the 2D buffer.</param>
            <returns>An allocated 2D buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``1(ILGPU.LongIndex3)">
            <summary>
            Allocates a 3D buffer with the specified number of elements on this
            accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated 3D buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``1(System.Int64,System.Int64,System.Int64)">
            <summary>
            Allocates a 2D buffer with the specified number of elements on this
            accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="width">The width of the 3D buffer.</param>
            <param name="height">The height of the 3D buffer.</param>
            <param name="depth">The depth of the 3D buffer.</param>
            <returns>An allocated 2D buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CreateStream">
            <summary>
            Creates a new accelerator stream.
            </summary>
            <returns>The created accelerator stream.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CreateStreamInternal">
            <summary>
            Creates a new accelerator stream.
            </summary>
            <returns>The created accelerator stream.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Synchronize">
            <summary>
            Synchronizes pending operations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.SynchronizeInternal">
            <summary>
            Synchronizes pending operations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateOccupancyPerMultiprocessor``1(ILGPU.Runtime.Kernel,``0)">
            <summary>
            Estimates the occupancy of the given kernel with the given group size of a
            single multiprocessor.
            </summary>
            <typeparam name="TIndex">The index type of the group dimension.</typeparam>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="groupDim">The group dimension.</param>
            <returns>
            The estimated occupancy in percent [0.0, 1.0] of a single multiprocessor.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateOccupancyPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32)">
            <summary>
            Estimates the occupancy of the given kernel with the given group size of a
            single multiprocessor.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="groupSize">The number of threads per group.</param>
            <returns>
            The estimated occupancy in percent [0.0, 1.0] of a single multiprocessor.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateOccupancyPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary>
            Estimates the occupancy of the given kernel with the given group size of a
            single multiprocessor.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="groupSize">The number of threads per group.</param>
            <param name="dynamicSharedMemorySizeInBytes">
            The required dynamic shared-memory size in bytes.
            </param>
            <returns>
            The estimated occupancy in percent [0.0, 1.0] of a single multiprocessor.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor``1(ILGPU.Runtime.Kernel,``0)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the
            given kernel.
            </summary>
            <typeparam name="TIndex">The index type of the group dimension.</typeparam>
            <param name="kernel">The kernel used for the computation of the maximum
            number of active groups.</param>
            <param name="groupDim">The group dimension.</param>
            <returns>
            The maximum number of active groups per multiprocessor for the given kernel.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the
            given kernel.
            </summary>
            <param name="kernel">The kernel used for the computation of the maximum
            number of active groups.</param>
            <param name="groupSize">The number of threads per group.</param>
            <returns>
            The maximum number of active groups per multiprocessor for the given kernel.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the
            given kernel.
            </summary>
            <param name="kernel">The kernel used for the computation of the maximum
            number of active groups.</param>
            <param name="groupSize">The number of threads per group.</param>
            <param name="dynamicSharedMemorySizeInBytes">
            The required dynamic shared-memory size in bytes.
            </param>
            <returns>
            The maximum number of active groups per multiprocessor for the given kernel.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessorInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the
            given kernel.
            </summary>
            <param name="kernel">The kernel used for the computation of the maximum
            number of active groups.</param>
            <param name="groupSize">The number of threads per group.</param>
            <param name="dynamicSharedMemorySizeInBytes">
            The required dynamic shared-memory size in bytes.
            </param>
            <remarks>
            Note that the arguments do not have to be verified since they are already
            verified.
            </remarks>
            <returns>
            The maximum number of active groups per multiprocessor for the given kernel.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="dynamicSharedMemorySizeInBytes">
            The required dynamic shared-memory size in bytes.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="computeSharedMemorySize">
            A callback to compute the required amount of shared memory in bytes for a
            given group size.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="computeSharedMemorySize">
            A callback to compute the required amount of shared memory in bytes for a
            given group size.
            </param>
            <param name="maxGroupSize">
            The maximum group-size limit on a single multiprocessor.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="computeSharedMemorySize">
            A callback to compute the required amount of shared memory in bytes for a
            given group size.
            </param>
            <param name="maxGroupSize">
            The maximum group-size limit on a single multiprocessor.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <remarks>
            Note that the arguments do not have to be verified since they are already
            verified.
            </remarks>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="dynamicSharedMemorySizeInBytes">
            The required dynamic shared-memory size in bytes.
            </param>
            <param name="maxGroupSize">
            The maximum group-size limit on a single multiprocessor.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="dynamicSharedMemorySizeInBytes">
            The required dynamic shared-memory size in bytes.
            </param>
            <param name="maxGroupSize">
            The maximum group-size limit on a single multiprocessor.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <remarks>
            Note that the arguments do not have to be verified since they are already
            verified.
            </remarks>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ToString">
            <summary>
            Returns the string representation of this accelerator.
            </summary>
            <returns>The string representation of this accelerator.</returns>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.gcActivated">
            <summary>
            True, if the GC thread is activated.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.gcThread">
            <summary>
            The child-object GC thread
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.InitGC">
            <summary>
            Initializes the GC functionality.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DisposeGC">
            <summary>
            Disposes the GC functionality.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.GCEnabled">
            <summary>
            Returns true if the GC thread is enabled.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.RequestGC_SyncRoot">
            <summary>
            Requests a GC run.
            </summary>
            <remarks>This method is invoked in the scope of the locked
            <see cref="F:ILGPU.Runtime.Accelerator.syncRoot"/> object.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.GCThread">
            <summary>
            GC thread to clean up cached resources.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.NumberNewChildObjectsUntilGC">
            <summary>
            Constant to control GC invocations.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.MinNumberOfChildObjectsInGC">
            <summary>
            Minimum number of child objects before we apply GC.
            </summary>
            <remarks>
            Should be less or equal to <see cref="F:ILGPU.Runtime.Accelerator.NumberNewChildObjectsUntilGC"/>.
            </remarks>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.childObjects">
            <summary>
            The list of linked child objects.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.NumberChildObjects">
            <summary>
            Returns the number of the registered child objects that depend
            on this accelerator object.
            </summary>
            <remarks>
            Note that this number is affected by the flags
            <see cref="F:ILGPU.ContextFlags.DisableAutomaticBufferDisposal"/> and
            <see cref="F:ILGPU.ContextFlags.DisableAutomaticKernelDisposal"/>.
            </remarks>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.RequestChildObjectsGC_SyncRoot">
            <summary>
            True, if a GC run is requested to clean disposed child objects.
            </summary>
            <remarks>This method is invoked in the scope of the locked
            <see cref="F:ILGPU.Runtime.Accelerator.syncRoot"/> object.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.RegisterChildObject``1(``0)">
            <summary>
            Registers a child object with the current accelerator object.
            </summary>
            <param name="child">The child object to register.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ForEachChildObject``1(System.Action{``0})">
            <summary>
            Perform an action on each child object.
            </summary>
            <typeparam name="T">The type of child object.</typeparam>
            <param name="callback">The action to perform on the object.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DisposeChildObjects">
            <summary>
            Disposes all child objects that are still alive since they are not allowed
            to live longer than the parent accelerator object.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ChildObjectsGC_SyncRoot">
            <summary>
            GC method to clean disposed child objects.
            </summary>
            <remarks>This method is invoked in the scope of the locked
            <see cref="F:ILGPU.Runtime.Accelerator.syncRoot"/> object.</remarks>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.currentAccelerator">
            <summary>
            Represents the current accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Current">
            <summary>
            Returns the current group runtime context.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.MakeCurrent">
            <summary>
            Makes this accelerator the current one for this thread.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Bind">
            <summary>
            Makes this accelerator the current one for this thread.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.BindScoped">
            <summary>
            Makes this accelerator the current one for this thread and
            returns a <see cref="T:ILGPU.Runtime.ScopedAcceleratorBinding"/> object that allows
            to easily recover the old binding.
            </summary>
            <returns>A scoped binding object.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.OnBind">
            <summary>
            Will be invoked when this accelerator will the current one.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.OnUnbind">
            <summary>
            Will be invoked when this accelerator is no longer the current one.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.NumberNewKernelsUntilGC">
            <summary>
            Constant to control GC invocations.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.MinNumberOfKernelsInGC">
            <summary>
            Minimum number of kernel objects before we apply GC.
            </summary>
            <remarks>
            Should be less or equal to <see cref="F:ILGPU.Runtime.Accelerator.NumberNewKernelsUntilGC"/>.
            </remarks>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey">
            <summary>
            A cached kernel key.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.#ctor(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Constructs a new kernel key.
            </summary>
            <param name="entry">The entry point description.</param>
            <param name="specialization">The kernel specialization.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.Entry">
            <summary>
            Returns the associated entry point description.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.Specialization">
            <summary>
            Returns the associated kernel specialization.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.Equals(ILGPU.Runtime.Accelerator.CachedCompiledKernelKey)">
            <summary>
            Returns true if the given cached key is equal to the current one.
            </summary>
            <param name="other">The other key.</param>
            <returns>
            True, if the given cached key is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.GetHashCode">
            <summary>
            Returns the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.CachedKernelKey">
            <summary>
            A cached kernel key.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.#ctor(ILGPU.Runtime.Accelerator.CachedCompiledKernelKey,System.Int32)">
            <summary>
            Constructs a new kernel key.
            </summary>
            <param name="compiledKernelKey">
            The compiled kernel key for lookup purposes.
            </param>
            <param name="implicitGroupSize">
            The implicit group size (if any).
            </param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedKernelKey.CompiledKernelKey">
            <summary>
            The associated compiled kernel key for lookup purposes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedKernelKey.ImplicitGroupSize">
            <summary>
            Returns the associated implicit group size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.Equals(ILGPU.Runtime.Accelerator.CachedKernelKey)">
            <summary>
            Returns true if the given cached key is equal to the current one.
            </summary>
            <param name="other">The other key.</param>
            <returns>
            True, if the given cached key is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.GetHashCode">
            <summary>
            Returns the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.CachedKernel">
            <summary>
            A cached kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernel.#ctor(System.WeakReference{System.Object},ILGPU.Runtime.KernelInfo)">
            <summary>
            Constructs a new cached kernel.
            </summary>
            <param name="kernel">The kernel to cache.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedKernel.KernelInfo">
            <summary>
            Returns the stored kernel information.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernel.TryGetKernel``1(``0@)">
            <summary>
            Tries to resolve the associated kernel.
            </summary>
            <param name="kernel">The resolved kernel.</param>
            <returns>True, if the associated kernel could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernel.UpdateReference``1(``0)">
            <summary>
            Tries to update the internal weak reference or creates a new one
            pointing to the given target.
            </summary>
            <param name="target">The new target kernel.</param>
            <returns>
            An updated weak reference that points to the given target.
            </returns>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.IKernelLoader">
            <summary>
            Represents a generic kernel loader.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.IKernelLoader.GroupSize">
            <summary>
            Returns the custom group size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.IKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel using the given accelerator.
            </summary>
            <param name="accelerator">
            The target accelerator for the loading operation.
            </param>
            <param name="compiledKernel">The compiled kernel to load.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.CachedKernelLoader`2">
            <summary>
            Represents an internal cached kernel loader.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.compiledKernelCache">
            <summary>
            A cache for compiled kernel objects.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.kernelCache">
            <summary>
            A cache for loaded kernel objects.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.InitKernelCache">
            <summary>
            Initializes the local kernel cache.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.KernelCacheEnabled">
            <summary>
            Returns true if the kernel cache is enabled.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.RequestKernelCacheGC_SyncRoot">
            <summary>
            True, if a GC run is requested to clean disposed child kernels.
            </summary>
            <remarks>
            This method is invoked in the scope of the locked <see cref="F:ILGPU.Runtime.Accelerator.syncRoot"/>
            object.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadCachedKernel``2(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``0@,ILGPU.Runtime.Accelerator.CachedKernelLoader{``1,``0},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads a kernel specified by the given method.
            </summary>
            <typeparam name="TKernelLoader">The type of the kernel loader.</typeparam>
            <typeparam name="T">The internal cached type.</typeparam>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <param name="cachedLoader">The cached kernel loader.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadGenericKernelDirect``1(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``0@,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads a kernel specified by the given method without using internal caches.
            </summary>
            <typeparam name="TKernelLoader">
            The type of the custom kernel loader.
            </typeparam>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadGenericKernel``1(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Runtime.KernelSpecialization,``0@,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads a kernel specified by the given method.
            </summary>
            <typeparam name="TKernelLoader">The type of the kernel loader.</typeparam>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadSpecializationKernelDirect``2(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``1@,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads a kernel specified by the given method without using internal caches.
            </summary>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded specialized kernel delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadSpecializationKernel``2(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Runtime.KernelSpecialization,``1@,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads a kernel specified by the given method.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <typeparam name="TKernelLoader">
            The type of the custom kernel loader.
            </typeparam>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CompileKernel(ILGPU.Backends.EntryPoints.EntryPointDescription@)">
            <summary>
            Compiles the given method into a <see cref="T:ILGPU.Backends.CompiledKernel"/>.
            </summary>
            <param name="entry">
            The entry point to compile into a
            <see cref="T:ILGPU.Backends.CompiledKernel"/>.</param>
            <returns>The compiled kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CompileKernel(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Compiles the given method into a <see cref="T:ILGPU.Backends.CompiledKernel"/> using the given
            kernel specialization.
            </summary>
            <param name="entry">
            The entry point to compile into a
            <see cref="T:ILGPU.Backends.CompiledKernel"/>.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The compiled kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ClearKernelCache_SyncRoot">
            <summary>
            Clears the internal cache.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.KernelCacheGC_SyncRoot">
            <summary>
            GC method to clean disposed kernels.
            </summary>
            <remarks>
            This method is invoked in the scope of the locked <see cref="F:ILGPU.Runtime.Accelerator.syncRoot"/>
            object.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.AdjustAndVerifyKernelGroupSize(System.Int32@,ILGPU.Backends.EntryPoints.EntryPoint)">
            <summary>
            Adjusts and verifies a custom group size of a specific kernel.
            Note that this function ensures that implicitly grouped kernels
            without an explicit group size will be launched with a group size
            that is equal to the available warp size.
            </summary>
            <param name="customGroupSize">
            The custom group size to adjust and verify.
            </param>
            <param name="entryPoint">The kernel entry point.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel(ILGPU.Backends.CompiledKernel)">
            <summary>
            Loads the given explicitly grouped kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernelInternal(ILGPU.Backends.CompiledKernel)">
            <summary>
            Loads the given explicitly grouped kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel(ILGPU.Backends.CompiledKernel,System.Int32)">
            <summary>
            Loads the given implicitly-grouped kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group
            size.
            </remarks>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel(ILGPU.Backends.CompiledKernel,System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly-grouped kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">
            Detailed kernel information about the loaded kernel.
            </param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group
            size.
            </remarks>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly-grouped kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">
            Detailed kernel information about the loaded kernel.
            </param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group
            size.
            </remarks>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(ILGPU.Backends.CompiledKernel)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="kernelInfo">
            Detailed kernel information about the loaded kernel.
            </param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernelInternal(ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="kernelInfo">
            Detailed kernel information about the loaded kernel.
            </param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.DefaultKernelLoader">
            <summary>
            Represents a default kernel loader.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.DefaultKernelLoader.GroupSize">
            <summary>
            Returns 0.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DefaultKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads an explicitly grouped kernel.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.GroupedKernelLoader">
            <summary>
            Represents a grouped kernel loader for implicitly-grouped kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.GroupedKernelLoader.#ctor(System.Int32)">
            <summary>
            Constructs a new grouped kernel loader.
            </summary>
            <param name="groupSize">The custom group size.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.GroupedKernelLoader.GroupSize">
            <summary>
            Returns the assigned group size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.GroupedKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads an implicitly grouped kernel.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.AutoKernelLoader">
            <summary>
            Represents an automatically configured grouped kernel loader for
            implicitly-grouped kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.AutoKernelLoader.GroupSize">
            <summary cref="P:ILGPU.Runtime.Accelerator.IKernelLoader.GroupSize"/>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.AutoKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads an automatically grouped kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadGenericKernel``2(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``1@,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads a kernel specified by the given method and returns a launcher of the
            specified type. Note that implicitly-grouped kernels will be launched with
            a group size of the current warp size of the accelerator.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <typeparam name="TKernelLoader">
            The type of the custom kernel loader.
            </typeparam>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel(System.Reflection.MethodInfo)">
            <summary>
            Loads the given explicitly grouped kernel. Implicitly-grouped kernels are
            not supported.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel must not be disposed manually.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel(System.Reflection.MethodInfo,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel. Implicitly-grouped kernels are
            not supported.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel must not be disposed manually.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel(System.Reflection.MethodInfo,ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel. Implicitly-grouped kernels are
            not supported.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel must not be disposed manually.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Loads the given implicitly-grouped kernel. Implicitly-grouped kernel
            will be launched with the given group size.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel must not be disposed manually.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(System.Reflection.MethodInfo)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel must not be disposed manually.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(System.Reflection.MethodInfo,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel must not be disposed manually.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel``1(System.Reflection.MethodInfo)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels are not supported.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel``1(System.Reflection.MethodInfo,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="method">The method to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel``1(System.Reflection.MethodInfo,ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="method">The method to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel``1(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel``1(System.Reflection.MethodInfo,System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            <param name="kernelInfo">Detailed kernel information.</param>
            Note that implicitly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel``1(System.Reflection.MethodInfo)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel``1(System.Reflection.MethodInfo,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel``2(``1,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel``2(``1,ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel``2(``1,System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel``2(``1,System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel``2(``1,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel``2(``1)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.storedPeerAccelerators">
            <summary>
            Contains a collection of all peer accelerators.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.PeerAccelerators">
            <summary>
            Returns the accelerators for which the peer access has been enabled.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.PeerAccessAcceleratorDestroyed(System.Object,System.EventArgs)">
            <summary>
            Event handler to disable peer access to disposed accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.HasPeerAccess(ILGPU.Runtime.Accelerator)">
            <summary>
            Returns true if peer access between the current and the given accelerator
            has been enabled.
            </summary>
            <param name="otherAccelerator">The target accelerator.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CanAccessPeer(ILGPU.Runtime.Accelerator)">
            <summary>
            Returns true if the current accelerator can directly access the memory
            of the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
            <returns>True, if the current accelerator can directly access the memory
            of the given accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)">
            <summary>
            Returns true if the current accelerator can directly access the memory
            of the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
            <returns>True, if the current accelerator can directly access the memory
            of the given accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EnablePeerAccess(ILGPU.Runtime.Accelerator)">
            <summary>
            Enables peer access to the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary>
            Enables peer access to the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DisablePeerAccess(ILGPU.Runtime.Accelerator)">
            <summary>
            Disables peer access to the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary>
            Disables peer access to the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorId">
            <summary>
            Represents a single accelerator reference.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorId.#ctor(ILGPU.Runtime.AcceleratorType)">
            <summary>
            Constructs a new accelerator id.
            </summary>
            <param name="type">The accelerator type.</param>
        </member>
        <member name="P:ILGPU.Runtime.AcceleratorId.AcceleratorType">
            <summary>
            Returns the type of the associated accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorId.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current accelerator id.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current accelerator id.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorId.GetHashCode">
            <summary>
            Returns the hash code of this accelerator id.
            </summary>
            <returns>The hash code of this accelerator id.</returns>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorId.ToString">
            <summary>
            Returns the string representation of this accelerator id.
            </summary>
            <returns>The string representation of this accelerator id.</returns>
        </member>
        <member name="T:ILGPU.Runtime.IAcceleratorObject">
            <summary>
            Represents an abstract accelerator object.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IAcceleratorObject.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IAcceleratorObject.AcceleratorType">
            <summary>
            Returns the accelerator type of this object.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorObject">
            <summary>
            Represents the base class for all accelerator-dependent objects.
            </summary>
            <remarks>
            Note that accelerator objects are destroyed when their parent accelerator
            object is destroyed.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorObject.#ctor">
            <summary>
            Constructs an accelerator object that lives on the CPU.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorObject.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs an accelerator object.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
        </member>
        <member name="P:ILGPU.Runtime.AcceleratorObject.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.AcceleratorObject.AcceleratorType">
            <summary>
            Returns the accelerator type of this object.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorStream">
            <summary>
            Represents an abstract kernel stream for asynchronous processing.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new accelerator stream.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.Synchronize">
            <summary>
            Synchronizes all queued operations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.SynchronizeAsync">
            <summary>
            Synchronizes all queued operations asynchronously.
            </summary>
            <returns>A task object to wait for.</returns>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.BindScoped">
            <summary>
            Makes the associated accelerator the current one for this thread and
            returns a <see cref="T:ILGPU.Runtime.ScopedAcceleratorBinding"/> object that allows
            to easily recover the old binding.
            </summary>
            <returns>A scoped binding object.</returns>
        </member>
        <member name="T:ILGPU.Runtime.ArrayViewSource">
            <summary>
            Internal abstract interface for generic array-view sources.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewSource.#ctor">
            <summary>
            Initializes this array view source on the CPU.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewSource.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Initializes this array view source.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
        </member>
        <member name="P:ILGPU.Runtime.ArrayViewSource.NativePtr">
            <summary>
            Returns the native pointer of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewSource.LoadEffectiveAddress(System.Int64,System.Int32)">
            <summary>
            Loads the effective address of the first memory element.
            </summary>
            <param name="index">The base index.</param>
            <param name="elementSize">The element size.</param>
            <returns>The loaded effective address.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewSource.GetAsDebugRawArray(System.Int64,System.Int64)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="byteOffset">The offset in bytes.</param>
            <param name="byteExtent">The extent in bytes (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewSource.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,System.Int64,System.Int64)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="byteOffset">The offset in bytes.</param>
            <param name="byteExtent">The extent in bytes (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="T:ILGPU.Runtime.ViewPointerWrapper">
            <summary>
            Creates a new view pointer wrapper that wraps a pointer reference
            inside an array view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ViewPointerWrapper.Create``1(``0@)">
            <summary>
            Creates a new pointer wrapper.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="value">The value reference to the variable.</param>
            <returns>An unsafe array view source.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ViewPointerWrapper.Create``1(``0*)">
            <summary>
            Creates a new pointer wrapper.
            </summary>
            <param name="value">The native value pointer.</param>
            <returns>An unsafe array view source.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ViewPointerWrapper.Create(System.IntPtr)">
            <summary>
            Creates a new pointer wrapper.
            </summary>
            <param name="value">The native value pointer.</param>
            <returns>An unsafe array view source.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ViewPointerWrapper.#ctor(System.IntPtr)">
            <summary>
            Creates a new pointer wrapper.
            </summary>
            <param name="ptr">The native value pointer.</param>
        </member>
        <member name="M:ILGPU.Runtime.ViewPointerWrapper.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,System.Int64,System.Int64)">
            <summary cref="M:ILGPU.Runtime.ArrayViewSource.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,System.Int64,System.Int64)"/>
        </member>
        <member name="T:ILGPU.Runtime.UnmanagedMemoryViewSource">
            <summary>
            Represents a view source that allocates native memory in the CPU address space.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.UnmanagedMemoryViewSource.Create(System.Int64)">
            <summary>
            Creates a new unmanaged memory view source.
            </summary>
            <param name="sizeInBytes">The size in bytes to allocate.</param>
            <returns>An unsafe array view source.</returns>
        </member>
        <member name="M:ILGPU.Runtime.UnmanagedMemoryViewSource.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,System.Int64,System.Int64)">
            <summary cref="M:ILGPU.Runtime.ArrayViewSource.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,System.Int64,System.Int64)"/>
        </member>
        <member name="M:ILGPU.Runtime.UnmanagedMemoryViewSource.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUAccelerator">
            <summary>
            Represents a general CPU-based runtime for kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAccelerator.CPUAcceleratorId">
            <summary>
            Represents the main CPU accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAccelerator.CPUAccelerators">
            <summary>
            Represents all available CPU accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context,System.Int32)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="numThreads">
            The number of threads for parallel processing.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context,System.Int32,System.Threading.ThreadPriority)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="numThreads">
            The number of threads for parallel processing.
            </param>
            <param name="threadPriority">
            The thread priority of the execution threads.
            </param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAccelerator.NumThreads">
            <summary>
            Returns the number of threads.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.CreateExtension``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateExtension``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.AllocateInternal``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.AllocateInternal``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadKernel(ILGPU.Backends.CompiledKernel,System.Int32)">
            <summary>
            Loads the given kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="customGroupSize">The custom group size.</param>
            <returns>The loaded kernel</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadKernelInternal(ILGPU.Backends.CompiledKernel)">
            <summary>
            Loads a default kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadImplicitlyGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads an implicitly grouped kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadAutoGroupedKernelInternal(ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads an auto grouped kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.CreateStreamInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateStreamInternal"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.SynchronizeInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.OnBind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnBind"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.OnUnbind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnUnbind"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.DisablePeerAccess(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.ComputeNumGroupThreads(System.Int32)">
            <summary>
            Computes the number of required threads to reach the requested group size.
            </summary>
            <param name="groupSize">The requested group size.</param>
            <returns>The number of threads to reach the requested group size.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.Launch(ILGPU.Runtime.CPU.CPUAcceleratorTask)">
            <summary>
            Launches the given accelerator task on this accelerator.
            </summary>
            <param name="task">The task to launch.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.ExecuteThread(System.Object)">
            <summary>
            Entry point for a single processing thread.
            </summary>
            <param name="arg">The relative thread index.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.GenerateKernelLauncherMethod(ILGPU.Backends.IL.ILCompiledKernel,System.Int32)">
            <summary>
            Generates a dynamic kernel-launcher method that will be just-in-time compiled
            during the first invocation. Using the generated launcher lowers the overhead
            for kernel launching dramatically, since unnecessary operations (like boxing)
            can be avoided.
            </summary>
            <param name="kernel">The kernel to generate a launcher for.</param>
            <param name="customGroupSize">
            The custom group size for the launching operation.
            </param>
            <returns>The generated launcher method.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EstimateMaxActiveGroupsPerMultiprocessorInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUAcceleratorId">
            <summary>
            Represents a single CPU accelerator reference.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorId.Instance">
            <summary>
            The main CPU accelerator id instance.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAcceleratorId.#ctor">
            <summary>
            Constructs a new CPU accelerator instance.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUKernelExecutionHandler">
            <summary>
            Execution delegate for CPU kernels inside the runtime system.
            </summary>
            <param name="task">The referenced task.</param>
            <param name="groupContext">The current group context.</param>
            <param name="runtimeThreadOffset">
            The thread offset within the current group (WarpId * WarpSize + WarpThreadIdx).
            </param>
            <param name="groupSize">
            The group size in the scope of the runtime system.
            </param>
            <param name="chunkSize">The size of a grid-index chunk to process.</param>
            <param name="chunkOffset">The offset of the current processing chunk.</param>
            <param name="targetDimension">The target kernel dimension.</param>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUAcceleratorTask">
            <summary>
            Represents a single CPU-accelerator task.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUAcceleratorTask.ConstructorParameterTypes">
            <summary>
            Contains the required parameter types of the default task constructor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUAcceleratorTask.ExecuteParameterTypes">
            <summary>
            Contains the required parameter types of the task-execution method.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAcceleratorTask.GetTaskConstructor(System.Type)">
            <summary>
            Gets a task-specific constructor.
            </summary>
            <param name="taskType">The task type.</param>
            <returns>The constructor to create a new task instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAcceleratorTask.#ctor(ILGPU.Runtime.CPU.CPUKernelExecutionHandler,ILGPU.KernelConfig,ILGPU.RuntimeKernelConfig)">
            <summary>
            Constructs a new accelerator task.
            </summary>
            <param name="kernelExecutionDelegate">The execution method.</param>
            <param name="userConfig">The user-defined grid configuration.</param>
            <param name="config">The global task configuration.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.UserGridDim">
            <summary>
            Returns the grid dimension that was specified by the user.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.UserDimension">
            <summary>
            Returns the user-defined kernel dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.GridDim">
            <summary>
            Returns the current grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.GroupDim">
            <summary>
            Returns the current group dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.GroupDimSize">
            <summary>
            Returns the group dimension size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.UserRuntimeDimension">
            <summary>
            Returns the runtime-defined kernel dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.RuntimeDimension">
            <summary>
            Returns the runtime-defined kernel dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.SharedMemoryConfig">
            <summary>
            Returns the shared memory config to use.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.KernelExecutionDelegate">
            <summary>
            Returns the associated kernel-execution delegate.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAcceleratorTask.Execute(ILGPU.Runtime.CPU.CPURuntimeGroupContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes this task inside the runtime system.
            </summary>
            <param name="groupContext">The current group context.</param>
            <param name="runtimeThreadOffset">
            The thread offset within the current group
            (WarpId * WarpSize + WarpThreadIdx).
            </param>
            <param name="groupSize">
            The group size in the scope of the runtime system.
            </param>
            <param name="chunkSize">The size of a grid-index chunk to process.</param>
            <param name="chunkOffset">
            The offset of the current processing chunk.
            </param>
            <param name="targetDimension">The target kernel dimension.</param>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUKernel">
            <summary>
            Represents a single CPU kernel.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUKernel.GetKernelExecutionDelegate">
            <summary>
            Represents the <see cref="P:ILGPU.Runtime.CPU.CPUKernel.KernelExecutionDelegate"/> property getter.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUKernel.#ctor(ILGPU.Runtime.CPU.CPUAccelerator,ILGPU.Backends.CompiledKernel,System.Reflection.MethodInfo,ILGPU.Runtime.CPU.CPUKernelExecutionHandler)">
            <summary>
            Loads a compiled kernel into the given Cuda context as kernel program.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="kernel">The source kernel.</param>
            <param name="launcher">The launcher method for the given kernel.</param>
            <param name="kernelExecutionDelegate">The execution method.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUKernel.CPUAccelerator">
            <summary>
            Returns the associated CPU runtime.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUKernel.KernelExecutionDelegate">
            <summary>
            Returns the associated kernel-execution delegate.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUMemoryBuffer`2">
            <summary>
            Represents a managed array that was pinned for unmanaged memory accesses.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.#ctor(ILGPU.Runtime.CPU.CPUAccelerator,`1)">
            <summary>
            Constructs a new pinned array.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="extent">The extent.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.CopyToView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyToView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.CopyFromView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyFromView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer.MemSetToZero(ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPURuntimeGroupContext">
            <summary>
            Represents a runtime context for thread groups.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.SharedMemorySize">
            <summary>
            The maximum shared-memory size for a single group.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.SharedMemoryChunkSize">
            <summary>
            The chunk size of shared-memory to allocate in a row.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BroadcastBufferSize">
            <summary>
            The maximum broadcast buffer size for a single object.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.currentContext">
            <summary>
            Represents the current context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Current">
            <summary>
            Returns the current group runtime context.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.groupCounter">
            <summary>
            A counter for the computation of interlocked group counters.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.groupBarrier">
            <summary>
            The general group barrier.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.broadcastBuffer">
            <summary>
            A temporary location for broadcast values.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.sharedMemoryOffset">
            <summary>
            The current shared memory offset for allocation.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.sharedMemoryLock">
            <summary>
            The global shared memory lock variable.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.dynamicSharedMemoryArrayLength">
            <summary>
            The current dynamic shared memory array size in bytes.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.currentSharedMemoryView">
            <summary>
            The current shared-memory view.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.sharedMemoryBuffer">
            <summary>
            The actual shared-memory buffer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.advancedSharedMemoryBuffer">
            <summary>
            A temporary cache for additional shared memory requirements.
            </summary>
            <remarks>
            Note that this buffer is only required for debug CPU builds. In
            these cases, we cannot move nested
            <see cref="M:ILGPU.SharedMemory.Allocate``1(System.Int32)"/> instructions out of nested loops
            to provide the best debugging experience.
            </remarks>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.advancedSharedMemoryBufferIndex">
            <summary>
            Represents the next advanced shared-memory buffer index to use.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.#ctor(ILGPU.Runtime.CPU.CPUAccelerator)">
            <summary>
            Constructs a new CPU-based runtime context for parallel processing.
            </summary>
            <param name="accelerator">The target CPU accelerator.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeGroupContext.SharedMemory">
            <summary>
            Returns the associated shared memory.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.AllocateSharedMemoryInternal``1(System.Int32)">
            <summary>
            Performs an internal shared-memory allocation.
            </summary>
            <param name="extent">The number of elements to allocate.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.AllocateSharedMemoryDynamic``1">
            <summary>
            Performs a dynamic shared-memory allocation.
            </summary>
            <returns>The resolved shared-memory array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.AllocateSharedMemory``1(System.Int32)">
            <summary>
            Performs a shared-memory allocation.
            </summary>
            <param name="extent">The number of elements.</param>
            <returns>The resolved shared-memory array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.WaitForNextThreadIndex">
            <summary>
            This method waits for all threads to complete and
            resets all information that might be required for the next
            thread index.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Broadcast``1(``0,System.Int32)">
            <summary>
            Executes a broadcast operation.
            </summary>
            <param name="value">The desired group index.</param>
            <param name="groupIndex">The source thread index within the group.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Barrier">
            <summary>
            Executes a thread barrier.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BarrierPopCount(System.Boolean)">
            <summary>
            Executes a thread barrier and returns the number of threads for which
            the predicate evaluated to true.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>
            The number of threads for which the predicate evaluated to true.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BarrierAnd(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true if all threads in a block
            fulfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, if all threads in a block fulfills the predicate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BarrierOr(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true if any thread in a block
            fulfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, if any thread in a block fulfills the predicate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Initialize(ILGPU.Index3,ILGPU.RuntimeSharedMemoryConfig@)">
            <summary>
            Initializes this context.
            </summary>
            <param name="groupDimension">The group dimension.</param>
            <param name="sharedMemoryConfig">
            The current shared memory configuration.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.OnKernelExecutionCompleted">
            <summary>
            Called when a CPU kernel has finished, reducing the number of participants in
            future calls to Barrier-related methods.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.TearDown">
            <summary>
            Performs cleanup operations with respect to the previously allocated
            shared memory
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.MakeCurrent">
            <summary>
            Makes the current context the active one for this thread.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPURuntimeThreadContext">
            <summary>
            Represents a runtime context for single threads.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeThreadContext.SetupIndicesMethod">
            <summary>
            Represents the <see cref="M:ILGPU.Runtime.CPU.CPURuntimeThreadContext.SetupIndices(ILGPU.Index3,ILGPU.Index3)"/> method.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeThreadContext.gridIndexValue">
            <summary>
            The grid index within the scheduled thread grid
            of the debug CPU accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeThreadContext.groupIndexValue">
            <summary>
            The group index within the scheduled thread grid
            of the debug CPU accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeThreadContext.gridDimensionValue">
            <summary>
            The grid dimension within the scheduled thread grid
            of the debug CPU accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeThreadContext.groupDimensionValue">
            <summary>
            The group dimension within the scheduled thread grid
            of the debug CPU accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.GridIndex">
            <summary>
            Returns the grid index within the scheduled thread grid.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.GroupIndex">
            <summary>
            Returns the group index within the scheduled thread grid.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.GridDimension">
            <summary>
            Returns the group dimension of the scheduled thread grid.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.GroupDimension">
            <summary>
            Returns the group dimension of the scheduled thread grid.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.GroupSize">
            <summary>
            Returns the current total group size in number of threads.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeThreadContext.SetupIndices(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Setups the current grid and group indices.
            </summary>
            <param name="gridIndex">The grid index.</param>
            <param name="groupIndex">The group index.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeThreadContext.SetupDimensions(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Setups the scheduled grid and group dimensions and resets
            the current grid and group indices.
            </summary>
            <param name="gridDimension">The grid dimension.</param>
            <param name="groupDimension">The group dimension.</param>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUStream">
            <summary>
            Represents a CPU stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUStream.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new CPU stream.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUStream.Synchronize">
            <summary cref="M:ILGPU.Runtime.AcceleratorStream.Synchronize"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaAccelerator">
            <summary>
            Represents a Cuda accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAccelerator.ZeroIntPtrField">
            <summary>
            Represents a zero integer pointer field.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAccelerator.GetCudaAPIMethod">
            <summary>
            Represents the <see cref="P:ILGPU.Runtime.Cuda.CudaAPI.CurrentAPI"/> property.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAccelerator.LaunchKernelMethod">
            <summary>
            Represents the <see cref="M:ILGPU.Runtime.Cuda.CudaAPI.LaunchKernelWithStreamBinding(ILGPU.Runtime.Cuda.CudaStream,ILGPU.Runtime.Cuda.CudaKernel,ILGPU.RuntimeKernelConfig,System.IntPtr,System.IntPtr)"/> method.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAccelerator.ThrowIfFailedMethod">
            <summary>
            Represents the <see cref="M:ILGPU.Runtime.Cuda.CudaException.ThrowIfFailed(ILGPU.Runtime.Cuda.CudaError)" /> method.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#cctor">
            <summary>
            Detects all cuda accelerators.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.CudaAccelerators">
            <summary>
            Represents the list of available Cuda accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.GetCudaMemoryType(System.IntPtr)">
            <summary>
            Resolves the memory type of the given device pointer.
            </summary>
            <param name="value">The device pointer to check.</param>
            <returns>The resolved memory type</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.GetInstructionSet(ILGPU.Backends.PTXArchitecture,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns the PTX instruction set to use, based on the PTX architecture and
            installed CUDA drivers.
            </summary>
            <param name="architecture">The PTX architecture</param>
            <param name="installedDriverVersion">The CUDA driver version</param>
            <returns>The PTX instruction set</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new Cuda accelerator targeting the default device.
            </summary>
            <param name="context">The ILGPU context.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,ILGPU.Runtime.Cuda.CudaAcceleratorId)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="acceleratorId">The accelerator id.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,System.Int32)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="deviceId">The target device id.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,System.Int32,ILGPU.Runtime.Cuda.CudaAcceleratorFlags)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="deviceId">The target device id.</param>
            <param name="acceleratorFlags">The accelerator flags.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.SetupAccelerator">
            <summary>
            Setups all required settings.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.ContextPtr">
            <summary>
            Returns the native Cuda-context ptr.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.DeviceId">
            <summary>
            Returns the device id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.Architecture">
            <summary>
            Returns the PTX architecture.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.InstructionSet">
            <summary>
            Returns the PTX instruction set.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.MaxGroupSize">
            <summary>
            Returns the max group size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.ClockRate">
            <summary>
            Returns the clock rate.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.SharedMemoryConfiguration">
            <summary>
            Gets or sets the current shared-memory configuration.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.CacheConfiguration">
            <summary>
            Gets or sets the current cache configuration.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.Backend">
            <summary>
            Returns the PTX backend of this accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateExtension``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateExtension``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.AllocateInternal``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.Allocate``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateKernel(ILGPU.Backends.PTX.PTXCompiledKernel)">
            <summary cref="M:ILGPU.Runtime.KernelAccelerator`2.CreateKernel(`0)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateKernel(ILGPU.Backends.PTX.PTXCompiledKernel,System.Reflection.MethodInfo)">
            <summary cref="M:ILGPU.Runtime.KernelAccelerator`2.CreateKernel(`0,System.Reflection.MethodInfo)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateStreamInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateStream"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateStream(ILGPU.Runtime.Cuda.StreamFlags)">
            <summary>
            Creates a <see cref="T:ILGPU.Runtime.Cuda.CudaStream"/> object using
            specified <see cref="T:ILGPU.Runtime.Cuda.StreamFlags"/>.
            </summary>
            <param name="flag">The flag to use.</param>
            <returns>The created stream.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateStream(System.IntPtr,System.Boolean)">
            <summary>
            Creates a <see cref="T:ILGPU.Runtime.Cuda.CudaStream"/> object using an externally created stream.
            </summary>
            <param name="ptr">A pointer to the externally created stream.</param>
            <param name="responsible">
            Whether ILGPU is responsible of disposing this stream.
            </param>
            <returns>The created stream.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.SynchronizeInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.OnBind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnBind"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.OnUnbind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnUnbind"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.GetFreeMemory">
            <summary>
            Queries the amount of free memory.
            </summary>
            <returns>The amount of free memory in bytes.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.GenerateKernelLauncherMethod(ILGPU.Backends.PTX.PTXCompiledKernel,System.Int32)">
            <summary cref="M:ILGPU.Runtime.KernelAccelerator`2.GenerateKernelLauncherMethod(`0,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EstimateMaxActiveGroupsPerMultiprocessorInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaAcceleratorFlags">
            <summary>
            Represents the accelerator flags for a Cuda accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleAuto">
            <summary>
            Automatic scheduling (default).
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleSpin">
            <summary>
            Spin scheduling.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleYield">
            <summary>
            Yield scheduling
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleBlockingSync">
            <summary>
            Blocking synchronization as default scheduling.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaAcceleratorId">
            <summary>
            Represents a single Cuda accelerator reference.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAcceleratorId.#ctor(System.Int32)">
            <summary>
            Constructs a new Cuda accelerator reference.
            </summary>
            <param name="deviceId">The Cuda device id.</param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAcceleratorId.DeviceId">
            <summary>
            Returns the Cuda device id.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAcceleratorId.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current accelerator id.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current accelerator id.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAcceleratorId.GetHashCode">
            <summary>
            Returns the hash code of this accelerator id.
            </summary>
            <returns>The hash code of this accelerator id.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAcceleratorId.ToString">
            <summary>
            Returns the string representation of this accelerator id.
            </summary>
            <returns>The string representation of this accelerator id.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.ComputeDynamicMemorySizeForBlockSize">
            <summary>
            Computes the amount of shared memory for the given block size.
            </summary>
            <param name="blockSize">The block size.</param>
            <returns>The amount of required shared memory.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.ComputeManagedDynamicMemorySizeForBlockSize">
            <summary>
            Computes the amount of shared memory for the given block size.
            </summary>
            <param name="blockSize">The block size.</param>
            <returns>The amount of required shared memory.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaAPI">
            <summary>
            Wraps the Cuda-driver API.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.Init">
            <summary>
            Initializes the driver API.
            </summary>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetDriverVersion(ILGPU.Runtime.Cuda.CudaDriverVersion@)">
            <summary>
            Resolves the current driver version.
            </summary>
            <param name="driverVersion">The resolved driver version.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetErrorString(ILGPU.Runtime.Cuda.CudaError)">
            <summary>
            Resolves the error string for the given error status.
            </summary>
            <param name="error">The error to resolve.</param>
            <returns>The resolved error string.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetDevice(System.Int32@,System.Int32)">
            <summary>
            Resolves the device id for the given ordinal.
            </summary>
            <param name="device">The device id.</param>
            <param name="ordinal">The device ordinal.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetDeviceCount(System.Int32@)">
            <summary>
            Resolves the number of available devices.
            </summary>
            <param name="count">The number of devices</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetDeviceName(System.String@,System.Int32)">
            <summary>
            Resolves the name of a device.
            </summary>
            <param name="name">The resolved name.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetTotalDeviceMemory(System.IntPtr@,System.Int32)">
            <summary>
            Resolves total device memory.
            </summary>
            <param name="bytes">The number of bytes.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetTotalDeviceMemory(System.Int64@,System.Int32)">
            <summary>
            Resolves total device memory.
            </summary>
            <param name="bytes">The number of bytes.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetDeviceAttribute(ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)">
            <summary>
            Resolves the value of the given device attribute.
            </summary>
            <param name="attribute">The device attribute.</param>
            <param name="device">The device.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Resolves the compute capability of the given device.
            </summary>
            <param name="major">The major capability.</param>
            <param name="minor">The minor capability.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)">
            <summary>
            Creates a new context.
            </summary>
            <param name="context">The created context.</param>
            <param name="flags">The flags to use.</param>
            <param name="device">The target device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.DestroyContext(System.IntPtr)">
            <summary>
            Destroys the given context.
            </summary>
            <param name="context">The context to destroy.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.SetCurrentContext(System.IntPtr)">
            <summary>
            Make the given context the current one.
            </summary>
            <param name="context">The context.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.SynchronizeContext">
            <summary>
            Synchronizes the current context.
            </summary>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)">
            <summary>
            Resolves the cache configuration.
            </summary>
            <param name="config">The resolved cache configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)">
            <summary>
            Updates the cache configuration.
            </summary>
            <param name="config">The updated cache configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)">
            <summary>
            Resolves the shared-memory configuration.
            </summary>
            <param name="config">The resolved shared-memory configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)">
            <summary>
            Updates the shared-memory configuration.
            </summary>
            <param name="config">The updated shared-memory configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.CanAccessPeer(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Resolves whether the given device can access the given peer device.
            </summary>
            <param name="canAccess">
            True, if the device can access the peer device.
            </param>
            <param name="device">The device.</param>
            <param name="peerDevice">The peer device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.EnablePeerAccess(System.IntPtr,System.Int32)">
            <summary>
            Enables peer access to the given context.
            </summary>
            <param name="peerContext">The peer context.</param>
            <param name="flags">The flags to use.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.DisablePeerAccess(System.IntPtr)">
            <summary>
            Disables peer access to the given context.
            </summary>
            <param name="peerContext">The peer context.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)">
            <summary>
            Resolves the given peer attribute.
            </summary>
            <param name="value">The resolved value.</param>
            <param name="attribute">The attribute to resolve.</param>
            <param name="sourceDevice">The source device.</param>
            <param name="destinationDevice">The destination device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetMemoryInfo(System.IntPtr@,System.IntPtr@)">
            <summary>
            Resolves memory information.
            </summary>
            <param name="free">The amount of free memory.</param>
            <param name="total">The total amount of memory.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetMemoryInfo(System.Int64@,System.Int64@)">
            <summary>
            Resolves memory information.
            </summary>
            <param name="free">The amount of free memory.</param>
            <param name="total">The total amount of memory.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.AllocateMemory(System.IntPtr@,System.IntPtr)">
            <summary>
            Allocates memory on the current device.
            </summary>
            <param name="devicePtr">The resulting device pointer.</param>
            <param name="bytesize">The size of the allocation in bytes.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.FreeMemory(System.IntPtr)">
            <summary>
            Frees the given device pointer.
            </summary>
            <param name="devicePtr">The device pointer.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.AllocateHostMemory(System.IntPtr@,System.IntPtr)">
            <summary>
            Allocates memory on the host.
            </summary>
            <param name="hostPtr">The resulting host pointer.</param>
            <param name="bytesize">The size of the allocation in bytes.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.FreeHostMemory(System.IntPtr)">
            <summary>
            Frees the given host pointer.
            </summary>
            <param name="hostPtr">The host pointer.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.Memcpy(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a memory-copy operation.
            </summary>
            <param name="destination">The destination.</param>
            <param name="source">The source.</param>
            <param name="length">The number of bytes to copy.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Performs a memory-copy operation from host to device memory.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="sourceHost">The source in host memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">
            The accelerator stream for asynchronous processing.
            </param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a memory-copy operation from host to device memory.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="sourceHost">The source in host memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">
            The accelerator stream for asynchronous processing.
            </param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Performs a memory-copy operation from device to host memory.
            </summary>
            <param name="destinationHost">The destination in host memory.</param>
            <param name="sourceDevice">The source in device memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">
            The accelerator stream for asynchronous processing.
            </param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a memory-copy operation from device to host memory.
            </summary>
            <param name="destinationHost">The destination in host memory.</param>
            <param name="sourceDevice">The source in device memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">
            The accelerator stream for asynchronous processing.
            </param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Performs a memory-copy operation from device to device memory.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="sourceDevice">The source in device memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">
            The accelerator stream for asynchronous processing.
            </param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a memory-copy operation from device to device memory.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="sourceDevice">The source in device memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">
            The accelerator stream for asynchronous processing.
            </param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Performs a memory-set operation.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="value">The value to set.</param>
            <param name="length">The length in bytes.</param>
            <param name="stream">
            The accelerator stream for asynchronous processing.
            </param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a memory-set operation.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="value">The value to set.</param>
            <param name="length">The length in bytes.</param>
            <param name="stream">
            The accelerator stream for asynchronous processing.
            </param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)">
            <summary>
            Resolves a pointer-attribute value.
            </summary>
            <param name="targetPtr">The target pointer.</param>
            <param name="attribute">The attribute to resolve.</param>
            <param name="devicePtr">The pointer in device memory.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)">
            <summary>
            Creates a new accelerator stream.
            </summary>
            <param name="stream">The created stream.</param>
            <param name="flags">The flags to use.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)">
            <summary>
            Creates a new accelerator stream.
            </summary>
            <param name="stream">The created stream.</param>
            <param name="flags">The flags to use.</param>
            <param name="priority">The priority to use.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.DestroyStream(System.IntPtr)">
            <summary>
            Destroys the given stream.
            </summary>
            <param name="stream">The stream to destroy.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.SynchronizeStream(System.IntPtr)">
            <summary>
            Synchronizes with the given stream.
            </summary>
            <param name="stream">The stream to synchronize with.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.LoadModule(System.IntPtr@,System.String)">
            <summary>
            Loads the given kernel module into driver memory.
            </summary>
            <param name="kernelModule">The loaded module.</param>
            <param name="moduleData">The module data to load.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.LoadModule(System.IntPtr@,System.String,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Loads the given kernel module into driver memory.
            </summary>
            <param name="kernelModule">The loaded module.</param>
            <param name="moduleData">The module data to load.</param>
            <param name="numOptions">The number of JIT options.</param>
            <param name="jitOptions">The JIT options.</param>
            <param name="jitOptionValues">The JIT values.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.LoadModule(System.IntPtr@,System.String,System.String@)">
            <summary>
            Loads the given kernel module into driver memory.
            </summary>
            <param name="kernelModule">The loaded module.</param>
            <param name="moduleData">The module data to load.</param>
            <param name="errorLog">The error log.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.DestroyModule(System.IntPtr)">
            <summary>
            Unloads the given module.
            </summary>
            <param name="kernelModule">The module to unload.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)">
            <summary>
            Resolves the requested function handle in the scope of the given module.
            </summary>
            <param name="kernelFunction">The resolved function.</param>
            <param name="kernelModule">The module.</param>
            <param name="functionName">The name of the function.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.LaunchKernelWithStreamBinding(ILGPU.Runtime.Cuda.CudaStream,ILGPU.Runtime.Cuda.CudaKernel,ILGPU.RuntimeKernelConfig,System.IntPtr,System.IntPtr)">
            <summary>
            Launches the given kernel function.
            </summary>
            <param name="stream">The current stream.</param>
            <param name="kernel">The current kernel.</param>
            <param name="config">The current kernel configuration.</param>
            <param name="args">The arguments.</param>
            <param name="kernelArgs">The kernel arguments.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Launches the given kernel function.
            </summary>
            <param name="kernelFunction">The function to launch.</param>
            <param name="gridDimX">The grid dimension in X dimension.</param>
            <param name="gridDimY">The grid dimension in Y dimension.</param>
            <param name="gridDimZ">The grid dimension in Z dimension.</param>
            <param name="blockDimX">The block dimension in X dimension.</param>
            <param name="blockDimY">The block dimension in Y dimension.</param>
            <param name="blockDimZ">The block dimension in Z dimension.</param>
            <param name="sharedMemSizeInBytes">The shared-memory size in bytes.</param>
            <param name="stream">The associated accelerator stream.</param>
            <param name="args">The arguments.</param>
            <param name="kernelArgs">The kernel arguments.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.LaunchKernelWithStruct``1(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,``0@,System.Int32)">
            <summary>
            Launches the given kernel function using a bulk structure.
            </summary>
            <param name="kernelFunction">The function to launch.</param>
            <param name="gridDimX">The grid dimension in X dimension.</param>
            <param name="gridDimY">The grid dimension in Y dimension.</param>
            <param name="gridDimZ">The grid dimension in Z dimension.</param>
            <param name="blockDimX">The block dimension in X dimension.</param>
            <param name="blockDimY">The block dimension in Y dimension.</param>
            <param name="blockDimZ">The block dimension in Z dimension.</param>
            <param name="sharedMemSizeInBytes">The shared-memory size in bytes.</param>
            <param name="stream">The associated accelerator stream.</param>
            <param name="argument">The argument structure.</param>
            <param name="argumentLength">
            The length of the memory region in bytes.
            </param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Computes the maximum number of blocks for maximum occupancy. 
            </summary>
            <param name="numBlocks">The number of blocks.</param>
            <param name="func">The function.</param>
            <param name="blockSize">The desired block size.</param>
            <param name="dynamicSMemSize">
            The size of the required shared memory.
            </param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)">
            <summary>
            Computes the maximum potential block size to for maximum occupancy.
            </summary>
            <param name="minGridSize">
            The minimum grid size for maximum occupancy.
            </param>
            <param name="blockSize">The block size for maximum occupancy.</param>
            <param name="func">The function.</param>
            <param name="blockSizeToDynamicSMemSize">
            Computes the amount of required shared-memory for the given block size.
            </param>
            <param name="dynamicSMemSize">
            The size of the required shared memory (independent of the block size).
            </param>
            <param name="blockSizeLimit">The block-size limit.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.ComputeManagedDynamicMemorySizeForBlockSize,System.Int32,System.Int32)">
            <summary>
            Computes the maximum potential block size to for maximum occupancy.
            </summary>
            <param name="minGridSize">
            The minimum grid size for maximum occupancy.
            </param>
            <param name="blockSize">The block size for maximum occupancy.</param>
            <param name="func">The function.</param>
            <param name="blockSizeToDynamicSMemSize">
            Computes the amount of required shared-memory for the given block size.
            </param>
            <param name="dynamicSMemSize">
            The size of the required shared memory (independent of the block size).
            </param>
            <param name="blockSizeLimit">The block-size limit.</param>
            <returns>The error status.</returns>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAPI.LibNameWindows">
            <summary>
            Represents the driver library name on Windows.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAPI.LibNameLinux">
            <summary>
            Represents the driver library name on Linux.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAPI.LibNameMacOS">
            <summary>
            Represents the driver library name on MacOS.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAPI.CurrentAPI">
            <summary>
            Returns the driver API for the current platform.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaCacheConfiguration">
            <summary>
            Represents a cache configuration of a device.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.Default">
            <summary>
            The default cache configuration.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.PreferShared">
            <summary>
            Prefer shared cache.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.PreferL1">
            <summary>
            Prefer L1 cache.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.PreferEqual">
            <summary>
            Prefer shared or L1 cache.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaDriverVersion">
            <summary>
            Represents a CUDA driver version
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.FromMajorMinor(System.Int32,System.Int32)">
            <summary>
            Returns the CUDA driver version from major/minor values
            </summary>
            <param name="major">The major version</param>
            <param name="minor">The minor version</param>
            <returns>The CUDA driver version</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.FromValue(System.Int32)">
            <summary>
            Returns the CUDA driver version from a value
            </summary>
            <param name="value">The CUDA driver value</param>
            <returns>The CUDA driver version</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.Equals(ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true if the given version is equal to this version.
            </summary>
            <param name="other">The other version.</param>
            <returns>True, if the given version is equal to this version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.CompareTo(ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Compares this version to the given one.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDriverVersion.Major">
            <summary>
            Major driver version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDriverVersion.Minor">
            <summary>
            Minor driver version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDriverVersion.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this version.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to this version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.GetHashCode">
            <summary>
            Returns the hash code of this version.
            </summary>
            <returns>The hash code of this version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.ToString">
            <summary>
            Returns the string representation of the driver version.
            </summary>
            <returns>The string representation of the driver version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_Implicit(ILGPU.Runtime.Cuda.CudaDriverVersion)~System.Int32">
            <summary>
            Converts a version into an int.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_Equality(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true if the first and the second version are the same.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first and the second version are the same.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_Inequality(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true if the first and the second version are not the same.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>
            True, if the first and the second version are not the same.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_LessThan(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true if the first version is smaller than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>
            True, if the first version is smaller than the second one.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_LessThanOrEqual(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true if the first version is less than or equal to the second
            version.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>
            True, if the first version is less or equal to the second version.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_GreaterThan(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true if the first version is greater than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>
            True, if the first version is greater than the second one.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_GreaterThanOrEqual(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true if the first version is greater than or equal to the second
            version.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>
            True, if the first version is greater or equal to the second version.
            </returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaDriverVersionUtils">
            <summary>
            Utilities for <see cref="T:ILGPU.Runtime.Cuda.CudaDriverVersion"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaDriverVersionUtils.ArchitectureLookup">
            <summary>
            Maps PTX architecture to their corresponding minimum CUDA driver version.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaDriverVersionUtils.InstructionSetLookup">
            <summary>
            Maps PTX ISA to their corresponding minimum CUDA driver version.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersionUtils.GetMinimumDriverVersion(ILGPU.Backends.PTXArchitecture)">
            <summary>
            Resolves the minimum CUDA driver version for the PTX architecture
            </summary>
            <param name="architecture">The PTX architecture</param>
            <returns>The minimum driver version</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersionUtils.GetMinimumDriverVersion(ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Resolves the minimum CUDA driver version for the PTX instruction set
            </summary>
            <param name="instructionSet">The PTX instruction set</param>
            <returns>The minimum driver version</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaException">
            <summary>
            Represents a Cuda exception that can be thrown by the Cuda runtime.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.#ctor">
            <summary>
            Constructs a new Cuda exception.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.#ctor(ILGPU.Runtime.Cuda.CudaError)">
            <summary>
            Constructs a new Cuda exception.
            </summary>
            <param name="error">The Cuda runtime error.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaException.Error">
            <summary>
            Returns the error.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.ThrowIfFailed(ILGPU.Runtime.Cuda.CudaError)">
            <summary>
            Checks the given status and throws an exception in case of an error.
            </summary>
            <param name="cudaStatus">The Cuda status to check.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaKernel">
            <summary>
            Represents a Cuda kernel that can be directly launched on a GPU.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaKernel.modulePtr">
            <summary>
            Holds the pointer to the native Cuda module in memory.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaKernel.functionPtr">
            <summary>
            Holds the pointer to the native Cuda function in memory.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaKernel.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,ILGPU.Backends.PTX.PTXCompiledKernel,System.Reflection.MethodInfo)">
            <summary>
            Loads a compiled kernel into the given Cuda context as kernel program.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="kernel">The source kernel.</param>
            <param name="launcher">The launcher method for the given kernel.</param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaKernel.ModulePtr">
            <summary>
            Returns the Cuda module ptr.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaKernel.FunctionPtr">
            <summary>
            Returns the Cuda function ptr.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaKernel.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2">
            <summary>
            Represents an unmanaged Cuda buffer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,`1)">
            <summary>
            Constructs a new Cuda buffer.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="extent">The extent.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2.CopyToView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyToView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2.CopyFromView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyFromView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer.MemSetToZero(ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaMemoryType">
            <summary>
            Represents the type of a device pointer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.None">
            <summary>
            Represents no known memory type.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Host">
            <summary>
            Represents a host pointer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Device">
            <summary>
            Represents a device pointer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Array">
            <summary>
            Represents a pointer to a Cuda array.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Unified">
            <summary>
            Represents a unified-memory pointer.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.StreamFlags">
            <summary>
            Used to create <see cref="T:ILGPU.Runtime.Cuda.CudaStream"/> objects.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.StreamFlags.CU_STREAM_DEFAULT">
            <summary>
            Specifies a blocking stream.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.StreamFlags.CU_STREAM_NON_BLOCKING">
            <summary>
            Specifies a non-blocking stream. Used if no other flag is specified.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration">
            <summary>
            Represents a shared-memory configuration of a device.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration.Default">
            <summary>
            The default shared-memory configuration.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration.FourByteBankSize">
            <summary>
            Setup a bank size of 4 byte.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration.EightByteBankSize">
            <summary>
            Setup a bank size of 8 byte.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaStream">
            <summary>
            Represents a Cuda stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaStream.#ctor(ILGPU.Runtime.Accelerator,System.IntPtr,System.Boolean)">
            <summary>
            Constructs a new cuda stream from the given native pointer.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="ptr">The native stream pointer.</param>
            <param name="responsible">
            Whether ILGPU is responsible of disposing this stream.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaStream.#ctor(ILGPU.Runtime.Accelerator,ILGPU.Runtime.Cuda.StreamFlags)">
            <summary>
            Constructs a new cuda stream with given <see cref="T:ILGPU.Runtime.Cuda.StreamFlags"/>.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="flag">
            Stream flag to use. Allows blocking and non-blocking streams.
            </param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaStream.StreamPtr">
            <summary>
            Returns the underlying native Cuda stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaStream.Synchronize">
            <summary cref="M:ILGPU.Runtime.AcceleratorStream.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaStream.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAPI_0.IsSupported">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAPI_1.IsSupported">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaAPI_NotSupported">
            <summary>
            The NotSupported implementation of the CudaAPI wrapper.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAPI_NotSupported.IsSupported">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.ScopedAcceleratorBinding">
            <summary>
            Represents a temporary binding of an accelerator object.
            The old binding can be recovered by either <see cref="M:ILGPU.Runtime.ScopedAcceleratorBinding.Recover"/>
            or the <see cref="M:ILGPU.Runtime.ScopedAcceleratorBinding.Dispose"/> method.
            </summary>
            <remarks>
            The objects implements <see cref="T:System.IDisposable"/> in order
            to use it in the scope of using statements
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new scoped binding.
            </summary>
            <param name="accelerator">The new accelerator.</param>
        </member>
        <member name="P:ILGPU.Runtime.ScopedAcceleratorBinding.OldAccelerator">
            <summary>
            Returns the old accelerator that was the current one
            before the current binding operation (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ScopedAcceleratorBinding.IsRecoverable">
            <summary>
            Returns true if an old accelerator has to be recovered.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.Recover">
            <summary>
            Recovers the old accelerator and resets the internal state.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.Equals(ILGPU.Runtime.ScopedAcceleratorBinding)">
            <summary>
            Returns true if the given binding is equal to the current binding.
            </summary>
            <param name="other">The other binding.</param>
            <returns>
            True, if the given binding is equal to the current binding.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.Dispose">
            <summary>
            Recovers the old accelerator and resets the internal state.
            </summary>
            <remarks>
            The dispose method is useful in combination with using statements.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current binding.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current binding.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.GetHashCode">
            <summary>
            Returns the hash code of this binding.
            </summary>
            <returns>The hash code of this binding.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.ToString">
            <summary>
            Returns the string representation of this binding.
            </summary>
            <returns>The string representation of this binding.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.op_Equality(ILGPU.Runtime.ScopedAcceleratorBinding,ILGPU.Runtime.ScopedAcceleratorBinding)">
            <summary>
            Returns true if the first and second binding are the same.
            </summary>
            <param name="first">The first binding.</param>
            <param name="second">The second binding.</param>
            <returns>True, if the first and second binding are the same.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.op_Inequality(ILGPU.Runtime.ScopedAcceleratorBinding,ILGPU.Runtime.ScopedAcceleratorBinding)">
            <summary>
            Returns true if the first and second binding are not the same.
            </summary>
            <param name="first">The first binding.</param>
            <param name="second">The second binding.</param>
            <returns>True, if the first and second binding are not the same.</returns>
        </member>
        <member name="T:ILGPU.Runtime.BaseDebugArrayView`1">
            <summary>
            Base debug view.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.BaseDebugArrayView`1.view">
            <summary>
            Stores the associated view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.BaseDebugArrayView`1.#ctor(ILGPU.ArrayView{`0})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="source">The source array view.</param>
        </member>
        <member name="P:ILGPU.Runtime.BaseDebugArrayView`1.Data">
            <summary>
            The buffer data.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.BaseDebugArrayView`1.LoadCPUData">
            <summary>
            Loads data from the CPU.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Runtime.BaseDebugArrayView`1.LoadDeviceData">
            <summary>
            Loads raw data from the underlying device.
            </summary>
            <returns>The loaded data.</returns>
        </member>
        <member name="T:ILGPU.Runtime.DebugArrayView`2">
            <summary>
            Represents a debugger view for generic array views.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.DebugArrayView`2.#ctor(ILGPU.ArrayView{`0,`1})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="source">The target array view.</param>
        </member>
        <member name="T:ILGPU.Runtime.ExchangeBufferMode">
            <summary>
            Specifies the allocation mode for a single exchange buffer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.ExchangeBufferMode.PreferPagedLockedMemory">
            <summary>
            Prefer paged locked memory for improved transfer speeds.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.ExchangeBufferMode.UsePageablememory">
            <summary>
            Allocate CPU memory in pageable memory to leverage virtual memory.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.ExchangeBufferBase`2">
            <summary>
            The base class for all exchange buffers.
            Contains methods and types that are shared by all implementations.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="F:ILGPU.Runtime.ExchangeBufferBase`2.ElementSize">
            <summary>
            Represents the size of an element in bytes.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.ExchangeBufferBase`2.CudaViewSource">
            <summary>
            Represents a view source that allocates native memory in page-locked CPU.
            memory.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CudaViewSource.Create(System.Int64)">
            <summary>
            Creates a new Cuda view source.
            </summary>
            <param name="sizeInBytes">The size in bytes to allocate.</param>
            <returns>An unsafe array view source.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CudaViewSource.#ctor(System.IntPtr)">
            <summary>
            Creates a new unmanaged memory view source.
            </summary>
            <param name="nativePtr">The native host pointer.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CudaViewSource.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,System.Int64,System.Int64)">
            <summary cref="M:ILGPU.Runtime.ArrayViewSource.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,System.Int64,System.Int64)"/>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CudaViewSource.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="F:ILGPU.Runtime.ExchangeBufferBase`2.cpuMemory">
            <summary>
            The internally allocated CPU memory.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBufferBase`2.CPUMemory">
            <summary>
            Property for accessing cpuMemory.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.ExchangeBufferBase`2.cpuMemoryPointer">
            <summary>
            A cached version of the CPU memory pointer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBufferBase`2.CPUMemoryPointer">
            <summary>
            Property for accessing cpuMemoryPointer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.#ctor(ILGPU.Runtime.MemoryBuffer{`0,`1},ILGPU.Runtime.ExchangeBufferMode)">
            <summary>
            Constructs the base class for all exchange buffer implementations.
            </summary>
            <param name="buffer">The memory buffer to use.</param>
            <param name="mode">The exchange buffer mode to use.</param>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBufferBase`2.Buffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBufferBase`2.View">
            <summary>
            Returns an array view that can access this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBufferBase`2.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBufferBase`2.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBufferBase`2.CPUArrayView">
            <summary>
            Internal array view
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBufferBase`2.CPUView">
            <summary>
            The part of this buffer in CPU memory
            </summary>
            <remarks>
            Is obsolete, sole purpose is to prevent a breaking API change
            </remarks>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBufferBase`2.Span">
            <summary>
            Returns a span to the part of this buffer in CPU memory
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBufferBase`2.Item(`1)">
            <summary>
            Returns a reference to the i-th element in CPU memory.
            </summary>
            <param name="index">The element index to access.</param>
            <returns>A reference to the i-th element in CPU memory.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.GetAsRawArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,System.Int64,System.Int64)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="byteOffset">The offset in bytes.</param>
            <param name="byteExtent">The extent in bytes (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.GetAsArray">
            <summary>
            Copies the current contents into a new array using the default
            accelerator stream.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.GetAsArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyToAccelerator">
            <summary>
            Copes data from CPU memory to the associated accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyToAccelerator(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies data from CPU memory to the associated accelerator.
            </summary>
            <param name="stream">The stream to use.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyToAccelerator(`1)">
            <summary>
            Copies data from CPU memory to the associated accelerator.
            </summary>
            <param name="acceleratorMemoryOffset">The target memory offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyToAccelerator(ILGPU.Runtime.AcceleratorStream,`1)">
            <summary>
            Copies data from CPU memory to the associated accelerator.
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="acceleratorMemoryOffset">The target memory offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyToAccelerator(`1,`1)">
            <summary>
            Copies data from CPU memory to the associated accelerator.
            </summary>
            <param name="cpuMemoryOffset">the source memory offset.</param>
            <param name="acceleratorMemoryOffset">The target memory offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyToAccelerator(ILGPU.Runtime.AcceleratorStream,`1,`1)">
            <summary>
            Copies data from CPU memory to the associated accelerator.
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="cpuMemoryOffset">the source memory offset.</param>
            <param name="acceleratorMemoryOffset">The target memory offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyToAccelerator(`1,`1,ILGPU.LongIndex1)">
            <summary>
            Copies data from CPU memory to the associated accelerator.
            </summary>
            <param name="cpuMemoryOffset">the source memory offset.</param>
            <param name="acceleratorMemoryOffset">The target memory offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyToAccelerator(ILGPU.Runtime.AcceleratorStream,`1,`1,ILGPU.LongIndex1)">
            <summary>
            Copies data from CPU memory to the associated accelerator.
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="cpuMemoryOffset">the source memory offset.</param>
            <param name="acceleratorMemoryOffset">The target memory offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyFromAccelerator">
            <summary>
            Copies data from the associated accelerator into CPU memory.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyFromAccelerator(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies data from the associated accelerator into CPU memory.
            </summary>
            <param name="stream">The stream to use.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyFromAccelerator(`1)">
            <summary>
            Copies data from the associated accelerator into CPU memory.
            </summary>
            <param name="cpuMemoryOffset">The target memory offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyFromAccelerator(ILGPU.Runtime.AcceleratorStream,`1)">
            <summary>
            Copies data from the associated accelerator into CPU memory.
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="cpuMemoryOffset">the target memory offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyFromAccelerator(`1,`1)">
            <summary>
            Copies data from the associated accelerator into CPU memory.
            </summary>
            <param name="acceleratorMemoryOffset">The source memory offset.</param>
            <param name="cpuMemoryOffset">the target memory offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyFromAccelerator(ILGPU.Runtime.AcceleratorStream,`1,`1)">
            <summary>
            Copies data from the associated accelerator into CPU memory.
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="acceleratorMemoryOffset">The source memory offset.</param>
            <param name="cpuMemoryOffset">the target memory offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyFromAccelerator(`1,`1,ILGPU.LongIndex1)">
            <summary>
            Copies data from the associated accelerator into CPU memory.
            </summary>
            <param name="acceleratorMemoryOffset">The source memory offset.</param>
            <param name="cpuMemoryOffset">the target memory offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.CopyFromAccelerator(ILGPU.Runtime.AcceleratorStream,`1,`1,ILGPU.LongIndex1)">
            <summary>
            Copies data from the associated accelerator into CPU memory.
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="acceleratorMemoryOffset">The source memory offset.</param>
            <param name="cpuMemoryOffset">the target memory offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.As2DView(ILGPU.LongIndex2)">
            <summary>
            Gets the part of this buffer on CPU memory as a 2D View.
            </summary>
            <param name="extent">The view extent.</param>
            <returns>The view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.As3DView(ILGPU.LongIndex3)">
            <summary>
            Gets the part of this buffer on CPU memory as a 3D View.
            </summary>
            <param name="extent">The view extent.</param>
            <returns>The view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.GetAsSpan">
            <summary>
            Gets this exchange buffer as a <see cref="T:System.Span`1"/>, copying from the
            accelerator in the process
            </summary>
            <returns>
            The <see cref="T:System.Span`1"/> which accesses the part of this buffer on the CPU.
            Uses the default accelerator stream.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.GetAsSpan(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Gets this exchange buffer as a <see cref="T:System.Span`1"/>, copying from the
            accelerator in the process.
            </summary>
            <param name="stream">The stream to use</param>
            <returns>
            The <see cref="T:System.Span`1"/> which accesses the part of this buffer on the CPU.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBufferBase`2.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.ExchangeBuffer">
            <summary>
            A static helper class for all exchange buffer implementations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer.AllocateExchangeBuffer``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex1)">
            <summary>
            Allocates a new 1D exchange buffer
            that allocates the specified amount of elements on the current
            accelerator. Furthermore, it keeps a buffer of the same size in pinned
            CPU memory to enable asynchronous memory transfers.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The associated accelerator to use.</param>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>The allocated 1D exchange buffer.</returns>
            <remarks>
            This function uses the default buffer allocation mode.
            <see cref="F:ILGPU.Runtime.ExchangeBufferMode.PreferPagedLockedMemory"/>
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer.AllocateExchangeBuffer``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex1,ILGPU.Runtime.ExchangeBufferMode)">
            <summary>
            Allocates a new 1D exchange buffer
            that allocates the specified amount of elements on the current
            accelerator. Furthermore, it keeps a buffer of the same size in pinned
            CPU memory to enable asynchronous memory transfers.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The associated accelerator to use.</param>
            <param name="extent">The extent (number of elements to allocate).</param>
            <param name="mode">The exchange buffer mode to use.</param>
            <returns>The allocated 1D exchange buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer.AllocateExchangeBuffer``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex2)">
            <summary>
            Allocates a new 2D exchange buffer
            that allocates the specified amount of elements on the current
            accelerator. Furthermore, it keeps a buffer of the same size in pinned
            CPU memory to enable asynchronous memory transfers.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The associated accelerator to use.</param>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>The allocated 2D exchange buffer.</returns>
            <remarks>
            This function uses the default buffer allocation mode.
            <see cref="F:ILGPU.Runtime.ExchangeBufferMode.PreferPagedLockedMemory"/>
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer.AllocateExchangeBuffer``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex2,ILGPU.Runtime.ExchangeBufferMode)">
            <summary>
            Allocates a new 2D exchange buffer
            that allocates the specified amount of elements on the current
            accelerator. Furthermore, it keeps a buffer of the same size in pinned
            CPU memory to enable asynchronous memory transfers.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The associated accelerator to use.</param>
            <param name="extent">The extent (number of elements to allocate).</param>
            <param name="mode">The exchange buffer mode to use.</param>
            <returns>The allocated 2D exchange buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer.AllocateExchangeBuffer``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex3)">
            <summary>
            Allocates a new 3D exchange buffer
            that allocates the specified amount of elements on the current
            accelerator. Furthermore, it keeps a buffer of the same size in pinned
            CPU memory to enable asynchronous memory transfers.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The associated accelerator to use.</param>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>The allocated 3D exchange buffer.</returns>
            <remarks>
            This function uses the default buffer allocation mode.
            <see cref="F:ILGPU.Runtime.ExchangeBufferMode.PreferPagedLockedMemory"/>
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer.AllocateExchangeBuffer``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex3,ILGPU.Runtime.ExchangeBufferMode)">
            <summary>
            Allocates a new 3D exchange buffer
            that allocates the specified amount of elements on the current
            accelerator. Furthermore, it keeps a buffer of the same size in pinned
            CPU memory to enable asynchronous memory transfers.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The associated accelerator to use.</param>
            <param name="extent">The extent (number of elements to allocate).</param>
            <param name="mode">The exchange buffer mode to use.</param>
            <returns>The allocated 3D exchange buffer.</returns>
        </member>
        <member name="T:ILGPU.Runtime.ExchangeBuffer`1">
            <summary>
            1D implementation of
            <see cref="T:ILGPU.Runtime.ExchangeBufferBase`2"/>
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.#ctor(ILGPU.Runtime.MemoryBuffer{`0,ILGPU.LongIndex1},ILGPU.Runtime.ExchangeBufferMode)">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="buffer">The underlying memory buffer.</param>
            <param name="mode">The current buffer allocation mode.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.AsMemoryBuffer">
            <summary>
            Gets this buffer as a higher level memory buffer.
            </summary>
            <returns> A <see cref="T:ILGPU.Runtime.MemoryBuffer`1"/> containing
            the data in this exchanage buffer.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.op_Implicit(ILGPU.Runtime.ExchangeBuffer{`0})~ILGPU.ArrayView{`0,ILGPU.LongIndex1}">
            <summary>
            Implicitly converts this buffer into a generic array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.op_Implicit(ILGPU.Runtime.ExchangeBuffer{`0})~ILGPU.Runtime.MemoryBuffer{`0,ILGPU.LongIndex1}">
            <summary>
            Implicitly converts this buffer into a memory buffer.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="T:ILGPU.Runtime.ExchangeBuffer2D`1">
            <summary>
            2D implementation of
            <see cref="T:ILGPU.Runtime.ExchangeBufferBase`2"/>
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer2D`1.#ctor(ILGPU.Runtime.MemoryBuffer{`0,ILGPU.LongIndex2},ILGPU.Runtime.ExchangeBufferMode)">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="buffer">The underlying memory buffer.</param>
            <param name="mode">The current buffer allocation mode.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer2D`1.AsMemoryBuffer2D">
            <summary>
            Gets this buffer as a higher level memory buffer.
            </summary>
            <returns> A <see cref="T:ILGPU.Runtime.MemoryBuffer2D`1"/> containing
            the data in this exchanage buffer.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer2D`1.As2DView">
            <summary>
            Gets the part of this buffer on CPU memory as a 2D View
            using the current extent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer2D`1.GetAs2DArray">
            <summary>
            Gets this buffer as a 2D array from
            the accelerator using the default stream.
            </summary>
            <returns>The array containing all the elements in the buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer2D`1.GetAs2DArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Gets this buffer as a 2D array from the accelerator.
            </summary>
            <returns>The array containing all the elements in the buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer2D`1.op_Implicit(ILGPU.Runtime.ExchangeBuffer2D{`0})~ILGPU.ArrayView{`0,ILGPU.LongIndex2}">
            <summary>
            Implicitly converts this buffer into a generic array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer2D`1.op_Implicit(ILGPU.Runtime.ExchangeBuffer2D{`0})~ILGPU.Runtime.MemoryBuffer{`0,ILGPU.LongIndex2}">
            <summary>
            Implicitly converts this buffer into a memory buffer.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="T:ILGPU.Runtime.ExchangeBuffer3D`1">
            <summary>
            3D implementation of
            <see cref="T:ILGPU.Runtime.ExchangeBufferBase`2"/>
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer3D`1.#ctor(ILGPU.Runtime.MemoryBuffer{`0,ILGPU.LongIndex3},ILGPU.Runtime.ExchangeBufferMode)">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="buffer">The underlying memory buffer.</param>
            <param name="mode">The current buffer allocation mode.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer3D`1.AsMemoryBuffer3D">
            <summary>
            Gets this buffer as a higher level memory buffer.
            </summary>
            <returns> A <see cref="T:ILGPU.Runtime.MemoryBuffer3D`1"/> containing
            the data in this exchanage buffer.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer3D`1.As3DView">
            <summary>
            Gets the part of this buffer on CPU memory as a 3D View
            using the current extent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer3D`1.GetAs3DArray">
            <summary>
            Gets this buffer as a 3D array from
            the accelerator using the default stream.
            </summary>
            <returns>The array containing all the elements in the buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer3D`1.GetAs3DArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Gets this buffer as a 3D array from the accelerator.
            </summary>
            <returns>The array containing all the elements in the buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer3D`1.op_Implicit(ILGPU.Runtime.ExchangeBuffer3D{`0})~ILGPU.ArrayView{`0,ILGPU.LongIndex3}">
            <summary>
            Implicitly converts this buffer into a generic array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer3D`1.op_Implicit(ILGPU.Runtime.ExchangeBuffer3D{`0})~ILGPU.Runtime.MemoryBuffer{`0,ILGPU.LongIndex3}">
            <summary>
            Implicitly converts this buffer into a memory buffer.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="T:ILGPU.Runtime.IAcceleratorExtensionProvider`1">
            <summary>
            Represents a generic accelerator-extension provider.
            </summary>
            <typeparam name="TExtension">The type of the extension to be created.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.IAcceleratorExtensionProvider`1.CreateCPUExtension(ILGPU.Runtime.CPU.CPUAccelerator)">
            <summary>
            Creates an extension for a CPU accelerator.
            </summary>
            <param name="accelerator">The target accelerator.</param>
            <returns>The created extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.IAcceleratorExtensionProvider`1.CreateCudaExtension(ILGPU.Runtime.Cuda.CudaAccelerator)">
            <summary>
            Creates an extension for a Cuda accelerator.
            </summary>
            <param name="accelerator">The target accelerator.</param>
            <returns>The created extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.IAcceleratorExtensionProvider`1.CreateOpenCLExtension(ILGPU.Runtime.OpenCL.CLAccelerator)">
            <summary>
            Creates an extension for an OpenCL accelerator.
            </summary>
            <param name="accelerator">The target accelerator.</param>
            <returns>The created extension.</returns>
        </member>
        <member name="T:ILGPU.Runtime.IMemoryBuffer">
            <summary>
            Represents the base interface of all memory buffers.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IMemoryBuffer.Length">
            <summary>
            Returns the length of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer.GetAsRawArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="T:ILGPU.Runtime.IMemoryBuffer`1">
            <summary>
            Represents the generic base interface of all typed memory buffers.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IMemoryBuffer`1.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer`1.GetAsArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="T:ILGPU.Runtime.IMemoryBuffer`2">
            <summary>
            Represents the generic base interface of all memory buffers
            using n-dimensional indices.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IMemoryBuffer`2.View">
            <summary>
            Returns an array view that can access this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IMemoryBuffer`2.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer`2.GetAsArray(ILGPU.Runtime.AcceleratorStream,`1,`1)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer`2.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,`1},`1)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer`2.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,`1},`1)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer`2.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Kernel">
            <summary>
            Represents the base class for all runtime kernels.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.ImplementSpecializationCacheArgs(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            Implements a <see cref="T:ILGPU.Runtime.ISpecializationCacheArgs"/> interface in order to
            make the given <paramref name="typeBuilder"/> compatible with a
            <see cref="T:ILGPU.Runtime.SpecializationCache`3"/> instance.
            </summary>
            <param name="typeBuilder">The target type builder to use.</param>
            <param name="fields">The source fields used for implementation.</param>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.CreateSpecializedLauncher``2(ILGPU.Runtime.Accelerator,ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,ILGPU.IR.Method,``1@)">
            <summary>
            Creates a launcher delegate that uses the
            <see cref="T:ILGPU.Runtime.SpecializationCache`3"/> to create
            dynamically specialized kernels.
            </summary>
            <typeparam name="TLoader">The associated loader type.</typeparam>
            <typeparam name="TDelegate">The launcher delegate type.</typeparam>
            <param name="accelerator">The associated accelerator.</param>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelMethod">The kernel IR method.</param>
            <param name="loader">The loader instance.</param>
            <returns>
            A dynamic kernel launcher that automatically specializes kernels.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.#ctor(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel,System.Reflection.MethodInfo)">
            <summary>
            Constructs a new kernel.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="compiledKernel">The source kernel.</param>
            <param name="launcher">The launcher method for the given kernel.</param>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.Launcher">
            <summary>
            Returns the associated kernel launcher.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.Specialization">
            <summary>
            Returns the associated specialization.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.NumParameters">
            <summary>
            Returns the number of uniform parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.CreateLauncherDelegate``1">
            <summary>
            Creates a launcher delegate for this kernel.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <returns>The created delegate.</returns>
            <remarks>Note that the first argument is the accelerator stream.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.InvokeLauncher``1(``0,ILGPU.Runtime.AcceleratorStream,System.Object[])">
            <summary>
            Invokes the associated launcher via reflection.
            </summary>
            <typeparam name="T">The index type T.</typeparam>
            <param name="dimension">The grid dimension.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="args">The kernel arguments.</param>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.Launch``1(ILGPU.Runtime.AcceleratorStream,``0,System.Object[])">
            <summary>
            Launches the current kernel with the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="dimension">The grid dimension.</param>
            <param name="args">The kernel arguments.</param>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.Launch(ILGPU.Runtime.AcceleratorStream,System.Int32,System.Object[])">
            <summary>
            Launches the current kernel with the given arguments.
            </summary>
            <param name="dimension">The grid dimension.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="args">The kernel arguments.</param>
        </member>
        <member name="T:ILGPU.Runtime.KernelUtil">
            <summary>
            Contains utility methods to work with kernel objects.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelUtil.TryGetKernel``1(``0,ILGPU.Runtime.Kernel@)">
            <summary>
            Tries to resolve a kernel object from a previously created kernel delegate.
            </summary>
            <typeparam name="TDelegate">The kernel-delegate type.</typeparam>
            <param name="kernelDelegate">The kernel-delegate instance.</param>
            <param name="kernel">The resolved kernel object (if any).</param>
            <returns>True, if a kernel object could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelUtil.GetKernel``1(``0)">
            <summary>
            Resolves a kernel object from a previously created kernel delegate.
            If this is not possible, the method will throw an
            <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <typeparam name="TDelegate">The kernel-delegate type.</typeparam>
            <param name="kernelDelegate">The kernel-delegate instance.</param>
            <returns>The resolved kernel object.</returns>
        </member>
        <member name="T:ILGPU.Runtime.KernelAccelerator`2">
            <summary>
            Represents an accelerator that manages typed kernel.
            </summary>
            <typeparam name="TCompiledKernel">The type of a compiled kernel.</typeparam>
            <typeparam name="TKernel">The type of a loaded runtime kernel</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.#ctor(ILGPU.Context,ILGPU.Runtime.AcceleratorType)">
            <summary>
            Constructs a new kernel accelerator.
            </summary>
            <param name="context">The target context.</param>
            <param name="type">The target accelerator type.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.LoadKernelInternal(ILGPU.Backends.CompiledKernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.LoadKernelInternal(ILGPU.Backends.CompiledKernel)"/>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.LoadImplicitlyGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads an implicitly grouped kernel on the current accelerator.
            </summary>
            <param name="kernel">The compiled kernel to load.</param>
            <param name="customGroupSize">The user-defined group size.</param>
            <param name="kernelInfo">The resolved kernel information.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.LoadAutoGroupedKernelInternal(ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads an auto grouped kernel on the current accelerator.
            </summary>
            <param name="kernel">The compiled kernel to load.</param>
            <param name="kernelInfo">The resolved kernel information.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.GenerateKernelLauncherMethod(`0,System.Int32)">
            <summary>
            Generates a dynamic kernel-launcher method that will be just-in-time compiled
            during the first invocation. Using the generated launcher lowers the overhead
            for kernel launching dramatically, since unnecessary operations (like boxing)
            can be avoided.
            </summary>
            <param name="kernel">The kernel to generate a launcher for.</param>
            <param name="customGroupSize">
            The custom group size used for automatic blocking.
            </param>
            <returns>The generated launcher method.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.CreateKernel(`0)">
            <summary>
            Creates an abstract kernel without an initialized launcher.
            </summary>
            <param name="compiledKernel">The compiled kernel.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.CreateKernel(`0,System.Reflection.MethodInfo)">
            <summary>
            Creates an abstract kernel with an initialized launcher.
            </summary>
            <param name="compiledKernel">The compiled kernel.</param>
            <param name="launcher">The actual kernel launcher method.</param>
        </member>
        <member name="T:ILGPU.Runtime.KernelInfo">
            <summary>
            Provides detailed information about compiled kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelInfo.CreateFrom(ILGPU.Backends.CompiledKernel.KernelInfo,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new kernel information object.
            </summary>
            <param name="info">The underlying kernel info (if any).</param>
            <param name="minGroupSize">The minimum group size (if known).</param>
            <param name="minGridSize">The minimum grid size (if known).</param>
            <returns>The created kernel information object.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelInfo.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Constructs a new kernel information object.
            </summary>
            <param name="minGroupSize">The minimum group size (if known).</param>
            <param name="minGridSize">The minimum grid size (if known).</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelInfo.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},ILGPU.IR.Analyses.AllocaKindInformation@,System.Collections.Immutable.ImmutableArray{ILGPU.Backends.CompiledKernel.FunctionInfo})">
            <summary>
            Constructs a new kernel information object.
            </summary>
            <param name="minGroupSize">The minimum group size (if known).</param>
            <param name="minGridSize">The minimum grid size (if known).</param>
            <param name="sharedAllocations">All shared allocations.</param>
            <param name="functions">
            An array containing detailed function information.
            </param>
        </member>
        <member name="P:ILGPU.Runtime.KernelInfo.MinGroupSize">
            <summary>
            Returns the estimated group size to gain maximum occupancy on this device.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.KernelInfo.MinGridSize">
            <summary>
            Returns the minimum grid size to gain maximum occupancy on this device.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelInfo.Dump(System.IO.TextWriter)">
            <summary>
            Dumps kernel information to the given text writer.
            </summary>
            <param name="writer">The text writer.</param>
        </member>
        <member name="T:ILGPU.Runtime.KernelLauncherBuilder">
            <summary>
            Builder methods for kernel launchers.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.KernelLauncherBuilder.Index3ValueGetter">
            <summary>
            Stores all getter methods to resolve all index values of an
            <see cref="T:ILGPU.Index3"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.GetMainIndexConstructor(System.Type)">
            <summary>
            Resolves the main constructor of the given index type.
            </summary>
            <param name="indexType">
            The index type (can be Index, Index2 or Index3).
            </param>
            <returns>The main constructor.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitConvertIndex3ToTargetType``1(ILGPU.IndexType,``0@,System.Action)">
            <summary>
            Emits code to convert an Index3 to a specific target type.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="indexType">
            The index type (can be Index, Index2 or Index3).
            </param>
            <param name="emitter">The target IL emitter.</param>
            <param name="loadIdx">
            A callback to load the referenced index value onto the stack.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitConvertFrom1DIndexToTargetIndexType``1(ILGPU.IndexType,``0@,System.Action)">
            <summary>
            Emits code to convert a linear index to a specific target type.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="indexType">
            The index type (can be Index, Index2 or Index3).
            </param>
            <param name="emitter">The target IL emitter.</param>
            <param name="loadDimension">
            A callback to load the referenced dimension value onto the stack.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadDimensions``1(System.Type,``0@,System.Action)">
            <summary>
            Emits code to load a 3D dimension of a grid or a group index.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="indexType">
            The index type (can be Index, Index2 or Index3).
            </param>
            <param name="emitter">The target IL emitter.</param>
            <param name="loadIdx">
            A callback to load the referenced index value onto the stack.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadDimensions``1(System.Type,``0@,System.Action,System.Action{System.Int32})">
            <summary>
            Emits code to load a 3D dimension of a grid or a group index.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="indexType">
            The index type (can be Index, Index2 or Index3).
            </param>
            <param name="emitter">The target IL emitter.</param>
            <param name="loadIdx">
            A callback to load the referenced index value onto the stack.
            </param>
            <param name="manipulateIdx">
            A callback to manipulate the loaded index of a given dimension.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitSharedMemorySpeficiation``1(ILGPU.Backends.EntryPoints.EntryPoint,``0@)">
            <summary>
            Emits code for loading a <see cref="T:ILGPU.Backends.EntryPoints.SharedMemorySpecification"/> instance.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="entryPoint">The entry point for code generation.</param>
            <param name="emitter">The target IL emitter.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadKernelConfig``1(ILGPU.Backends.EntryPoints.EntryPoint,``0,System.Int32,System.Int32)">
            <summary>
            Emits a kernel-dimension configuration. In the case of an ungrouped index
            type, all arguments will be transformed into a <see cref="T:ILGPU.KernelConfig"/>
            instance. Otherwise, the passed kernel configuration will be used without
            any modifications.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="entryPoint">The entry point.</param>
            <param name="emitter">The target IL emitter.</param>
            <param name="dimensionIdx">
            The argument index of the provided launch-dimension index.
            </param>
            <param name="customGroupSize">
            The custom group size used for automatic blocking.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadRuntimeKernelConfig``1(ILGPU.Backends.EntryPoints.EntryPoint,``0,System.Int32,System.Int32)">
            <summary>
            Emits a new runtime kernel configuration.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="entryPoint">The entry point.</param>
            <param name="emitter">The target IL emitter.</param>
            <param name="dimensionIdx">
            The argument index of the provided launch-dimension index.
            </param>
            <param name="customGroupSize">
            The custom group size used for automatic blocking.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadKernelArgument``2(System.Int32,``1@)">
            <summary>
            Emits code for loading a typed kernel from a generic kernel instance.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <typeparam name="T">The kernel type.</typeparam>
            <param name="kernelArgumentIndex">
            The index of the launcher parameter.
            </param>
            <param name="emitter">The target IL emitter.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadAcceleratorStream``2(System.Int32,``1@)">
            <summary>
            Emits code for loading a typed accelerator stream from a generic
            accelerator-stream instance.
            </summary>
            <typeparam name="T">The kernel type.</typeparam>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="streamArgumentIndex">The index of the stream parameter.</param>
            <param name="emitter">The target IL emitter.</param>
        </member>
        <member name="T:ILGPU.Runtime.KernelLoaders">
            <summary>
            Contains extensions for convenient kernel loading of default kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">
            The estimated group size to gain maximum occupancy on this device.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="T:ILGPU.Runtime.KernelSpecialization">
            <summary>
            Represents a kernel specialization.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.KernelSpecialization.Empty">
            <summary>
            Represents an empty (or *no*) specialization that allows the compiler to
            freely decide on its own.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Constructs a new specialization object.
            </summary>
            <param name="maxNumThreadsPerGroup">
            The maximum number of threads per group.
            </param>
            <param name="minNumGroupsPerMultiprocessor">
            The minimum number of groups per multiprocessor.
            </param>
        </member>
        <member name="P:ILGPU.Runtime.KernelSpecialization.MaxNumThreadsPerGroup">
            <summary>
            Returns the desired maximum number of threads per group.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.KernelSpecialization.MinNumGroupsPerMultiprocessor">
            <summary>
            Returns the desired minimum number of groups per multiprocessor.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.Equals(ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Returns true if the given specialization is equal to the current
            specialization.
            </summary>
            <param name="other">The other specialization.</param>
            <returns>
            True, if the given specialization is equal to the current specialization.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.IsCompatibleWith(ILGPU.Runtime.Accelerator)">
            <summary>
            Checks whether the given accelerator is compatible with the current
            specialization.
            </summary>
            <param name="accelerator">The target accelerator.</param>
            <returns>
            True, if the given accelerator is compatible with the current specialization.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current specialization.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current specialization.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.GetHashCode">
            <summary>
            Returns the hash code of this specialization.
            </summary>
            <returns>The hash code of this specialization.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.ToString">
            <summary>
            Returns the string representation of this specialization.
            </summary>
            <returns>The string representation of this specialization.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.op_Equality(ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Returns true if the specialization and second specialization are the same.
            </summary>
            <param name="first">The first specialization.</param>
            <param name="second">The second specialization.</param>
            <returns>
            True, if the first and second specialization are the same.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.op_Inequality(ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Returns true if the first and second specialization are not the same.
            </summary>
            <param name="first">The first specialization.</param>
            <param name="second">The second specialization.</param>
            <returns>
            True, if the first and second specialization are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer">
            <summary>
            Represents an abstract memory buffer that can be used in the scope
            of ILGPU runtime kernels.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.#ctor(ILGPU.Runtime.Accelerator,System.Int64)">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="length">The length in elements.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer.Length">
            <summary>
            Returns the length of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.MemSetToZero">
            <summary>
            Sets the contents of the given buffer to zero using
            the default accelerator stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.GetAsRawArray">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.GetAsRawArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer`2">
            <summary>
            Represents an abstract memory buffer that can be used in the scope
            of ILGPU runtime kernels.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`2.ElementSize">
            <summary>
            Represents the size of an element in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.#ctor(ILGPU.Runtime.Accelerator,`1)">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`2.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`2.View">
            <summary>
            Returns an array view that can access this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`2.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.ComputeEffectiveAddress(ILGPU.LongIndex1)">
            <summary>
            Computes the effective address for the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The computed pointer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyToView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFromView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)">
            <summary>
            Copies elements from the source view to the current buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.ArrayView{`0,`1},`1)">
            <summary>
            Copies elements from the current buffer to the target view using
            the default accelerator stream.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,`1},`1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.ArrayView{`0,`1},`1)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,`1},`1)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.MemoryBuffer{`0,`1},`1)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0,`1},`1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,`1)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,`1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,ILGPU.LongIndex1)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,ILGPU.LongIndex1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(`0@,`1)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory using the default accelerator stream.
            </summary>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.AcceleratorStream,`0@,`1)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(`0[],`1,System.Int64,`1)">
            <summary>
            Copies the contents of this buffer into the given array using
            the default accelerator stream.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[],`1,System.Int64,`1)">
            <summary>
            Copies the contents of this buffer into the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0,`1},`1)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,`1)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,`1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,ILGPU.LongIndex1)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,ILGPU.LongIndex1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0,`1},`1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(`0,`1)">
            <summary>
            Copies a single element from CPU memory to this buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0,`1)">
            <summary>
            Copies a single element from CPU memory to this buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(`0[],System.Int64,`1,System.Int64)">
            <summary>
            Copies the contents to this buffer from the given array using
            the default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[],System.Int64,`1,System.Int64)">
            <summary>
            Copies the contents to this buffer from the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetAsArray">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetAsArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetAsArray(`1,`1)">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetAsArray(ILGPU.Runtime.AcceleratorStream,`1,`1)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,System.Int64,System.Int64)">
            <summary cref="M:ILGPU.Runtime.ArrayViewSource.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,System.Int64,System.Int64)"/>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetAsRawArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.op_Implicit(ILGPU.Runtime.MemoryBuffer{`0,`1})~ILGPU.ArrayView{`0,`1}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBufferCache">
            <summary>
            Represents a cached memory buffer with a specific capacity.  It minimizes
            reallocations in cases of requests that can also be handled with the currently
            allocated amount of memory.  If the requested amount of memory is not
            sufficient, the current buffer will be freed and a new buffer will be allocated.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Runtime.MemoryBufferCache.cache">
            <summary>
            This represents the actual memory cache.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new memory-buffer cache.
            </summary>
            <param name="accelerator">
            The associated accelerator to allocate memory on.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.#ctor(ILGPU.Runtime.Accelerator,ILGPU.Index1)">
            <summary>
            Constructs a new memory-buffer cache.
            </summary>
            <param name="accelerator">
            The associated accelerator to allocate memory on.
            </param>
            <param name="initialLength">The initial length of the buffer.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBufferCache.CacheSizeInBytes">
            <summary>
            Returns the current cached size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBufferCache.Cache">
            <summary>
            Returns the underlying memory buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.GetCacheSize``1">
            <summary>
            Returns the available number of elements of type T.
            </summary>
            <typeparam name="T">The desired element type.</typeparam>
            <returns>The available number of elements of type T.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.Allocate``1(ILGPU.Index1)">
            <summary>
            Allocates the given number of elements and returns an array view
            to the requested amount of elements. Note that the array view
            points to not-initialized memory.
            </summary>
            <param name="numElements">The number of elements to allocate.</param>
            <returns>
            An array view that can access the requested number of elements.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.CopyTo``1(ILGPU.Runtime.AcceleratorStream,``0@,ILGPU.LongIndex1)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.CopyFrom``1(ILGPU.Runtime.AcceleratorStream,``0,ILGPU.LongIndex1)">
            <summary>
            Copies a single element from CPU memory to this buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer`1">
            <summary>
            Represents a 1D memory buffer that can be used in the scope
            of ILGPU runtime kernels.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As2DView(System.Int64)">
            <summary>
            Returns a 2D view to this linear buffer.
            </summary>
            <param name="height">The height (number of elements in y direction).</param>
            <returns>The 2D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As2DView(System.Int64,System.Int64)">
            <summary>
            Returns a 2D view to this linear buffer.
            </summary>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <returns>The 2D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As2DView(ILGPU.LongIndex2)">
            <summary>
            Returns a 2D view to this linear buffer.
            </summary>
            <param name="extent">The extent.</param>
            <returns>The 2D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As3DView(System.Int64,System.Int64)">
            <summary>
            Returns a 3D view to this linear buffer.
            </summary>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
            <returns>The 3D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As3DView(System.Int64,System.Int64,System.Int32)">
            <summary>
            Returns a 3D view to this linear buffer.
            </summary>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
            <returns>The 3D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As3DView(ILGPU.LongIndex3)">
            <summary>
            Returns a 3D view to this linear buffer.
            </summary>
            <param name="extent">The extent.</param>
            <returns>The 3D view.</returns>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.ElementSize">
            <summary>
            Represents the size of an element in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.#ctor(ILGPU.Runtime.MemoryBuffer{`0,ILGPU.LongIndex1})">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="buffer">The wrapped buffer.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.Buffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.View">
            <summary>
            Returns an array view that can access this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.ILGPU#Runtime#IMemoryBuffer{T,ILGPU#LongIndex1}#View">
            <summary>
            Returns an array view that can access this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetAsRawArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,System.Int64,System.Int64)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="byteOffset">The offset in bytes.</param>
            <param name="byteExtent">The extent in bytes (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetAsArray">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetAsArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetAsArray(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetAsArray(ILGPU.Runtime.AcceleratorStream,ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.ToMemoryBuffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
            <returns>The underlying generic memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.ArrayView{`0},ILGPU.LongIndex1)">
            <summary>
            Copies elements from the current buffer to the target view using
            the default accelerator stream.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.ArrayView{`0,ILGPU.LongIndex1},ILGPU.LongIndex1)">
            <summary>
            Copies elements from the current buffer to the target view using
            the default accelerator stream.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,ILGPU.LongIndex1},ILGPU.LongIndex1)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.ArrayView{`0},ILGPU.LongIndex1)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.ArrayView{`0,ILGPU.LongIndex1},ILGPU.LongIndex1)">
            <summary>
            Copies elements to the current buffer from the source view using
            the default accelerator stream.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,ILGPU.LongIndex1},ILGPU.LongIndex1)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.LongIndex1)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0},ILGPU.LongIndex1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.LongIndex1,ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0},ILGPU.LongIndex1,ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(`0@,ILGPU.LongIndex1)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory using the default accelerator stream.
            </summary>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0@,ILGPU.LongIndex1)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(`0[],ILGPU.LongIndex1,System.Int64,ILGPU.LongIndex1)">
            <summary>
            Copies the contents of this buffer into the given array using
            the default accelerator stream.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[],ILGPU.LongIndex1,System.Int64,ILGPU.LongIndex1)">
            <summary>
            Copies the contents of this buffer into the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.LongIndex1)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.LongIndex1,ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0},ILGPU.LongIndex1,ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0},ILGPU.LongIndex1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(`0,ILGPU.LongIndex1)">
            <summary>
            Copies a single element from CPU memory to this buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0,ILGPU.LongIndex1)">
            <summary>
            Copies a single element from CPU memory to this buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(`0[],System.Int64,ILGPU.LongIndex1,System.Int64)">
            <summary>
            Copies the contents to this buffer from the given array using
            the default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[],System.Int64,ILGPU.LongIndex1,System.Int64)">
            <summary>
            Copies the contents to this buffer from the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.op_Implicit(ILGPU.Runtime.MemoryBuffer{`0})~ILGPU.ArrayView{`0}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.op_Implicit(ILGPU.Runtime.MemoryBuffer{`0})~ILGPU.Runtime.MemoryBuffer{`0,ILGPU.LongIndex1}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer2D`1">
            <summary>
            Represents a 2D memory buffer that can be used in the scope
            of ILGPU runtime kernels.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.Width">
            <summary>
            Returns the width (x-dimension) of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.Height">
            <summary>
            Returns the height (y-dimension) of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(`0[0:,0:],ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies the contents to this buffer from the given array using
            the default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the input array will stored as a transposed array to match the
            target layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[0:,0:],ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies the contents to this buffer from the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the input array will stored as a transposed array to match the
            target layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(`0[][],ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies the contents to this buffer from the given array using
            the default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the input array will stored as a transposed array to match the
            target layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[][],ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies the contents to this buffer from the given jagged array.
            Note that child arrays that are not initialized or do not have the
            appropriate length specified by <paramref name="extent"/> will be skipped
            and the values will have their default value.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the input array will stored as a transposed array to match the
            target layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(`0[0:,0:],ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies the contents of this buffer to the given array using
            the default accelerator stream.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the output array will contain the data as a transposed array to
            match the source layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[0:,0:],ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies the contents of this buffer to the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the output array will contain the data as a transposed array to
            match the source layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(`0[][],ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies the contents of this buffer to the given jagged array using
            the default accelerator stream.
            Note that child arrays that are not initialized will be skipped during the
            copy operation.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the output array will contain the data as a transposed array to
            match the source layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[][],ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies the contents of this buffer to the given jagged array.
            Note that child arrays that are not initialized will be skipped during the
            copy operation.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the output array will contain the data as a transposed array to
            match the source layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAs2DArray">
            <summary>
            Copies the current contents into a new 2D array using
            the default accelerator stream.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAs2DArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new 2D array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAs2DArray(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies the current contents into a new 2D array using
            the default accelerator stream.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAs2DArray(ILGPU.Runtime.AcceleratorStream,ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies the current contents into a new 2D array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetRowView(System.Int64)">
            <summary>
            Returns a linear view to a single row.
            </summary>
            <param name="y">The y index of the row.</param>
            <returns>A linear view to a single row.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.ElementSize">
            <summary>
            Represents the size of an element in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.#ctor(ILGPU.Runtime.MemoryBuffer{`0,ILGPU.LongIndex2})">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="buffer">The wrapped buffer.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.Buffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.View">
            <summary>
            Returns an array view that can access this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.ILGPU#Runtime#IMemoryBuffer{T,ILGPU#LongIndex2}#View">
            <summary>
            Returns an array view that can access this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAsRawArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,System.Int64,System.Int64)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="byteOffset">The offset in bytes.</param>
            <param name="byteExtent">The extent in bytes (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAsArray">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAsArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAsArray(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAsArray(ILGPU.Runtime.AcceleratorStream,ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.ToMemoryBuffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
            <returns>The underlying generic memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView2D{`0},ILGPU.LongIndex2)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.ArrayView2D{`0},ILGPU.LongIndex2)">
            <summary>
            Copies elements from the current buffer to the target view using
            the default accelerator stream.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.ArrayView{`0,ILGPU.LongIndex2},ILGPU.LongIndex2)">
            <summary>
            Copies elements from the current buffer to the target view using
            the default accelerator stream.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,ILGPU.LongIndex2},ILGPU.LongIndex2)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.ArrayView2D{`0},ILGPU.LongIndex2)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView2D{`0},ILGPU.LongIndex2)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.ArrayView{`0,ILGPU.LongIndex2},ILGPU.LongIndex2)">
            <summary>
            Copies elements to the current buffer from the source view using
            the default accelerator stream.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,ILGPU.LongIndex2},ILGPU.LongIndex2)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.LongIndex2)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.LongIndex2)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(`0@,ILGPU.LongIndex2)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory using the default accelerator stream.
            </summary>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0@,ILGPU.LongIndex2)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(`0[],ILGPU.LongIndex2,System.Int64,ILGPU.LongIndex2)">
            <summary>
            Copies the contents of this buffer into the given array using
            the default accelerator stream.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[],ILGPU.LongIndex2,System.Int64,ILGPU.LongIndex2)">
            <summary>
            Copies the contents of this buffer into the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.LongIndex2)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.LongIndex1)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.LongIndex1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.LongIndex2)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(`0,ILGPU.LongIndex2)">
            <summary>
            Copies a single element from CPU memory to this buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0,ILGPU.LongIndex2)">
            <summary>
            Copies a single element from CPU memory to this buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(`0[],System.Int64,ILGPU.LongIndex2,System.Int64)">
            <summary>
            Copies the contents to this buffer from the given array using
            the default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[],System.Int64,ILGPU.LongIndex2,System.Int64)">
            <summary>
            Copies the contents to this buffer from the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.op_Implicit(ILGPU.Runtime.MemoryBuffer2D{`0})~ILGPU.ArrayView2D{`0}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.op_Implicit(ILGPU.Runtime.MemoryBuffer2D{`0})~ILGPU.Runtime.MemoryBuffer{`0,ILGPU.LongIndex2}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer3D`1">
            <summary>
            Represents a 3D memory buffer that can be used in the scope
            of ILGPU runtime kernels.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Width">
            <summary>
            Returns the width (x-dimension) of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Height">
            <summary>
            Returns the height (y-dimension) of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Depth">
            <summary>
            Returns the depth (z-dimension) of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(`0[0:,0:,0:],ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies the contents of this buffer from the given array using
            the default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the input array will stored as a transposed array to match the
            target layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[0:,0:,0:],ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies the contents of this buffer from the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the input array will stored as a transposed array to match the
            target layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(`0[][][],ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies the contents of this buffer from the given jagged array using the
            default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the input array will stored as a transposed array to match the
            target layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[][][],ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies the contents of this buffer from the given jagged array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the input array will stored as a transposed array to match the
            target layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(`0[0:,0:,0:],ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies the contents to this buffer to the given array using
            the default accelerator stream.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the output array will contain the data as a transposed array to
            match the source layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[0:,0:,0:],ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies the contents to this buffer to the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the output array will contain the data as a transposed array to
            match the source layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(`0[][][],ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies the contents of this buffer to the given jagged array using the
            default accelerator stream.
            Note that child arrays that are not initialized will be skipped during the
            copy operation.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the output array will contain the data as a transposed array to
            match the source layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[][][],ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies the contents of this buffer to the given jagged array.
            Note that child arrays that are not initialized will be skipped during the
            copy operation.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>
            Note that the output array will contain the data as a transposed array to
            match the source layout.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAs3DArray">
            <summary>
            Copies the current contents into a new 3D array using
            the default accelerator stream.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAs3DArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new 2D array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAs3DArray(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies the current contents into a new 2D array using
            the default accelerator stream.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAs3DArray(ILGPU.Runtime.AcceleratorStream,ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies the current contents into a new 2D array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetRowView(System.Int64,System.Int64)">
            <summary>
            Returns a linear view to a single row.
            </summary>
            <param name="y">The y index of the row.</param>
            <param name="z">The z index of the slice.</param>
            <returns>A linear view to a single row.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetSliceView(System.Int64)">
            <summary>
            Returns a 2D view to a single slice.
            </summary>
            <param name="z">The z index of the slice.</param>
            <returns>A 2D view to a single slice.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.ElementSize">
            <summary>
            Represents the size of an element in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.#ctor(ILGPU.Runtime.MemoryBuffer{`0,ILGPU.LongIndex3})">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="buffer">The wrapped buffer.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Buffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.View">
            <summary>
            Returns an array view that can access this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.ILGPU#Runtime#IMemoryBuffer{T,ILGPU#LongIndex3}#View">
            <summary>
            Returns an array view that can access this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAsRawArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,System.Int64,System.Int64)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="byteOffset">The offset in bytes.</param>
            <param name="byteExtent">The extent in bytes (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAsArray">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAsArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAsArray(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAsArray(ILGPU.Runtime.AcceleratorStream,ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.ToMemoryBuffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
            <returns>The underlying generic memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView3D{`0},ILGPU.LongIndex3)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.ArrayView3D{`0},ILGPU.LongIndex3)">
            <summary>
            Copies elements from the current buffer to the target view using
            the default accelerator stream.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.ArrayView{`0,ILGPU.LongIndex3},ILGPU.LongIndex3)">
            <summary>
            Copies elements from the current buffer to the target view using
            the default accelerator stream.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,ILGPU.LongIndex3},ILGPU.LongIndex3)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.ArrayView3D{`0},ILGPU.LongIndex3)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView3D{`0},ILGPU.LongIndex3)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.ArrayView{`0,ILGPU.LongIndex3},ILGPU.LongIndex3)">
            <summary>
            Copies elements to the current buffer from the source view using
            the default accelerator stream.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,ILGPU.LongIndex3},ILGPU.LongIndex3)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.LongIndex3)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.LongIndex3)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(`0@,ILGPU.LongIndex3)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory using the default accelerator stream.
            </summary>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0@,ILGPU.LongIndex3)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(`0[],ILGPU.LongIndex3,System.Int64,ILGPU.LongIndex3)">
            <summary>
            Copies the contents of this buffer into the given array using
            the default accelerator stream.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[],ILGPU.LongIndex3,System.Int64,ILGPU.LongIndex3)">
            <summary>
            Copies the contents of this buffer into the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.LongIndex3)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.LongIndex1)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.LongIndex1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.LongIndex3)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(`0,ILGPU.LongIndex3)">
            <summary>
            Copies a single element from CPU memory to this buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0,ILGPU.LongIndex3)">
            <summary>
            Copies a single element from CPU memory to this buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(`0[],System.Int64,ILGPU.LongIndex3,System.Int64)">
            <summary>
            Copies the contents to this buffer from the given array using
            the default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[],System.Int64,ILGPU.LongIndex3,System.Int64)">
            <summary>
            Copies the contents to this buffer from the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.op_Implicit(ILGPU.Runtime.MemoryBuffer3D{`0})~ILGPU.ArrayView3D{`0}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.op_Implicit(ILGPU.Runtime.MemoryBuffer3D{`0})~ILGPU.Runtime.MemoryBuffer{`0,ILGPU.LongIndex3}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBufferExtensions">
            <summary>
            Extension methods for the allocation of memory buffers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferExtensions.Allocate``1(ILGPU.Runtime.Accelerator,``0[])">
            <summary>
            Allocates a 1D memory buffer with the given content on the
            associated accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="data">The initial data array.</param>
            <returns>The allocated memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferExtensions.AllocateZero``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex1)">
            <summary>
            Allocates a 1D memory buffer on the associated accelerator that
            is initialized with 0-byte values.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>The allocated memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferExtensions.Allocate``1(ILGPU.Runtime.Accelerator,``0[0:,0:])">
            <summary>
            Allocates a 2D memory buffer with the given content on the
            associated accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="data">The initial data array.</param>
            <returns>The allocated memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferExtensions.AllocateZero``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex2)">
            <summary>
            Allocates a 2D memory buffer on the associated accelerator that
            is initialized with 0-byte values.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>The allocated memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferExtensions.Allocate``1(ILGPU.Runtime.Accelerator,``0[0:,0:,0:])">
            <summary>
            Allocates a 3D memory buffer with the given content on the
            associated accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="data">The initial data array.</param>
            <returns>The allocated memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferExtensions.AllocateZero``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex3)">
            <summary>
            Allocates a 3D memory buffer on the associated accelerator that
            is initialized with 0-byte values.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>The allocated memory buffer.</returns>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAcceleratorVendor">
            <summary>
            Represents the major OpenCL accelerator vendor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAcceleratorVendor.AMD">
            <summary>
            Represents an AMD accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAcceleratorVendor.Intel">
            <summary>
            Represents an Intel accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAcceleratorVendor.Nvidia">
            <summary>
            Represents an NVIDIA accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAcceleratorVendor.Other">
            <summary>
            Represents another OpenCL device vendor.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAccelerator">
            <summary>
            Represents an OpenCL accelerator (CPU or GPU device).
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.MaxNumDevicesPerPlatform">
            <summary>
            The maximum number of devices per platform.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.GetCLAPIMethod">
            <summary>
            Represents the <see cref="P:ILGPU.Runtime.OpenCL.CLAPI.CurrentAPI"/> property.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.GenericLaunchKernelMethod">
            <summary>
            Represents the <see cref="M:ILGPU.Runtime.OpenCL.CLAPI.LaunchKernelWithStreamBinding``1(ILGPU.Runtime.OpenCL.CLStream,ILGPU.Runtime.OpenCL.CLKernel,ILGPU.RuntimeKernelConfig)"/> method.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.ThrowIfFailedMethod">
            <summary>
            Represents the <see cref="M:ILGPU.Runtime.OpenCL.CLException.ThrowIfFailed(ILGPU.Runtime.OpenCL.CLError)" /> method.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.DummyKernelSource">
            <summary>
            The first dummy kernel that is compiled during accelerator initialization.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.DummySubGroupKernelSource">
            <summary>
            The second dummy kernel that is compiled during accelerator initialization.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.SubGroupExtensions">
            <summary>
            All subgroup extensions.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.#cctor">
            <summary>
            Detects all OpenCL accelerators.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.CLAccelerators">
            <summary>
            Represents the list of available and supported OpenCL accelerators.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.AllCLAccelerators">
            <summary>
            Represents the list of all available OpenCL accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.#ctor(ILGPU.Context,ILGPU.Runtime.OpenCL.CLAcceleratorId)">
            <summary>
            Constructs a new OpenCL accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="acceleratorId">The accelerator id.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.InitVendorFeatures">
            <summary>
            Initializes major vendor features.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.InitSubGroupSupport(ILGPU.Runtime.OpenCL.CLAcceleratorId)">
            <summary>
            Initializes support for sub groups.
            </summary>
            <param name="acceleratorId">The current accelerator id.</param>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.PlatformId">
            <summary>
            Returns the native OpenCL platform id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.PlatformName">
            <summary>
            Returns the associated platform name.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.VendorName">
            <summary>
            Returns the associated vendor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.Vendor">
            <summary>
            Returns the main accelerator vendor type.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.DeviceId">
            <summary>
            Returns the native OpenCL device id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.DeviceType">
            <summary>
            Returns the OpenCL device type.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.ContextPtr">
            <summary>
            Returns the native OpenCL-context ptr.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.ClockRate">
            <summary>
            Returns the clock rate.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.CVersion">
            <summary>
            Returns the supported OpenCL C version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.SubGroupSupport">
            <summary>
            Returns true if this accelerator has sub-group support.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.Backend">
            <summary>
            Returns the OpenCL backend of this accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CreateExtension``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateExtension``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.AllocateInternal``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.AllocateInternal``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CreateKernel(ILGPU.Backends.OpenCL.CLCompiledKernel)">
            <summary cref="M:ILGPU.Runtime.KernelAccelerator`2.CreateKernel(`0)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CreateKernel(ILGPU.Backends.OpenCL.CLCompiledKernel,System.Reflection.MethodInfo)">
            <summary cref="M:ILGPU.Runtime.KernelAccelerator`2.CreateKernel(`0,System.Reflection.MethodInfo)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CreateStreamInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateStream"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CreateStream(System.IntPtr,System.Boolean)">
            <summary>
            Creates a <see cref="T:ILGPU.Runtime.OpenCL.CLStream"/> object from an externally
            created stream/queue using its pointer.
            </summary>
            <param name="ptr">The pointer to use while creating the new stream.</param>
            <param name="responsible">
            Whether ILGPU is responsible of disposing this stream.
            </param>
            <returns>The created stream.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.SynchronizeInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.OnBind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnBind"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.OnUnbind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnUnbind"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.GenerateKernelLauncherMethod(ILGPU.Backends.OpenCL.CLCompiledKernel,System.Int32)">
            <summary cref="M:ILGPU.Runtime.KernelAccelerator`2.GenerateKernelLauncherMethod(`0,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.EstimateMaxActiveGroupsPerMultiprocessorInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAcceleratorId">
            <summary>
            Represents a single OpenCL accelerator reference.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            Constructs a new OpenCL accelerator reference.
            </summary>
            <param name="platformId">The OpenCL platform id.</param>
            <param name="deviceId">The OpenCL device id.</param>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAcceleratorId.PlatformId">
            <summary>
            Returns the OpenCL platform id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAcceleratorId.DeviceId">
            <summary>
            Returns the OpenCL device id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAcceleratorId.DeviceType">
            <summary>
            Returns the OpenCL device type.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAcceleratorId.CVersion">
            <summary>
            Returns the supported OpenCL C version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAcceleratorId.Extensions">
            <summary>
            Returns all extensions.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.GetDeviceInfo``1(ILGPU.Runtime.OpenCL.CLDeviceInfoType,``0@)">
            <summary>
            Resolves device information as typed structure value of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="type">The information type.</param>
            <param name="value">The resolved value.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.GetDeviceInfo``1(ILGPU.Runtime.OpenCL.CLDeviceInfoType)">
            <summary>
            Resolves device information as typed structure value of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="type">The information type.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.HasExtension(System.String)">
            <summary>
            Returns true if the given extension is supported.
            </summary>
            <param name="extension">The extension to look for.</param>
            <returns>True, if the extension is supported.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.HasAllExtensions``1(``0)">
            <summary>
            Returns true if all of the given extensions are supported.
            </summary>
            <param name="extensions">The extensions to look for.</param>
            <returns>True, if all of the given extensions are supported.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.HasAnyExtension``1(``0)">
            <summary>
            Returns true if any of the given extensions is supported.
            </summary>
            <param name="extensions">The extensions to look for.</param>
            <returns>True, if any of the given extensions is supported.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.TryGetKernelSubGroupInfo``1(System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.CLKernelSubGroupInfoType,System.Int32,System.IntPtr*,``0@)">
            <summary>
            Tries to resolves kernel sub-group information as typed structure value of
            type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="kernel">The kernel.</param>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <param name="numInputs">The number of inputs.</param>
            <param name="inputs">All input values.</param>
            <param name="value">The resolved value.</param>
            <returns>True, if the value could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.TryGetKernelSubGroupInfo``1(System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.CLKernelSubGroupInfoType,System.IntPtr[],``0@)">
            <summary>
            Resolves kernel sub-group information as typed structure value of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="kernel">The kernel.</param>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <param name="inputs">All input values.</param>
            <param name="value">The resolved value.</param>
            <returns>True, if the value could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current accelerator id.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current accelerator id.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.GetHashCode">
            <summary>
            Returns the hash code of this accelerator id.
            </summary>
            <returns>The hash code of this accelerator id.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.ToString">
            <summary>
            Returns the string representation of this accelerator id.
            </summary>
            <returns>The string representation of this accelerator id.</returns>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAPI">
            <summary>
            Wraps the OpenCL-driver API.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAPI.ILaunchHandler">
            <summary>
            An abstract launch handler to specialize kernel launches.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ILaunchHandler.PreLaunchKernel(ILGPU.Runtime.OpenCL.CLStream,ILGPU.Runtime.OpenCL.CLKernel,ILGPU.RuntimeKernelConfig)">
            <summary>
            Performs pre-launch operations for a specific kernel.
            </summary>
            <param name="stream">The current stream.</param>
            <param name="kernel">The current kernel.</param>
            <param name="config">The current kernel configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAPI.DefaultLaunchHandler">
            <summary>
            The default launch handler that does not perform any specific launch
            operations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.DefaultLaunchHandler.PreLaunchKernel(ILGPU.Runtime.OpenCL.CLStream,ILGPU.Runtime.OpenCL.CLKernel,ILGPU.RuntimeKernelConfig)">
            <summary>
            Does not perform any operations and returns
            <see cref="F:ILGPU.Runtime.OpenCL.CLError.CL_SUCCESS"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAPI.DynamicSharedMemoryHandler">
            <summary>
            A dynamic shared memory handler that setups a dynamic memory allocation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.DynamicSharedMemoryHandler.PreLaunchKernel(ILGPU.Runtime.OpenCL.CLStream,ILGPU.Runtime.OpenCL.CLKernel,ILGPU.RuntimeKernelConfig)">
            <summary>
            Setups a dynamic shared memory allocation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.Init">
            <summary>
            Initializes the driver API.
            </summary>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetNumPlatforms(System.Int32@)">
            <summary>
            Resolves the number of available platforms.
            </summary>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetPlatforms(System.IntPtr[],System.Int32@)">
            <summary>
            Resolves the number of available platforms.
            </summary>
            <param name="platforms">The target platform ids to fill.</param>
            <param name="numPlatforms">The resolved number of platforms.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetPlatforms(System.IntPtr*,System.Int32@)">
            <summary>
            Resolves the number of available platforms.
            </summary>
            <param name="platforms">The target platform ids to fill.</param>
            <param name="numPlatforms">The resolved number of platforms.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetPlatformInfo(System.IntPtr,ILGPU.Runtime.OpenCL.CLPlatformInfoType)">
            <summary>
            Resolves platform information as string value.
            </summary>
            <param name="platform">The platform.</param>
            <param name="type">The information type.</param>
            <returns>The resolved string value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetPlatformInfo``1(System.IntPtr,ILGPU.Runtime.OpenCL.CLPlatformInfoType)">
            <summary>
            Resolves platform information as typed structure value of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="platform">The platform.</param>
            <param name="type">The information type.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetDevices(System.IntPtr,ILGPU.Runtime.OpenCL.CLDeviceType,System.IntPtr[],System.Int32@)">
            <summary>
            Resolves the number of available devices.
            </summary>
            <param name="platform">The target platform.</param>
            <param name="deviceType">The device type.</param>
            <param name="devices">The device ids to fill.</param>
            <param name="numDevices">The number of devices.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetDevices(System.IntPtr,ILGPU.Runtime.OpenCL.CLDeviceType,System.IntPtr*,System.Int32@)">
            <summary>
            Resolves the number of available devices.
            </summary>
            <param name="platform">The target platform.</param>
            <param name="deviceType">The device type.</param>
            <param name="devices">The device ids to fill.</param>
            <param name="numDevices">The number of devices.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReleaseDevice(System.IntPtr)">
            <summary>
            Releases the given device.
            </summary>
            <param name="device">The device</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetDeviceInfo(System.IntPtr,ILGPU.Runtime.OpenCL.CLDeviceInfoType)">
            <summary>
            Resolves device information as string value.
            </summary>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <returns>The resolved string value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetDeviceInfo``1(System.IntPtr,ILGPU.Runtime.OpenCL.CLDeviceInfoType)">
            <summary>
            Resolves device information as typed structure value of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetDeviceInfo``1(System.IntPtr,ILGPU.Runtime.OpenCL.CLDeviceInfoType,``0@)">
            <summary>
            Resolves device information as typed structure value of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <param name="value">The resolved value.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetDeviceInfo``1(System.IntPtr,ILGPU.Runtime.OpenCL.CLDeviceInfoType,``0[])">
            <summary>
            Resolves device information as array of typed structure values of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <param name="elements">The elements to fill.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetExtension``1(System.IntPtr)">
            <summary>
            Resolves an extension delegate for the given platform.
            </summary>
            <typeparam name="T">The delegate type.</typeparam>
            <param name="platform">The platform pointer.</param>
            <returns>The resolved extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetExtension``1(System.IntPtr,System.String)">
            <summary>
            Resolves an extension delegate for the given platform.
            </summary>
            <typeparam name="T">The delegate type.</typeparam>
            <param name="platform">The platform pointer.</param>
            <param name="name">The extension name.</param>
            <returns>The resolved extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.CreateContext(System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a new context.
            </summary>
            <param name="device">The device.</param>
            <param name="context">The created context.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReleaseContext(System.IntPtr)">
            <summary>
            Releases the given context.
            </summary>
            <param name="context">The context to release.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.CreateCommandQueue(System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a new command queue.
            </summary>
            <param name="device">The associated device.</param>
            <param name="context">The parent context.</param>
            <param name="queue">The created queue.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReleaseCommandQueue(System.IntPtr)">
            <summary>
            Releases the given command queue.
            </summary>
            <param name="queue">The queue to release.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.FlushCommandQueue(System.IntPtr)">
            <summary>
            Flushes the given command queue.
            </summary>
            <param name="queue">The queue to flush.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.FinishCommandQueue(System.IntPtr)">
            <summary>
            Finishes the given command queue.
            </summary>
            <param name="queue">The queue to finish.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.CreateProgram(System.IntPtr,System.String,System.IntPtr@)">
            <summary>
            Creates a new program.
            </summary>
            <param name="context">The context.</param>
            <param name="source">The program source.</param>
            <param name="program">The created program.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.BuildProgram(System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Builds a program.
            </summary>
            <param name="program">The program to build.</param>
            <param name="device">The associated device.</param>
            <param name="options">
            The program build options (refer to the OpenCL specification).
            </param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.BuildProgram(System.IntPtr,System.IntPtr*,System.Int32,System.String)">
            <summary>
            Builds a program.
            </summary>
            <param name="program">The program to build.</param>
            <param name="devices">The associated devices.</param>
            <param name="numDevices">The number of associated devices.</param>
            <param name="options">
            The program build options (refer to the OpenCL specification).
            </param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.BuildProgram(System.IntPtr,System.IntPtr[],System.String)">
            <summary>
            Builds a program.
            </summary>
            <param name="program">The program to build.</param>
            <param name="devices">The associated devices.</param>
            <param name="options">
            The program build options (refer to the OpenCL specification).
            </param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetProgramInfo(System.IntPtr,ILGPU.Runtime.OpenCL.CLProgramInfo,System.IntPtr,System.Void*,System.IntPtr@)">
            <summary>
            Resolves program information.
            </summary>
            <param name="program">The program pointer.</param>
            <param name="paramName">The param name to query.</param>
            <param name="paramValueSize">The size of the parameter value.</param>
            <param name="paramValue">The parameter value to use.</param>
            <param name="paramValueSizeRet">The resulting parameter value size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetProgramBuildInfo(System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.CLProgramBuildInfo,System.IntPtr,System.Void*,System.IntPtr@)">
            <summary>
            Resolves program build information.
            </summary>
            <param name="program">The program pointer.</param>
            <param name="device">The associated device.</param>
            <param name="paramName">The param name to query.</param>
            <param name="paramValueSize">The size of the parameter value.</param>
            <param name="paramValue">The parameter value to use.</param>
            <param name="paramValueSizeRet">The resulting parameter value size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetProgramBuildLog(System.IntPtr,System.IntPtr,System.String@)">
            <summary>
            Resolves program build-log information.
            </summary>
            <param name="program">The program pointer.</param>
            <param name="device">The associated device.</param>
            <param name="buildLog">The build log (if any).</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReleaseProgram(System.IntPtr)">
            <summary>
            Releases the given program.
            </summary>
            <param name="program">The program to release.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.CreateKernel(System.IntPtr,System.String,System.IntPtr@)">
            <summary>
            Creates a new kernel.
            </summary>
            <param name="program">The source program to use.</param>
            <param name="kernelName">The kernel name in the scope of the program.</param>
            <param name="kernel">The created kernel.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReleaseKernel(System.IntPtr)">
            <summary>
            Releases the given kernel.
            </summary>
            <param name="kernel">The kernel to release.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.SetKernelArgument``1(System.IntPtr,System.Int32,``0)">
            <summary>
            Sets a kernel argument.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
            <param name="kernel">The target kernel.</param>
            <param name="index">The argument index.</param>
            <param name="value">The managed value to set.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.SetKernelArgumentUnsafe(System.IntPtr,System.Int32,System.Int32,System.Void*)">
            <summary>
            Sets a kernel argument.
            </summary>
            <param name="kernel">The target kernel.</param>
            <param name="index">The argument index.</param>
            <param name="size">The argument size in bytes.</param>
            <param name="value">A pointer to the value to set.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.SetKernelArgumentUnsafeWithKernel(ILGPU.Runtime.OpenCL.CLKernel,System.Int32,System.Int32,System.Void*)">
            <summary>
            Sets a kernel argument.
            </summary>
            <param name="kernel">The target kernel.</param>
            <param name="index">The argument index.</param>
            <param name="size">The argument size in bytes.</param>
            <param name="value">A pointer to the value to set.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.LaunchKernelWithStreamBinding``1(ILGPU.Runtime.OpenCL.CLStream,ILGPU.Runtime.OpenCL.CLKernel,ILGPU.RuntimeKernelConfig)">
            <summary>
            Launches the given kernel function.
            </summary>
            <typeparam name="THandler">
            The handler type to customize the launch process.
            </typeparam>
            <param name="stream">The current stream.</param>
            <param name="kernel">The current kernel.</param>
            <param name="config">The current kernel configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.LaunchKernelUnsafe(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr*,System.IntPtr*,System.IntPtr*)">
            <summary>
            Launches a kernel.
            </summary>
            <param name="queue">The queue.</param>
            <param name="kernel">The kernel to launch.</param>
            <param name="workDimensions">The general work dimensions.</param>
            <param name="workOffsets">All work offsets.</param>
            <param name="globalWorkSizes">All global work sizes.</param>
            <param name="localWorkSizes">All local work sizes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.LaunchKernel(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr[],System.IntPtr[],System.IntPtr[])">
            <summary>
            Launches a kernel.
            </summary>
            <param name="queue">The queue.</param>
            <param name="kernel">The kernel to launch.</param>
            <param name="workDimensions">The general work dimensions.</param>
            <param name="workOffsets">All work offsets.</param>
            <param name="globalWorkSizes">All global work sizes.</param>
            <param name="localWorkSizes">All local work sizes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetKernelWorkGroupInfo``1(System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.CLKernelWorkGroupInfoType)">
            <summary>
            Resolves kernel work-group information as typed structure value of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="kernel">The kernel.</param>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetKernelWorkGroupInfo``1(System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.CLKernelWorkGroupInfoType,``0[])">
            <summary>
            Resolves kernel work-group information as typed array of values of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="kernel">The kernel.</param>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <param name="elements">The desired elements.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.CreateBuffer(System.IntPtr,ILGPU.Runtime.OpenCL.CLBufferFlags,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a new buffer.
            </summary>
            <param name="context">The context.</param>
            <param name="flags">The buffer flags.</param>
            <param name="size">The buffer size in bytes.</param>
            <param name="hostPointer">The host pointer to copy from (if any).</param>
            <param name="buffer">The created buffer.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReleaseBuffer(System.IntPtr)">
            <summary>
            Releases the given buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReadBuffer(System.IntPtr,System.IntPtr,System.Boolean,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Reads from a buffer into host memory.
            </summary>
            <param name="queue">The queue.</param>
            <param name="buffer">The source buffer to read from.</param>
            <param name="blockingRead">
            True, if the operation blocks until completion.
            </param>
            <param name="offset">The source offset in bytes.</param>
            <param name="size">The data size in bytes.</param>
            <param name="ptr">The target pointer in host memory.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.WriteBuffer(System.IntPtr,System.IntPtr,System.Boolean,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Writes to a buffer from host memory.
            </summary>
            <param name="queue">The queue.</param>
            <param name="buffer">The target buffer to write to.</param>
            <param name="blockingWrite">
            True, if the operation blocks until completion.
            </param>
            <param name="offset">The target offset in bytes.</param>
            <param name="size">The data size in bytes.</param>
            <param name="ptr">The source pointer in host memory.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.FillBuffer``1(System.IntPtr,System.IntPtr,``0,System.IntPtr,System.IntPtr)">
            <summary>
            Fills the given buffer with the specified pattern.
            </summary>
            <typeparam name="T">The data type used for filling.</typeparam>
            <param name="queue">The queue.</param>
            <param name="buffer">The target buffer to fill.</param>
            <param name="pattern">The pattern value used for filling.</param>
            <param name="offset">The target offset in bytes.</param>
            <param name="size">The size in bytes to fill.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.CopyBuffer(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Copies the contents of the source buffer into the target buffer.
            </summary>
            <param name="queue">The queue.</param>
            <param name="sourceBuffer">The source buffer.</param>
            <param name="targetBuffer">The target buffer.</param>
            <param name="sourceOffset">
            The source offset inside the source buffer.
            </param>
            <param name="targetOffset">
            The target offset inside the target buffer.
            </param>
            <param name="size">The size to copy in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReleaseEvent(System.IntPtr)">
            <summary>
            Releases the given event.
            </summary>
            <param name="event">The event.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.WaitForEvents(System.ReadOnlySpan{System.IntPtr})">
            <summary>
            Waits on the given events to complete.
            </summary>
            <param name="events">The events to wait on.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.EnqueueBarrier(System.IntPtr)">
             <summary>
             Enqueues a barrier command on the given command queue which waits for all
             previously enqueued commands to complete before it completes.
            
             This command blocks command execution, that is, any following commands
             enqueued after it do not execute until it completes. 
             </summary>
             <param name="queue">The command queue.</param>
             <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.EnqueueBarrierWithWaitList(System.IntPtr,System.IntPtr[],System.IntPtr*)">
            <summary>
            Enqueues a barrier command on the given command queue which waits for the
            list of events to complete, or if the list is empty, waits for all previously
            enqueued commands to complete before it completes.
            
            This command blocks command execution, that is, any following commands
            enqueued after it do not execute until it completes. 
            </summary>
            <param name="queue">The command queue.</param>
            <param name="waitEvents">The events to wait on.</param>
            <param name="resultEvent">The returned event object.</param>
            <returns>The error code.</returns>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAPI.LibNameWindows">
            <summary>
            Represents the driver library name on Windows.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAPI.LibNameLinux">
            <summary>
            Represents the driver library name on Linux.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAPI.LibNameMacOS">
            <summary>
            Represents the driver library name on MacOS.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAPI.CurrentAPI">
            <summary>
            Returns the driver API for the current platform.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLException">
            <summary>
            Represents an OpenCL exception that can be thrown by the OpenCL runtime.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.#ctor">
            <summary>
            Constructs a new OpenCL exception.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.#ctor(ILGPU.Runtime.OpenCL.CLError)">
            <summary>
            Constructs a new OpenCL exception.
            </summary>
            <param name="errorCode">The OpenCL runtime error.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLException.Error">
            <summary>
            Returns the error.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.ThrowIfFailed(ILGPU.Runtime.OpenCL.CLError)">
            <summary>
            Checks the given status and throws an exception in case of an error.
            </summary>
            <param name="errorCode">The OpenCL error code to check.</param>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLKernel">
            <summary>
            Represents an OpenCL kernel that can be directly launched on an OpenCL device.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLKernel.LoadKernel(ILGPU.Runtime.OpenCL.CLAccelerator,System.String,ILGPU.Backends.OpenCL.CLCVersion,System.IntPtr@,System.IntPtr@,System.String@)">
            <summary>
            Loads the given OpenCL kernel.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="source">The OpenCL source code.</param>
            <param name="version">The OpenCL C version.</param>
            <param name="programPtr">The created program pointer.</param>
            <param name="kernelPtr">The created kernel pointer.</param>
            <param name="errorLog">The error log (if any).</param>
            <returns>
            True, if the program and the kernel could be loaded successfully.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLKernel.LoadBinaryRepresentation(System.IntPtr)">
            <summary>
            Loads the binary representation of the given OpenCL kernel.
            </summary>
            <param name="program">The program pointer.</param>
            <returns>The binary representation of the underlying kernel.</returns>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLKernel.programPtr">
            <summary>
            Holds the pointer to the native OpenCL program in memory.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLKernel.kernelPtr">
            <summary>
            Holds the pointer to the native OpenCL kernel in memory.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLKernel.#ctor(ILGPU.Runtime.OpenCL.CLAccelerator,ILGPU.Backends.OpenCL.CLCompiledKernel,System.Reflection.MethodInfo)">
            <summary>
            Loads a compiled kernel into the given OpenCL context as kernel program.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="kernel">The source kernel.</param>
            <param name="launcher">The launcher method for the given kernel.</param>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLKernel.ProgramPtr">
            <summary>
            Returns the OpenCL program ptr.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLKernel.KernelPtr">
            <summary>
            Returns the OpenCL kernel ptr.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLKernel.LoadBinaryRepresentation">
            <summary>
            Loads the binary representation of the underlying OpenCL kernel.
            </summary>
            <returns>The binary representation of the underlying kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLKernel.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLMemoryBuffer`2">
            <summary>
            Represents an unmanaged OpenCL buffer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer`2.#ctor(ILGPU.Runtime.OpenCL.CLAccelerator,`1)">
            <summary>
            Constructs a new OpenCL buffer.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="extent">The extent.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer`2.CopyToView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyToView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer`2.CopyFromView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyFromView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.LongIndex1)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer`2.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer.MemSetToZero(ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer`2.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLStream">
            <summary>
            Represents an OpenCL stream.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLStream.CommandQueue">
            <summary>
            Returns the native OpenCL command queue.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLStream.Synchronize">
            <summary cref="M:ILGPU.Runtime.AcceleratorStream.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLStream.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAPI_0.IsSupported">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAPI_NotSupported">
            <summary>
            The NotSupported implementation of the CLAPI wrapper.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAPI_NotSupported.IsSupported">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.ISpecializationCacheArgs">
            <summary>
            The base interface for all automatically generated specialization argument
            structures that are used in combination with the
            <see cref="T:ILGPU.Runtime.SpecializationCache`3"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ISpecializationCacheArgs.GetSpecializedArg(System.Int32)">
            <summary>
            Returns the i-th argument as an untyped managed object.
            </summary>
            <param name="index">The argument index.</param>
            <returns>The resolved untyped managed object.</returns>
        </member>
        <member name="T:ILGPU.Runtime.SpecializationCache`3">
            <summary>
            A specialization cache to store and managed specialized kernel versions.
            </summary>
            <typeparam name="TLoader">The associated loader type.</typeparam>
            <typeparam name="TArgs">The arguments key type for caching.</typeparam>
            <typeparam name="TDelegate">The launcher delegate type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.SpecializationCache`3.#ctor(ILGPU.Runtime.Accelerator,ILGPU.IR.Method,`0,ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Constructs a new specialization cache.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="kernelMethod">The IR kernel method.</param>
            <param name="loader">The loader instance.</param>
            <param name="entry">The associated entry point.</param>
            <param name="specialization">The kernel specialization.</param>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.KernelContext">
            <summary>
            Returns the associated raw kernel context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.KernelMethod">
            <summary>
            Returns the associated raw kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.Loader">
            <summary>
            Returns the associated kernel loader.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.Entry">
            <summary>
            Returns the current entry point description.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.KernelSpecialization">
            <summary>
            Returns the current kernel specialization.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.SpecializationCache`3.CreateKernelWrapper(ILGPU.IR.Method,`1@)">
            <summary>
            Creates a kernel wrapper method that invokes the actual kernel method
            with specialized values.
            </summary>
            <param name="kernelMethod">The kernel method to invoke.</param>
            <param name="args">The target arguments.</param>
            <returns>The created IR method.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializationCache`3.SpecializeKernel(`1@)">
            <summary>
            Specializes a kernel with the given customized arguments.
            </summary>
            <param name="args">The argument structure.</param>
            <returns>The specialized kernel launcher.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializationCache`3.GetOrCreateKernel(`1)">
            <summary>
            Gets or creates a specialized kernel based on the arguments provided.
            </summary>
            <param name="args">The arguments used to specialize the kernel.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializationCache`3.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.SpecializedValue">
            <summary>
            Provides static helper functions for the structure
            <see cref="T:ILGPU.Runtime.SpecializedValue`1"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue.New``1(``0)">
            <summary>
            Creates a new specialized value instance.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="value">The value.</param>
            <returns>The new specialized value.</returns>
        </member>
        <member name="T:ILGPU.Runtime.SpecializedValue`1">
            <summary>
            Represents a dynamically specialized value that can be passed to a kernel.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.#ctor(`0)">
            <summary>
            Constructs a new specialized value.
            </summary>
            <param name="value">The underlying value to use.</param>
        </member>
        <member name="P:ILGPU.Runtime.SpecializedValue`1.Value">
            <summary>
            Gets or sets the underlying value.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.Equals(ILGPU.Runtime.SpecializedValue{`0})">
            <summary>
            Returns true if the other specialized value is equal to this value.
            </summary>
            <param name="other">The other specialized value.</param>
            <returns>
            True, if the other specialized value is equal to this value.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this value.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to this value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.GetHashCode">
            <summary>
            Returns the hash code of this value.
            </summary>
            <returns>The hash code of this value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.ToString">
            <summary>
            Returns the string representation of this value.
            </summary>
            <returns>The string representation of this value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.op_Equality(ILGPU.Runtime.SpecializedValue{`0},ILGPU.Runtime.SpecializedValue{`0})">
            <summary>
            Returns true if the first and second value are the same.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>True, if the first and second value are the same.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.op_Inequality(ILGPU.Runtime.SpecializedValue{`0},ILGPU.Runtime.SpecializedValue{`0})">
            <summary>
            Returns true if the first and second value are not the same.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>True, if the first and second value are not the same.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.op_Implicit(ILGPU.Runtime.SpecializedValue{`0})~`0">
            <summary>
            Converts the given <see cref="T:ILGPU.Runtime.SpecializedValue`1"/> instance into its
            underlying value.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="T:ILGPU.AtomicOperations.ICompareExchangeOperation`1">
            <summary>
            Represents the base interface for compare-exchange operations.
            </summary>
            <typeparam name="T">The type of the compare-exchange operation.</typeparam>
        </member>
        <member name="M:ILGPU.AtomicOperations.ICompareExchangeOperation`1.CompareExchange(`0@,`0,`0)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.IAtomicOperation`1">
            <summary>
            Represents the base interface for atomic binary operations.
            </summary>
            <typeparam name="T">The parameter type of the atomic operation.</typeparam>
        </member>
        <member name="M:ILGPU.AtomicOperations.IAtomicOperation`1.Operation(`0,`0)">
            <summary>
            Performs the actual atomic binary operation.
            </summary>
            <param name="current">
            The current value at the target memory location.
            </param>
            <param name="value">The involved external value.</param>
            <returns>The result of the binary operation.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeInt32">
            <summary>
            Represents an atomic compare-exchange operation of type int.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeInt32.CompareExchange(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeInt64">
            <summary>
            Represents an atomic compare-exchange operation of type long.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeInt64.CompareExchange(System.Int64@,System.Int64,System.Int64)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeUInt32">
            <summary>
            Represents an atomic compare-exchange operation of type uint.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeUInt32.CompareExchange(System.UInt32@,System.UInt32,System.UInt32)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeUInt64">
            <summary>
            Represents an atomic compare-exchange operation of type ulong.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeUInt64.CompareExchange(System.UInt64@,System.UInt64,System.UInt64)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeFloat">
            <summary>
            Represents an atomic compare-exchange operation of type float.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeFloat.CompareExchange(System.Single@,System.Single,System.Single)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeDouble">
            <summary>
            Represents an atomic compare-exchange operation of type double.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeDouble.CompareExchange(System.Double@,System.Double,System.Double)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.Atomic">
            <summary>
            Contains atomic functions that are supported on devices.
            </summary>
        </member>
        <member name="M:ILGPU.Atomic.Add(ILGPU.Index1@,ILGPU.Index1)">
            <summary>
            Atomically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">the target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.UInt32@,System.UInt32)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.UInt64@,System.UInt64)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.Single@,System.Single)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.Double@,System.Double)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(ILGPU.Index1@,ILGPU.Index1)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">the target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.UInt32@,System.UInt32,System.UInt32)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.UInt64@,System.UInt64,System.UInt64)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.Single@,System.Single,System.Single)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.Double@,System.Double,System.Double)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(ILGPU.Index1@,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">the target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The value to add.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.MakeAtomic``3(``0@,``0,``1,``2)">
            <summary>
            Implements a generic pattern to build custom atomic operations.
            </summary>
            <typeparam name="T">The parameter type of the atomic operation.</typeparam>
            <typeparam name="TOperation">
            The type of the custom atomic operation.
            </typeparam>
            <typeparam name="TCompareExchangeOperation">
            The type of the custom compare-exchange-operation logic.
            </typeparam>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <param name="operation">The custom atomic operation.</param>
            <param name="compareExchangeOperation">
            The custom compare-exchange-operation logic.
            </param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.Int32@,System.Int32)">
            <summary>
            Atomically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.Int64@,System.Int64)">
            <summary>
            Atomically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.UInt32@,System.UInt32)">
            <summary>
            Atomically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.UInt64@,System.UInt64)">
            <summary>
            Atomically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.Single@,System.Single)">
            <summary>
            Atomically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.Double@,System.Double)">
            <summary>
            Atomically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.Int32@,System.Int32)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.Int64@,System.Int64)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.UInt32@,System.UInt32)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.UInt64@,System.UInt64)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.Single@,System.Single)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.Double@,System.Double)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.Int32@,System.Int32)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.Int64@,System.Int64)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.UInt32@,System.UInt32)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.UInt64@,System.UInt64)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.Single@,System.Single)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.Double@,System.Double)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(System.Int32@,System.Int32)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(System.Int64@,System.Int64)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(System.UInt32@,System.UInt32)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(System.UInt64@,System.UInt64)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(System.Int32@,System.Int32)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(System.Int64@,System.Int64)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(System.UInt32@,System.UInt32)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(System.UInt64@,System.UInt64)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(System.Int32@,System.Int32)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(System.Int64@,System.Int64)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(System.UInt32@,System.UInt32)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(System.UInt64@,System.UInt64)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.Int32@,System.Int32)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.Int64@,System.Int64)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.Int64@,System.Int64,System.Int64)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.Backends.TargetPlatform">
            <summary>
            Represents a target platform.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.TargetPlatform.X86">
            <summary>
            The X86 target platform.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.TargetPlatform.X64">
            <summary>
            The X64 target platform.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.BackendType">
            <summary>
            Represents the general type of a backend.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.BackendType.IL">
            <summary>
            An IL backend.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.BackendType.PTX">
            <summary>
            A PTX backend.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.BackendType.OpenCL">
            <summary>
            An OpenCL source backend.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.BackendFlags">
            <summary>
            Represents general backend-specific code-generation flags.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.BackendFlags.None">
            <summary>
            The default flags (none).
            </summary>
        </member>
        <member name="T:ILGPU.Backends.BackendExtension">
            <summary>
            Represents an abstract backend extensions that can store additional data.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.Backend">
            <summary>
            Represents a general ILGPU backend.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.Backend.NoHook">
            <summary>
            No backend hook.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.NoHook.FinishedCodeGeneration(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.NoHook.InitializedKernelContext(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.NoHook.OptimizedKernelContext(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.Backend.BackendContext">
            <summary>
            Represents the current kernel context in scope of a backend instance.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.Backend.BackendContext.Enumerator">
            <summary>
            An enumerator backend methods.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.Enumerator.#ctor(ILGPU.Backends.Backend.BackendContext@)">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="context">The current backend context.</param>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Enumerator.KernelMethod">
            <summary>
            Returns the associated kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Enumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.#ctor(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Constructs a new backend context.
            </summary>
            <param name="kernelContext">The current kernel context.</param>
            <param name="kernelMethod">The kernel function.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.CreateKernelInfo">
            <summary>
            Creates a new kernel information object.
            </summary>
            <returns>The created kernel information object.</returns>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Context">
            <summary>
            The associated kernel context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.KernelMethod">
            <summary>
            Returns the main kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Methods">
            <summary>
            Returns all methods
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.KernelAllocas">
            <summary>
            Returns the associated allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.SharedAllocations">
            <summary>
            Returns all shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.DynamicSharedAllocations">
            <summary>
            Returns all dynamic shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.SharedMemorySpecification">
            <summary>
            Returns the associated shared memory specification.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Count">
            <summary>
            Returns the number of all functions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.KernelInfo">
            <summary>
            Returns the associated kernel information object (if any).
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.EnsureIntrinsicImplementations``1(ILGPU.IR.Intrinsics.IntrinsicImplementationProvider{``0})">
            <summary>
            Ensures that all not-implemented intrinsics have a valid associated
            code generator that will implement this intrinsic.
            </summary>
            <typeparam name="TDelegate">
            The backend-specific delegate type.
            </typeparam>
            <param name="provider">The implementation provider to use.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all entries.
            </summary>
            <returns>An enumerator to enumerate all entries.</returns>
        </member>
        <member name="T:ILGPU.Backends.Backend.CreateArgumentMapper">
            <summary>
            Represents a function to create backend-specific argument mappers.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="T:ILGPU.Backends.Backend.CreateTransformersHandler">
            <summary>
            Represents a function to create backend-specific transformers.
            </summary>
            <param name="context">The current context.</param>
            <param name="builder">The target transformer builder.</param>
        </member>
        <member name="P:ILGPU.Backends.Backend.RuntimePlatform">
            <summary>
            Returns the current execution platform.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.OSPlatform">
            <summary>
            Returns the native OS platform.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.RunningOnNativePlatform">
            <summary>
            Returns true if the current runtime platform is equal to the OS platform.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.EnsureRunningOnNativePlatform">
            <summary>
            Ensures that the current runtime platform is equal to the OS platform.
            If not, this method will throw a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.EnsureRunningOnPlatform(ILGPU.Backends.TargetPlatform)">
            <summary>
            Ensures that the current runtime platform is equal to the given platform.
            If not, this method will throw a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="platform">The desired target platform.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend.GetPlatform(System.Nullable{ILGPU.Backends.TargetPlatform})">
            <summary>
            Returns either the given target platform or the current one.
            </summary>
            <param name="platform">The nullable target platform.</param>
            <returns>The computed target platform.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.#ctor(ILGPU.Context,ILGPU.Backends.BackendType,ILGPU.Backends.BackendFlags,ILGPU.Backends.EntryPoints.ArgumentMapper)">
            <summary>
            Constructs a new generic backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="backendType">The backend type.</param>
            <param name="backendFlags">The backend flags.</param>
            <param name="argumentMapper">The argument mapper to use.</param>
        </member>
        <member name="P:ILGPU.Backends.Backend.Context">
            <summary>
            Returns the assigned context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendType">
            <summary>
            Returns the associated backend type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendFlags">
            <summary>
            Returns the associated backend flags.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.Platform">
            <summary>
            Returns the target platform.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.ArgumentMapper">
            <summary>
            Returns the associated <see cref="P:ILGPU.Backends.Backend.ArgumentMapper"/>.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.KernelTransformers">
            <summary>
            Returns the transformer that is applied before the final compilation step.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.PointerType">
            <summary>
            Returns type of a native pointer.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.PointerSize">
            <summary>
            Returns the pointer size of a native pointer type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.PointerBasicValueType">
            <summary>
            Returns the basic type of a native pointer.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.PointerArithmeticType">
            <summary>
            Returns the arithmetic type of a native pointer.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.InitializeKernelTransformers(System.Action{System.Collections.Immutable.ImmutableArray{ILGPU.IR.Transformations.Transformer}.Builder})">
            <summary>
            Initializes the associated kernel transformers.
            </summary>
            <param name="createTransformers">The target handler.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend.PreCompileKernelMethod(ILGPU.Backends.EntryPoints.EntryPointDescription@)">
            <summary>
            Pre-compiles the given entry point description into an IR method.
            </summary>
            <param name="entry">The desired entry point.</param>
            <returns>The pre-compiled IR method.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.PreCompileKernelMethod``1(ILGPU.Backends.EntryPoints.EntryPointDescription@,``0)">
            <summary>
            Pre-compiles the given entry point description into an IR method.
            </summary>
            <typeparam name="TBackendHook">The backend hook type.</typeparam>
            <param name="entry">The desired entry point.</param>
            <param name="backendHook">The backend hook.</param>
            <returns>The pre-compiled IR method.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Compiles a given compile unit with the specified entry point using
            the given kernel specialization.
            </summary>
            <param name="entry">The desired entry point.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile``1(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``0)">
            <summary>
            Compiles a given compile unit with the specified entry point using
            the given kernel specialization.
            </summary>
            <typeparam name="TBackendHook">The backend hook type.</typeparam>
            <param name="entry">The desired entry point.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="backendHook">The backend hook.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile(ILGPU.IR.Method,ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Compiles a given method into a compiled kernel.
            </summary>
            <param name="kernelMethod">The main IR kernel method.</param>
            <param name="entry">The desired entry point.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile``1(ILGPU.IR.Method,ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``0)">
            <summary>
            Compiles a given method into a compiled kernel.
            </summary>
            <typeparam name="TBackendHook">The backend hook type.</typeparam>
            <param name="kernelMethod">The main IR kernel method.</param>
            <param name="entry">The desired entry point.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="backendHook">The backend hook.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.CreateEntryPoint(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Creates a new entry point that is compatible with the current backend.
            </summary>
            <param name="entry">The entry point.</param>
            <param name="backendContext">
            The current kernel context containing all required functions.
            </param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The created entry point.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Compiles a given compile unit with the specified entry point using
            the given kernel specialization and the placement information.
            </summary>
            <param name="entryPoint">The desired entry point.</param>
            <param name="backendContext">
            The current kernel context containing all required functions.
            </param>
            <param name="specialization">The kernel specialization.</param>
            <returns>
            The compiled kernel that represents the compilation result.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>This method is not thread-safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.Backend`1">
            <summary>
            Represents a general ILGPU backend.
            </summary>
            <typeparam name="TDelegate">
            The intrinsic delegate type for backend implementations.
            </typeparam>
        </member>
        <member name="M:ILGPU.Backends.Backend`1.#ctor(ILGPU.Context,ILGPU.Backends.BackendType,ILGPU.Backends.BackendFlags,ILGPU.Backends.EntryPoints.ArgumentMapper)">
            <summary>
            Constructs a new generic backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="backendType">The backend type.</param>
            <param name="backendFlags">The backend flags.</param>
            <param name="argumentMapper">The argument mapper to use.</param>
        </member>
        <member name="P:ILGPU.Backends.Backend`1.IntrinsicProvider">
            <summary>
            Returns the current intrinsic provider.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend`1.InitIntrinsicProvider">
            <summary>
            Initializes the current intrinsic provider.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend`1.InitializeKernelTransformers(ILGPU.IR.Transformations.IntrinsicSpecializerFlags,System.Action{System.Collections.Immutable.ImmutableArray{ILGPU.IR.Transformations.Transformer}.Builder})">
            <summary>
            Initializes the associated kernel transformers.
            </summary>
            <param name="flags">The specializer flags.</param>
            <param name="createTransformers">The target handler.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend`1.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>This method is not thread-safe.</remarks>
        </member>
        <member name="M:ILGPU.Backends.Backend`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Backends.CodeGeneratorBackend`4">
            <summary>
            Represents a backend that works on several code generators and kernel builders
            in parallel to speed up code generation.
            </summary>
            <typeparam name="TDelegate">
            The intrinsic delegate type for backend implementations.
            </typeparam>
            <typeparam name="T">The main data type.</typeparam>
            <typeparam name="TCodeGenerator">The code-generator type.</typeparam>
            <typeparam name="TKernelBuilder">The kernel-builder type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.#ctor(ILGPU.Context,ILGPU.Backends.BackendType,ILGPU.Backends.BackendFlags,ILGPU.Backends.EntryPoints.ArgumentMapper)">
            <summary>
            Constructs a new generic backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="backendType">The backend type.</param>
            <param name="backendFlags">The backend flags.</param>
            <param name="argumentMapper">The argument mapper to use.</param>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.Compile(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Compiles a new kernel using parallel processing.
            </summary>
            <param name="entryPoint"></param>
            <param name="backendContext"></param>
            <param name="specialization"></param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateKernelBuilder(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@,`1@)">
            <summary>
            Creates the main kernel builder and initializes
            all required information.
            </summary>
            <param name="entryPoint">The current entry point.</param>
            <param name="backendContext">The backend context.</param>
            <param name="specialization">The backend specialization.</param>
            <param name="data">The user-defined data instance.</param>
            <returns>The resulting kernel builder.</returns>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateFunctionCodeGenerator(ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas,`1)">
            <summary>
            Creates a new function-code generator.
            </summary>
            <param name="method">The current method.</param>
            <param name="allocas">The associated allocations.</param>
            <param name="data">The user-defined data instance.</param>
            <returns>The created function-code generator.</returns>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateKernelCodeGenerator(ILGPU.IR.Analyses.AllocaKindInformation@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas,`1)">
            <summary>
            Creates a new kernel-code generator.
            </summary>
            <param name="sharedAllocations">All shared allocations.</param>
            <param name="method">The current method.</param>
            <param name="allocas">The associated allocations.</param>
            <param name="data">The user-defined data instance.</param>
            <returns>The created kernel-code generator.</returns>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateKernel(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.CompiledKernel.KernelInfo,`3,`1)">
            <summary>
            Creates the final compiled kernel instance.
            </summary>
            <param name="entryPoint">The current entry point.</param>
            <param name="builder">The kernel builder.</param>
            <param name="kernelInfo">Detailed information about the kernel.</param>
            <param name="data">The user-defined data instance.</param>
            <returns>The resulting compiled kernel.</returns>
        </member>
        <member name="T:ILGPU.Backends.CompiledKernel">
            <summary>
            Represents a compiled kernel that encapsulates emitted binary code.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.CompiledKernel.FunctionInfo">
            <summary>
            Contains information about functions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.CompiledKernel.FunctionInfo.#ctor(System.String,System.Reflection.MethodBase,System.Int32)">
            <summary>
            Constructs a new function information object.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.FunctionInfo.Name">
            <summary>
            The name of the compiled function inside the kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.FunctionInfo.Method">
            <summary>
            Returns the managed method reference (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.FunctionInfo.LocalMemorySize">
            <summary>
            Returns the local memory size in bytes.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.CompiledKernel.KernelInfo">
            <summary>
            Provides detailed information about compiled kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.CompiledKernel.KernelInfo.#ctor(ILGPU.IR.Analyses.AllocaKindInformation@,System.Collections.Immutable.ImmutableArray{ILGPU.Backends.CompiledKernel.FunctionInfo})">
            <summary>
            Constructs a new kernel information object.
            </summary>
            <param name="sharedAllocations">All shared allocations.</param>
            <param name="functions">
            An array containing detailed function information.
            </param>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.KernelInfo.SharedAllocations">
            <summary>
            Returns detailed information about all shared allocations.
            </summary>
            <remarks>
            This information will be populated if the flag
            <see cref="F:ILGPU.ContextFlags.EnableKernelStatistics"/> is set.
            </remarks>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.KernelInfo.Functions">
            <summary>
            Returns information about all functions in the compiled kernel.
            </summary>
            <remarks>
            This array will be populated if the flag
            <see cref="F:ILGPU.ContextFlags.EnableKernelStatistics"/> is set.
            </remarks>
        </member>
        <member name="M:ILGPU.Backends.CompiledKernel.KernelInfo.Dump(System.IO.TextWriter)">
            <summary>
            Dumps kernel information to the given text writer.
            </summary>
            <param name="writer">The text writer.</param>
        </member>
        <member name="M:ILGPU.Backends.CompiledKernel.#ctor(ILGPU.Context,ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.CompiledKernel.KernelInfo)">
            <summary>
            Constructs a new compiled kernel.
            </summary>
            <param name="context">The associated context.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="info">Detailed kernel information.</param>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.SourceMethod">
            <summary>
            Represents the source method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.IndexType">
            <summary>
            Returns the index type of the entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.Specialization">
            <summary>
            Returns the associated kernel specialization.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.EntryPoint">
            <summary>
            Returns the internally used entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.Info">
            <summary>
            Returns information about all functions in the compiled kernel.
            </summary>
            <remarks>
            This instance will be available when the
            <see cref="F:ILGPU.ContextFlags.EnableKernelStatistics"/> is set.
            </remarks>
        </member>
        <member name="M:ILGPU.Backends.CompiledKernel.ToString">
            <summary>
            Returns the string representation of this kernel.
            </summary>
            <returns>The string representation of this kernel.</returns>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper">
            <summary>
            Maps kernel arguments to a compatible representation that
            can be accessed by the native kernel.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource">
            <summary>
            An emission source.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType">
            <summary>
            Returns the source type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.EmitLoadSource``1(``0@)">
            <summary>
            Emits a load command.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The current emitter.</param>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget">
            <summary>
            An emission target.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.TargetType">
            <summary>
            Returns the target type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.EmitLoadTarget``1(``0@)">
            <summary>
            Emits a target command.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The current emitter.</param>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1">
            <summary>
            A structure source.
            </summary>
            <typeparam name="TParentTarget">The parent source type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.#ctor(`0@,System.Reflection.FieldInfo)">
            <summary>
            Constructs a new structure target.
            </summary>
            <param name="parentTarget">The parent target.</param>
            <param name="targetField">The target field.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.TargetType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.TargetType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.ParentTarget">
            <summary>
            Returns the parent target.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.TargetField">
            <summary>
            Returns the target field.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.EmitLoadTarget``1(``0@)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.EmitLoadTarget``1(``0@)"/>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget">
            <summary>
            A <see cref="T:ILGPU.Backends.IL.ILLocal"/> target.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget.#ctor(ILGPU.Backends.IL.ILLocal)">
            <summary>
            Constructs a new local target.
            </summary>
            <param name="local">The current local.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget.TargetType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.TargetType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget.Local">
            <summary>
            Returns the associated local variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget.EmitLoadTarget``1(``0@)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.EmitLoadTarget``1(``0@)"/>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource">
            <summary>
            An argument source.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource.#ctor(System.Type,System.Int32)">
            <summary>
            Constructs a new argument source.
            </summary>
            <param name="type">The argument type.</param>
            <param name="argumentIndex">The argument index.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource.ArgumentIndex">
            <summary>
            Returns the argument index.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource.EmitLoadSource``1(``0@)">
            <summary>
            Emits the address of an argument.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource">
            <summary>
            A <see cref="T:ILGPU.Backends.IL.ILLocal"/> source.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource.#ctor(ILGPU.Backends.IL.ILLocal)">
            <summary>
            Constructs a new local source.
            </summary>
            <param name="local">The current local.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource.Local">
            <summary>
            Returns the associated local variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource.EmitLoadSource``1(``0@)">
            <summary>
            Emits the address of a local variable.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1">
            <summary>
            A structure source.
            </summary>
            <typeparam name="TParentSource">The parent source type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.#ctor(`0@,System.Reflection.FieldInfo)">
            <summary>
            Construct a new structure source.
            </summary>
            <param name="parentSource">The parent source.</param>
            <param name="sourceField">The source field.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.ParentSource">
            <summary>
            Returns the parent source.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.SourceField">
            <summary>
            Returns the source field.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.EmitLoadSource``1(``0@)">
            <summary>
            Emits the address of a structure field.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1">
            <summary>
            A view-parameter source.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.#ctor(`0@,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter@)">
            <summary>
            Constructs a new view source.
            </summary>
            <param name="source">The underlying source.</param>
            <param name="viewParameter">The view parameter to map.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.Source">
            <summary>
            Returns the underlying source.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.ParameterType">
            <summary>
            Returns the parameter type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.AccessChain">
            <summary>
            Returns the access chain to resolve the actual view instance.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.EmitLoadSource``1(``0@)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.EmitLoadSource``1(``0@)"/>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.IMappingHandler">
            <summary>
            An abstract argument mapping handler.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.IMappingHandler.MapArgument``2(``0@,``1,System.Int32)">
            <summary>
            Emits a mapping command that maps a kernel argument.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <param name="emitter">The target emitter.</param>
            <param name="source">The value source.</param>
            <param name="argumentIndex">The index of the kernel argument.</param>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.ISeparateViewMappingHandler">
            <summary>
            An abstract argument mapping handler.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ISeparateViewMappingHandler.MapViewArgument``2(``0@,``1@,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter@,System.Int32)">
            <summary>
            Emits a set of commands that map an implementation view instance
            and stores the converted instance into the given target.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="source">The value source.</param>
            <param name="viewParameter">The source view parameter.</param>
            <param name="viewArgumentIndex">The argument index.</param>
        </member>
        <member name="F:ILGPU.Backends.EntryPoints.ArgumentMapper.typeMapping">
            <summary>
            The internal type mapping (from old to new types).
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new argument mapper.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.TypeInformationManager">
            <summary>
            Returns the associated type-information manager.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapViewType(System.Type,System.Type)">
            <summary>
            Maps a view type to its implementation specific type.
            </summary>
            <param name="viewType">The view type.</param>
            <param name="elementType">The element type.</param>
            <returns>The resulting implementation type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapStructType(System.Type)">
            <summary>
            Maps the given structure type to a compatible structure type.
            </summary>
            <param name="structType">The structure type to map.</param>
            <returns>The mapped structure type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.RegisterTypeMapping(System.Type,System.Type)">
            <summary>
            Registers a type mapping entry and returns the mapped type.
            </summary>
            <param name="type">The source type.</param>
            <param name="mappedType">The target type.</param>
            <returns>The mapped type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapType(System.Type)">
            <summary>
            Maps the given source type to a compatible target type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The compatible target type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapViewInstance``3(``0@,System.Type,``1,``2)">
            <summary>
            Emits a set of commands that map an implementation view instance
            and stores the converted instance into the given target.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <typeparam name="TTarget">The value target type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="elementType">The element type.</param>
            <param name="source">The value source.</param>
            <param name="target">The value target.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapStructInstance``3(``0@,``1,``2)">
            <summary>
            Maps a specific structure instance.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <typeparam name="TTarget">The value target type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="source">The value source.</param>
            <param name="target">The value target.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapInstance``3(``0@,``1,``2)">
            <summary>
            Maps a value instance.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <typeparam name="TTarget">The value target type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="source">The value source.</param>
            <param name="target">The value target.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.Map``2(``0@,``1@,ILGPU.Backends.EntryPoints.ParameterCollection@)">
            <summary>
            Creates code that maps the given parameter specification to
            a compatible representation.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TMappingHandler">The handler type.</typeparam>
            <param name="emitter">The target emitter to write to.</param>
            <param name="mappingHandler">The target mapping handler to use.</param>
            <param name="parameters">The parameter collection to map.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapViews``2(``0@,``1@,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint)">
            <summary>
            Creates code that maps (potentially nested) views of kernel arguments
            separately.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TMappingHandler">The handler type.</typeparam>
            <param name="emitter">The target emitter to write to.</param>
            <param name="mappingHandler">The target mapping handler to use.</param>
            <param name="entryPoint">The entry point to use.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.EntryPoint">
            <summary>
            Represents a kernel entry point.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPoint.#ctor(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Backends.EntryPoints.SharedMemorySpecification@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Constructs a new entry point targeting the given method.
            </summary>
            <param name="description">The entry point description.</param>
            <param name="sharedMemory">The shared memory specification.</param>
            <param name="specialization">The kernel specialization.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.Description">
            <summary>
            Returns the associated description instance.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.MethodInfo">
            <summary>
            Returns the associated method info.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.IndexType">
            <summary>
            Returns the index type of the index parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.KernelIndexParameterOffset">
            <summary>
            Returns the offset for the actual parameter values while taking an implicit
            index argument into account.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.IsExplicitlyGrouped">
            <summary>
            Returns true if the entry point represents an explicitly grouped kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.IsImplictlyGrouped">
            <summary>
            Returns true if the entry point represents an implicitly grouped kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.KernelIndexType">
            <summary>
            Returns the index type of the index parameter.
            This can also return the <see cref="T:ILGPU.KernelConfig"/> type in the case of
            an explicitly grouped kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.Parameters">
            <summary>
            Returns the parameter specification of arguments that are passed to the
            kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.HasSpecializedParameters">
            <summary>
            Returns true if this entry point uses specialized parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.HasByRefParameters">
            <summary>
            Returns true if the parameter specification contains by reference parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.Specialization">
            <summary>
            Returns the associated launch specification.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.NumFlattendedIndexParameters">
            <summary>
            Returns the number of index parameters when all structures
            are flattened into scalar parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.SharedMemory">
            <summary>
            Returns the associated shared memory specification.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPoint.CreateLauncherMethod(System.Type)">
            <summary>
            Creates a new launcher method.
            </summary>
            <param name="instanceType">The instance type (if any).</param>
            <returns>The method emitter that represents the launcher method.</returns>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.SharedMemorySpecification">
            <summary>
            Represents a shared memory specification of a specific kernel.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.EntryPoints.SharedMemorySpecification.Constructor">
            <summary>
            Represents the associated constructor taking two integer parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SharedMemorySpecification.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructs a new shared memory specification.
            </summary>
            <param name="staticSize">The static shared memory size.</param>
            <param name="hasDynamicMemory">
            True, if this specification requires dynamic shared memory.
            </param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SharedMemorySpecification.HasSharedMemory">
            <summary>
            Returns true if the current specification.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SharedMemorySpecification.StaticSize">
            <summary>
            Returns the amount of shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SharedMemorySpecification.HasStaticMemory">
            <summary>
            Returns true if the current specification required static shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SharedMemorySpecification.HasDynamicMemory">
            <summary>
            Returns true if the current specification requires dynamic shared memory.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.EntryPointDescription">
            <summary>
            Specifies an entry point method including its associated index type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.FromExplicitlyGroupedKernel(System.Reflection.MethodInfo)">
            <summary>
            Creates a new entry point description from the given method source that is
            compatible with explicitly grouped kernels.
            </summary>
            <param name="methodSource">The kernel method source.</param>
            <returns>The created entry point description.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.FromImplicitlyGroupedKernel(System.Reflection.MethodInfo)">
            <summary>
            Creates a new entry point description from the given method source that is
            compatible with implicitly grouped kernels.
            </summary>
            <param name="methodSource">The kernel method source.</param>
            <returns>The created entry point description.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.#ctor(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[],ILGPU.IndexType)">
            <summary>
            Constructs a new entry point description.
            </summary>
            <param name="methodSource">The method source.</param>
            <param name="parameters">The raw array of attached kernel parameters.</param>
            <param name="indexType">The index type.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPointDescription.MethodSource">
            <summary>
            Returns the kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPointDescription.IndexType">
            <summary>
            Returns the associated index type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPointDescription.Parameters">
            <summary>
            Returns all parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPointDescription.KernelIndexParameterOffset">
            <summary>
            Returns the offset for the actual parameter values while taking an implicit
            index argument into account.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPointDescription.HasSpecializedParameters">
            <summary>
            Returns true if this entry point uses specialized parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.Validate">
            <summary>
            Validates this object and throws a <see cref="T:System.NotSupportedException"/> in
            the case of an unsupported kernel configuration.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.CreateLauncherMethod(System.Type)">
            <summary>
            Creates a new launcher method.
            </summary>
            <param name="instanceType">The instance type (if any).</param>
            <returns>The method emitter that represents the launcher method.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.Equals(ILGPU.Backends.EntryPoints.EntryPointDescription)">
            <summary>
            Returns true if the given description is equal to the current one.
            </summary>
            <param name="other">The other description.</param>
            <returns>True, if the given cached key is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.GetHashCode">
            <summary>
            Returns the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.op_Equality(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Backends.EntryPoints.EntryPointDescription)">
            <summary>
            Returns true if the left and right descriptions are the same.
            </summary>
            <param name="left">The left description.</param>
            <param name="right">The right description.</param>
            <returns>True, if the left and right descriptions are the same.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.op_Inequality(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Backends.EntryPoints.EntryPointDescription)">
            <summary>
            Returns true if the left and right descriptions are not the same.
            </summary>
            <param name="left">The left description.</param>
            <param name="right">The right description.</param>
            <returns>True, if the left and right descriptions are not the same.</returns>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ParameterCollection">
            <summary>
            The parameter specification of an entry point.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator">
            <summary>
            Returns an enumerator to enumerate all types in the collection.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.#ctor(System.Collections.Immutable.ImmutableArray{System.Type})">
            <summary>
            Constructs a new parameter type enumerator.
            </summary>
            <param name="source">The source array.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.Current">
            <summary>
            Returns the current type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameter">
            <summary>
            Represents a parameter that is annotated with the help of the
            <see cref="T:ILGPU.Runtime.SpecializedValue`1"/> structure to enable dynamic specialization
            of kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameter.#ctor(System.Int32,System.Type,System.Type)">
            <summary>
            Constructs a new specialized parameter.
            </summary>
            <param name="index">The referenced parameter index.</param>
            <param name="parameterType">The raw parameter type.</param>
            <param name="specializedType">The specialized parameter type.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameter.Index">
            <summary>
            Returns the parameter index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameter.ParameterType">
            <summary>
            Returns the actual parameter type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameter.SpecializedType">
            <summary>
            Returns the specialized parameter type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.#ctor(System.Collections.Immutable.ImmutableArray{System.Type})">
            <summary>
            Constructs a new parameter type collection.
            </summary>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.Count">
            <summary>
            Returns the number of parameter types.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.ParameterTypes">
            <summary>
            Returns the desired kernel launcher parameter types (including references).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameters">
            <summary>
            Returns the desired kernel launcher parameter types (including references).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.HasSpecializedParameters">
            <summary>
            Returns true if this collection has specialized parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.Item(System.Int32)">
            <summary>
            Returns the underlying parameter type (without references).
            </summary>
            <param name="index">The parameter index.</param>
            <returns>The desired parameter type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.IsByRef(System.Int32)">
            <summary>
            Returns true if the specified parameter is passed by reference.
            </summary>
            <param name="parameterIndex">The parameter index.</param>
            <returns>True, if the specified parameter is passed by reference.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.CopyTo(System.Type[],System.Int32)">
            <summary>
            Copies the parameter types to the given array.
            </summary>
            <param name="target">The target array.</param>
            <param name="offset">The target offset to copy to.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all types in the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.System#Collections#Generic#IEnumerable{System#Type}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all types in the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all types in the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint">
            <summary>
            An entry point that differentiates between views and data structures.
            </summary>
            <remarks>
            This is useful since many APIs (like OpenCL) require intrinsic support for
            passing views to kernels via separate API calls.
            </remarks>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter">
            <summary>
            Represents a single view parameter in the scope of a kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.#ctor(System.Int32,System.ValueTuple{ILGPU.IR.Types.TypeInformationManager.TypeInformation,System.Int32}@,ILGPU.IR.Values.FieldAccessChain,ILGPU.IR.Values.FieldAccess,System.Type,System.Type)">
            <summary>
            Constructs a new view parameter.
            </summary>
            <param name="index">The view parameter index.</param>
            <param name="parameter">The parameter info.</param>
            <param name="sourceChain">The source access chain.</param>
            <param name="targetAccess">The target access.</param>
            <param name="elementType">The element type of the view.</param>
            <param name="viewType">The source view type.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.Index">
            <summary>
            Returns the index of the i-th view entry.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.ParameterType">
            <summary>
            Returns the associated parameter type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.ParameterIndex">
            <summary>
            Returns the associated kernel-parameter index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.SourceChain">
            <summary>
            Returns the access to resolve the view parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.TargetAccess">
            <summary>
            Returns the target access.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.ElementType">
            <summary>
            Returns the underlying element type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.ViewType">
            <summary>
            Returns the associated array-view type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection">
            <summary>
            Represents a readonly list of view parameters.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator">
            <summary>
            An enumerator to enumerate all view parameters in this collection.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.#ctor(ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection@)">
            <summary>
            Constructs a new parameter enumerator.
            </summary>
            <param name="collection">The parent collection.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.EntryPoint">
            <summary>
            Returns the parent entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.Index">
            <summary>
            Returns the current index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.EndIndex">
            <summary>
            Returns the end index (exclusive).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.#ctor(ILGPU.Backends.EntryPoints.SeparateViewEntryPoint,System.Int32,System.Int32)">
            <summary>
            Constructs a new parameter collection.
            </summary>
            <param name="entryPoint">The parent entry point.</param>
            <param name="startIndex">The start index (inclusive).</param>
            <param name="endIndex">The end index (exclusive).</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.EntryPoint">
            <summary>
            Returns the parent entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.StartIndex">
            <summary>
            Returns the start index (inclusive).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.EndIndex">
            <summary>
            Returns the end index (exclusive).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Count">
            <summary>
            Returns the number of view parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Item(System.Int32)">
            <summary>
            Returns the i-th view parameter.
            </summary>
            <param name="index">The index of the view parameter to get.</param>
            <returns>The desired view parameter.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all parameters in this collection.
            </summary>
            <returns>
            An enumerator to enumerate all parameters in this collection.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.System#Collections#Generic#IEnumerable{ILGPU#Backends#EntryPoints#SeparateViewEntryPoint#ViewParameter}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="F:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.viewParameterMapping">
            <summary>
            Maps parameter indices to view-parameter intervals.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.#ctor(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Backends.EntryPoints.SharedMemorySpecification@,ILGPU.Runtime.KernelSpecialization@,ILGPU.IR.Types.TypeInformationManager,System.Int32)">
            <summary>
            Constructs a new entry point targeting the given method.
            </summary>
            <param name="description">The entry point description.</param>
            <param name="sharedMemory">The shared memory specification.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="typeInformationManager">The information manager to use.</param>
            <param name="numImplementationFieldsPerView">
            The number of fields per view.
            </param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.NumImplementationFieldsPerView">
            <summary>
            Returns the number of fields per view.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ResolveVirtualViewParameters(System.Collections.Immutable.ImmutableArray{ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter}.Builder,System.ValueTuple{ILGPU.IR.Types.TypeInformationManager.TypeInformation,System.Int32}@,ILGPU.IR.Types.TypeInformationManager.TypeInformation,ILGPU.IR.Values.FieldAccessChain,ILGPU.IR.Values.FieldAccess)">
            <summary>
            Analyzes the given parameter types and resolves all virtual
            view parameters that should be passed separately.
            </summary>
            <param name="builder">The target builder to append to.</param>
            <param name="parameter">The parameter info.</param>
            <param name="type">The current type.</param>
            <param name="sourceChain">The source access chain.</param>
            <param name="targetAccess">The target field access.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.NumViewParameters">
            <summary>
            Returns the number of all separate view parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameters">
            <summary>
            Contains all separate view parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.TryGetViewParameters(System.Int32,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection@)">
            <summary>
            Tries to get view parameters for the given kernel-parameter index.
            </summary>
            <param name="parameterIndex">The kernel-parameter index.</param>
            <param name="viewParameters">The resolved view parameters (if any).</param>
            <returns>True, if view parameters could be determined.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.GetViewParameters(System.Int32)">
            <summary>
            Get view parameters for the given kernel-parameter index.
            </summary>
            <param name="parameterIndex">The kernel-parameter index.</param>
            <returns>The collection of view parameters.</returns>
        </member>
        <member name="T:ILGPU.Backends.IBackendCodeGenerator`1">
            <summary>
            Represents an abstract code generator that works on a given data type.
            </summary>
            <typeparam name="TKernelBuilder">
            The data type on which this code generator can work.
            </typeparam>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator`1.GenerateConstants(`0)">
            <summary>
            Generates all constant definitions (if any).
            </summary>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator`1.GenerateHeader(`0)">
            <summary>
            Generates a header definition (if any).
            </summary>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator`1.GenerateCode">
            <summary>
            Generates the actual function code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator`1.Merge(`0)">
            <summary>
            Merges all changes inside the current code generator into the given builder.
            </summary>
            <param name="builder">The builder to merge with.</param>
        </member>
        <member name="T:ILGPU.Backends.IBackendCodeGenerator">
            <summary>
            An abstract backend code generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.MethodCall)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="methodCall">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PhiValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="phiValue">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Parameter)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="parameter">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.UnaryArithmeticValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.BinaryArithmeticValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.TernaryArithmeticValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.CompareValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.ConvertValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PointerCast)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AddressSpaceCast)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.FloatAsIntCast)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsFloatCast)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IfPredicate)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="predicate">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SwitchPredicate)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="predicate">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GenericAtomic)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="atomic">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AtomicCAS)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="atomicCAS">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Alloca)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="alloca">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.MemoryBarrier)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="barrier">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Load)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="load">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Store)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="store">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadElementAddress)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadFieldAddress)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PrimitiveValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.StringValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.NullValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.StructureValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GetField)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SetField)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GridIndexValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupIndexValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GridDimensionValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupDimensionValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpSizeValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LaneIdxValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PredicateBarrier)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="barrier">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Barrier)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="barrier">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Broadcast)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="broadcast">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpShuffle)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="shuffle">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SubWarpShuffle)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="shuffle">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.DebugOperation)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="debug">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.ReturnTerminator)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="returnTerminator">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.UnconditionalBranch)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="branch">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IfBranch)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="branch">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SwitchBranch)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="branch">The node.</param>
        </member>
        <member name="T:ILGPU.Backends.BackendCodeGenerator">
            <summary>
            Extension methods for <see cref="T:ILGPU.Backends.IBackendCodeGenerator"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.#ctor(`0)">
            <summary>
            Creates a new code-generation visitor wrapper.
            </summary>
            <param name="codeGenerator">The parent code generator.</param>
        </member>
        <member name="P:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.CodeGenerator">
            <summary>
            Returns the parent code generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.MethodCall)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.MethodCall)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.PhiValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PhiValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.Parameter)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Parameter)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.UnaryArithmeticValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UnaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.BinaryArithmeticValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.BinaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.TernaryArithmeticValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.TernaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.CompareValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.CompareValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.ConvertValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ConvertValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.IntAsPointerCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IntAsPointerCast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.PointerCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PointerCast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.AddressSpaceCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AddressSpaceCast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.ViewCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ViewCast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.FloatAsIntCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.FloatAsIntCast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.IntAsFloatCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IntAsFloatCast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.IfPredicate)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IfPredicate)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.SwitchPredicate)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SwitchPredicate)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GenericAtomic)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GenericAtomic)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.AtomicCAS)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AtomicCAS)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.Alloca)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Alloca)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.MemoryBarrier)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.MemoryBarrier)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.Load)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Load)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.Store)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Store)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.SubViewValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SubViewValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.LoadElementAddress)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadElementAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.LoadFieldAddress)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadElementAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.NewView)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NewView)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GetViewLength)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetViewLength)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.PrimitiveValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PrimitiveValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.StringValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.StringValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.NullValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NullValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.StructureValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.StructureValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GetField)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetField)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.SetField)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SetField)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.ArrayValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ArrayValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GetArrayExtent)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetArrayExtent)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GetArrayElement)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetArrayElement)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.SetArrayElement)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SetArrayElement)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.AcceleratorTypeValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AcceleratorTypeValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GridIndexValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GridIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GroupIndexValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GroupIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GridDimensionValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GridDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GroupDimensionValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GroupDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.WarpSizeValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WarpSizeValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.LaneIdxValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LaneIdxValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.PredicateBarrier)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PredicateBarrier)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.Barrier)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Barrier)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.Broadcast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Broadcast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.WarpShuffle)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WarpShuffle)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.SubWarpShuffle)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SubWarpShuffle)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.UndefinedValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UndefinedValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.HandleValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.HandleValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.DebugOperation)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.DebugOperation)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.ReturnTerminator)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ReturnTerminator)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.UnconditionalBranch)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UnconditionalBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.IfBranch)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IfBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.SwitchBranch)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SwitchBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.GenerateCodeFor``1(``0,ILGPU.IR.Value)">
            <summary>
            Generates code for the given value.
            </summary>
            <typeparam name="TCodeGenerator">The actual code-generator type.</typeparam>
            <param name="codeGenerator">The code-generator instance.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="T:ILGPU.Backends.IBackendHook">
            <summary>
            Represents a custom backend hook.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IBackendHook.FinishedCodeGeneration(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Completed all frontend operations.
            </summary>
            <param name="context">The main context.</param>
            <param name="entryPoint">The kernel function.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendHook.InitializedKernelContext(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Initialized the kernel context via imports of the required
            kernel function.
            </summary>
            <param name="kernelContext">The custom backend kernel context.</param>
            <param name="kernelMethod">The kernel function.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendHook.OptimizedKernelContext(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Performed final kernel optimization steps.
            </summary>
            <param name="kernelContext">The custom backend kernel context.</param>
            <param name="kernelMethod">The kernel function.</param>
        </member>
        <member name="T:ILGPU.Backends.IL.DefaultILBackend">
            <summary>
            The default IL backend thach das it uses the original kernel method.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.DefaultILBackend.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new IL backend.
            </summary>
            <param name="context">The context to use.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.DefaultILBackend.GenerateLocals``1(ILGPU.Backends.EntryPoints.EntryPoint,``0,ILGPU.Backends.IL.ILBackend.KernelGenerationData,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo},ILGPU.Backends.IL.ILLocal)">
            <summary>
            Generates code that caches all task fields in local variables.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.DefaultILBackend.GenerateCode``1(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,``0,ILGPU.Backends.IL.ILBackend.KernelGenerationData)">
            <summary>
            Generates the actual kernel invocation call.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ILBackend">
            <summary>
            The basic MSIL backend for the CPU runtime.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ILBackend.KernelGenerationData">
            <summary>
            Contains important global variable references.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.UserGridDim">
            <summary>
            Maps the grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.Index">
            <summary>
            Maps the current thread index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.KernelNotInvoked">
            <summary>
            The intrinsic kernel invocation variable.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.LoopHeader">
            <summary>
            The current loop header.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.LoopBody">
            <summary>
            The current loop body.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.ChunkIdxCounter">
            <summary>
            The chunk index counter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.BreakCondition">
            <summary>
            The loop break condition.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.Uniforms">
            <summary>
            The uniform references.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.KernelGenerationData.SetupUniforms(System.Collections.Immutable.ImmutableArray{ILGPU.Backends.IL.ILLocal})">
            <summary>
            Setups the given uniform variables.
            </summary>
            <param name="uniformVariables">The variables to setup.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.#ctor(ILGPU.Context,ILGPU.Backends.BackendFlags,System.Int32,ILGPU.Backends.EntryPoints.ArgumentMapper)">
            <summary>
            Constructs a new IL backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="backendFlags">The backend flags.</param>
            <param name="warpSize">The current warp size.</param>
            <param name="argumentMapper">The argument mapper to use.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.WarpSize">
            <summary>
            Returns the associated warp size.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.Compile(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.IL.ILCompiledKernel"/> instance.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.GenerateCode``1(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,``0,ILGPU.Backends.IL.ILBackend.KernelGenerationData)">
            <summary>
            Generates the actual kernel code.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="entryPoint">The desired entry point.</param>
            <param name="backendContext">The current backend context.</param>
            <param name="emitter">The current code generator.</param>
            <param name="kernelData">The current kernel data.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.GenerateAcceleratorTask(ILGPU.Backends.EntryPoints.ParameterCollection@,System.Reflection.ConstructorInfo@,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo}@)">
            <summary>
            Generates specialized task classes for kernel execution.
            </summary>codeEmitter
            <param name="parameters">The parameter collection.</param>
            <param name="taskConstructor">The created task constructor.</param>
            <param name="taskArgumentMapping">
            The created task-argument mapping that maps parameter indices of uniforms
            and dynamically-sized shared-memory-variable-length specifications to fields
            in the task class.
            </param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.GenerateStartupCode``1(ILGPU.Backends.EntryPoints.EntryPoint,``0,ILGPU.Backends.IL.ILBackend.KernelGenerationData,System.Type,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo})">
            <summary>
            Generates kernel startup code.
            </summary>
            <param name="entryPoint">The entry point.</param>
            <param name="emitter">The current code generator.</param>
            <param name="kernelData">The current kernel data.</param>
            <param name="taskType">The created task.</param>
            <param name="taskArgumentMapping">
            The created task-argument mapping that maps parameter indices of uniforms
            and dynamically-sized shared-memory-variable-length specifications to fields
            in the task class.
            </param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.GenerateLocals``1(ILGPU.Backends.EntryPoints.EntryPoint,``0,ILGPU.Backends.IL.ILBackend.KernelGenerationData,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo},ILGPU.Backends.IL.ILLocal)">
            <summary>
            Generates the required local variables (e.g. shared memory).
            </summary>
            <param name="entryPoint">The entry point.</param>
            <param name="emitter">The current code generator.</param>
            <param name="kernelData">The current kernel data.</param>
            <param name="taskArgumentMapping">
            The created task-argument mapping that maps parameter indices of uniforms.
            </param>
            <param name="task">The task variable.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.GenerateFinishCode``1(``0,ILGPU.Backends.IL.ILBackend.KernelGenerationData)">
            <summary>
            Generates the kernel finish code.
            </summary>
            <param name="emitter">The current code generator.</param>
            <param name="kernelData">The current kernel data.</param>
        </member>
        <member name="T:ILGPU.Backends.IL.ILCompiledKernel">
            <summary>
            Represents a compiled kernel in MSIL form.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILCompiledKernel.#ctor(ILGPU.Context,ILGPU.Backends.EntryPoints.EntryPoint,System.Reflection.MethodInfo,System.Type,System.Reflection.ConstructorInfo,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo})">
            <summary>
            Constructs a new IL compiled kernel.
            </summary>
            <param name="context">The associated context.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="kernelMethod">The main kernel method.</param>
            <param name="taskType">The custom task type.</param>
            <param name="taskConstructor">The custom task constructor.</param>
            <param name="taskArgumentMapping">
            Mapping of argument indices to fields.
            </param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.KernelMethod">
            <summary>
            Returns the main kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.ExecutionHandler">
            <summary>
            Returns a CPU-runtime compatible execution handler.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.TaskType">
            <summary>
            Returns the custom task type to dispatch the kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.TaskConstructor">
            <summary>
            Returns the task constructor to instantiate the custom task type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.TaskArgumentMapping">
            <summary>
            Returns a mapping of argument indices to fields.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ILLocal">
            <summary>
            Represents a local variable in MSIL.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILLocal.#ctor(System.Int32,System.Type)">
            <summary>
            Constructs a new local variable in MSIL.
            </summary>
            <param name="index">The variable index.</param>
            <param name="type">The variable type.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILLocal.Index">
            <summary>
            Returns the variable index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILLocal.VariableType">
            <summary>
            Returns the variable type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ILLabel">
            <summary>
            Represents a label in MSIL.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILLabel.#ctor(System.Int32)">
            <summary>
            Constructs a new label.
            </summary>
            <param name="index">The label index.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILLabel.Index">
            <summary>
            Returns the assigned label index.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.LocalOperation">
            <summary>
            A local operation on a variable.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.LocalOperation.Load">
            <summary>
            Loads a local variable.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.LocalOperation.LoadAddress">
            <summary>
            Loads the address of a local variable.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.LocalOperation.Store">
            <summary>
            Stores a local variable.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ArgumentOperation">
            <summary>
            An operation on a function argument.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.ArgumentOperation.Load">
            <summary>
            Loads an argument.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.ArgumentOperation.LoadAddress">
            <summary>
            Loads the address of an argument.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.IILEmitter">
            <summary>
            Represents an emitter for MSIL code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable.
            </summary>
            <param name="type">The variable type.</param>
            <returns>The variable reference.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.DeclareLabel">
            <summary>
            Declares a new label.
            </summary>
            <returns>The label reference.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)">
            <summary>
            Marks the given label by associating the current
            instruction pointer with the jump label.
            </summary>
            <param name="label">The label to mark.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)">
            <summary>
            Emits a new local-variable operation.
            </summary>
            <param name="operation">The operation type.</param>
            <param name="local">The local variable reference.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)">
            <summary>
            Emits a new argument operation.
            </summary>
            <param name="operation">The operation type.</param>
            <param name="argumentIndex">The argument reference.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitCall(System.Reflection.MethodInfo)">
            <summary>
            Emits a new call to the given method.
            </summary>
            <param name="target">The target to call.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)">
            <summary>
            Emits a new object instruction.
            </summary>
            <param name="info">The constructor to call.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitAlloca(System.Int32)">
            <summary>
            Emits a local memory allocation.
            </summary>
            <param name="size">The size in bytes to allocate.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.String)">
            <summary>
            Emits a new constant.
            </summary>
            <param name="constant">The constant to emit.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int32)">
            <summary>
            Emits a new constant.
            </summary>
            <param name="constant">The constant to emit.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int64)">
            <summary>
            Emits a new constant.
            </summary>
            <param name="constant">The constant to emit.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Single)">
            <summary>
            Emits a new constant.
            </summary>
            <param name="constant">The constant to emit.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Double)">
            <summary>
            Emits a new constant.
            </summary>
            <param name="constant">The constant to emit.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary>
            Emits a new operation.
            </summary>
            <param name="opCode">The operation code.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)">
            <summary>
            Emits a new operation.
            </summary>
            <param name="opCode">The operation code.</param>
            <param name="label">The label argument.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary>
            Emits a new operation.
            </summary>
            <param name="opCode">The operation code.</param>
            <param name="type">The type argument.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <summary>
            Emits a new operation.
            </summary>
            <param name="opCode">The operation code.</param>
            <param name="field">The field argument.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])">
            <summary>
            Emits a switch instruction.
            </summary>
            <param name="labels">The jump targets.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Finish">
            <summary>
            Finishes the code generation process.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ILEmitter">
            <summary>
            A default IL emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.#ctor(System.Reflection.Emit.ILGenerator)">
            <summary>
            Constructs a new IL emitter.
            </summary>
            <param name="generator">The associated IL generator.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILEmitter.Generator">
            <summary>
            Returns the underlying generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.DeclareLocal(System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclareLocal(System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.DeclareLabel">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclareLabel"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitCall(System.Reflection.MethodInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitCall(System.Reflection.MethodInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitAlloca(System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitAlloca(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitConstant(System.String)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.String)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitConstant(System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitConstant(System.Int64)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int64)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitConstant(System.Single)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Single)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitConstant(System.Double)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Double)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Finish">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Finish"/>
        </member>
        <member name="T:ILGPU.Backends.IL.DebugILEmitter">
            <summary>
            Represents an IL emitter for debugging purposes.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.#ctor(System.IO.TextWriter)">
            <summary>
            Constructs a new IL emitter for debugging purposes.
            </summary>
            <param name="writer">The associated text writer.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.DebugILEmitter.Writer">
            <summary>
            Returns the associated stream writer.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.DeclareLocal(System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclareLocal(System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.DeclareLabel">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclareLabel"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitCall(System.Reflection.MethodInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitCall(System.Reflection.MethodInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitAlloca(System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitAlloca(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitConstant(System.String)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.String)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitConstant(System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitConstant(System.Int64)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int64)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitConstant(System.Single)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Single)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitConstant(System.Double)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Double)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Finish">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Finish"/>
        </member>
        <member name="T:ILGPU.Backends.IL.ILEmitterExtensions">
            <summary>
            General IL emitter extensions methods.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitterExtensions.GenerateEqualsAndHashCode(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            Generates hash code and equals functions for the given fields.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="fieldsToUse">All fields to use to compute the hash code.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitterExtensions.GenerateHashCode(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            Generates a new hash code function.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="fieldsToUse">All fields to use to compute the hash code.</param>
            <returns>The created hash code function.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitterExtensions.GenerateEquals(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            Generates a new typed equals method using the given fields.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="fieldsToUse">All fields to use to compute the hash code.</param>
            <returns>The created equals function.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitterExtensions.GenerateEquals(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo)">
            <summary>
            Generates a new object equals method using the given typed equals overload.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="equalsInfo">The typed equals function to call.</param>
            <returns>The created equals function.</returns>
        </member>
        <member name="T:ILGPU.Backends.IL.RuntimeMethods">
            <summary>
            A container for CPU-based runtime methods.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.RuntimeMethods.WaitForNextThreadIndex">
            <summary>
            Returns the main runtime wait and initialize method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.RuntimeMethods.BarrierMethod">
            <summary>
            Returns the main barrier method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.RuntimeMethods.MemoryBarrierMethod">
            <summary>
            Returns the memory barrier method.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.SkipCodeGenerationDefaultILBackend">
            <summary>
            The default IL backend that uses the original kernel method.
            However, it does not generate general IR code (debugging purposes).
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.SkipCodeGenerationDefaultILBackend.SharedMemoryPerKernel">
            <summary>
            The default amount of shared memory per kernel in bytes.
            </summary>
            <remarks>
            Note that this amount is only valid in the scope of the
            <see cref="F:ILGPU.ContextFlags.SkipCPUCodeGeneration"/> setting.
            </remarks>
        </member>
        <member name="M:ILGPU.Backends.IL.SkipCodeGenerationDefaultILBackend.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new IL backend.
            </summary>
            <param name="context">The context to use.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.SkipCodeGenerationDefaultILBackend.Compile``1(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``0)">
            <summary>
            Compiles a given compile unit with the specified entry point using
            the given kernel specialization.
            </summary>
            <typeparam name="TBackendHandler">The backend handler type.</typeparam>
            <param name="entry">The desired entry point.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="backendHandler">The backend handler.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="T:ILGPU.Backends.InvalidCodeGenerationException">
            <summary>
            An exception that is thrown in case of a fatal error in a backend.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.InvalidCodeGenerationException.#ctor">
            <summary>
            Constructs a new code generation exception.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.InvalidCodeGenerationException.#ctor(System.String)">
            <summary>
            Constructs a new code generation exception.
            </summary>
            <param name="message">The detailed error message.</param>
        </member>
        <member name="M:ILGPU.Backends.InvalidCodeGenerationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new code generation exception.
            </summary>
            <param name="message">The detailed error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ILGPU.Backends.InvalidCodeGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new code generation exception.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.NotSupportedIntrinsicException">
            <summary>
            An exception that is thrown in case of a not support intrinsic.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.NotSupportedIntrinsicException.#ctor">
            <summary>
            Constructs a new intrinsic exception.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.NotSupportedIntrinsicException.#ctor(ILGPU.IR.Method)">
            <summary>
            Constructs a new intrinsic exception.
            </summary>
            <param name="intrinsicMethod">
            The IR method that could not be implemented.
            </param>
        </member>
        <member name="M:ILGPU.Backends.NotSupportedIntrinsicException.#ctor(System.String)">
            <summary>
            Constructs a new intrinsic exception.
            </summary>
            <param name="intrinsicName">The name of the not supported intrinsic.</param>
        </member>
        <member name="M:ILGPU.Backends.NotSupportedIntrinsicException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new intrinsic exception.
            </summary>
            <param name="message">The detailed error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ILGPU.Backends.NotSupportedIntrinsicException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new intrinsic exception.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLArgumentMapper">
            <summary>
            Constructs mappings for CL kernels.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLArgumentMapper.SetKernelArgumentMethod">
            <summary>
            The method to set OpenCL kernel arguments.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler">
            <summary>
            Implements the actual argument mapping.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1">
            <summary>
            A source mapper.
            </summary>
            <typeparam name="TSource">The internal source type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1.#ctor(`0)">
            <summary>
            Constructs a new source mapper.
            </summary>
            <param name="source">The underlying source.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1.Source">
            <summary>
            Returns the associated source.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1.EmitLoadSource``1(``0@)">
            <summary>
            Emits a nested source address.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.#ctor(ILGPU.Backends.OpenCL.CLArgumentMapper,ILGPU.Backends.IL.ILLocal,ILGPU.Backends.IL.ILLocal,System.Int32)">
            <summary>
            Constructs a new mapping handler.
            </summary>
            <param name="parent">The parent mapper.</param>
            <param name="kernelLocal">
            The local variable holding the associated kernel reference.
            </param>
            <param name="resultLocal">
            The local variable holding the result API status.
            </param>
            <param name="startIndex">The start argument index.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.Parent">
            <summary>
            Returns the underlying ABI.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.KernelLocal">
            <summary>
            Returns the associated kernel local.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.ResultLocal">
            <summary>
            Returns the associated result variable which is
            used to accumulate all intermediate method return values.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.StartIndex">
            <summary>
            Returns the start argument index.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapArgument``2(``0@,``1,System.Int32)">
            <summary>
            Emits code to set an individual argument.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler">
            <summary>
            Implements the actual argument mapping.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1">
            <summary>
            A source mapper.
            </summary>
            <typeparam name="TSource">The internal source type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.#ctor(`0,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter@)">
            <summary>
            Constructs a new source mapper.
            </summary>
            <param name="source">The underlying source.</param>
            <param name="viewParameter">The view parameter.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.Source">
            <summary>
            Returns the associated source.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.Parameter">
            <summary>
            The associated parameter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.EmitLoadSource``1(``0@)">
            <summary>
            Converts a view into its native implementation form and maps it to
            an argument.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.#ctor(ILGPU.Backends.OpenCL.CLArgumentMapper,ILGPU.Backends.IL.ILLocal,ILGPU.Backends.IL.ILLocal,System.Int32)">
            <summary>
            Constructs a new mapping handler.
            </summary>
            <param name="parent">The parent mapper.</param>
            <param name="kernelLocal">
            The local variable holding the associated kernel reference.
            </param>
            <param name="resultLocal">
            The local variable holding the result API status.
            </param>
            <param name="startIndex">The start argument index.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.Parent">
            <summary>
            Returns the underlying ABI.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.KernelLocal">
            <summary>
            Returns the associated kernel local.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.ResultLocal">
            <summary>
            Returns the associated result variable which is
            used to accumulate all intermediate method return values.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.StartIndex">
            <summary>
            Returns the start argument index.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapViewArgument``2(``0@,``1@,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter@,System.Int32)">
            <summary>
            Maps a view input argument.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new OpenCL argument mapper.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.GetSizeOf(System.Type)">
            <summary>
            Returns the ABI size of the given managed type.
            </summary>
            <param name="type">The type.</param>
            <returns>The interop size in bytes.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.SetKernelArgument``2(``0@,ILGPU.Backends.IL.ILLocal,ILGPU.Backends.IL.ILLocal,System.Int32,``1@)">
            <summary>
            Emits code that sets an OpenCL kernel argument.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="kernelLocal">
            The local variable holding the associated kernel reference.
            </param>
            <param name="resultLocal">
            The local variable holding the result API status.
            </param>
            <param name="argumentIndex">The argument index.</param>
            <param name="source">The value source.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.Map``1(``0@,ILGPU.Backends.IL.ILLocal,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint)">
            <summary>
            Creates code that maps all parameters of the given entry point using
            OpenCL API calls.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The target emitter to write to.</param>
            <param name="kernel">A local that holds the kernel driver reference.</param>
            <param name="entryPoint">The entry point.</param>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLBackend">
            <summary>
            Represents an OpenCL source backend.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLBackend.CLAcceleratorSpecializer">
            <summary>
            The OpenCL accelerator specializer.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLBackend.MinimumVersion">
            <summary>
            Represents the minimum OpenCL C version that is required.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.#ctor(ILGPU.Context,ILGPU.Runtime.OpenCL.CLAcceleratorVendor)">
            <summary>
            Constructs a new OpenCL source backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="vendor">The associated major vendor.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLBackend.Vendor">
            <summary>
            Returns the associated major accelerator vendor.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLBackend.ArgumentMapper">
            <summary>
            Returns the associated <see cref="P:ILGPU.Backends.Backend.ArgumentMapper"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.CreateEntryPoint(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint"/> instance.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.CreateKernelBuilder(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@,ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs@)">
            <summary>
            Creates a new <see cref="T:System.Text.StringBuilder"/> and configures a
            <see cref="T:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs"/> instance.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.CreateFunctionCodeGenerator(ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas,ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.OpenCL.CLFunctionGenerator"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.CreateKernelCodeGenerator(ILGPU.IR.Analyses.AllocaKindInformation@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas,ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs)">
            <summary>
            Generates a new <see cref="T:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.CreateKernel(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.CompiledKernel.KernelInfo,System.Text.StringBuilder,ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.OpenCL.CLCompiledKernel"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator">
            <summary>
            Generates OpenCL source code out of IR values.
            </summary>
            <remarks>The code needs to be prepared for this code generator.</remarks>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs">
            <summary>
            Generation arguments for code-generator construction.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.Backend">
            <summary>
            Returns the underlying backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.TypeGenerator">
            <summary>
            Returns the associated type generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.EntryPoint">
            <summary>
            Returns the current entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.SharedAllocations">
            <summary>
            Returns all shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.DynamicSharedAllocations">
            <summary>
            Returns all dynamic shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.KernelTypeGenerator">
            <summary>
            Returns the current kernel-type generator.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator.MappedParameter">
            <summary>
            Represents a parameter that is mapped to OpenCL.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.MappedParameter.#ctor(ILGPU.Backends.VariableAllocator.Variable,System.String,ILGPU.IR.Values.Parameter)">
            <summary>
            Constructs a new mapped parameter.
            </summary>
            <param name="variable">The OpenCL variable.</param>
            <param name="clName">The name of the parameter in OpenCL code.</param>
            <param name="parameter">The source parameter.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.MappedParameter.Variable">
            <summary>
            Returns the associated OpenCL variable.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.MappedParameter.CLName">
            <summary>
            Returns the name of the parameter in OpenCL code.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.MappedParameter.Parameter">
            <summary>
            Returns the source parameter.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator.IParametersSetupLogic">
            <summary>
            Represents a parameter logic to setup function parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.IParametersSetupLogic.GetParameterType(ILGPU.IR.Values.Parameter)">
            <summary>
            Gets the corresponding OpenCL type for the given parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>The resulting OpenCL type representation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.IParametersSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary>
            Handles an intrinsic parameter and returns the
            associated allocated variable (if any).
            </summary>
            <param name="parameterOffset">
            The current intrinsic parameter index.
            </param>
            <param name="parameter">The intrinsic parameter.</param>
            <returns>The allocated variable (if any).</returns>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator.PhiBindingAllocator">
            <summary>
            Represents a specialized phi binding allocator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PhiBindingAllocator.#ctor(ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Constructs a new phi binding allocator.
            </summary>
            <param name="parent">The parent code generator.</param>
            <param name="blocks">The blocks to use.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.PhiBindingAllocator.Parent">
            <summary>
            Returns the parent code generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.PhiBindingAllocator.Dominators">
            <summary>
            Returns the referenced dominators.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PhiBindingAllocator.Process(ILGPU.IR.BasicBlock,ILGPU.IR.Analyses.Phis)">
            <summary>
            Does not perform any operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PhiBindingAllocator.Allocate(ILGPU.IR.BasicBlock,ILGPU.IR.Values.PhiValue)">
            <summary>
            Allocates a new phi value in the dominator block.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PhiBindingAllocator.TryGetPhis(ILGPU.IR.BasicBlock,System.Collections.Generic.List{ILGPU.Backends.VariableAllocator.Variable}@)">
            <summary>
            Tries to get phi variables to declare in the given block.
            </summary>
            <param name="block">The block.</param>
            <param name="phisToDeclare">The variables to declare (if any).</param>
            <returns>True, if there are some phi variables to declare.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GetMethodName(ILGPU.IR.Method)">
            <summary>
            Returns the OpenCL function name for the given function.
            </summary>
            <param name="method">The method.</param>
            <returns>The resolved OpenCL function name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GetParameterName(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the OpenCL parameter name for the given parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>The resolved OpenCL parameter name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.#ctor(ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Constructs a new code generator.
            </summary>
            <param name="args">The generator arguments.</param>
            <param name="method">The current method.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Backend">
            <summary>
            Returns the associated backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Allocas">
            <summary>
            Returns all local allocas.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.ImplementationProvider">
            <summary>
            Returns the current intrinsic provider for code-generation purposes.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Builder">
            <summary>
            Returns the associated string builder.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode">
            <summary>
            Generates PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateConstants(System.Text.StringBuilder)">
            <summary>
            Generates PTX constant declarations.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Merge(System.Text.StringBuilder)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator`1.Merge(`0)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.DeclareLabel">
            <summary>
            Declares a new label.
            </summary>
            <returns>The declared label.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.MarkLabel(System.String)">
            <summary>
            Marks the given label.
            </summary>
            <param name="label">The label to mark.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.SetupParameters``1(System.Text.StringBuilder,``0@,System.Int32)">
            <summary>
            Generates parameter declarations by writing them to the
            target builder provided.
            </summary>
            <typeparam name="TSetupLogic">
            The dependent code-generator type to use.
            </typeparam>
            <param name="logic">The type generator to use.</param>
            <param name="targetBuilder">The target builder to use.</param>
            <param name="paramOffset">The intrinsic parameter offset.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.DeclareAllocation(ILGPU.IR.Analyses.AllocaInformation@,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Setups a given allocation.
            </summary>
            <param name="allocaInfo">The single allocation to declare.</param>
            <param name="addressSpace">The target address space.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.SetupAllocations(ILGPU.IR.Analyses.AllocaKindInformation,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Setups local or shared allocations.
            </summary>
            <param name="allocas">The allocations to setup.</param>
            <param name="addressSpace">The source address space.local).</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BindSharedMemoryAllocation(ILGPU.IR.Analyses.AllocaKindInformation@)">
            <summary>
            Binds shared memory allocations.
            </summary>
            <param name="allocas">All allocations to bind.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCodeInternal">
            <summary>
            Generates code for all basic blocks.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter">
            <summary>
            Generates OpenCL source statements.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.FormattedFloatLiteralTokens">
            <summary>
            Indicates char tokens in a formatted floating-point literal that
            do not require a ".0f" suffix.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.#ctor(ILGPU.Backends.OpenCL.CLCodeGenerator)">
            <summary>
            Constructs a new statement emitter using the given target.
            </summary>
            <param name="codeGenerator">The parent code generator.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.CodeGenerator">
            <summary>
            Returns the associated code generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.BeginAppendTarget(ILGPU.Backends.VariableAllocator.Variable,System.Boolean)">
            <summary>
            Starts a target assignment.
            </summary>
            <param name="target">The target.</param>
            <param name="appendNew">True, to append a new variable target.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendDeclaration(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends a target declaration.
            </summary>
            <param name="target">The target declaration.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendTarget(ILGPU.Backends.VariableAllocator.Variable,System.Boolean)">
            <summary>
            Appends a target.
            </summary>
            <param name="target">The target.</param>
            <param name="newTarget">True, if this a new target.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendIndexedTarget(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends an indexer target.
            </summary>
            <param name="target">The target.</param>
            <param name="indexer">The indexer variable.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendFieldTarget(ILGPU.Backends.VariableAllocator.Variable,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Appends a field target.
            </summary>
            <param name="target">The target.</param>
            <param name="fieldSpan">The field span.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendIndexer(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends an indexer.
            </summary>
            <param name="indexer">The indexer variable.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendIndexer(System.String)">
            <summary>
            Appends an indexer.
            </summary>
            <param name="indexer">The indexer expression.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendPointerCast(System.String)">
            <summary>
            Appends an unsafe pointer cast expression.
            </summary>
            <param name="typeExpression">The type expression.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCast(System.String)">
            <summary>
            Appends an unsafe cast expression.
            </summary>
            <param name="typeExpression">The type expression.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendAtomicCast(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Appends a pointer cast to an intrinsic atomic pointer type.
            </summary>
            <param name="type">The arithmetic type to use.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCast(ILGPU.BasicValueType)">
            <summary>
            Appends a cast to the given basic value type.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCast(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Appends a cast to the given arithmetic basic value type.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCast(ILGPU.IR.Types.TypeNode)">
            <summary>
            Appends a cast to the given type.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCommand(System.String)">
            <summary>
            Appends the given raw command.
            </summary>
            <param name="command">The command to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendFieldName(System.Int32)">
            <summary>
            Appends the specified field name.
            </summary>
            <param name="fieldIndex">The field index.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendFieldViaPtr(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Appends the referenced field accessor.
            </summary>
            <param name="fieldAccess">The field access.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendField(System.Nullable{ILGPU.IR.Values.FieldSpan})">
            <summary>
            Appends the referenced field accessor.
            </summary>
            <param name="fieldAccess">The field access.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendField(ILGPU.IR.Values.FieldSpan)">
            <summary>
            Appends the referenced field accessor.
            </summary>
            <param name="fieldAccess">The field access.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendField(ILGPU.IR.Values.FieldAccessChain)">
            <summary>
            Appends a referenced field via an access chain.
            </summary>
            <param name="accessChain">The field access chain.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.OpenParen">
            <summary>
            Opens a parenthesis.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.CloseParen">
            <summary>
            Closes a parenthesis.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.BeginArguments">
            <summary>
            Starts a function-call argument list.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.EndArguments">
            <summary>
            Ends a function-call argument list.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendArgument">
            <summary>
            Appends code to finish an appended argument.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.Append(ILGPU.Backends.VariableAllocator.ConstantVariable)">
            <summary>
            Appends the given constant variable.
            </summary>
            <param name="variable">The variable to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.Append(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends the given variable directly.
            </summary>
            <param name="variable">The variable to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendArgument(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends the given register argument.
            </summary>
            <param name="argument">The argument to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendArgumentWithCast(ILGPU.Backends.VariableAllocator.Variable,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Appends the given register argument.
            </summary>
            <param name="argument">The argument to append.</param>
            <param name="valueType">The value type.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendArgumentAddress(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends the address of the given register argument.
            </summary>
            <param name="argument">The argument to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendArgumentAddressWithCast(ILGPU.Backends.VariableAllocator.Variable,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Appends the address of the given register argument with a cast.
            </summary>
            <param name="argument">The argument to append.</param>
            <param name="valueType">The value type.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendOperation(System.String)">
            <summary>
            Append the given operation.
            </summary>
            <param name="operation">The operation to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendConstant(System.Int64)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendConstant(System.UInt64)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendConstant(System.Single)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendConstant(System.Double)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.Finish">
            <summary>
            Finishes the current statement.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Indent">
            <summary>
            The current indentation level.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PushIndent">
            <summary>
            Increases the current indentation level.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PopIndent">
            <summary>
            Decreases the current indentation level.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.AppendIndent">
            <summary>
            Appends the current indentation level to the builder.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PushAndAppendIndent">
            <summary>
            Pushes the current indentation level and appends it to the builder.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Declare(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Declares a variable
            </summary>
            <param name="target">The target variable to declare.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GotoStatement(ILGPU.IR.BasicBlock)">
            <summary>
            Emits a new goto statement to the given target block.
            </summary>
            <param name="block">The target block to jump to.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Move(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Emits a move operation.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <param name="source">The source variable to assign to.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Backends.VariableAllocator.Variable,System.Nullable{ILGPU.IR.Values.FieldAccess})">
            <summary>
            Begins a new statement.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <param name="fieldAccess">The field access to use.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Backends.VariableAllocator.Variable,ILGPU.IR.Values.FieldAccess)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <param name="fieldAccess">The field access to use.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <param name="indexer">The indexer variable to use.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Backends.VariableAllocator.Variable,System.String)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <param name="command">The initial command to emit.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(System.String)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="command">The initial command to emit.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.ReturnTerminator)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.ReturnTerminator)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.UnconditionalBranch)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.UnconditionalBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.IfBranch)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IfBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.SwitchBranch)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SwitchBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.MethodCall)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.MethodCall)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.Parameter)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Parameter)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.PhiValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PhiValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.UnaryArithmeticValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.UnaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.BinaryArithmeticValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.BinaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.TernaryArithmeticValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.TernaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.CompareValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.CompareValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.ConvertValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.ConvertValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.PointerCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PointerCast)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.FloatAsIntCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.FloatAsIntCast)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsFloatCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsFloatCast)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.IfPredicate)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IfPredicate)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.SwitchPredicate)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SwitchPredicate)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.GenericAtomic)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GenericAtomic)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.AtomicCAS)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AtomicCAS)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.Alloca)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Alloca)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.MemoryBarrier)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.MemoryBarrier)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.Load)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Load)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.Store)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Store)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadFieldAddress)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadFieldAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.PrimitiveValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PrimitiveValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.StringValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.StringValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.NullValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.NullValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.StructureValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.StructureValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.GetField)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GetField)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.SetField)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SetField)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.GridIndexValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GridIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupIndexValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.GridDimensionValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GridDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupDimensionValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpSizeValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpSizeValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.LaneIdxValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LaneIdxValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.PredicateBarrier)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PredicateBarrier)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.Barrier)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Barrier)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.Broadcast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Broadcast)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpShuffle)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpShuffle)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.SubWarpShuffle)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SubWarpShuffle)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.DebugOperation)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.DebugOperation)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadElementAddress)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadElementAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.AddressSpaceCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AddressSpaceCast)"/>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCompiledKernel">
            <summary>
            Represents a compiled kernel in OpenCL source form.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCompiledKernel.EntryName">
            <summary>
            The entry name of the kernel function.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCompiledKernel.#ctor(ILGPU.Context,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint,ILGPU.Backends.CompiledKernel.KernelInfo,System.String,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Constructs a new compiled kernel in OpenCL source form.
            </summary>
            <param name="context">The associated context.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="info">Detailed kernel information.</param>
            <param name="source">The source code.</param>
            <param name="version">The OpenCL C version.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCompiledKernel.Source">
            <summary>
            Returns the OpenCL source code.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCompiledKernel.CVersion">
            <summary>
            Returns the used OpenCL C version.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCompiledKernel.EntryPoint">
            <summary>
            Returns the internally used entry point.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCVersion">
            <summary>
            Represents an OpenCL C version.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.CL10">
            <summary>
            The OpenCL C version 1.0.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.CL11">
            <summary>
            The OpenCL C version 1.1.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.CL12">
            <summary>
            The OpenCL C version 1.2.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.CL20">
            <summary>
            The OpenCL C version 2.0.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.VersionRegex">
            <summary>
            The internal regex that is used to parse OpenCL C versions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.TryParse(System.String,ILGPU.Backends.OpenCL.CLCVersion@)">
            <summary>
            Tries to parse the given string expression into an OpenCL C version.
            </summary>
            <param name="expression">The expression to parse.</param>
            <param name="version">The parsed version (if any).</param>
            <returns>
            True, if the given expression could be parsed into an OpenCL C version.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new OpenCL C version.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCVersion.Major">
            <summary>
            The major OpenCL C Version.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCVersion.Minor">
            <summary>
            The minor OpenCL C Version.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.ToString">
            <summary>
            Returns the OpenCL C string representation that is compatible
            with the OpenCL API.
            </summary>
            <returns>The string representation of this OpenCL C version.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.op_LessThan(ILGPU.Backends.OpenCL.CLCVersion,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Returns true if the first version is smaller than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is smaller than the second one.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.op_GreaterThan(ILGPU.Backends.OpenCL.CLCVersion,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Returns true if the first version is greater than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is greater than the second one.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.op_LessThanOrEqual(ILGPU.Backends.OpenCL.CLCVersion,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Returns true if the first version is smaller than or equal to the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is smaller than the second one.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.op_GreaterThanOrEqual(ILGPU.Backends.OpenCL.CLCVersion,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Returns true if the first version is greater than or equal to the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is greater than the second one.</returns>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLFunctionGenerator">
            <summary>
            Represents a function generator for helper device functions.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLFunctionGenerator.MethodFlagsToSkip">
            <summary>
            Methods with these flags will be skipped during code generation.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLFunctionGenerator.FunctionParameterSetupLogic">
            <summary>
            A specialized function setup logic for parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.FunctionParameterSetupLogic.#ctor(ILGPU.Backends.OpenCL.CLTypeGenerator)">
            <summary>
            Constructs a new specialized function setup logic.
            </summary>
            <param name="typeGenerator">The parent type generator.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLFunctionGenerator.FunctionParameterSetupLogic.TypeGenerator">
            <summary>
            Returns the parent type generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.FunctionParameterSetupLogic.GetParameterType(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the internal type for the given parameter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.FunctionParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary>
            This setup logic does not support intrinsic parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.#ctor(ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Creates a new OpenCL function generator.
            </summary>
            <param name="args">The generation arguments.</param>
            <param name="method">The current method.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.GenerateHeaderStub(System.Text.StringBuilder)">
            <summary>
            Generates a header stub for the current method.
            </summary>
            <param name="builder">The target builder to use.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in OpenCL code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.GenerateCode">
            <summary>
            Generates OpenCL code.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLInstructions">
            <summary>
            Contains general OpenCL instructions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetCompareOperation(ILGPU.IR.Values.CompareKind)">
            <summary>
            Resolves a compare operation.
            </summary>
            <param name="kind">The compare kind.</param>
            <returns>The resolved compare operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetAddressSpacePrefix(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Resolves an address-space-cast prefix.
            </summary>
            <param name="addressSpace">The address space.</param>
            <returns>The resolved address-space prefix.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.TryGetAddressSpaceCast(ILGPU.IR.MemoryAddressSpace,System.String@)">
            <summary>
            Trues to resolve an address-space-cast operation.
            </summary>
            <param name="addressSpace">The target address space to convert to.</param>
            <param name="operation">The resolved address-space-cast operation.</param>
            <returns>True, if an operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetArithmeticOperation(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.ArithmeticBasicValueType,System.Boolean@)">
            <summary>
            Resolves an unary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="basicValueType">The arithmetic basic value type.</param>
            <param name="isFunction">
            True, if the resolved operation is a function call.
            </param>
            <returns>The resolved arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetArithmeticOperation(ILGPU.IR.Values.BinaryArithmeticKind,System.Boolean,System.Boolean@)">
            <summary>
            Resolves a binary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="isFloat">True, if this is a floating-point operation.</param>
            <param name="isFunction">
            True, if the resolved operation is a function call.
            </param>
            <returns>The resolved arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.TryGetArithmeticOperation(ILGPU.IR.Values.TernaryArithmeticKind,System.Boolean,System.String@)">
            <summary>
            Tries to resolve a ternary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="isFloat">True, if this is a floating-point operation.</param>
            <param name="operation">The resolved operation.</param>
            <returns>True, if the operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetAtomicOperation(ILGPU.IR.Values.AtomicKind)">
            <summary>
            Resolves an atomic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <returns>The resolved atomic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetBarrier(ILGPU.IR.Values.BarrierKind)">
            <summary>
            Resolves a barrier operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved barrier operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.TryGetPredicateBarrier(ILGPU.IR.Values.PredicateBarrierKind,System.String@)">
            <summary>
            Tries to resolve a predicate-barrier operation.
            </summary>
            <param name="operation">The resolved memory-barrier operation.</param>
            <param name="kind">The barrier kind.</param>
            <returns>True, if the operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetMemoryBarrier(ILGPU.IR.Values.MemoryBarrierKind,System.String@)">
            <summary>
            Tries to resolve a memory-barrier operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <param name="memoryScope">The resolved memory-barrier scope.</param>
            <returns>True, if the operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetMemoryFenceFlags(System.Boolean)">
            <summary>
            Resolves memory-fence flags.
            </summary>
            <param name="isGlobal">True, if the flags represent global memory.</param>
            <returns>The resolved fence flags.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.TryGetShuffleOperation(ILGPU.Runtime.OpenCL.CLAcceleratorVendor,ILGPU.IR.Values.ShuffleKind,System.String@)">
            <summary>
            Tries to resolve a shuffle operation.
            </summary>
            <param name="vendor">The accelerator vendor.</param>
            <param name="kind">The shuffle kind.</param>
            <param name="operation">The resolved shuffle operation.</param>
            <returns>True, if the operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetBroadcastOperation(ILGPU.IR.Values.BroadcastKind)">
            <summary>
            Resolves a broadcast operation.
            </summary>
            <param name="kind">The broadcast kind.</param>
            <returns>The resolved broadcast operation.</returns>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.AddressOfOperation">
            <summary>
            An address-of operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.DereferenceOperation">
            <summary>
            A dereference operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.AssignmentOperation">
            <summary>
            An assignment operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.SelectOperation1">
            <summary>
            The first part of a select operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.SelectOperation2">
            <summary>
            The second part of a select operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.StructTypePrefix">
            <summary>
            A structure type prefix.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.TypeDefStatement">
            <summary>
            A typedef statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.IfStatement">
            <summary>
            An if statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.ElseStatement">
            <summary>
            An else statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.BreakStatement">
            <summary>
            A break statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.ContinueStatement">
            <summary>
            A continue statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.ReturnStatement">
            <summary>
            A return statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GotoStatement">
            <summary>
            A goto statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.AtomicLoadOperation">
            <summary>
            A atomic load operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.AtomicStoreOperation">
            <summary>
            A atomic store operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.AtomicCASOperation">
            <summary>
            An atomic CAS operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.IntAsFloat">
            <summary>
            An int-as-float operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.LongAsDouble">
            <summary>
            An long-as-double operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.FloatAsInt">
            <summary>
            A float-as-int operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.DoubleAsLong">
            <summary>
            A double-as-long operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetGlobalId">
            <summary>
            Resolves the current global work-item id.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetGridSize">
            <summary>
            Resolves the current grid size.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetGridIndex">
            <summary>
            Resolves the current grid index.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetGroupSize">
            <summary>
            Resolves the current group size.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetGroupIndex">
            <summary>
            Resolves the current group index.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetWarpSize">
            <summary>
            Resolves the current warp size.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetWarpIndexOperation">
            <summary>
            Resolves the current warp index.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetLaneIndexOperation">
            <summary>
            Resolves the current lane index.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLInstructions.CLUnaryCategory">
            <summary>
            Identifies the permitted value types for unary arithmetic operations.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.CLUnaryCategory.Boolean">
            <summary>
            Unary operation on booleans.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.CLUnaryCategory.Int">
            <summary>
            Unary operation on signed or unsigned integers.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.CLUnaryCategory.Float">
            <summary>
            Unary operation on 32-bit or 64-bit floats.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLIntrinsic">
            <summary>
            Represents a specific handler for user defined code-generation functionality
            that is compatible with the <see cref="T:ILGPU.Backends.OpenCL.CLBackend"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLIntrinsic.Handler">
            <summary>
            Represents the handler delegate type of custom code-generation handlers.
            </summary>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsic.#ctor(System.Reflection.MethodInfo,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new OpenCL intrinsic that can handle all architectures.
            </summary>
            <param name="targetMethod">The associated target method.</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsic.#ctor(System.Type,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new OpenCL intrinsic that can handle all architectures.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsic.#ctor(System.Type,System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new OpenCL intrinsic that can handle all architectures.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="methodName">The target method name (or null).</param>
            <param name="mode">The code-generator mode.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsic.CanHandleBackend(ILGPU.Backends.Backend)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.CanHandleBackend(ILGPU.Backends.Backend)"/>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLIntrinsics">
            <summary>
            Implements and initializes OpenCL intrinsics.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLIntrinsics.CLIntrinsicsType">
            <summary>
            The CLIntrinsics type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsics.CreateIntrinsic(System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Creates a new CL intrinsic.
            </summary>
            <param name="name">The name of the intrinsic.</param>
            <param name="mode">The implementation mode.</param>
            <returns>The created intrinsic.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsics.Register(ILGPU.IR.Intrinsics.IntrinsicImplementationManager)">
            <summary>
            Registers all CL intrinsics with the given manager.
            </summary>
            <param name="manager">The target implementation manager.</param>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLIntrinsics.AddFloat">
            <summary>
            Represents an atomic add operation of type float.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsics.AtomicAddF32(System.Single@,System.Single)">
            <summary>
            A software implementation for atomic adds on 32-bit floats.
            </summary>
            <param name="target">The target address.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLIntrinsics.AddDouble">
            <summary>
            Represents an atomic add operation of type double.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsics.AtomicAddF64(System.Double@,System.Double)">
            <summary>
            A software implementation for atomic adds on 64-bit floats.
            </summary>
            <param name="target">The target address.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsics.BarrierPopCount(System.Boolean)">
            <summary>
            A software implementation to simulate barriers with pop count.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator">
            <summary>
            Represents a function generator for main kernel functions.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelViewNameFormat">
            <summary>
            The string format of a kernel-view parameter name.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.DynamicSharedMemoryParamName">
            <summary>
            The parameter name of dynamic shared memory parameter.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic">
            <summary>
            A specialized kernel setup logic for parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.#ctor(ILGPU.Backends.OpenCL.CLKernelFunctionGenerator)">
            <summary>
            Constructs a new specialized kernel setup logic.
            </summary>
            <param name="generator">The parent generator.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.IndexVariable">
            <summary>
            Returns the main index variable.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.LengthVariable">
            <summary>
            Returns the length variable of implicitly grouped kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.Parent">
            <summary>
            Returns the parent type generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.GetParameterType(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the associated kernel type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary>
            Updates index and length variables.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.globallySharedAllocations">
            <summary>
            All globally accessible shared allocations inside the kernel module.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.#ctor(ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Creates a new OpenCL function generator.
            </summary>
            <param name="args">The generation arguments.</param>
            <param name="method">The current method.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.EntryPoint">
            <summary>
            Returns the associated entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelTypeGenerator">
            <summary>
            The current kernel type generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.DynamicSharedAllocations">
            <summary>
            All dynamic shared memory allocations.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in OpenCL code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.GenerateCode">
            <summary>
            Generates OpenCL code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.GenerateArgumentMapping">
            <summary>
            Generates code that wires kernel-specific arguments into internal arguments.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.EmitImplicitKernelIndex(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable,System.Nullable{ILGPU.IR.Values.FieldAccess},System.Int32)">
            <summary>
            Emits an implicit kernel index computation.
            </summary>
            <param name="indexVariable">The index variable to write to.</param>
            <param name="boundsVariable">The associated bounds variable.</param>
            <param name="fieldAccess">The access chain to use.</param>
            <param name="dimension">The parameter dimension.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.SetupKernelIndex(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Setups the current kernel indices.
            </summary>
            <param name="indexVariable">The main kernel index variable.</param>
            <param name="lengthVariable">
            The length variable of implicitly grouped kernels.
            </param>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLKernelTypeGenerator">
            <summary>
            Generates OpenCL type structures that can be used for data marshaling data.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.KernelTypeNameSuffix">
            <summary>
            The string format of a single structure-like type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.CLKernelTypeConverter">
            <summary>
            Replaces pointers with an integer index offsets.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.CLKernelTypeConverter.ConvertType``1(``0,ILGPU.IR.Types.PointerType)">
            <summary>
            Converts a pointer to an index argument for kernel-argument mapping.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.CLKernelTypeConverter.GetNumFields(ILGPU.IR.Types.PointerType)">
            <summary>
            The result will consume one field.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.#ctor(ILGPU.Backends.OpenCL.CLTypeGenerator,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint)">
            <summary>
            Constructs a new type generator and defines all internal types for the
            OpenCL backend.
            </summary>
            <param name="typeGenerator">The parent type generator.</param>
            <param name="entryPoint">The current entry point.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.TypeGenerator">
            <summary>
            Returns the parent type generator to use.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.EntryPoint">
            <summary>
            Returns the associated entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.ParameterOffset">
            <summary>
            Returns the current parameter offset.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.Item(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the associated OpenCL type name.
            </summary>
            <param name="parameter">The IR parameter.</param>
            <returns>The resolved OpenCL type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.Register(ILGPU.IR.Values.Parameter)">
            <summary>
            Registers a new kernel parameter.
            </summary>
            <param name="parameter">The parameter to register.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.GenerateTypeDeclarations(System.Text.StringBuilder)">
            <summary>
            Generate all forward type declarations.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.GenerateTypeDefinitions(System.Text.StringBuilder)">
            <summary>
            Generate all type definitions.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.ICLTypeGenerator">
            <summary>
            An abstract type generator that can emit type declarations and definitions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.ICLTypeGenerator.GenerateTypeDeclarations(System.Text.StringBuilder)">
            <summary>
            Generate all forward type declarations.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.ICLTypeGenerator.GenerateTypeDefinitions(System.Text.StringBuilder)">
            <summary>
            Generate all type definitions.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLTypeGenerator">
            <summary>
            Generates internal OpenCL type structures that are used inside kernels.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.TypeNameFormat">
            <summary>
            The string format of a single structure-like type.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.FieldNameFormat">
            <summary>
            The string format of a single structure field.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.BasicTypeMapping">
            <summary>
            Maps basic value types to OpenCL language types.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.ArtihmeticTypeMapping">
            <summary>
            Maps arithmetic-basic value types to OpenCL language types.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.AtomicTypeMapping">
            <summary>
            Maps arithmetic-basic value types to atomic OpenCL language types.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetBasicValueType(ILGPU.BasicValueType)">
            <summary>
            Resolves the given basic-value type to an OpenCL type name.
            </summary>
            <param name="basicValueType">The basic-value type to resolve.</param>
            <returns>The resolved OpenCL type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetBasicValueType(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves the given basic-value type to an OpenCL type name.
            </summary>
            <param name="basicValueType">The basic-value type to resolve.</param>
            <returns>The resolved OpenCL type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetAtomicType(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves the given basic-value type to an atomic OpenCL type name.
            </summary>
            <param name="basicValueType">The basic-value type to resolve.</param>
            <returns>The resolved atomic OpenCL type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetTypeName(ILGPU.IR.Types.TypeNode)">
            <summary>
            Resolves a unique type name for the given node.
            </summary>
            <param name="typeNode">The type node.</param>
            <returns>The unique type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetFieldName(System.Int32)">
            <summary>
            Resolves a unique field name for the field index.
            </summary>
            <param name="fieldIndex">The field index.</param>
            <returns>The unique field name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.#ctor(ILGPU.IR.Types.IRTypeContext)">
            <summary>
            Constructs a new type generator and defines all required types
            in OpenCL during construction.
            </summary>
            <param name="typeContext">The associated type context.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.TypeContext">
            <summary>
            Returns the underlying type context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.Item(ILGPU.IR.Types.TypeNode)">
            <summary>
            Returns the associated OpenCL type name.
            </summary>
            <param name="typeNode">The internal IR type node.</param>
            <returns>The resolved OpenCL type name.</returns>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.Item(System.Type)">
            <summary>
            Returns the associated OpenCL type name.
            </summary>
            <param name="type">The managed type to use.</param>
            <returns>The resolved OpenCL type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetOrCreateType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Gets or creates the given type in OpenCL.
            </summary>
            <param name="typeNode">The type to declare.</param>
            <returns>The declared type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GenerateTypeDeclarations(System.Text.StringBuilder)">
            <summary>
            Generate all forward type declarations.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GenerateTypeDefinitions(System.Text.StringBuilder)">
            <summary>
            Generate all type definitions.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GenerateStructureDefinition(ILGPU.IR.Types.StructureType,System.String,System.Text.StringBuilder)">
            <summary>
            Generates a new structure definition in OpenCL format.
            </summary>
            <param name="structureType">The structure type.</param>
            <param name="typeName">The type name.</param>
            <param name="builder">The target builder to write to.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLVariableAllocator">
            <summary>
            Represents a specialized OpenCL variable allocator.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLVariableAllocator.GloballySharedMemoryVariable">
            <summary>
            A virtual globally accessible shared memory variable.
            </summary>
            <remarks>
            Instances of this class will not return valid variable ids.
            </remarks>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GloballySharedMemoryVariable.#ctor(ILGPU.IR.Analyses.AllocaInformation@)">
            <summary>
            Constructs a new variable instance.
            </summary>
            <param name="allocaInfo">The source allocation info.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLVariableAllocator.GloballySharedMemoryVariable.Name">
            <summary>
            Returns the allocation name.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GloballySharedMemoryVariable.ToString">
            <summary>
            Returns the allocation name.
            </summary>
            <returns>The allocation name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GetSharedMemoryAllocationVariable(ILGPU.IR.Analyses.AllocaInformation@)">
            <summary>
            Returns a shared memory allocation variable reference.
            </summary>
            <param name="allocaInfo">The source allocation info.</param>
            <returns>
            The allocation variable reference pointing to the allocation object.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GetSharedMemoryAllocationName(ILGPU.IR.Analyses.AllocaInformation@)">
            <summary>
            Returns a unique shared memory allocation name.
            </summary>
            <param name="allocaInfo">The source allocation info.</param>
            <returns>The allocation name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.#ctor(ILGPU.Backends.OpenCL.CLTypeGenerator)">
            <summary>
            Constructs a new register allocator.
            </summary>
            <param name="typeGenerator">The associated type generator.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLVariableAllocator.TypeGenerator">
            <summary>
            Returns the associated type generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GetVariableType(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Resolves the type name of the given variable.
            </summary>
            <param name="variable">The variable.</param>
            <returns>The resolved variable type name.</returns>
        </member>
        <member name="T:ILGPU.Backends.IPhiBindingAllocator">
            <summary>
            An abstract binding allocator for the class <see cref="T:ILGPU.Backends.PhiBindings"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IPhiBindingAllocator.Process(ILGPU.IR.BasicBlock,ILGPU.IR.Analyses.Phis)">
            <summary>
            Processes all phis that are declared in the given node.
            </summary>
            <param name="block">The current block.</param>
            <param name="phis">The phi nodes to process.</param>
        </member>
        <member name="M:ILGPU.Backends.IPhiBindingAllocator.Allocate(ILGPU.IR.BasicBlock,ILGPU.IR.Values.PhiValue)">
            <summary>
            Allocates the given phi node.
            </summary>
            <param name="block">The current block.</param>
            <param name="phiValue">The phi node to allocate.</param>
        </member>
        <member name="T:ILGPU.Backends.PhiBindings">
            <summary>
            Maps phi nodes to basic blocks in order to emit move command during
            the final code generation phase.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PhiBindings.PhiBindingCollection">
            <summary>
            Represents a readonly list of phi entries.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PhiBindings.PhiBindingCollection.Enumerator">
            <summary>
            An enumerator to enumerate all entries in this collection.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.Enumerator.#ctor(ILGPU.Backends.PhiBindings.PhiBindingCollection@)">
            <summary>
            Constructs a new entry enumerator.
            </summary>
            <param name="collection">The parent collection.</param>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings.PhiBindingCollection.Enumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings.PhiBindingCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.#ctor(System.Collections.Generic.List{System.ValueTuple{ILGPU.IR.Value,ILGPU.IR.Values.PhiValue}})">
            <summary>
            Constructs a new parameter collection.
            </summary>
            <param name="valueList">The list of all values.</param>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings.PhiBindingCollection.Count">
            <summary>
            Returns the number of entries.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings.PhiBindingCollection.Item(System.Int32)">
            <summary>
            Returns the i-th entry.
            </summary>
            <param name="index">The index of the entry to get.</param>
            <returns>The desired entry.</returns>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all entries in this collection.
            </summary>
            <returns>
            An enumerator to enumerate all entries in this collection.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.System#Collections#Generic#IEnumerable{(ILGPU#IR#Value,ILGPU#IR#Values#PhiValue)}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.Backends.PhiBindings.ListProvider">
            <summary>
            Provides new intermediate list instances.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.ListProvider.GetValue(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.List`1"/> instance.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.Create``3(ILGPU.IR.BasicBlockCollection{``0,``1}@,``2)">
            <summary>
            Creates a new phi bindings mapping.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <typeparam name="TAllocator">The custom allocator type.</typeparam>
            <param name="collection">The source collection.</param>
            <param name="allocator">The allocator to use.</param>
            <returns>The created phi bindings.</returns>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.#ctor(ILGPU.IR.BasicBlockMap{System.Collections.Generic.List{System.ValueTuple{ILGPU.IR.Value,ILGPU.IR.Values.PhiValue}}}@)">
            <summary>
            Constructs new phi bindings.
            </summary>
            <param name="mapping">The phi mapping.</param>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.TryGetBindings(ILGPU.IR.BasicBlock,ILGPU.Backends.PhiBindings.PhiBindingCollection@)">
            <summary>
            Tries to resolve phi bindings for the given block.
            </summary>
            <param name="block">The block.</param>
            <param name="bindings">The resolved bindings (if any)</param>
            <returns>True, if phi bindings could be resolved.</returns>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.LowerPointerViews">
            <summary>
            Lowers view instances into pointer view implementations.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.LowerPointerViews.PointerViewLowering">
            <summary>
            Converts view types into pointer-based structure types.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.PointerViewLowering.GetNumFields(ILGPU.IR.Types.ViewType)">
            <summary>
            Returns the number of fields per view type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.PointerViewLowering.ConvertType``1(``0,ILGPU.IR.Types.ViewType)">
            <summary>
            Converts the given view type into a structure with two elements.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.NewView)">
            <summary>
            Lowers set field operations into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.GetViewLength)">
            <summary>
            Lowers set field operations into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.SubViewValue)">
            <summary>
            Lowers set field operations into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.AddressSpaceCast)">
            <summary>
            Lowers set field operations into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.ViewCast)">
            <summary>
            Lowers set field operations into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.LoadElementAddress)">
            <summary>
            Lowers set field operations into separate SSA values.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PointerViews.LowerPointerViews.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.#cctor">
            <summary>
            Initializes all rewriter patterns.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.#ctor">
            <summary>
            Constructs a new pointer view lowering transformation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.CreateLoweringConverter(ILGPU.IR.Method.Builder)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.PointerViews.LowerPointerViews.PointerViewLowering"/> converter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the pointer view lowering transformation.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.ViewImplementation">
            <summary>
            General extensions for pointer-based array view implementations.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PointerViews.ViewImplementation.ImplementationType">
            <summary>
            The generic implementation type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetImplementationType(System.Type)">
            <summary>
            Returns a specialized implementation type.
            </summary>
            <param name="elementType">The view element type.</param>
            <returns>The implement type.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.AppendImplementationTypes``1(``0)">
            <summary>
            Append all implementation-specific element types.
            </summary>
            <typeparam name="TCollection">The target collection type.</typeparam>
            <param name="collection">The target element collection.</param>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetViewConstructor(System.Type)">
            <summary>
            Returns a specialized view constructor.
            </summary>
            <param name="implType">The view implementation type.</param>
            <returns>The resolved view constructor.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetPtrField(System.Type)">
            <summary>
            Returns the pointer field of a view implementation.
            </summary>
            <param name="implType">The view implementation type.</param>
            <returns>The resolved field.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetLengthField(System.Type)">
            <summary>
            Returns the length field of a view implementation.
            </summary>
            <param name="implType">The view implementation type.</param>
            <returns>The resolved field.</returns>
        </member>
        <member name="F:ILGPU.Backends.PointerViews.ViewImplementation.GetNativePtrMethodInfo">
            <summary>
            The method handle of the <see cref="M:ILGPU.Backends.PointerViews.ViewImplementation.GetNativePtrMethod(System.Type)"/> method.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetNativePtr``1(ILGPU.ArrayView{``0}@)">
            <summary>
            Gets the associated native pointer that is stored inside the given view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view type.</param>
            <returns>The underlying native pointer.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetNativePtrMethod(System.Type)">
            <summary>
            Gets the native-pointer method for the given element type.
            </summary>
            <param name="elementType">The element type.</param>
            <returns>The instantiated native method.</returns>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.ViewArgumentMapper">
            <summary>
            Maps array views to pointer implementations.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewArgumentMapper.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new view argument mapper.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewArgumentMapper.MapViewType(System.Type,System.Type)">
            <summary>
            Maps an internal view type to a pointer implementation type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewArgumentMapper.MapViewInstance``3(``0@,System.Type,``1,``2)">
            <summary>
            Maps an internal view instance to a pointer instance.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.ViewImplementation`1">
            <summary>
            Represents an array view that is implemented with the help of
            native pointers.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:ILGPU.Backends.PointerViews.ViewImplementation`1.Ptr">
            <summary>
            The base pointer.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PointerViews.ViewImplementation`1.Length">
            <summary>
            The length.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation`1.#ctor(System.Void*,System.Int64)">
            <summary>
            Constructs a new array view implementation.
            </summary>
            <param name="ptr">The base pointer.</param>
            <param name="length">The length information.</param>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation`1.#ctor(ILGPU.ArrayView{`0})">
            <summary>
            Constructs a new array view implementation.
            </summary>
            <param name="source">The abstract source view.</param>
        </member>
        <member name="P:ILGPU.Backends.PointerViews.ViewImplementation`1.Item(ILGPU.Index1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.Backends.PointerViews.ViewImplementation`1.Item(ILGPU.LongIndex1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation`1.LoadElementAddress(ILGPU.Index1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation`1.LoadElementAddress(ILGPU.LongIndex1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTXArchitecture">
            <summary>
            Represents a PTX architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_30">
            <summary>
            The 3.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_32">
            <summary>
            The 3.2 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_35">
            <summary>
            The 3.5 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_37">
            <summary>
            The 3.7 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_50">
            <summary>
            The 5.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_52">
            <summary>
            The 5.2 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_53">
            <summary>
            The 5.3 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_60">
            <summary>
            The 6.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_61">
            <summary>
            The 6.1 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_62">
            <summary>
            The 6.2 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_70">
            <summary>
            The 7.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_72">
            <summary>
            The 7.2 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_75">
            <summary>
            The 7.5 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_80">
            <summary>
            The 8.0 architecture.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTXArchitectureUtils">
            <summary>
            Utilities for the <see cref="T:ILGPU.Backends.PTXArchitecture"/> enumeration.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitectureUtils.ArchitectureLookup">
            <summary>
            Maps major and minor versions of Cuda devices to their corresponding PTX
            architecture.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTXArchitectureUtils.GetArchitecture(System.Int32,System.Int32)">
            <summary>
            Resolves the PTX architecture for the given major and minor versions.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <returns>The resolved PTX version.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXArgumentMapper">
            <summary>
            Constructs mappings for PTX kernels.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXArgumentMapper.MappingHandler">
            <summary>
            Implements the actual argument mapping.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXArgumentMapper.MappingHandler.#ctor(ILGPU.Backends.IL.ILLocal,System.Int32)">
            <summary>
            Constructs a new mapping handler.
            </summary>
            <param name="argumentLocal">The unsafe target argument array.</param>
            <param name="argumentOffset">The target argument offset.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXArgumentMapper.MappingHandler.ArgumentLocal">
            <summary>
            Returns the associated unsafe kernel argument local.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXArgumentMapper.MappingHandler.ArgumentOffset">
            <summary>
            Returns the argument offset.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXArgumentMapper.MappingHandler.MapArgument``2(``0@,``1,System.Int32)">
            <summary>
            Maps a single PTX argument.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXArgumentMapper.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new PTX argument mapper.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXArgumentMapper.StoreKernelLength``1(``0@,ILGPU.Backends.IL.ILLocal)">
            <summary>
            Stores the kernel length argument of an implicitly grouped kernel.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The target emitter to write to.</param>
            <param name="argumentBuffer">
            The current local holding the native argument pointers.
            </param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXArgumentMapper.Map``1(``0@,ILGPU.Backends.EntryPoints.EntryPoint)">
            <summary>
            Creates code that maps the given parameter specification to
            a compatible representation.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The target emitter to write to.</param>
            <param name="entryPoint">The entry point.</param>
            <returns>A local that stores the native kernel argument pointers.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXBackend">
            <summary>
            Represents a PTX (Cuda) backend.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXBackend.WarpSize">
            <summary>
            Returns the warp size.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXBackend.DefaultGlobalMemoryAlignment">
            <summary>
            Returns the default global memory alignment in bytes.
            </summary>
            <remarks>
            See Cuda documentation section 5.3.2.
            </remarks>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXBackend.PTXAcceleratorSpecializer">
            <summary>
            The PTX accelerator specializer.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.#ctor(ILGPU.Context,ILGPU.Backends.PTXArchitecture,ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Constructs a new Cuda backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="architecture">The target GPU architecture.</param>
            <param name="instructionSet">The target GPU instruction set.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXBackend.Architecture">
            <summary>
            Returns the current architecture.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXBackend.InstructionSet">
            <summary>
            Returns the current instruction set.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXBackend.ArgumentMapper">
            <summary>
            Returns the associated <see cref="P:ILGPU.Backends.Backend.ArgumentMapper"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.CreateKernelBuilder(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@,ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs@)">
            <summary>
            Creates a new PTX-compatible kernel builder and initializes a
            <see cref="T:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs"/> instance.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.CreateFunctionCodeGenerator(ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas,ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.PTX.PTXFunctionGenerator"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.CreateKernelCodeGenerator(ILGPU.IR.Analyses.AllocaKindInformation@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas,ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.PTX.PTXFunctionGenerator"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.CreateKernel(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.CompiledKernel.KernelInfo,System.Text.StringBuilder,ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.PTX.PTXCompiledKernel"/> and initializes all debug
            information sections.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator">
            <summary>
            Generates PTX code out of IR values.
            </summary>
            <remarks>The code needs to be prepared for this code generator.</remarks>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.SupportedInstructionSets">
            <summary>
            The supported PTX instruction sets (in descending order).
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.DynamicSharedMemoryAllocationName">
            <summary>
            The name for the globally registered dynamic shared memory alloca (if any).
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs">
            <summary>
            Generation arguments for code-generator construction.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs.Backend">
            <summary>
            Returns the underlying backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs.EntryPoint">
            <summary>
            Returns the current backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs.ContextFlags">
            <summary>
            Returns the current context flags.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs.DebugInfoGenerator">
            <summary>
            Returns the debug-information code generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs.PointerAlignments">
            <summary>
            Returns detailed information about all pointer alignments.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter">
            <summary>
            Represents a parameter that is mapped to PTX.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter.#ctor(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register,System.String,ILGPU.IR.Values.Parameter)">
            <summary>
            Constructs a new mapped parameter.
            </summary>
            <param name="register">The PTX register.</param>
            <param name="ptxName">The name of the parameter in PTX code.</param>
            <param name="parameter">The source parameter.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter.Register">
            <summary>
            Returns the associated PTX register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter.PTXName">
            <summary>
            Returns the name of the parameter in PTX code.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter.Parameter">
            <summary>
            Returns the source parameter.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IParameterSetupLogic">
            <summary>
            Represents a setup logic for function parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary>
            Handles an intrinsic parameter and returns the
            associated allocated register (if any).
            </summary>
            <param name="parameterOffset">
            The current intrinsic parameter index.
            </param>
            <param name="parameter">The intrinsic parameter.</param>
            <returns>The allocated register (if any).</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.EmptyParameterSetupLogic">
            <summary>
            Represents an empty parameter setup logic.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmptyParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary>
            Does not handle intrinsic parameters.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.PhiBindingAllocator">
            <summary>
            Represents a specialized phi binding allocator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PhiBindingAllocator.#ctor(ILGPU.Backends.PTX.PTXCodeGenerator)">
            <summary>
            Constructs a new phi binding allocator.
            </summary>
            <param name="parent">The parent code generator.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PhiBindingAllocator.Parent">
            <summary>
            Returns the parent code generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PhiBindingAllocator.Process(ILGPU.IR.BasicBlock,ILGPU.IR.Analyses.Phis)">
            <summary>
            Does not perform any operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PhiBindingAllocator.Allocate(ILGPU.IR.BasicBlock,ILGPU.IR.Values.PhiValue)">
            <summary>
            Allocates a new phi node in the parent code generator.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.BasicSuffixes">
            <summary>
            Maps basic types to basic PTX suffixes.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.RegisterMovementTypeRemapping">
            <summary>
            Maps basic types to constant-loading target basic types.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.RegisterIOTypeRemapping">
            <summary>
            Maps basic types to constant-loading target basic types.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GetBasicSuffix(ILGPU.BasicValueType)">
            <summary>
            Resolves the PTX suffix for the given basic value type.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The resolved type suffix.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ResolveRegisterMovementType(ILGPU.BasicValueType)">
            <summary>
            Remaps the given basic type for register movement instructions.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The remapped type.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ResolveIOType(ILGPU.BasicValueType)">
            <summary>
            Remaps the given basic type for global IO movement instructions.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The remapped type.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GetCompatibleName(System.String,ILGPU.IR.NodeId)">
            <summary>
            Returns a PTX compatible name for the given entity.
            </summary>
            <param name="name">The source name.</param>
            <param name="nodeId">The source node id.</param>
            <returns>The resolved PTX name.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GetMethodName(ILGPU.IR.Method)">
            <summary>
            Returns the PTX function name for the given function.
            </summary>
            <param name="method">The method.</param>
            <returns>The resolved PTX function name.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GetParameterName(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the PTX parameter name for the given parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>The resolved PTX parameter name.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.#ctor(ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Constructs a new PTX generator.
            </summary>
            <param name="args">The generator arguments.</param>
            <param name="method">The current method.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Backend">
            <summary>
            Returns the associated backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Allocas">
            <summary>
            Returns all local allocas.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Architecture">
            <summary>
            Returns the currently used PTX architecture.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.DebugInfoGenerator">
            <summary>
            Returns the associated debug information generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.ImplementationProvider">
            <summary>
            Returns the current intrinsic provider for code-generation purposes.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.FastMath">
            <summary>
            Returns true if fast math is active.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.EnableAssertions">
            <summary>
            Returns true if assertions are enabled.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Builder">
            <summary>
            Returns the associated string builder.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.ReturnParamName">
            <summary>
            Returns the name of the return parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PointerAlignments">
            <summary>
            Returns detailed information about all pointer alignments.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode">
            <summary>
            Generates PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateConstants(System.Text.StringBuilder)">
            <summary>
            Generates PTX constant declarations.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Merge(System.Text.StringBuilder)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator`1.Merge(`0)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.DeclareLabel">
            <summary>
            Declares a new label.
            </summary>
            <returns>The declared label.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MarkLabel(System.String)">
            <summary>
            Marks the given label.
            </summary>
            <param name="label">The label to mark.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.PhiMoveEmitter">
            <summary>
            Emits complex phi-value moves.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PhiMoveEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary>
            Emits phi-based move instructions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PrepareCodeGeneration">
            <summary>
            Prepares the general code generation process.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCodeInternal(System.Int32)">
            <summary>
            Generates code for all basic blocks.
            </summary>
            <param name="registerOffset">The internal register offset.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.SetupAllocations``1(ILGPU.IR.Analyses.AllocaKindInformation,System.String,System.String,``0)">
            <summary>
            Setups local or shared allocations.
            </summary>
            <param name="allocas">The allocations to setup.</param>
            <param name="addressSpacePrefix">
            The source address-space prefix (like .local).
            </param>
            <param name="namePrefix">The name prefix.</param>
            <param name="result">The resulting list of allocations.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.SetupAllocations">
            <summary>
            Setups local allocations.
            </summary>
            <returns>A collection of allocations.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.SetupParameters``1(System.Text.StringBuilder,``0@,System.Int32)">
            <summary>
            Setups all method parameters.
            </summary>
            <typeparam name="TSetupLogic">The specific setup logic.</typeparam>
            <param name="targetBuilder">
            The target builder to append the information to.
            </param>
            <param name="logic">The current logic.</param>
            <param name="paramOffset">The intrinsic parameter offset.</param>
            <returns>A list of mapped parameters.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter">
            <summary>
            Emits complex load parameter instructions.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter.IOEmitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter.IOEmitter.ParamName">
            <summary>
            Returns the associated parameter name.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter.Emitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitLoadParam(System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register)">
            <summary>
            Emits a new set of load param instructions with the
            appropriate configuration.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="register">The source register.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter">
            <summary>
            Emits complex store parameter instructions.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter.IOEmitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter.IOEmitter.ParamName">
            <summary>
            Returns the associated parameter name.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter.Emitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitStoreParam(System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register)">
            <summary>
            Emits a new set of store param instructions with the
            appropriate configuration.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="register">The target register.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.BindParameters(System.Collections.Generic.List{ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter})">
            <summary>
            Binds the given mapped parameters.
            </summary>
            <param name="parameters">A list with mapped parameters.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.BindAllocations(System.Collections.Generic.List{System.ValueTuple{ILGPU.IR.Values.Alloca,System.String}})">
            <summary>
            Binds the given list of allocations.
            </summary>
            <param name="allocations">
            A list associating alloca nodes with their local names.
            </param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateConstantDeclarations">
            <summary>
            Generate global constant declarations.
            </summary>
            <returns>The declared global constants in PTX format.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.AppendParamDeclaration(System.Text.StringBuilder,ILGPU.IR.Types.TypeNode,System.String)">
            <summary>
            Appends parameter information.
            </summary>
            <param name="targetBuilder">
            The target builder to append the information to.
            </param>
            <param name="paramType">The param type.</param>
            <param name="paramName">The name of the param argument.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter">
            <summary>
            Represents a general PTX command emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.#ctor(System.Text.StringBuilder)">
            <summary>
            Constructs a new command emitter using the given target.
            </summary>
            <param name="target">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendNonLocalAddressSpace(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Appends the given non-local address space.
            </summary>
            <param name="addressSpace">The address space.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendAddressSpace(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Appends the given address space
            </summary>
            <param name="addressSpace">The address space.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendRegisterMovementSuffix(ILGPU.BasicValueType)">
            <summary>
            Appends a specialized basic type suffix for mov instructions.
            </summary>
            <param name="basicValueType">The type suffix.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendSuffix(ILGPU.BasicValueType)">
            <summary>
            Appends the given command basic value type suffix.
            </summary>
            <param name="basicValueType">The type suffix.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendSuffix(System.String)">
            <summary>
            Appends the given command postfix.
            </summary>
            <param name="suffix">The postfix.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendVectorSuffix(System.Int32)">
            <summary>
            Appends the given vector length suffix.
            </summary>
            <param name="vectorLength">The vector length.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgument">
            <summary>
            Appends code to finish an appended argument.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgument(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.ConstantRegister)">
            <summary>
            Append the given register argument.
            </summary>
            <param name="argument">The register argument.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgument(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Append the given register argument.
            </summary>
            <param name="argument">The register argument.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgument(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Append the given register argument.
            </summary>
            <param name="argument">The register argument.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendVectorArgument(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary>
            Append the given vector register arguments.
            </summary>
            <param name="arguments">The register arguments.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgumentValue(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Append the value given register argument.
            </summary>
            <param name="argument">The register argument.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgumentValue(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister,System.Int32)">
            <summary>
            Append the value given register argument.
            </summary>
            <param name="argument">The register argument.</param>
            <param name="offset">The offset in bytes.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendNull(ILGPU.Backends.PTX.PTXRegisterKind)">
            <summary>
            Appends the constant value 'null' of the given type.
            </summary>
            <param name="kind">The register kind.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendConstant(System.Int64)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendConstant(System.UInt64)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendConstant(System.Single)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendConstant(System.Double)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendOffset(System.Int32)">
            <summary>
            Appends an offset computation.
            </summary>
            <param name="offset">The constant offset in bytes.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendLabel(System.String)">
            <summary>
            Appends a reference to the given label.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendRawValue(System.String)">
            <summary>
            Appends the given raw value.
            </summary>
            <param name="value">The raw value.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendRawValue(System.String,System.Int32)">
            <summary>
            Appends the given raw value.
            </summary>
            <param name="value">The raw value.</param>
            <param name="offset">The offset in bytes.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendRawValueReference(System.String)">
            <summary>
            Appends the given value reference.
            </summary>
            <param name="valueReference">The value reference.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration">
            <summary>
            Represents a predicate-register configuration.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration.#ctor(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister,System.Boolean)">
            <summary>
            Constructs a new predicate configuration.
            </summary>
            <param name="predicateRegister">The predicate register to test.</param>
            <param name="isTrue">Branch if the predicate register is true.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration.PredicateRegister">
            <summary>
            The predicate register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration.IsTrue">
            <summary>
            Branch if the predicate register is true.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope">
            <summary>
            Represents a scoped predicate-register allocation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.#ctor(ILGPU.Backends.PTX.PTXRegisterAllocator)">
            <summary>
            Constructs a new predicate scope.
            </summary>
            <param name="registerAllocator">The parent register allocator.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.#ctor(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Constructs a new predicate register.
            </summary>
            <param name="predicateRegister">The underlying predicate register.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.RegisterAllocator">
            <summary>
            The associated register allocator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.PredicateRegister">
            <summary>
            The allocated predicate register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.GetConfiguration(System.Boolean)">
            <summary>
            Resolves a new predicate configuration.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.ConvertToValue(ILGPU.Backends.PTX.PTXCodeGenerator,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Converts the underlying predicate register to a
            default target register.
            </summary>
            <param name="codeGenerator">The target code generator.</param>
            <param name="targetRegister">The target register to write to.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.Dispose">
            <summary>
            Frees the allocated predicate register.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitter">
            <summary>
            Encapsulates a complex command emission process.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary>
            Emits a nested primitive command in the scope of a complex command chain.
            </summary>
            <param name="commandEmitter">The command emitter.</param>
            <param name="registers">All involved primitive registers.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitterWithOffsets">
            <summary>
            Encapsulates a complex command emission process.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitterWithOffsets.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary>
            Emits a nested primitive command in the scope of a complex command chain.
            </summary>
            <param name="codeGenerator">The code generator.</param>
            <param name="command">The current command to emit.</param>
            <param name="primitiveRegister">The involved primitive register.</param>
            <param name="offset">The offset in bytes.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IVectorizedCommandEmitter">
            <summary>
            Encapsulates a complex command emission process.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IVectorizedCommandEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[],System.Int32)">
            <summary>
            Emits a nested primitive command in the scope of a complex command chain.
            </summary>
            <param name="codeGenerator">The code generator.</param>
            <param name="command">The current command to emit.</param>
            <param name="primitiveRegisters">
            The involved primitive registers.
            </param>
            <param name="offset">The offset in bytes.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IIOEmitter`1">
            <summary>
            Emits a sequence of IO instructions.
            </summary>
            <typeparam name="T">The user state type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IIOEmitter`1.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,`0)">
            <summary>
            Emits a new sequence of primitive IO instructions.
            </summary>
            <param name="codeGenerator">The code generator.</param>
            <param name="command">The current command to emit.</param>
            <param name="primitiveRegister">The involved primitive register.</param>
            <param name="userState">The current user state.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitComplexCommand``1(System.String,``0@,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register[])">
            <summary>
            Emits a complex command that might depend on non-primitive registers.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="command">The generic command to emit.</param>
            <param name="emitter">The current emitter.</param>
            <param name="registers">All involved registers.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitComplexCommandWithOffsets``1(System.String,``0@,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register,System.Int32)">
            <summary>
            A specialized version of <see cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitComplexCommand``1(System.String,``0@,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register[])"/>. This version
            uses a single register and uses internal ABI-specific offset computations
            to resolve the correct offset in bytes within a structure.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="command">The generic command to emit.</param>
            <param name="emitter">The current emitter.</param>
            <param name="register">The involved register.</param>
            <param name="offset">The current offset in bytes.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitVectorizedCommand``1(ILGPU.IR.Value,System.Int32,System.String,``0@,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register)">
            <summary>
            A specialized version of <see cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitComplexCommand``1(System.String,``0@,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register[])"/>. This version
            uses a single register and uses internal ABI-specific offset computations
            to resolve the correct offset in bytes within a structure.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="pointerValue">The pointer to get the alignment for.</param>
            <param name="safeAlignment">The safe minimum alignment in bytes.</param>
            <param name="command">The generic command to emit.</param>
            <param name="emitter">The current emitter.</param>
            <param name="register">The involved register.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ConvertToPredicateScope(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Converts the given register to a predicate register scope.
            </summary>
            <param name="register">The register to convert.</param>
            <returns>The created predicate scope.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ConvertPredicateToValue(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Converts the given predicate register to a default integer register.
            </summary>
            <param name="register">The source register.</param>
            <param name="targetRegister">The target register to write to.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ConvertValueToPredicate(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Converts the given register to a predicate register scope.
            </summary>
            <param name="register">The register to convert.</param>
            <returns>The created predicate scope.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ConvertValueToPredicate(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Converts the given register to a predicate value in the target register.
            </summary>
            <param name="register">The register to convert.</param>
            <param name="targetRegister">The target register.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitIOLoad``2(``0,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister,``1)">
            <summary>
            Emits a generic IO load operation.
            </summary>
            <typeparam name="TIOEmitter">The type of the load emitter.</typeparam>
            <typeparam name="T">The user state type.</typeparam>
            <param name="emitter">The emitter type.</param>
            <param name="command">The command to emit.</param>
            <param name="register">The register for emission.</param>
            <param name="userState">The user state.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitIOStore``2(``0,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,``1)">
            <summary>
            Emits a generic IO load operation.
            </summary>
            <typeparam name="TIOEmitter">The type of the load emitter.</typeparam>
            <typeparam name="T">The user state type.</typeparam>
            <param name="emitter">The emitter type.</param>
            <param name="command">The command to emit.</param>
            <param name="register">THe register for emission.</param>
            <param name="userState">The user state.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.BeginCommand(System.String,System.Nullable{ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration})">
            <summary>
            Begins a new command.
            </summary>
            <param name="commandString">The command to begin.</param>
            <param name="predicate">
            The predicate under which to execute the command.
            </param>
            <returns>The created command emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Command(System.String,System.Nullable{ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration})">
            <summary>
            Emits the given command.
            </summary>
            <param name="commandString">The command to emit.</param>
            <param name="predicate">
            The predicate under which to execute the command.
            </param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Move(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister,System.Nullable{ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration})">
            <summary>
            Emits a simple move command.
            </summary>
            <param name="source">The source register.</param>
            <param name="target">The target register.</param>
            <param name="predicate">
            The predicate under which to execute the command.
            </param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.BeginMove(System.Nullable{ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration})">
            <summary>
            Begins a new move command.
            </summary>
            <param name="predicate">
            The predicate under which to execute the command.
            </param>
            <returns>The created command emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GetIntrinsicRegister(ILGPU.Backends.PTX.PTXRegisterKind,System.Int32)">
            <summary>
            Resolves the desired hardware register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MoveFromIntrinsicRegister(ILGPU.Backends.PTX.PTXRegisterKind,System.Int32)">
            <summary>
            Allocates a new target register and moves the value of the
            specified intrinsic register to the target register.
            </summary>
            <param name="registerKind">The intrinsic register kind.</param>
            <param name="dimension">The register dimension (if any).</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MoveFromIntrinsicRegister(ILGPU.IR.Value,ILGPU.Backends.PTX.PTXRegisterKind,System.Int32)">
            <summary>
            Allocates a new target register and moves the value of the
            specified intrinsic register to the target register.
            </summary>
            <param name="value">The value.</param>
            <param name="registerKind">The intrinsic register kind.</param>
            <param name="dimension">The register dimension (if any).</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EnsureHardwareRegister(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Ensures that the given primitive register is a hardware register.
            If is a constant register, its value will be moved into a newly allocated
            hardware register.
            </summary>
            <param name="register">The register to put into a hardware register.</param>
            <returns>The hardware register (could be the input register).</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.ReturnTerminator)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.ReturnTerminator)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.UnconditionalBranch)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.UnconditionalBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.IfBranch)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IfBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.SwitchBranch)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SwitchBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.MethodCall)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.MethodCall)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.Parameter)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Parameter)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.PhiValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PhiValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.UnaryArithmeticValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.UnaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.BinaryArithmeticValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.BinaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.TernaryArithmeticValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.TernaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.CompareValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.CompareValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.ConvertValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.ConvertValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.PointerCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PointerCast)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.FloatAsIntCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.FloatAsIntCast)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsFloatCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsFloatCast)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateEmitter">
            <summary>
            Emits complex predicate instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateEmitter.PredicateRegister">
            <summary>
            The current source type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary>
            Emits nested predicates.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.IfPredicate)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IfPredicate)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.SwitchPredicate)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SwitchPredicate)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.GenericAtomic)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GenericAtomic)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.AtomicCAS)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AtomicCAS)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.Alloca)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Alloca)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.MemoryBarrier)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.MemoryBarrier)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter">
            <summary>
            Emits complex load instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter.IOEmitter.SourceType">
            <summary>
            The current source type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter.IOEmitter.AddressRegister">
            <summary>
            Returns the associated address register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter.IOEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary>
            Emits nested loads.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter.Emitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.Load)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Load)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter">
            <summary>
            Emits complex store instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter.IOEmitter.TargetType">
            <summary>
            The current source type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter.IOEmitter.AddressRegister">
            <summary>
            Returns the associated address register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter.IOEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary>
            Emits nested stores.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter.Emitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.Store)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Store)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadFieldAddress)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadFieldAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.PrimitiveValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PrimitiveValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.StringValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.StringValue)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.NullEmitter">
            <summary>
            Emits complex null values.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.NullEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary>
            Emits nested null values.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.NullValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.NullValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.StructureValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.StructureValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.GetField)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GetField)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.SetField)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SetField)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.GridIndexValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GridIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupIndexValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.GridDimensionValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GridDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupDimensionValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpSizeValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpSizeValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.LaneIdxValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LaneIdxValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.PredicateBarrier)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PredicateBarrier)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.Barrier)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Barrier)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IShuffleEmitter">
            <summary>
            Represents an abstract emitter of warp shuffle masks.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IShuffleEmitter.EmitWarpMask(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter)">
            <summary>
            Emits a new warp mask.
            </summary>
            <param name="commandEmitter">The current command emitter.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitShuffleOperation``1(ILGPU.IR.Values.ShuffleOperation,``0@)">
            <summary>
            Creates a new shuffle operation.
            </summary>
            <typeparam name="TShuffleEmitter">The emitter type.</typeparam>
            <param name="shuffle">The current shuffle operation.</param>
            <param name="shuffleEmitter">The shuffle emitter.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.Broadcast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Broadcast)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter">
            <summary>
            Emits warp masks of <see cref="T:ILGPU.IR.Values.WarpShuffle"/> operations.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter.XorDownMask">
            <summary>
            The basic mask that has be combined with an 'or' command
            in case of a <see cref="F:ILGPU.IR.Values.ShuffleKind.Xor"/> or a
            <see cref="F:ILGPU.IR.Values.ShuffleKind.Down"/> shuffle instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter.BaseMaskShiftAmount">
            <summary>
            The amount of bits the basic mask has to be shifted to
            the left.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter.#ctor(ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Constructs a new shuffle emitter.
            </summary>
            <param name="shuffleKind">The current shuffle kind.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter.ShuffleKind">
            <summary>
            The shuffle kind.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter.EmitWarpMask(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IShuffleEmitter.EmitWarpMask(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpShuffle)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpShuffle)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.SubWarpShuffleEmitter">
            <summary>
            Emits warp masks of <see cref="T:ILGPU.IR.Values.SubWarpShuffle"/> operations.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.SubWarpShuffleEmitter.#ctor(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Constructs a new shuffle emitter.
            </summary>
            <param name="warpMaskRegister">The current mask register.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.SubWarpShuffleEmitter.WarpMaskRegister">
            <summary>
            Returns the current mask register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.SubWarpShuffleEmitter.EmitWarpMask(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IShuffleEmitter.EmitWarpMask(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.SubWarpShuffle)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SubWarpShuffle)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.DebugOperation)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.DebugOperation)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadElementAddress)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadElementAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.AddressSpaceCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AddressSpaceCast)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCompiledKernel">
            <summary>
            Represents a compiled kernel in PTX form.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCompiledKernel.EntryName">
            <summary>
            The entry name of the kernel function.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCompiledKernel.#ctor(ILGPU.Context,ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.CompiledKernel.KernelInfo,System.String)">
            <summary>
            Constructs a new compiled kernel in PTX form.
            </summary>
            <param name="context">The associated context.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="info">Detailed kernel information.</param>
            <param name="ptxAssembly">The assembly code.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCompiledKernel.PTXAssembly">
            <summary>
            Returns the PTX assembly code.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXDebugInfoGeneratorScope">
            <summary>
            Represents a debug information scope.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXDebugInfoGeneratorScope.Parent">
            <summary>
            Returns the parent debug information generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXDebugInfoGeneratorScope.Current">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGeneratorScope.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node)">
            <summary>
            Generates debug information for the given node.
            </summary>
            <param name="builder">The target string builder to write to.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGeneratorScope.ResetLocation">
            <summary>
            Reset all location information.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXDebugInfoGenerator">
            <summary>
            A general debug info generator for PTX kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.#ctor">
            <summary>
            Constructs a new generic debug info generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.BeginScope">
            <summary>
            Begins a new debug information scope.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node,ILGPU.IR.FileLocation)">
            <summary>
            Generates debug information for the given node.
            </summary>
            <param name="builder">The target string builder to write to.</param>
            <param name="node">The node.</param>
            <param name="location">The current location.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.GenerateDebugSections(System.Text.StringBuilder)">
            <summary>
            Generate required debug-information sections in PTX code.
            </summary>
            <param name="builder">The target string builder to write to.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXNoDebugInfoGenerator">
            <summary>
            Represents an info generator that does not generate anything.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXNoDebugInfoGenerator.Empty">
            <summary>
            An empty debug information generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXNoDebugInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node,ILGPU.IR.FileLocation)">
            <summary>
            Generates no debug information.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXNoDebugInfoGenerator.GenerateDebugSections(System.Text.StringBuilder)">
            <summary>
            Generates no debug information section.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator">
            <summary>
            Generates line-based debug information for PTX kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.#ctor">
            <summary>
            Constructs a debug information generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.SyncLock">
            <summary>
            Returns the current synchronization lock.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.RegisterFile(ILGPU.IR.FileLocation)">
            <summary>
            Gets or creates a new file entry.
            </summary>
            <param name="location">The current location.</param>
            <returns>The file index.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.OnRegisterFile(ILGPU.IR.FileLocation)">
            <summary>
            Invoked when a new file mapping entry has been registered.
            </summary>
            <param name="location">The current location.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node,ILGPU.IR.FileLocation)">
            <summary>
            Generates a line-based debug information string.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.GenerateDebugSections(System.Text.StringBuilder)">
            <summary>
            Generates a debug sections header including file information.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXDebugSourceLineInfoGenerator">
            <summary>
            Generates line-based location information and inserts the referenced
            source lines into the generated PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugSourceLineInfoGenerator.#ctor">
            <summary>
            Constructs a debug information generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugSourceLineInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node,ILGPU.IR.FileLocation)">
            <summary>
            Generates a line-based debug information string including inline source
            line information.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXFunctionGenerator">
            <summary>
            Represents a function generator for helper device functions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXFunctionGenerator.#ctor(ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Creates a new PTX function generator.
            </summary>
            <param name="args">The generation arguments.</param>
            <param name="method">The current method.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXFunctionGenerator.GenerateHeaderDeclaration(System.Text.StringBuilder)">
            <summary>
            Generates a PTX compatible list of mapped parameters.
            </summary>
            <param name="targetBuilder">
            The target builder to append the information to.
            </param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXFunctionGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXFunctionGenerator.GenerateCode">
            <summary>
            Generates PTX code.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXInstructions">
            <summary>
            Contains general PTX instructions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetLEAMulOperation(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves a LEA operation.
            </summary>
            <param name="pointerType">The pointer type.</param>
            <returns>The resolved LEA operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetSelectValueOperation(ILGPU.BasicValueType)">
            <summary>
            Resolves a select-value operation.
            </summary>
            <param name="type">The basic value type.</param>
            <returns>The resolved select-value operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetCompareOperation(ILGPU.IR.Values.CompareKind,ILGPU.IR.Values.CompareFlags,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves a compare operation.
            </summary>
            <param name="kind">The compare kind.</param>
            <param name="flags">The compare flags.</param>
            <param name="type">The type to compare.</param>
            <returns>The resolved compare operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetConvertOperation(ILGPU.ArithmeticBasicValueType,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves a convert operation.
            </summary>
            <param name="source">The source type to convert from.</param>
            <param name="target">The target type to convert to.</param>
            <returns>The resolved convert operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetArithmeticOperation(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.ArithmeticBasicValueType,System.Boolean)">
            <summary>
            Resolves an unary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="type">The operation type.</param>
            <param name="fastMath">True, to use a fast-math operation.</param>
            <returns>The resolved arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetArithmeticOperation(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.ArithmeticBasicValueType,System.Boolean)">
            <summary>
            Resolves a binary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="type">The operation type.</param>
            <param name="fastMath">True, to use a fast-math operation.</param>
            <returns>The resolved arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetArithmeticOperation(ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves a ternary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="type">The operation type.</param>
            <returns>The resolved arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetAtomicOperation(ILGPU.IR.Values.AtomicKind,System.Boolean)">
            <summary>
            Resolves an atomic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="requireResult">True, if the return value is required.</param>
            <returns>The resolved atomic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetAtomicOperationSuffix(ILGPU.IR.Values.AtomicKind,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves an atomic-operation suffix.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="type">The operation type.</param>
            <returns>The resolved atomic-operation suffix.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetAddressSpaceCast(System.Boolean)">
            <summary>
            Resolves an address-space-cast operation.
            </summary>
            <param name="convertToGeneric">
            True, to convert to the generic address space.
            </param>
            <returns>The resolved address-space-cast operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetAddressSpaceCastSuffix(ILGPU.Backends.Backend)">
            <summary>
            Resolves an address-space-cast suffix.
            </summary>
            <param name="backend">The current backend.</param>
            <returns>The resolved address-space-cast suffix.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetBarrier(ILGPU.IR.Values.BarrierKind)">
            <summary>
            Resolves a barrier operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved barrier operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetPredicateBarrier(ILGPU.IR.Values.PredicateBarrierKind)">
            <summary>
            Resolves a predicate-barrier operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved predicate-barrier operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetMemoryBarrier(ILGPU.IR.Values.MemoryBarrierKind)">
            <summary>
            Resolves a memory-barrier operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved memory-barrier operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetShuffleOperation(ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Resolves a shuffle operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved shuffle operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetVectorOperationSuffix(System.Int32)">
            <summary>
            Resolves a vector operation suffix.
            </summary>
            <param name="numElements">The number of elements.</param>
            <returns>The vector operation suffix.</returns>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.ReturnOperation">
            <summary>
            A return operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.MoveOperation">
            <summary>
            A general move operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.LoadOperation">
            <summary>
            A general load operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.LoadParamOperation">
            <summary>
            A general load operation that loads parameter values.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.LoadLocalOperation">
            <summary>
            A general load operation that loads local values.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.StoreOperation">
            <summary>
            A general store operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.StoreParamOperation">
            <summary>
            A general store operation that stores parameter values.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.BranchOperation">
            <summary>
            A branch operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.BranchIndexOperation">
            <summary>
            An indexed branch operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.BranchIndexRangeComparison">
            <summary>
            An indexed branch range comparison.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.BranchTargetsDeclaration">
            <summary>
            A branch targets declaration prefix.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.IndexFMAOperationLo">
            <summary>
            An index FMA operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.AtomicCASOperation">
            <summary>
            An atomic CAS operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.AllThreadsInAWarpMemberMask">
            <summary>
            A warp member mask that considers all threads in a warp.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXIntrinsic">
            <summary>
            Represents a specific handler for user defined code-generation functionality
            that is compatible with the <see cref="T:ILGPU.Backends.PTX.PTXBackend"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXIntrinsic.Handler">
            <summary>
            Represents the handler delegate type of custom code-generation handlers.
            </summary>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Reflection.MethodInfo,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new PTX intrinsic that can handle all architectures.
            </summary>
            <param name="targetMethod">The associated target method.</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Type,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new PTX intrinsic that can handle all architectures.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Type,ILGPU.IR.Intrinsics.IntrinsicImplementationMode,ILGPU.Backends.PTXArchitecture)">
            <summary>
            Constructs a new PTX intrinsic that can handle all architectures
            newer or equal to <paramref name="minArchitecture"/>.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="mode">The code-generation mode.</param>
            <param name="minArchitecture">The target/minimum architecture.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Type,System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new PTX intrinsic.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="methodName">The target method name (or null).</param>
            <param name="mode">The code-generator mode.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Type,System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode,ILGPU.Backends.PTXArchitecture)">
            <summary>
            Constructs a new PTX intrinsic.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="methodName">The target method name (or null).</param>
            <param name="mode">The code-generator mode.</param>
            <param name="minArchitecture">The target/minimum architecture.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Type,System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode,System.Nullable{ILGPU.Backends.PTXArchitecture},ILGPU.Backends.PTXArchitecture)">
            <summary>
            Constructs a new PTX intrinsic.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="methodName">The target method name (or null).</param>
            <param name="mode">The code-generator mode.</param>
            <param name="minArchitecture">The min architecture (if any).</param>
            <param name="maxArchitecture">The max architecture (exclusive).</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXIntrinsic.MinArchitecture">
            <summary>
            Returns the associated architecture (if any).
            </summary>
            <remarks>
            This intrinsic will be used for any architecture greater than or equal this
            value.
            </remarks>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXIntrinsic.MaxArchitecture">
            <summary>
            Returns the associated architecture (if any).
            </summary>
            <remarks>
            This intrinsic will be used for any architecture less than this value.
            </remarks>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.CanHandleBackend(ILGPU.Backends.Backend)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.CanHandleBackend(ILGPU.Backends.Backend)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXIntrinsics">
            <summary>
            Implements and initializes PTX intrinsics.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXIntrinsics.PTXIntrinsicsType">
            <summary>
            The PTXIntrinsics type.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXIntrinsics.HalfType">
            <summary>
            The Half implementation type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.CreateIntrinsic(System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode,System.Nullable{ILGPU.Backends.PTXArchitecture},ILGPU.Backends.PTXArchitecture)">
            <summary>
            Creates a new PTX intrinsic.
            </summary>
            <param name="name">The name of the intrinsic.</param>
            <param name="mode">The implementation mode.</param>
            <param name="minArchitecture">The minimum architecture.</param>
            <param name="maxArchitecture">The maximum architecture.</param>
            <returns>The created intrinsic.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.CreateIntrinsic(System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Creates a new PTX intrinsic.
            </summary>
            <param name="name">The name of the intrinsic.</param>
            <param name="mode">The implementation mode.</param>
            <returns>The created intrinsic.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.Register(ILGPU.IR.Intrinsics.IntrinsicImplementationManager)">
            <summary>
            Registers all PTX intrinsics with the given manager.
            </summary>
            <param name="manager">The target implementation manager.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.RegisterAtomics(ILGPU.IR.Intrinsics.IntrinsicImplementationManager)">
            <summary>
            Registers all atomic intrinsics with the given manager.
            </summary>
            <param name="manager">The target implementation manager.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXIntrinsics.AddDouble">
            <summary>
            Represents an atomic compare-exchange operation of type double.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.AtomicAddF64(System.Double@,System.Double)">
            <summary>
            A software implementation for atomic adds on 64-bit floats.
            </summary>
            <param name="target">The target address.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.RegisterBroadcasts(ILGPU.IR.Intrinsics.IntrinsicImplementationManager)">
            <summary>
            Registers all broadcast intrinsics with the given manager.
            </summary>
            <param name="manager">The target implementation manager.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.GroupBroadcast``1(``0,System.Int32)">
            <summary>
            Implements a single group-broadcast operation.
            </summary>
            <typeparam name="T">The type to broadcast.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpBroadcast``1(``0,System.Int32)">
            <summary>
            Wraps a single warp-broadcast operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.Tanh(ILGPU.Backends.PTX.PTXBackend,ILGPU.Backends.PTX.PTXCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Computes tanh(x).
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.RegisterWarpShuffles(ILGPU.IR.Intrinsics.IntrinsicImplementationManager)">
            <summary>
            Registers all PTX warp intrinsics with the given manager.
            </summary>
            <param name="manager">The target implementation manager.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleInt64(System.UInt64,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleFloat64(System.Double,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleInt64(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleFloat64(System.Double,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleDownInt64(System.UInt64,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleDownFloat64(System.Double,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleDownInt64(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleDownFloat64(System.Double,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleUpInt64(System.UInt64,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleUpFloat64(System.Double,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleUpInt64(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleUpFloat64(System.Double,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleXorInt64(System.UInt64,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleXorFloat64(System.Double,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleXorInt64(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleXorFloat64(System.Double,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.RegisterFP16(ILGPU.IR.Intrinsics.IntrinsicImplementationManager)">
            <summary>
            Registers all FP16 intrinsics with the given manager.
            </summary>
            <param name="manager">The target implementation manager.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXKernelFunctionGenerator">
            <summary>
            Represents a function generator for main kernel functions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.KernelParameterSetupLogic.EntryPoint">
            <summary>
            Returns the associated entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.KernelParameterSetupLogic.IndexRegister">
            <summary>
            Returns the main index register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.KernelParameterSetupLogic.LengthRegister">
            <summary>
            Returns the length register of implicitly grouped kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.KernelParameterSetupLogic.Parent">
            <summary>
            Returns the associated register allocator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.KernelParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary>
            Updates index and length registers.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.#ctor(ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Creates a new PTX kernel generator.
            </summary>
            <param name="args">The generation arguments.</param>
            <param name="method">The current method.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.EntryPoint">
            <summary>
            Returns the associated entry point.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.GenerateCode">
            <summary>
            Generates PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.SetupKernelSpecialization(ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Setups kernel specialization hints.
            </summary>
            <param name="specialization">The kernel specialization.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.EmitImplicitKernelIndex(System.Int32,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Emits an implicit kernel index computation.
            </summary>
            <param name="dimension">The parameter dimension.</param>
            <param name="targetRegister">
            The primitive target register to write to.
            </param>
            <param name="boundsRegister">The associated bounds register.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.SetupKernelIndex(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register)">
            <summary>
            Setups the current kernel indices.
            </summary>
            <param name="indexRegister">The main kernel index register.</param>
            <param name="lengthRegister">
            The length register of implicitly grouped kernels.
            </param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXRegisterKind">
            <summary>
            Represents the register kind of a PTX register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Predicate">
            <summary>
            A predicate register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Int16">
            <summary>
            An int16 register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Int32">
            <summary>
            An int32 register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Int64">
            <summary>
            An int64 register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Float32">
            <summary>
            A float32 register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Float64">
            <summary>
            A float64 register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Ctaid">
            <summary>
            The Ctaid register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Tid">
            <summary>
            The Tid register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.NctaId">
            <summary>
            The NctaId register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.NtId">
            <summary>
            The NtId register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.LaneId">
            <summary>
            The LaneId register.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXRegisterAllocator">
            <summary>
            Represents a specialized PTX register allocator.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterAllocator.NumRegisterTypes">
            <summary>
            The number of possible register types.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterAllocator.RegisterTypeMapping">
            <summary>
            Maps basic types to PTX register kinds.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterAllocator.ParameterTypeRemapping">
            <summary>
            Maps basic value types to their PTX-specific parameter-type counterparts.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterAllocator.RegisterDeclarations">
            <summary>
            Declares all register kinds for which register declarations have to be
            generated.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.GetRegisterKind(ILGPU.BasicValueType)">
            <summary>
            Returns the associated register kind.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The resolved register kind.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.ResolveParameterBasicValueType(ILGPU.BasicValueType)">
            <summary>
            Returns the associated register kind.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The resolved register kind.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.ResolveDeviceConstantValue(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Returns the corresponding device constant string value.
            </summary>
            <param name="register">The primitive register.</param>
            <returns>The corresponding device constant string value.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.GetStringRepresentation(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Returns the string representation of the given hardware register.
            </summary>
            <param name="register">The register.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.#ctor(ILGPU.Backends.PTX.PTXBackend)">
            <summary>
            Constructs a new register allocator.
            </summary>
            <param name="backend">The associated backend.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.AllocatePlatformRegister(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.RegisterDescription@)">
            <summary>
            Allocates a platform-specific register and returns the resulting PTX type
            for the current platform.
            </summary>
            <param name="description">The resolved register.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.AllocatePlatformRegister(ILGPU.IR.Value,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.RegisterDescription@)">
            <summary>
            Allocates a platform-specific register for the given node and
            returns the resulting PTX type for the current platform.
            </summary>
            <param name="node">The node to allocate.</param>
            <param name="description">The resolved register description.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.ResolveRegisterDescription(ILGPU.BasicValueType)">
            <summary>
            Resolves a register description for the basic value type.
            </summary>
            <param name="basicValueType">The basic value type to resolve.</param>
            <returns>The resolved register description.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.ResolveParameterRegisterDescription(ILGPU.IR.Types.TypeNode)">
            <summary>
            Resolves a register description for the given parameter type.
            </summary>
            <param name="type">The parameter type to resolve.</param>
            <returns>The resolved register description.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.ResolveRegisterDescription(ILGPU.IR.Types.TypeNode)">
            <summary>
            Resolves a new PTX compatible register description.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.FreeRegister(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Frees the given hardware register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.AllocateInt32Register">
            <summary>
            Allocates a new 32bit integer register.
            </summary>
            <returns>The allocated primitive 32bit integer register.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.AllocateRegister(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.RegisterDescription)">
            <summary>
            Allocates a register that is compatible with the given description.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.AppendRegisterDeclaration(System.Text.StringBuilder,System.String,System.String,System.String,ILGPU.Backends.PTX.PTXRegisterKind)">
            <summary>
            Appends register information to the given builder.
            </summary>
            <param name="builder">The builder to append to.</param>
            <param name="prefix">The prefix.</param>
            <param name="typeName">The type name.</param>
            <param name="registerName">The register name.</param>
            <param name="registerKind">The register kind.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.GenerateRegisterInformation(System.String)">
            <summary>
            Generates register allocation information.
            </summary>
            <param name="prefix">The prefix to add.</param>
            <returns>Register allocation information.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTXInstructionSet">
            <summary>
            Represents a PTX ISA (Instruction Set Architecture).
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_30">
            <summary>
            The 3.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_31">
            <summary>
            The 3.1 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_32">
            <summary>
            The 3.2 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_40">
            <summary>
            The 4.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_41">
            <summary>
            The 4.1 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_42">
            <summary>
            The 4.2 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_43">
            <summary>
            The 4.3 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_50">
            <summary>
            The 5.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_60">
            <summary>
            The 6.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_61">
            <summary>
            The 6.1 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_62">
            <summary>
            The 6.2 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_63">
            <summary>
            The 6.3 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_64">
            <summary>
            The 6.4 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_65">
            <summary>
            The 6.5 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_70">
            <summary>
            The 7.0 ISA.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.Equals(ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Returns true if the given instruction set is equal to this instruction set.
            </summary>
            <param name="other">The other instruction set.</param>
            <returns>
            True, if the given instruction set is equal to this instruction set.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.CompareTo(ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Compares this instruction set to the given one.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="P:ILGPU.Backends.PTXInstructionSet.Major">
            <summary>
            The major version
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXInstructionSet.Minor">
            <summary>
            The minor version
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this instruction set.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True,
            if the given object is equal to this instruction set.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.GetHashCode">
            <summary>
            Returns the hash code of this instruction set.
            </summary>
            <returns>The hash code of this instruction set.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.ToString">
            <summary>
            Returns the string representation of the instruction set.
            </summary>
            <returns>The string representation of the instruction set.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.op_Equality(ILGPU.Backends.PTXInstructionSet,ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Returns true if the first and the second instruction set are the same.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>
            True, if the first and the second instruction set are the same.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.op_Inequality(ILGPU.Backends.PTXInstructionSet,ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Returns true if the first and the second instruction set are not the same.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>
            True, if the first and the second instruction set are not the same.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.op_LessThan(ILGPU.Backends.PTXInstructionSet,ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Returns true if the first instruction set is smaller than the second one.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>
            True, if the first instruction set is smaller than the second one.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.op_LessThanOrEqual(ILGPU.Backends.PTXInstructionSet,ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Returns true if the first instruction set is less than or equal to the
            second instruction set.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>
            True, if the first instruction set is less or equal to the second instruction
            set.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.op_GreaterThan(ILGPU.Backends.PTXInstructionSet,ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Returns true if the first instruction set is greater than the second one.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>
            True, if the first instruction set is greater than the second one.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.op_GreaterThanOrEqual(ILGPU.Backends.PTXInstructionSet,ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Returns true if the first instruction set is greater than or equal to the
            second instruction set.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>
            True, if the first instruction set is greater or equal to the second
            instruction set.
            </returns>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1">
            <summary>
            Represents a generic register allocator.
            </summary>
            <typeparam name="TKind">The register kind.</typeparam>
            <remarks>The members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.RegisterDescription">
            <summary>
            Describes allocation information of a single primitive register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.RegisterDescription.#ctor(ILGPU.BasicValueType,`0)">
            <summary>
            Constructs a new register description.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <param name="kind">The register kind.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.RegisterDescription.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.RegisterDescription.Kind">
            <summary>
            Returns the associated register kind.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.Register">
            <summary>
            Represents an abstract register
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Register.#ctor">
            <summary>
            Constructs a new abstract register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.Register.IsPrimitive">
            <summary>
            Returns true if this register is a primitive register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.Register.IsCompound">
            <summary>
            Returns true if this register is a compound register.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister">
            <summary>
            Represents a primitive register that might consume up to one hardware
            register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister.#ctor(ILGPU.Backends.RegisterAllocator{`0}.RegisterDescription)">
            <summary>
            Constructs a new constant register.
            </summary>
            <param name="description">The current register description.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister.Description">
            <summary>
            Returns the associated register description.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister.Kind">
            <summary>
            Returns the actual register kind.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.ConstantRegister">
            <summary>
            A primitive register with a constant value.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.ConstantRegister.#ctor(ILGPU.Backends.RegisterAllocator{`0}.RegisterDescription,ILGPU.IR.Values.PrimitiveValue)">
            <summary>
            Constructs a new constant register.
            </summary>
            <param name="description">The current register description.</param>
            <param name="value">The primitive value.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.ConstantRegister.Value">
            <summary>
            Returns the associated value.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.ConstantRegister.ToString">
            <summary>
            Returns the string representation of the current register.
            </summary>
            <returns>The string representation of the current register.</returns>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.HardwareRegister">
            <summary>
            Represents a primitive register that represents an actual hardware register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.HardwareRegister.#ctor(ILGPU.Backends.RegisterAllocator{`0}.RegisterDescription,System.Int32)">
            <summary>
            Constructs a new hardware register.
            </summary>
            <param name="description">The current register description.</param>
            <param name="registerValue">The associated register value.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.HardwareRegister.RegisterValue">
            <summary>
            Returns the register index value.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.HardwareRegister.ToString">
            <summary>
            Returns the string representation of the current register.
            </summary>
            <returns>The string representation of the current register.</returns>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.CompoundRegister">
            <summary>
            Represents a compound register of a complex type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.#ctor(ILGPU.IR.Types.StructureType,System.Collections.Immutable.ImmutableArray{ILGPU.Backends.RegisterAllocator{`0}.Register})">
            <summary>
            Constructs a new compound register.
            </summary>
            <param name="type">The underlying type node.</param>
            <param name="registers">The child registers.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.Type">
            <summary>
            Returns the underlying type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.Children">
            <summary>
            Returns all child registers.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.NumChildren">
            <summary>
            Returns the number of child registers.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.SliceAs``1(System.Int32,System.Int32)">
            <summary>
            Slices a subset of registers out of this compound register.
            </summary>
            <typeparam name="T">The target register type.</typeparam>
            <param name="index">The start index.</param>
            <param name="count">The number of registers to slice.</param>
            <returns>The sliced register array.</returns>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.RegisterEntry">
            <summary>
            Represents a register mapping entry.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.RegisterEntry.#ctor(ILGPU.Backends.RegisterAllocator{`0}.Register,ILGPU.IR.Value)">
            <summary>
            Constructs a new mapping entry.
            </summary>
            <param name="register">The register.</param>
            <param name="node">The node.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.RegisterEntry.Register">
            <summary>
            Returns the associated register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.RegisterEntry.Node">
            <summary>
            Returns the associated value.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.#ctor(ILGPU.Backends.Backend)">
            <summary>
            Constructs a new register allocator.
            </summary>
            <param name="backend">The underlying backend.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.Backend">
            <summary>
            Returns the underlying ABI.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.ResolveRegisterDescription(ILGPU.IR.Types.TypeNode)">
            <summary>
            Resolves a register description for the given type.
            </summary>
            <param name="type">The type to convert to.</param>
            <returns>The resolved register description.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.AllocateRegister(ILGPU.Backends.RegisterAllocator{`0}.RegisterDescription)">
            <summary>
            Allocates a new hardware register of the given kind.
            </summary>
            <param name="description">
            The register description used for allocation.
            </param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.FreeRegister(ILGPU.Backends.RegisterAllocator{`0}.HardwareRegister)">
            <summary>
            Frees the given register.
            </summary>
            <param name="hardwareRegister">The register to free.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Allocate(ILGPU.IR.Value,ILGPU.Backends.RegisterAllocator{`0}.RegisterDescription)">
            <summary>
            Allocates a specific register kind for the given node.
            </summary>
            <param name="node">The node to allocate the register for.</param>
            <param name="description">The register description to allocate.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.AllocateHardware(ILGPU.IR.Value)">
            <summary>
            Allocates a specific register kind for the given node.
            </summary>
            <param name="node">The node to allocate the register for.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Allocate(ILGPU.IR.Value)">
            <summary>
            Allocates a specific register kind for the given node.
            </summary>
            <param name="node">The node to allocate the register for.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Bind(ILGPU.IR.Value,ILGPU.Backends.RegisterAllocator{`0}.Register)">
            <summary>
            Binds the given value to the target register.
            </summary>
            <param name="node">The node to bind.</param>
            <param name="targetRegister">The target register to bind to.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.AllocateType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Allocates a new register recursively
            </summary>
            <param name="typeNode">The node type to allocate.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Alias(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Registers a register alias.
            </summary>
            <param name="node">The node.</param>
            <param name="aliasNode">The alias node.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.LoadAs``1(ILGPU.IR.Value)">
            <summary>
            Loads the allocated register of the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Load(ILGPU.IR.Value)">
            <summary>
            Loads the allocated register of the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.LoadPrimitive(ILGPU.IR.Value)">
            <summary>
            Loads the allocated primitive register of the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.LoadHardware(ILGPU.IR.Value)">
            <summary>
            Loads the allocated primitive register of the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Free(ILGPU.IR.Value)">
            <summary>
            Frees the given node.
            </summary>
            <param name="node">The node to free.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.FreeRecursive(ILGPU.Backends.RegisterAllocator{`0}.Register)">
            <summary>
            Frees the given register recursively.
            </summary>
            <param name="register">The register to free.</param>
        </member>
        <member name="T:ILGPU.Backends.SeparateViews.ViewArgumentMapper">
            <summary>
            Maps array views to separate view implementations.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewArgumentMapper.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new view argument mapper.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewArgumentMapper.MapViewType(System.Type,System.Type)">
            <summary>
            Maps an internal view type to a pointer implementation type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewArgumentMapper.MapViewInstance``3(``0@,System.Type,``1,``2)">
            <summary>
            Maps an internal view instance to a pointer instance.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.SeparateViews.ViewImplementation">
            <summary>
            Represents an array view that is not implemented directly
            and relies on separate driver support to map the actual device
            pointers to allocated memory buffers.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.SeparateViews.ViewImplementation.CreateMethod">
            <summary>
            A handle to the <see cref="M:ILGPU.Backends.SeparateViews.ViewImplementation.Create``1(ILGPU.ArrayView{``0})"/> method.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.GetCreateMethod(System.Type)">
            <summary>
            Returns a specialized create method.
            </summary>
            <param name="sourceType">The source array-view type.</param>
            <returns>The resolved creation method.</returns>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.GetNativePtrMethod(System.Type)">
            <summary>
            Gets the native-pointer method for the given element type.
            </summary>
            <param name="elementType">The element type.</param>
            <returns>The instantiated native method.</returns>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.Create``1(ILGPU.ArrayView{``0})">
            <summary>
            Creates a new view implemented using the given array view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view.</param>
            <returns>The created view implementation.</returns>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.GetIndexField(System.Type)">
            <summary>
            Returns the index field of a view implementation.
            </summary>
            <param name="implType">The view implementation type.</param>
            <returns>The resolved field.</returns>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.GetLengthField(System.Type)">
            <summary>
            Returns the length field of a view implementation.
            </summary>
            <param name="implType">The view implementation type.</param>
            <returns>The resolved field.</returns>
        </member>
        <member name="F:ILGPU.Backends.SeparateViews.ViewImplementation.Index">
            <summary>
            The linear index into the view.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.SeparateViews.ViewImplementation.Length">
            <summary>
            The length.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructs a new array view implementation.
            </summary>
            <param name="index">The index into the view.</param>
            <param name="length">The length information.</param>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator">
            <summary>
            Represents a generic high-level variable allocator.
            </summary>
            <remarks>The members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.Variable">
            <summary>
            A variable that can be accessed and allocated.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Variable.#ctor(System.Int32)">
            <summary>
            Constructs a new variable.
            </summary>
            <param name="id">The current variable id.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.Variable.Id">
            <summary>
            Returns the unique variable id.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.Variable.VariableName">
            <summary>
            Returns the associated variable name.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Variable.ToString">
            <summary>
            Returns the string representation of this variable.
            </summary>
            <returns>The string representation of this variable.</returns>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.PrimitiveVariable">
            <summary>
            A primitive variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.PrimitiveVariable.#ctor(System.Int32,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Constructs a new primitive variable.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="basicValueType">The basic value type.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.PrimitiveVariable.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.ConstantVariable">
            <summary>
            A constant "variable".
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.ConstantVariable.#ctor(System.Int32,ILGPU.IR.Values.PrimitiveValue)">
            <summary>
            Constructs a new constant register.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="value">The primitive value.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.ConstantVariable.Value">
            <summary>
            Returns the associated value.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.TypedVariable">
            <summary>
            A typed variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.TypedVariable.#ctor(System.Int32,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new typed variable.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.TypedVariable.Type">
            <summary>
            Returns the underlying type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.PointerVariable">
            <summary>
            A pointer variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.PointerVariable.#ctor(System.Int32,ILGPU.IR.Types.PointerType)">
            <summary>
            Constructs a new pointer variable.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="pointerType">The pointer type.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.PointerVariable.Type">
            <summary>
            Returns the represented IR type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.ObjectVariable">
            <summary>
            An object variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.ObjectVariable.#ctor(System.Int32,ILGPU.IR.Types.ObjectType)">
            <summary>
            Constructs a new object variable.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="type">The object type.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.ObjectVariable.Type">
            <summary>
            Returns the represented IR type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.#ctor">
            <summary>
            Constructs a new variable allocator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Allocate(ILGPU.IR.Value)">
            <summary>
            Allocates a new variable.
            </summary>
            <param name="value">The value to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Allocate(ILGPU.IR.Value,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Allocates a new variable.
            </summary>
            <param name="value">The value to allocate.</param>
            <param name="basicValueType">The actual type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocateAs``1(ILGPU.IR.Value)">
            <summary>
            Allocates a new variable as type <typeparamref name="T"/>.
            </summary>
            <param name="value">The value to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocateType(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Allocates the given type.
            </summary>
            <param name="basicValueType">The type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocateType(ILGPU.BasicValueType)">
            <summary>
            Allocates the given type.
            </summary>
            <param name="basicValueType">The type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocatePointerType(ILGPU.IR.Types.PointerType)">
            <summary>
            Allocates a pointer type.
            </summary>
            <param name="pointerType">The pointer type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocateType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Allocates the given type.
            </summary>
            <param name="typeNode">The type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Load(ILGPU.IR.Value)">
            <summary>
            Loads the given value.
            </summary>
            <param name="value">The value to load.</param>
            <returns>The loaded variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.LoadAs``1(ILGPU.IR.Value)">
            <summary>
            Loads the given value as variable type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type to load.</typeparam>
            <param name="value">The value to load.</param>
            <returns>The loaded variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Bind(ILGPU.IR.Value,ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Binds the given value to the target variable.
            </summary>
            <param name="node">The node to bind.</param>
            <param name="targetVariable">The target variable to bind to.</param>
        </member>
        <member name="T:ILGPU.BasicValueType">
            <summary>
            Represents a basic value type.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.None">
            <summary>
            Represent a non-basic value type.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int1">
            <summary>
            Represents an 1-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int8">
            <summary>
            Represents an 8-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int16">
            <summary>
            Represents a 16-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int32">
            <summary>
            Represents a 32-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int64">
            <summary>
            Represents a 64-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Float16">
            <summary>
            Represents a 16-bit float.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Float32">
            <summary>
            Represents a 32-bit float.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Float64">
            <summary>
            Represents a 64-bit float.
            </summary>
        </member>
        <member name="T:ILGPU.ArithmeticBasicValueType">
            <summary>
            Represents an arithmetic basic value type.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.None">
            <summary>
            Represent a non-arithmetic value type.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.UInt1">
            <summary>
            Represents an 1-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Int8">
            <summary>
            Represents an 8-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Int16">
            <summary>
            Represents a 16-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Int32">
            <summary>
            Represents a 32-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Int64">
            <summary>
            Represents a 64-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Float16">
            <summary>
            Represents a 16-bit float.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Float32">
            <summary>
            Represents a 32-bit float.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Float64">
            <summary>
            Represents a 64-bit float.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.UInt8">
            <summary>
            Represents an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.UInt16">
            <summary>
            Represents a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.UInt32">
            <summary>
            Represents a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.UInt64">
            <summary>
            Represents a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="T:ILGPU.Context">
            <summary>
            Represents the main ILGPU context.
            </summary>
            <remarks>Members of this class are thread-safe.</remarks>
        </member>
        <member name="F:ILGPU.Context.RuntimeAssemblyName">
            <summary>
            The name of the dynamic runtime assembly.
            </summary>
        </member>
        <member name="F:ILGPU.Context.AssemblyName">
            <summary>
            Represents the general ILGPU assembly name.
            </summary>
        </member>
        <member name="F:ILGPU.Context.FullAssemblyModuleName">
            <summary>
            Represents the general ILGPU assembly module name.
            </summary>
        </member>
        <member name="F:ILGPU.Context.IRFileExtension">
            <summary>
            The ILGPU assembly file extension.
            </summary>
        </member>
        <member name="F:ILGPU.Context.DefaultFlags">
            <summary>
            Represents the default flags of a new context.
            </summary>
        </member>
        <member name="F:ILGPU.Context.DefaultDebug">
            <summary>
            Represents the default debug flags of a new context.
            </summary>
        </member>
        <member name="F:ILGPU.Context.FastMathFlags">
            <summary>
            Represents the default flags of a new context.
            </summary>
        </member>
        <member name="P:ILGPU.Context.Version">
            <summary>
            Returns the current ILGPU version.
            </summary>
        </member>
        <member name="P:ILGPU.Context.InliningAttributeBuilder">
            <summary>
            Represents an aggressive inlining attribute builder.
            </summary>
            <remarks>Note that this attribute will not enforce inlining.</remarks>
        </member>
        <member name="M:ILGPU.Context.#cctor">
            <summary>
            Initializes all static context attributes.
            </summary>
        </member>
        <member name="E:ILGPU.Context.AcceleratorCreated">
            <summary>
            Will be called when a new accelerator has been created.
            </summary>
        </member>
        <member name="M:ILGPU.Context.#ctor">
            <summary>
            Constructs a new ILGPU main context
            </summary>
        </member>
        <member name="M:ILGPU.Context.#ctor(ILGPU.ContextFlags)">
            <summary>
            Constructs a new ILGPU main context
            </summary>
            <param name="flags">The context flags.</param>
        </member>
        <member name="M:ILGPU.Context.#ctor(ILGPU.IR.Transformations.OptimizationLevel)">
            <summary>
            Constructs a new ILGPU main context
            </summary>
            <param name="optimizationLevel">The optimization level.</param>
        </member>
        <member name="M:ILGPU.Context.#ctor(ILGPU.ContextFlags,ILGPU.IR.Transformations.OptimizationLevel)">
            <summary>
            Constructs a new ILGPU main context
            </summary>
            <param name="optimizationLevel">The optimization level.</param>
            <param name="flags">The context flags.</param>
        </member>
        <member name="P:ILGPU.Context.TargetPlatform">
            <summary>
            Returns the current target platform.
            </summary>
        </member>
        <member name="P:ILGPU.Context.IRContext">
            <summary>
            Returns the main IR context.
            </summary>
        </member>
        <member name="P:ILGPU.Context.Flags">
            <summary>
            Returns the associated context flags.
            </summary>
        </member>
        <member name="P:ILGPU.Context.ILFrontend">
            <summary>
            Returns the associated IL frontend.
            </summary>
        </member>
        <member name="P:ILGPU.Context.DefautltILBackend">
            <summary>
            Returns the associated default IL backend.
            </summary>
        </member>
        <member name="P:ILGPU.Context.Verifier">
            <summary>
            Returns the internal verifier instance.
            </summary>
        </member>
        <member name="P:ILGPU.Context.OptimizationLevel">
            <summary>
            Returns the optimization level.
            </summary>
        </member>
        <member name="P:ILGPU.Context.DebugInformationManager">
            <summary>
            Returns the main debug-information manager.
            </summary>
        </member>
        <member name="P:ILGPU.Context.TypeContext">
            <summary>
            Returns the main type context.
            </summary>
        </member>
        <member name="P:ILGPU.Context.ContextTransformer">
            <summary>
            Returns the default context transformer.
            </summary>
        </member>
        <member name="P:ILGPU.Context.IntrinsicManager">
            <summary>
            Returns the underlying intrinsic manager.
            </summary>
        </member>
        <member name="M:ILGPU.Context.InitIntrinsics">
            <summary>
            Initializes all intrinsics.
            </summary>
        </member>
        <member name="M:ILGPU.Context.HasFlags(ILGPU.ContextFlags)">
            <summary>
            Returns true if the current context has the given flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, if the current context has the given flags.</returns>
        </member>
        <member name="M:ILGPU.Context.CreateMethodHandle">
            <summary>
            Creates a new unique method handle.
            </summary>
            <returns>A new unique method handle.</returns>
        </member>
        <member name="M:ILGPU.Context.ReleaseCodeGenerationLock">
            <summary>
            Releases the internal code-generation lock.
            </summary>
        </member>
        <member name="M:ILGPU.Context.BeginCodeGeneration">
            <summary>
            Begins a new code generation phase.
            </summary>
            <returns>The new code generation phase.</returns>
        </member>
        <member name="M:ILGPU.Context.BeginCodeGeneration(ILGPU.IR.IRContext)">
            <summary>
            Begins a new code generation phase.
            </summary>
            <returns>The new code generation phase.</returns>
        </member>
        <member name="M:ILGPU.Context.BeginCodeGenerationAsync">
            <summary>
            Begins a new code generation phase (asynchronous).
            </summary>
            <returns>The new code generation phase.</returns>
        </member>
        <member name="M:ILGPU.Context.BeginCodeGenerationAsync(ILGPU.IR.IRContext)">
            <summary>
            Begins a new code generation phase (asynchronous).
            </summary>
            <returns>The new code generation phase.</returns>
        </member>
        <member name="M:ILGPU.Context.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears internal caches. However, this does not affect individual accelerator
            caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>
            This method is not thread-safe.
            </remarks>
        </member>
        <member name="M:ILGPU.Context.OnAcceleratorCreated(ILGPU.Runtime.Accelerator)">
            <summary>
            Raises the corresponding <see cref="E:ILGPU.Context.AcceleratorCreated"/> event.
            </summary>
            <param name="accelerator">The new accelerator.</param>
        </member>
        <member name="M:ILGPU.Context.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.ContextExtension">
            <summary>
            Represents an abstract context extensions that can store additional data.
            </summary>
        </member>
        <member name="T:ILGPU.ContextCodeGenerationPhase">
            <summary>
            A single code generation phase.
            </summary>
        </member>
        <member name="M:ILGPU.ContextCodeGenerationPhase.#ctor(ILGPU.Context,ILGPU.IR.IRContext)">
            <summary>
            Constructs a new code generation phase.
            </summary>
            <param name="context">The current context.</param>
            <param name="irContext">The current IR context.</param>
        </member>
        <member name="P:ILGPU.ContextCodeGenerationPhase.Context">
            <summary>
            Returns the main context.
            </summary>
        </member>
        <member name="P:ILGPU.ContextCodeGenerationPhase.IRContext">
            <summary>
            Returns the current IR context.
            </summary>
        </member>
        <member name="P:ILGPU.ContextCodeGenerationPhase.IsFaulted">
            <summary>
            Returns true if the code generation has failed.
            </summary>
        </member>
        <member name="P:ILGPU.ContextCodeGenerationPhase.LastException">
            <summary>
            Returns the exception from code generation failure.
            </summary>
        </member>
        <member name="M:ILGPU.ContextCodeGenerationPhase.BeginFrontendCodeGeneration">
            <summary>
            Starts a new frontend code-generation phase.
            </summary>
            <returns>The frontend code-generation phase.</returns>
        </member>
        <member name="M:ILGPU.ContextCodeGenerationPhase.Optimize">
            <summary>
            Optimizes the IR.
            </summary>
        </member>
        <member name="M:ILGPU.ContextCodeGenerationPhase.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.ContextFlags">
            <summary>
            Represents flags for a <see cref="T:ILGPU.Context"/>.
            </summary>
            <remarks>
            [ 0 -  7] = debugging settings
            [ 8 - 15] = code generation settings
            [16 - 23] = transformation settings
            [24 - 32] = accelerator settings
            </remarks>
        </member>
        <member name="F:ILGPU.ContextFlags.None">
            <summary>
            Default flags.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.EnableDebugSymbols">
            <summary>
            Enables debug symbols (if available),
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.EnableKernelDebugInformation">
            <summary>
            Enables debug information in kernels (if available).
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.EnableInlineSourceAnnotations">
            <summary>
            Enables inline source-code annotations when generating kernels.
            </summary>
            <remarks>
            Note that this is only supported if debug information is activated.
            </remarks>
        </member>
        <member name="F:ILGPU.ContextFlags.EnableAssertions">
            <summary>
            Enables assertions.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.EnableKernelStatistics">
            <summary>
            Enables detailed kernel statistics about all compiled kernel functions.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.EnableVerifier">
            <summary>
            Enables the internal IR verifier.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.EnableParallelCodeGenerationInFrontend">
            <summary>
            Enables parallel code generation in frontend.
            Note that this does not affect parallel transformations.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.InlineMutableStaticFieldValues">
            <summary>
            Loads from mutable static fields are rejected by default.
            However, their current values can be inlined during JIT
            compilation. Adding this flags causes values from mutable
            static fields to be inlined instead of rejected.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.IgnoreStaticFieldStores">
            <summary>
            Stores to static fields are rejected by default.
            Adding this flag causes stores to static fields
            to be silently ignored instead of rejected.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.FastMath">
            <summary>
            Represents fast math compilation flags.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.Force32BitFloats">
            <summary>
            Forces the use of 32bit floats instead of 64bit floats.
            This affects all math operations (like Math.Sqrt(double)) and
            all 64bit float conversions. This settings might improve
            performance dramatically but might cause precision loss.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.ForceSystemGC">
            <summary>
            Forces a .Net GC run after every context GC.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.SkipCPUCodeGeneration">
            <summary>
            Skips the internal IR code generation phase for CPU kernels (debug flag).
            </summary>
            <remarks>
            Caution: this avoids general kernel code-analysis and verification checks.
            </remarks>
        </member>
        <member name="F:ILGPU.ContextFlags.AggressiveInlining">
            <summary>
            Represents an aggressive inlining policy.
            (all functions will be inlined).
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.NoInlining">
            <summary>
            No functions will be inlined at all.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.DisableConstantPropagation">
            <summary>
            Disables the on-the-fly constant propagation functionality
            (e.g. for debugging purposes).
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.DisableKernelCaching">
            <summary>
            Disables all kernel-loading caches.
            </summary>
            <remarks>
            However, IR nodes, type information and debug information will still
            be cached, since they are used for different kernel compilation operations.
            If you want to clear those caches as well, you will have to clear them
            manually using <see cref="M:ILGPU.Context.ClearCache(ILGPU.ClearCacheMode)"/>.
            </remarks>
        </member>
        <member name="F:ILGPU.ContextFlags.DisableAutomaticBufferDisposal">
            <summary>
            Disables automatic disposal of memory buffers in the scope of ILGPU GC
            threads.
            It should only be used by experienced users.
            </summary>
            <remarks>
            In theory, allocated memory buffers will be disposed automatically by the
            .Net GC. However, disposing accelerator objects before their associated
            memory buffers have been freed will end up in exceptions and sometimes
            driver crashes on different systems. If you disable automatic buffer
            disposal, you have to ensure that all accelerator child objects have been
            freed manually before disposing the associated accelerator object.
            </remarks>
        </member>
        <member name="F:ILGPU.ContextFlags.DisableAutomaticKernelDisposal">
            <summary>
            Disables automatic disposal of kernels in the scope of ILGPU GC threads.
            This is dangerous as the 'default' kernel-loading methods do not return
            <see cref="T:ILGPU.Runtime.Kernel"/> instances that can be disposed manually.
            It should only be used by experienced users.
            </summary>
            <remarks>
            In theory, allocated accelerator kernels will be disposed automatically by
            the .Net GC. However, disposing accelerator objects before their
            associated kernels have been freed will end up in exceptions and sometimes
            driver crashes on different systems. If you disable automatic kernel
            disposal, you have to ensure that all accelerator child objects have been
            freed manually before disposing the associated accelerator object.
            </remarks>
        </member>
        <member name="F:ILGPU.ContextFlags.DisableAcceleratorGC">
            <summary>
            Disables kernel caching and automatic disposal of memory buffers and kernels.
            It should only be used by experienced users.
            </summary>
        </member>
        <member name="T:ILGPU.ContextFlagsExtensions">
            <summary>
            Helper methods for the <see cref="T:ILGPU.ContextFlags"/> enumeration.
            </summary>
        </member>
        <member name="M:ILGPU.ContextFlagsExtensions.HasFlags(ILGPU.ContextFlags,ILGPU.ContextFlags)">
            <summary>
            Determines whether one or more bits are set in the current flags.
            </summary>
            <param name="flags">The current flags.</param>
            <param name="flagsToCheck">The flags to check.</param>
            <returns>True, the requested bits are set.</returns>
        </member>
        <member name="M:ILGPU.ContextFlagsExtensions.Prepare(ILGPU.ContextFlags)">
            <summary>
            Prepares the given flags by toggling convenient flag combinations.
            </summary>
            <param name="flags">The flags to prepare.</param>
            <returns>The prepared flags.</returns>
        </member>
        <member name="T:ILGPU.Frontend.Block">
            <summary>
            A simple basic block in the scope of an IR code-generation process.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Block.CFGBuilder">
            <summary>
            Constructs CFGs out of disassembled methods.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Block.CFGBuilder.RegisterOffsetMapping">
            <summary>
            Registers instruction offset mappings.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.RegisterOffsetMapping.#ctor(ILGPU.Frontend.Block.CFGBuilder,System.Int32)">
            <summary>
            Constructs a new offset registration mapping.
            </summary>
            <param name="builder">The parent builder instance.</param>
            <param name="instructionIndex">
            The current instruction index to map to.
            </param>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.RegisterOffsetMapping.Builder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.RegisterOffsetMapping.InstructionIndex">
            <summary>
            Returns the parent instruction index.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.RegisterOffsetMapping.Apply(ILGPU.Frontend.ILInstruction,System.Int32)">
            <summary>
            Registers the given instruction offset.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.#ctor(ILGPU.Frontend.CodeGenerator,ILGPU.IR.Method.Builder)">
            <summary>
            Constructs a new CFG builder.
            </summary>
            <param name="codeGenerator">The current code generator.</param>
            <param name="methodBuilder">The current method builder.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.AppendBasicBlock(ILGPU.IR.Location,System.Int32)">
            <summary>
            Appends a basic block with the given target.
            </summary>
            <param name="location">The current location.</param>
            <param name="target">The block target.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.BuildBasicBlocks">
            <summary>
            Build all required basic blocks.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.AddSuccessor(ILGPU.Frontend.Block,ILGPU.Frontend.Block)">
            <summary>
            Adds a new successor to the current block.
            </summary>
            <param name="current">The current block.</param>
            <param name="successor">
            The successor to add to the current block.
            </param>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.SetupBasicBlock(System.Collections.Generic.HashSet{ILGPU.Frontend.Block},ILGPU.Frontend.Block,System.Int32,System.Int32)">
            <summary>
            Setups a single basic block.
            </summary>
            <param name="visited">The set of visited blocks.</param>
            <param name="current">The current block.</param>
            <param name="stackCounter">The current stack counter.</param>
            <param name="target">The target block.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.SetupBasicBlocks(System.Collections.Generic.HashSet{ILGPU.Frontend.Block},ILGPU.Frontend.Block,System.Int32)">
            <summary>
            Setups all basic blocks (fills in the required information).
            </summary>
            <param name="visited">The set of visited blocks.</param>
            <param name="current">The current block.</param>
            <param name="instructionIdx">The starting instruction index.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.WireBlocks">
            <summary>
            Wires all terminators and connects all basic blocks.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.CodeGenerator">
            <summary>
            Returns the associated code generator.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.Blocks">
            <summary>
            Returns the associated SSA block collection.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.Builder">
            <summary>
            Returns the internal method builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Resolves the block for the given basic block.
            </summary>
            <param name="basicBlock">The source basic block.</param>
            <returns>The resolved frontend block.</returns>
        </member>
        <member name="T:ILGPU.Frontend.Block.ArithmeticOperandKind">
            <summary>
            An arithmetic operand type.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Block.ArithmeticOperandKind.Default">
            <summary>
            A default arithmetic type.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Block.ArithmeticOperandKind.Pointer">
            <summary>
            A pointer-based operation.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.#ctor(ILGPU.Frontend.CodeGenerator,ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Constructs a new basic block.
            </summary>
            <param name="codeGenerator">The parent code generator.</param>
            <param name="builder">The current basic block builder.</param>
        </member>
        <member name="P:ILGPU.Frontend.Block.CodeGenerator">
            <summary>
            Returns the code generator.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.Builder">
            <summary>
            Returns the associated IR builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.BasicBlock">
            <summary>
            Returns the underlying basic block.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.Terminator">
            <summary>
            Returns the current terminator.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.StackCounter">
            <summary>
            Returns the current stack counter.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.InstructionOffset">
            <summary>
            Returns the instruction offset of this block.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.InstructionCount">
            <summary>
            Returns the number of instructions in this block.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.SetValue(ILGPU.Frontend.VariableRef,ILGPU.IR.Value)">
            <summary>
            Sets the given variable to the given value.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.GetValue(ILGPU.Frontend.VariableRef)">
            <summary>
            Returns the value of the given variable.
            </summary>
            <param name="var">The variable reference.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.GetBuilderTerminator(System.Int32)">
            <summary>
            Resolves the current terminator as builder terminator.
            </summary>
            <param name="count">The number of expected branch targets.</param>
            <returns>The resolved branch targets.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.PeekType(ILGPU.IR.Location)">
            <summary>
            Peeks the basic-value type of the element on the top of the stack.
            </summary>
            <param name="location">The current location.</param>
            <returns>The peeked basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.PeekBasicValueType(ILGPU.IR.Location)">
            <summary>
            Peeks the basic-value type of the element on the top of the stack.
            </summary>
            <param name="location">The current location.</param>
            <returns>The peeked basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.Dup">
            <summary>
            Duplicates the element at the top of the stack.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.Pop">
            <summary>
            Pops a value from the execution stack.
            </summary>
            <returns>The popped value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.Pop(ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Pops a value as the required type from the execution stack.
            </summary>
            <param name="targetType">The required target type.</param>
            <param name="flags">The conversion flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.Convert(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Converts a value to the required type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The required target type.</param>
            <param name="flags">The conversion flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.PopInt(ILGPU.IR.Location,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Pops an element as integer from the stack.
            </summary>
            <param name="location">The current location.</param>
            <param name="flags">The conversion flags.</param>
            <returns>The popped element as integer.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.PopMethodArgs(ILGPU.IR.Location,System.Reflection.MethodBase,ILGPU.IR.Value)">
            <summary>
            Pops the required arguments from the stack.
            </summary>
            <param name="location">The current location.</param>
            <param name="methodBase">The method to use for the argument types.</param>
            <param name="instanceValue">The instance value (if available).</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.PopCompareValue(ILGPU.IR.Location,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Pops a value from the stack that can be used in the context of
            compare operations.
            </summary>
            <param name="location">The current location.</param>
            <param name="flags">The conversion flags.</param>
            <returns>
            The popped value from the stack that can be used in the
            context of compare and arithmetic operations.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.PopCompareOrArithmeticValue(ILGPU.IR.Location,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Pops a value from the stack that can be used in the context of
            compare and arithmetic operations.
            </summary>
            <param name="location">The current location.</param>
            <param name="flags">The conversion flags.</param>
            <returns>
            The popped value from the stack that can be used in the
            context of compare and arithmetic operations.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.PopArithmeticArgs(ILGPU.IR.Location,ILGPU.IR.Values.ConvertFlags,ILGPU.IR.Value@,ILGPU.IR.Value@)">
            <summary>
            Pops two compatible arithmetic arguments from the execution stack.
            </summary>
            <param name="location">The current location.</param>
            <param name="flags">The conversion flags.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>True, if this is a default arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.Push(ILGPU.IR.Value)">
            <summary>
            Pushes the value of the given type onto the execution stack.
            </summary>
            <param name="value">The value to push.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.ToString">
            <summary>
            Returns the string representation of this block.
            </summary>
            <returns>The string representation of this block.</returns>
        </member>
        <member name="T:ILGPU.Frontend.CodeGenerator">
            <summary>
            Represents an IR code generator for .Net methods.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.TryGetBasicValueSize(ILGPU.IR.Value,ILGPU.BasicValueType@)">
            <summary>
            Tries to map the given IR value representing a raw integer-based value size
            to a corresponding <see cref="T:ILGPU.BasicValueType"/> entry.
            </summary>
            <param name="value">The IR to map.</param>
            <param name="valueType">The determined basic-value type (if any).</param>
            <returns>
            True, if the given IR node could be mapped to a basic value type.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeArithmetic(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.Frontend.ILInstruction)">
            <summary>
            Realizes an arithmetic operation.
            </summary>
            <param name="kind">The kind of the arithmetic operation.</param>
            <param name="instruction">The current IL instruction.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeArithmetic(ILGPU.IR.Values.UnaryArithmeticKind)">
            <summary>
            Realizes an arithmetic operation.
            </summary>
            <param name="kind">The kind of the arithmetic operation.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeNewArray(System.Type)">
            <summary>
            Realizes an array creation.
            </summary>
            <param name="elementType">The element type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadElementAddress(System.Type)">
            <summary>
            Realizes an array load-element operation.
            </summary>
            <param name="_">The element type to load.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadElement(System.Type)">
            <summary>
            Realizes an array load-element operation.
            </summary>
            <param name="_">The element type to load.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeStoreElement(System.Type)">
            <summary>
            Realizes an array store-element operation.
            </summary>
            <param name="elementType">The element type to store.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadArrayLength">
            <summary>
            Realizes an array length value.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateCall(System.Reflection.MethodBase,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Creates a call instruction to the given method with the given arguments.
            </summary>
            <param name="method">The target method to invoke.</param>
            <param name="arguments">The call arguments.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeCall(System.Reflection.MethodBase)">
            <summary>
            Realizes a call instruction.
            </summary>
            <param name="target">The target method to invoke.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.ResolveVirtualCallTarget(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Resolves the virtual call target of the given virtual (or abstract) method.
            </summary>
            <param name="target">The virtual method to call.</param>
            <param name="constrainedType">
            The constrained type of the virtual call.
            </param>
            <returns>The resolved call target.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeVirtualCall(ILGPU.Frontend.ILInstruction)">
            <summary>
            Realizes a virtual-call instruction.
            </summary>
            <param name="instruction">The current IL instruction.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeVirtualCall(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Realizes a virtual-call instruction.
            </summary>
            <param name="target">The target method to invoke.</param>
            <param name="constrainedType">
            The target type on which to invoke the method.
            </param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeCalli(System.Object)">
            <summary>
            Realizes an indirect call instruction.
            </summary>
            <param name="signature">The target signature.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeJump(System.Reflection.MethodBase)">
            <summary>
            Realizes a jump instruction.
            </summary>
            <param name="target">The target method to invoke.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.#ctor(ILGPU.Frontend.ILFrontend,ILGPU.IR.Method.Builder,ILGPU.Frontend.DisassembledMethod,System.Collections.Generic.HashSet{System.Reflection.MethodBase})">
            <summary>
            Constructs a new code generator.
            </summary>
            <param name="frontend">The current frontend instance.</param>
            <param name="methodBuilder">The current method builder.</param>
            <param name="disassembledMethod">
            The corresponding disassembled method.
            </param>
            <param name="detectedMethods">The set of newly detected methods.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.SetupVariables">
            <summary>
            Setups all parameter and local bindings.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.DetectedMethods">
            <summary>
            Returns the set of detected methods.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Frontend">
            <summary>
            Returns the associated frontend.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Context">
            <summary>
            Returns the current IR context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.MethodBuilder">
            <summary>
            Returns the current method builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.DisassembledMethod">
            <summary>
            Returns the current disassembled method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Method">
            <summary>
            Returns the current managed method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.SSABuilder">
            <summary>
            Returns the current SSA builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Block">
            <summary>
            Gets or sets the current block being processing.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Builder">
            <summary>
            Returns the current block builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Location">
            <summary>
            Gets or sets the current location.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.LambdaArgumentOffset">
            <summary>
            Gets or sets the offset for load/store argument instructions in a lambda.
            This is used to shift arguments because of the unused 'this' argument.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.DeclareMethod(System.Reflection.MethodBase)">
            <summary>
            Declares a method.
            </summary>
            <param name="methodBase">The method to declare.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateTempAlloca(ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a temporary alloca for the given type.
            </summary>
            <param name="type">The type to allocate.</param>
            <returns>The created alloca.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.GenerateCode">
            <summary>
            Generates code for the current function.
            </summary>
            <returns>The created top-level function.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.GenerateCodeForBlock">
            <summary>
            Generates code for the given block.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.VerifyNotRuntimeMethod(System.Reflection.MethodBase)">
            <summary>
            Verifies that the given method is not a .Net-runtime-dependent method.
            If it depends on the runtime, this method will throw a
            <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="method">The method to verify.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.VerifyStaticFieldLoad(System.Reflection.FieldInfo)">
            <summary>
            Verifies a static-field load operation.
            </summary>
            <param name="field">The static field to load.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.VerifyStaticFieldStore(System.Reflection.FieldInfo)">
            <summary>
            Verifies a static-field store operation.
            </summary>
            <param name="field">The static field to store to.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeNop">
            <summary>
            Realizes a no-operation instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeTrap">
            <summary>
            Realizes a trap instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.LoadOntoEvaluationStack(ILGPU.IR.Value,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Converts the given value (already loaded) into its corresponding
            evaluation-stack representation.
            </summary>
            <param name="value">The source value to load (already loaded).</param>
            <param name="flags">The conversion flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateLoad(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Realizes an indirect load instruction.
            </summary>
            <param name="address">The source address.</param>
            <param name="type">The target type.</param>
            <param name="flags">The conversion flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateStore(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Realizes an indirect store instruction.
            </summary>
            <param name="address">The target address.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeDup">
            <summary>
            Realizes a duplicate operation.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakePop">
            <summary>
            Realizes a pop operation.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadToken(System.Object)">
            <summary>
            Realizes an internal load-token operation.
            </summary>
            <param name="handleValue">The managed handle object.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeCompare(ILGPU.IR.Values.CompareKind,ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Realizes a compare instruction of the given type.
            </summary>
            <param name="compareKind">The comparison kind.</param>
            <param name="instructionFlags">The instruction flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateCompare(ILGPU.IR.Values.CompareKind,ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Creates a compare instruction of the given type.
            </summary>
            <param name="compareKind">The comparison kind.</param>
            <param name="instructionFlags">The instruction flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateCompare(ILGPU.IR.Values.CompareKind,ILGPU.IR.Values.CompareFlags)">
            <summary>
            Creates a compare instruction of the given type.
            </summary>
            <param name="compareKind">The comparison kind.</param>
            <param name="flags">The comparison flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateCompare(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.CompareKind,ILGPU.IR.Values.CompareFlags)">
            <summary>
            Creates a compare instruction of the given type.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="compareKind">The comparison kind.</param>
            <param name="flags">The comparison flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.Load(System.Int32)">
            <summary>
            Loads an int.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.Load(System.Int64)">
            <summary>
            Loads a long.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.Load(System.Single)">
            <summary>
            Loads a float.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.Load(System.Double)">
            <summary>
            Loads a double.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.LoadString(System.String)">
            <summary>
            Loads a string.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeReturn">
            <summary>
            Realizes a return instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeBranch">
            <summary>
            Realizes an unconditional branch instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeBranch(ILGPU.IR.Values.CompareKind,ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Realizes a conditional branch instruction.
            </summary>
            <param name="compareKind">The comparison type of the condition.</param>
            <param name="instructionFlags">The instruction flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeIntrinsicBranch(ILGPU.IR.Values.CompareKind)">
            <summary>
            Make an intrinsic branch.
            </summary>
            <param name="kind">The current compare kind.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeBranchTrue">
            <summary>
            Make a true branch.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeBranchFalse">
            <summary>
            Make a false branch.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeSwitch(ILGPU.Frontend.ILInstructionBranchTargets)">
            <summary>
            Realizes a switch instruction.
            </summary>
            <param name="branchTargets">All switch branch targets.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeConvert(System.Type,ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Realizes a convert instruction.
            </summary>
            <param name="targetType">The target type.</param>
            <param name="instructionFlags">The instruction flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateConversion(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Coverts the given value to the target type.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target type.</param>
            <param name="flags">
            True, if the comparison should be forced to be unsigned.
            </param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadField(System.Reflection.FieldInfo)">
            <summary>
            Loads the value of a field specified by the given metadata token.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadFieldAddress(System.Reflection.FieldInfo)">
            <summary>
            Loads the address of a field specified by the given metadata token.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateLoadStaticFieldValue(System.Reflection.FieldInfo)">
            <summary>
            Loads a static field value and returns the created IR node.
            </summary>
            <param name="field">The field.</param>
            <returns>The loaded field value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadStaticField(System.Reflection.FieldInfo)">
            <summary>
            Loads a static field value.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadStaticFieldAddress(System.Reflection.FieldInfo)">
            <summary>
            Loads the address of a static field specified by the given metadata token.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeStoreField(System.Reflection.FieldInfo)">
            <summary>
            Stores a value to a field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeStoreStaticField(System.Reflection.FieldInfo)">
            <summary>
            Stores a value to a static field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeBox">
            <summary>
            Realizes a boxing operation that boxes a value.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeUnbox(System.Type)">
            <summary>
            Realizes an unboxing operation that unboxes a previously boxed value.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeNewObject(System.Reflection.MethodBase)">
            <summary>
            Realizes a new-object operation that creates a new instance of a specified
            type.
            </summary>
            <param name="method">The target method.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeInitObject(System.Type)">
            <summary>
            Realizes a managed-object initialization.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeIsInstance(System.Type)">
            <summary>
            Realizes an is-instance instruction.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadObject(System.Type)">
            <summary>
            Realizes an indirect load instruction.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeStoreObject(System.Type)">
            <summary>
            Realizes an indirect store instruction.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.LoadVariable(ILGPU.Frontend.VariableRef)">
            <summary>
            Loads a variable. This can be an argument or a local reference.
            </summary>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.LoadVariableAddress(ILGPU.Frontend.VariableRef)">
            <summary>
            Loads a variable address. This can be an argument or a local reference.
            </summary>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.StoreVariable(ILGPU.Frontend.VariableRef)">
            <summary>
            Stores a value to the given variable slot.
            </summary>
            <param name="var">The variable reference.</param>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation">
            <summary>
            Represents assembly debug information.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.debugInformation">
            <summary>
            The internal mapping of methods to cached debug information.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.readerProvider">
            <summary>
            The internal reader provider.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.syncLock">
            <summary>
            The internal synchronization object.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.#ctor(System.Reflection.Assembly)">
            <summary>
            Constructs new empty assembly debug information.
            </summary>
            <param name="assembly">The referenced assembly.</param>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.#ctor(System.Reflection.Assembly,System.IO.Stream)">
            <summary>
            Constructs new assembly debug information.
            </summary>
            <param name="assembly">The referenced assembly.</param>
            <param name="pdbStream">
            The associated PDB stream (hast to be kept open).
            </param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.Assembly">
            <summary>
            Returns the associated assembly.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.Modules">
            <summary>
            Returns the associated modules.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.IsValid">
            <summary>
            Returns true if this container holds valid debug information.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.MetadataReader">
            <summary>
            Returns the associated metadata reader.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.ILGPU#Frontend#DebugInformation#IMetadataReaderOperationProvider#BeginOperation">
            <summary>
            Begins a synchronized metadata reader operation.
            </summary>
            <returns>The operation instance.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.TryResolveMethod(System.Int32,System.Reflection.MethodBase@)">
            <summary>
            Tries to resolve the given metadata token to a method.
            </summary>
            <param name="metadataToken">The metadata token to resolve.</param>
            <param name="method">The resolved method (or null).</param>
            <returns>True, if the given token could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.TryLoadDebugInformation(System.Reflection.MethodBase,ILGPU.Frontend.DebugInformation.MethodDebugInformation@)">
            <summary>
            Tries to load debug information for the given method base.
            </summary>
            <param name="methodBase">The method base.</param>
            <param name="methodDebugInformation">
            The loaded debug information (or null).
            </param>
            <returns>True, if the requested debug information could be loaded.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.DebugInformationManager">
            <summary>
            Represents a debug-information manager.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.DebugInformationManager.PDBFileExtensions">
            <summary>
            The PDB file extension (.pdb).
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.DebugInformationManager.PDBFileSearchPattern">
            <summary>
            The PDB file-search extension (*.pdb).
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.DebugInformationManager.ILoader">
            <summary>
            Represents a custom PDB loader.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.ILoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary>
            Executes the actual loader logic.
            </summary>
            <param name="assembly">The current assembly.</param>
            <param name="assemblyDebugInformation">
            The loaded debug-information instance.
            </param>
            <returns>
            True, if the requested debug information could be loaded.
            </returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.DebugInformationManager.FileLoader">
            <summary>
            Represents a file loader for PDB files.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.FileLoader.#ctor(ILGPU.Frontend.DebugInformation.DebugInformationManager,System.String)">
            <summary>
            Constructs a new file loader.
            </summary>
            <param name="parent">The parent manager.</param>
            <param name="pdbFileName">The file name to load.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.DebugInformationManager.FileLoader.Parent">
            <summary>
            Returns the parent debug-information manager.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.DebugInformationManager.FileLoader.PDBFileName">
            <summary>
            Returns the file name to load.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.FileLoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary cref="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.ILoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)"/>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.DebugInformationManager.AutoFileLoader">
            <summary>
            Represents a automatic file loader for PDB files.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.AutoFileLoader.#ctor(ILGPU.Frontend.DebugInformation.DebugInformationManager)">
            <summary>
            Constructs a new automatic file loader.
            </summary>
            <param name="parent">The parent manager.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.DebugInformationManager.AutoFileLoader.Parent">
            <summary>
            Returns the parent debug-information manager.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.AutoFileLoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary cref="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.ILoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)"/>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.DebugInformationManager.StreamLoader">
            <summary>
            Represents a stream loader for PDB files.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.StreamLoader.#ctor(ILGPU.Frontend.DebugInformation.DebugInformationManager,System.IO.Stream)">
            <summary>
            Constructs a new stream loader.
            </summary>
            <param name="parent">The parent manager.</param>
            <param name="pdbStream">
            The stream to load from (must be left open).
            </param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.DebugInformationManager.StreamLoader.Parent">
            <summary>
            Returns the parent debug-information manager.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.DebugInformationManager.StreamLoader.PDBStream">
            <summary>
            Returns the stream to load from.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.StreamLoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary cref="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.ILoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)"/>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.#ctor">
            <summary>
            Constructs a new debug-information manager.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryLoadSymbols(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary>
            Tries to load symbols for the given assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="assemblyDebugInformation">
            The loaded debug information (or null).
            </param>
            <returns>True, if the debug information could be loaded.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryLoadSymbols(System.Reflection.Assembly,System.String,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary>
            Tries to load symbols for the given assembly based on the given
            debug-information file.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="pdbFileName">The name of the debug-information file.</param>
            <param name="assemblyDebugInformation">
            The loaded debug information (or null).
            </param>
            <returns>True, if the debug information could be loaded.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryLoadSymbols(System.Reflection.Assembly,System.IO.Stream,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary>
            Tries to load symbols for the given assembly based on the given PDB stream.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="pdbStream">The source PDB stream (must be left open).</param>
            <param name="assemblyDebugInformation">
            The loaded debug information (or null).
            </param>
            <returns>True, if the debug information could be loaded.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryLoadSymbolsInternal``1(System.Reflection.Assembly,``0@,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary>
            Tries to load symbols for the given assembly based on the given
            debug-information file.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="loader">The internal loader.</param>
            <param name="assemblyDebugInformation">
            The loaded debug information (or null).
            </param>
            <returns>True, if the debug information could be loaded.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryFindPbdFile(System.String,System.String@)">
            <summary>
            Tries to find a debug-information file with the name
            <paramref name="pdbFileName"/>.
            </summary>
            <param name="pdbFileName">The name of the debug-information file.</param>
            <param name="fileName">The resolved filename (or null).</param>
            <returns>True, if the given debug-information file could be found.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.RegisterLookupDirectory(System.String)">
            <summary>
            Registers the given directory as a source directory for
            debug-information files.
            </summary>
            <param name="directory">The directory to register.</param>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryLoadDebugInformation(System.Reflection.MethodBase,ILGPU.Frontend.DebugInformation.MethodDebugInformation@)">
            <summary>
            Tries to load debug information for the given method.
            </summary>
            <param name="methodBase">The method.</param>
            <param name="methodDebugInformation">
            Loaded debug information (or null).
            </param>
            <returns>True, if debug information could be loaded.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.LoadSequencePoints(System.Reflection.MethodBase)">
            <summary>
            Loads the sequence points of the given method.
            </summary>
            <param name="methodBase">The method base.</param>
            <returns>
            A sequence-point enumerator that targets the given method.
            </returns>
            <remarks>
            If no debug information could be loaded for the given method, an empty
            <see cref="T:ILGPU.Frontend.DebugInformation.SequencePointEnumerator"/> will be returned.
            </remarks>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears cached debug information.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.IDebugInformationEnumerator`1">
            <summary>
            Represents a debug-information enumerator.
            </summary>
            <typeparam name="T">The enumerator type.</typeparam>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.IDebugInformationEnumerator`1.Current">
            <summary>
            Returns the current object.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.IDebugInformationEnumerator`1.MoveTo(System.Int32)">
            <summary>
            Moves the enumerator forward to the given instruction offset.
            </summary>
            <param name="offset">The instruction offset in bytes.</param>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.LocalVariable">
            <summary>
            Represents a local variable in a scope.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.#ctor(System.Int32,System.String)">
            <summary>
            Constructs a new local variable.
            </summary>
            <param name="index">The variable index.</param>
            <param name="name">The variable name.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.LocalVariable.Index">
            <summary>
            Returns the referenced local-variable index.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.LocalVariable.Name">
            <summary>
            Returns the variable name.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.Equals(ILGPU.Frontend.DebugInformation.LocalVariable)">
            <summary>
            Returns true if the given local variable is equal to the current local
            variable.
            </summary>
            <param name="other">The other local variable.</param>
            <returns>
            True, if the given index is equal to the current local variable.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current local variable.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current local variable.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.ToString">
            <summary>
            Returns the string representation of this local variable.
            </summary>
            <returns>The string representation of this local variable.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.op_Equality(ILGPU.Frontend.DebugInformation.LocalVariable,ILGPU.Frontend.DebugInformation.LocalVariable)">
            <summary>
            Returns true if the first and second local variable are the same.
            </summary>
            <param name="first">The first local variable.</param>
            <param name="second">The second local variable.</param>
            <returns>
            True, if the first and second local variable are the same.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.op_Inequality(ILGPU.Frontend.DebugInformation.LocalVariable,ILGPU.Frontend.DebugInformation.LocalVariable)">
            <summary>
            Returns true if the first and second local variable are not the same.
            </summary>
            <param name="first">The first local variable.</param>
            <param name="second">The second local variable.</param>
            <returns>
            True, if the first and second local variable are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.IMetadataReaderOperationProvider">
            <summary>
            An abstract provider for synchronized metadata reader operations.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.IMetadataReaderOperationProvider.BeginOperation">
            <summary>
            Begins a synchronized metadata reader operation.
            </summary>
            <returns>The operation instance.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.MetadataReaderOperation">
            <summary>
            Represents a synchronized metadata reader operation.
            </summary>
            <remarks>
            The current implementation of the <see cref="T:System.Reflection.Metadata.MetadataReader"/> seems to be
            thread safe based on the source code. However, this is not 100% safe.
            Wrap all operations using a thread-safe locking to ensure reliable functionality.
            </remarks>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MetadataReaderOperation.#ctor(System.Reflection.Metadata.MetadataReader,System.Object)">
            <summary>
            Constructs a new reader operation.
            </summary>
            <param name="reader">The parent reader.</param>
            <param name="syncLock">The synchronization object.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MetadataReaderOperation.SyncLock">
            <summary>
            Returns the parent synchronization object.
            </summary>
            <remarks>
            Might be required in the future to synchronize accesses.
            </remarks>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MetadataReaderOperation.Reader">
            <summary>
            Returns the parent reader.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MetadataReaderOperation.Dispose">
            <summary>
            Releases the current synchronization lock.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.MethodDebugInformation">
            <summary>
            Represents method debug information.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodDebugInformation.LoadSequencePoints``1(``0,System.Reflection.Metadata.MethodDefinitionHandle)">
            <summary>
            Loads sequence points for the given information handle.
            </summary>
            <param name="readerOperationProvider">The parent reader provider.</param>
            <param name="handle">The source information handle.</param>
            <returns>The array of all sequence points.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodDebugInformation.LoadScopes``1(``0,System.Reflection.Metadata.MethodDefinitionHandle)">
            <summary>
            Loads method scopes for the given information handle.
            </summary>
            <param name="readerOperationProvider">The parent reader provider.</param>
            <param name="handle">The source information handle.</param>
            <returns>The array of all method scopes.</returns>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.MethodDebugInformation.sequencePoints">
            <summary>
            All associated sequence points.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.MethodDebugInformation.methodScopes">
            <summary>
            All associated method scopes.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.MethodDebugInformation.syncLock">
            <summary>
            The internal synchronization object.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodDebugInformation.#ctor(ILGPU.Frontend.DebugInformation.AssemblyDebugInformation,System.Reflection.MethodBase,System.Reflection.Metadata.MethodDefinitionHandle)">
            <summary>
            Constructs method debug information.
            </summary>
            <param name="assemblyDebugInformation">
            The parent assembly debug information
            </param>
            <param name="methodBase">The target method.</param>
            <param name="handle">
            The debug handle of the given method.
            </param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodDebugInformation.AssemblyDebugInformation">
            <summary>
            Returns the associated assembly debug information.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodDebugInformation.MethodBase">
            <summary>
            Returns the associated method base.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodDebugInformation.Handle">
            <summary>
            Returns the associated the method debug-information handle.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodDebugInformation.SequencePoints">
            <summary>
            Returns all sequence points of the current method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodDebugInformation.MethodScopes">
            <summary>
            Returns all method scops of the current method.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodDebugInformation.CreateSequencePointEnumerator">
            <summary>
            Creates a new sequence-point enumerator for the current method.
            </summary>
            <returns>The created sequence-point enumerator.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.MethodScope">
            <summary>
            Represents a default method scope.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.MethodScope.Invalid">
            <summary>
            Represents an invalid method scope.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.LoadVariables(System.Reflection.Metadata.LocalScope@,System.Reflection.Metadata.MetadataReader)">
            <summary>
            Loads local variables from the given scope.
            </summary>
            <param name="localScope">The parent local scope.</param>
            <param name="reader">The reader to read from.</param>
            <returns>The array of local variables.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.#ctor(System.Reflection.Metadata.LocalScope@,System.Reflection.Metadata.MetadataReader)">
            <summary>
            Constructs a new scope.
            </summary>
            <param name="localScope">The current local scope.</param>
            <param name="reader">The associated metadata reader.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.MetadataReader">
            <summary>
            Returns the associated metadata reader.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.StartOffset">
            <summary>
            Returns the start offset of the current scope.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.EndOffset">
            <summary>
            Returns the end offset of the current scope.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.Length">
            <summary>
            Returns the length of the current scope.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.Variables">
            <summary>
            Returns all local variables.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.GetEnumerator">
            <summary>
            Returns an unboxed variable enumerator.
            </summary>
            <returns>An unboxed variable enumerator.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.Equals(ILGPU.Frontend.DebugInformation.MethodScope)">
            <summary>
            Returns true if the given scope is equal to the current scope.
            </summary>
            <param name="other">The other scope.</param>
            <returns>True, if the given scope is equal to the current scope.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current scope.
            </summary>
            <param name="obj">The other sequence object.</param>
            <returns>True, if the given object is equal to the current scope.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.GetHashCode">
            <summary>
            Returns the hash code of this scope.
            </summary>
            <returns>The hash code of this scope.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.ToString">
            <summary>
            Returns the string representation of this scope.
            </summary>
            <returns>The string representation of this scope.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.SequencePoint">
            <summary>
            Represents a single sequence point of an instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePoint.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new sequence point.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="offset">The byte offset.</param>
            <param name="startColumn">The start column.</param>
            <param name="endColumn">The end column.</param>
            <param name="startLine">The start line.</param>
            <param name="endLine">The end line.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePoint.Offset">
            <summary>
            Returns the associated offset (optional)
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePoint.Merge(ILGPU.IR.FileLocation)">
            <summary>
            Merges this sequence point with the other file location.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePoint.ToString">
            <summary>
            Returns the location information of this sequence point.
            </summary>
            <returns>
            The location information string that represents this sequence point.
            </returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.SequencePointEnumerator">
            <summary>
            Represents a sequence-point enumerator for methods.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.Empty">
            <summary>
            Represents an empty sequence-point enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.Frontend.DebugInformation.SequencePoint})">
            <summary>
            Constructs an empty sequence-point enumerator.
            </summary>
            <param name="sequencePoints">The wrapped sequence points.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.SequencePoints">
            <summary>
            Returns the associated sequence points.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.IsValid">
            <summary>
            Returns true if the current enumerator state points to a valid sequence
            point.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.Current">
            <summary>
            Returns the current sequence point.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.MoveTo(System.Int32)">
            <summary>
            Tries to move the enumerator to the given offset in bytes.
            </summary>
            <param name="offset">The target instruction offset in bytes.</param>
            <returns>True, is the next sequence point is valid.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DisassembledMethod">
            <summary>
            Represents a disassembled method.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.Method">
            <summary>
            Returns the method that was disassembled.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.FirstInstruction">
            <summary>
            Returns the first disassembled instruction.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.FirstLocation">
            <summary>
            Returns the first location of this function.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.Instructions">
            <summary>
            Returns the disassembled instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.MaxStackSize">
            <summary>
            Returns the maximum stack size.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.Count">
            <summary>
            Returns the number of instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.Item(System.Int32)">
            <summary>
            Returns the instruction at the given index.
            </summary>
            <param name="index">The instruction index.</param>
            <returns>The instruction at the given index.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DisassembledMethod.GetEnumerator">
            <summary>
            Returns an instruction enumerator.
            </summary>
            <returns>An instruction enumerator.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DisassembledMethod.DisassembleAsync(System.Reflection.MethodBase)">
            <summary>
            Disassembles the given method.
            </summary>
            <param name="method">The method to disassemble.</param>
            <returns>The disassembled method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DisassembledMethod.DisassembleAsync(System.Reflection.MethodBase,ILGPU.Frontend.DebugInformation.SequencePointEnumerator)">
            <summary>
            Disassembles the given method.
            </summary>
            <param name="method">The method to disassemble.</param>
            <param name="sequencePointEnumerator">
            The associated sequence-point enumerator.
            </param>
            <returns>The disassembled method.</returns>
        </member>
        <member name="T:ILGPU.Frontend.Disassembler">
            <summary>
            Represents a disassembler for .Net methods.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.NativePtrType">
            <summary>
            Represents the native pointer type that is used during the
            disassembling process.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.il">
            <summary>
            The current IL byte code.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.ilOffset">
            <summary>
            The current offset within the byte code.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.instructionOffset">
            <summary>
            The current instruction type.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.flags">
            <summary>
            The current flags that are applied to the next instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.flagsArgument">
            <summary>
            The current flags argument.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.instructions">
            <summary>
            Represents the current list of instructions.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.debugInformationEnumerator">
            <summary>
            Represents the associated sequence-point enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.#ctor(System.Reflection.MethodBase,ILGPU.Frontend.DebugInformation.SequencePointEnumerator)">
            <summary>
            Constructs a new disassembler.
            </summary>
            <param name="methodBase">The target method.</param>
            <param name="sequencePointEnumerator">
            The associated sequence-point enumerator.
            </param>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.MethodBase">
            <summary>
            Returns the current method base.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.MethodBody">
            <summary>
            Returns the current method body.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.DeclaringType">
            <summary>
            Returns the declaring type of the method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.AssociatedModule">
            <summary>
            Returns the associated managed module.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.MethodGenericArguments">
            <summary>
            Returns the generic arguments of the method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.TypeGenericArguments">
            <summary>
            Returns the generic arguments of the declaring type.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.CurrentLocation">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ILGPU#IR#ILocation#FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include the current sequence point.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.Disassemble">
            <summary>
            Disassembles the current method and returns a list of
            disassembled instructions.
            </summary>
            <returns>The list of disassembled instructions.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.DisassembleCall(ILGPU.Frontend.ILInstructionType,System.Int32)">
            <summary>
            Disassembles a call to the given method.
            </summary>
            <param name="type">The instruction type.</param>
            <param name="methodToken">The token of the method to be disassembled.</param>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.AddFlags(ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Adds the given flags to the current instruction flags.
            </summary>
            <param name="flagsToAdd">The flags to be added.</param>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.AppendInstruction(ILGPU.Frontend.ILInstructionType,System.UInt16,System.UInt16,System.Object)">
            <summary>
            Appends an instruction to the current instruction list.
            </summary>
            <param name="type">The instruction type.</param>
            <param name="popCount">
            The number of elements to pop from the stack.
            </param>
            <param name="pushCount">
            The number of elements to push onto the stack.
            </param>
            <param name="argument">The argument of the instruction.</param>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.AppendInstructionWithFlags(ILGPU.Frontend.ILInstructionType,System.UInt16,System.UInt16,ILGPU.Frontend.ILInstructionFlags,System.Object)">
            <summary>
            Appends an instruction to the current instruction list.
            </summary>
            <param name="type">The instruction type.</param>
            <param name="popCount">
            The number of elements to pop from the stack.
            </param>
            <param name="pushCount">
            The number of elements to push onto the stack.
            </param>
            <param name="additionalFlags">Additional instruction flags.</param>
            <param name="argument">The argument of the instruction.</param>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ResolveType(System.Int32)">
            <summary>
            Resolves the type for the given token using
            the current generic information.
            </summary>
            <param name="token">The token of the type to resolve.</param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ResolveMethod(System.Int32)">
            <summary>
            Resolves the method for the given token using
            the current generic information.
            </summary>
            <param name="token">The token of the method to resolve.</param>
            <returns>The resolved method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ResolveField(System.Int32)">
            <summary>
            Resolves the field for the given token using
            the current generic information.
            </summary>
            <param name="token">The token of the field to resolve.</param>
            <returns>The resolved field.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadOpCode">
            <summary>
            Reads an op-code from the current instruction data.
            </summary>
            <returns>The decoded op-code.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadShortBranchTarget">
            <summary>
            Reads a short branch target from the current instruction data.
            </summary>
            <returns>The decoded short branch target.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadBranchTarget">
            <summary>
            Reads a branch target from the current instruction data.
            </summary>
            <returns>The decoded branch target.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadByteArg">
            <summary>
            Reads a byte from the current instruction data.
            </summary>
            <returns>The decoded byte.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadTypeArg">
            <summary>
            Reads a type reference from the current instruction data.
            </summary>
            <returns>The decoded type reference.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadFieldArg">
            <summary>
            Reads a field reference from the current instruction data.
            </summary>
            <returns>The decoded field reference.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadSByteArg">
            <summary>
            Reads a sbyte from the current instruction data.
            </summary>
            <returns>The decoded sbyte.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadUShortArg">
            <summary>
            Reads an ushort from the current instruction data.
            </summary>
            <returns>The decoded ushort.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadIntArg">
            <summary>
            Reads an int from the current instruction data.
            </summary>
            <returns>The decoded int.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadUIntArg">
            <summary>
            Reads an uint from the current instruction data.
            </summary>
            <returns>The decoded uint.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadSingleArg">
            <summary>
            Reads a string from the current instruction data.
            </summary>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadLongArg">
            <summary>
            Reads a long from the current instruction data.
            </summary>
            <returns>The decoded long.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadDoubleArg">
            <summary>
            Reads a double from the current instruction data.
            </summary>
            <returns>The decoded double.</returns>
        </member>
        <member name="T:ILGPU.Frontend.ExternalAttribute">
            <summary>
            Marks external methods that are opaque in the scope of the ILGPU IR.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ExternalAttribute.#ctor(System.String)">
            <summary>
            Constructs a new external attribute.
            </summary>
            <param name="name">The external name.</param>
        </member>
        <member name="P:ILGPU.Frontend.ExternalAttribute.Name">
            <summary>
            Returns the associated internal function name.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ExternalAttribute.GetName(System.Reflection.MethodInfo)">
            <summary>
            Resolves the actual IR name.
            </summary>
            <param name="method">The source method.</param>
            <returns>The IR name.</returns>
        </member>
        <member name="T:ILGPU.Frontend.ILFrontend">
            <summary>
            The ILGPU MSIL frontend.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.ILFrontend.ProcessingEntry">
            <summary>
            Represents a single processing entry.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.ProcessingEntry.Method">
            <summary>
            Returns the method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.ProcessingEntry.Result">
            <summary>
            Returns the processing future.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.ProcessingEntry.IsExternalRequest">
            <summary>
            Returns true if this is an external processing request.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.ProcessingEntry.SetResult(ILGPU.IR.Method)">
            <summary>
            Signals the future with the given value.
            </summary>
            <param name="irFunction">The function value.</param>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.#ctor(ILGPU.Frontend.DebugInformation.DebugInformationManager)">
            <summary>
            Constructs a new frontend with two threads.
            </summary>
            <param name="debugInformationManager">
            The associated debug information manager.
            </param>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.#ctor(ILGPU.Frontend.DebugInformation.DebugInformationManager,System.Int32)">
            <summary>
            Constructs a new frontend that uses the given number of
            threads for code generation.
            </summary>
            <param name="debugInformationManager">
            The associated debug information manager.
            </param>
            <param name="numThreads">The number of threads.</param>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.DebugInformationManager">
            <summary>
            Returns the associated debug information manager (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.IsFaulted">
            <summary>
            Returns true if the code generation has failed.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.LastException">
            <summary>
            Returns the exception from code generation failure.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.DoWork">
            <summary>
            The code-generation thread.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.GenerateCode(System.Reflection.MethodBase)">
            <summary>
            Internal method used for code generation.
            </summary>
            <param name="method">The method.</param>
            <returns>The generation future.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.BeginCodeGeneration(ILGPU.IR.IRContext)">
            <summary>
            Starts a code-generation phase.
            </summary>
            <param name="context">The target IR context.</param>
            <returns>The created code-generation phase.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.FinishCodeGeneration(ILGPU.Frontend.CodeGenerationPhase)">
            <summary>
            Finishes the current code-generation phase.
            </summary>
            <param name="phase">The current phase.</param>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Frontend.CodeGenerationResult">
            <summary>
            Represents a code-generation future.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationResult.#ctor(System.Reflection.MethodBase)">
            <summary>
            Creates a new code generation result.
            </summary>
            <param name="method">The associated method.</param>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationResult.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationResult.Result">
            <summary>
            The associated function result.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationResult.ResultHandle">
            <summary>
            Returns the associated function handle.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationResult.HasResult">
            <summary>
            Returns true if this result has a function value.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationResult.FirstException">
            <summary>
            The first exception during code generation, if any.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.CodeGenerationPhase">
            <summary>
            A single code generation phase.
            Note that only a single phase instance can be created at a time.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.#ctor(ILGPU.Frontend.ILFrontend,ILGPU.IR.IRContext,ILGPU.IR.Verifier)">
            <summary>
            Constructs a new generation phase.
            </summary>
            <param name="frontend">The current frontend instance.</param>
            <param name="context">The target IR context.</param>
            <param name="verifier">The associated verifier.</param>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.Frontend">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.DebugInformationManager">
            <summary>
            Returns the associated debug information manager (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.Verifier">
            <summary>
            Returns the associated verifier instance.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.IsFinished">
            <summary>
            Returns true if the generation phase has been finished.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.HadWorkToDo">
            <summary>
            Returns true if the code generation phase had work to do.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.FirstException">
            <summary>
            Returns the first exception recorded during code-generation.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.DeclareMethod(ILGPU.IR.MethodDeclaration)">
            <summary>
            Declares a method.
            </summary>
            <param name="methodDeclaration">The method declaration.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.DeclareMethod(ILGPU.IR.MethodDeclaration,System.Boolean@)">
            <summary>
            Declares a method.
            </summary>
            <param name="methodDeclaration">The method declaration.</param>
            <param name="created">True, if the method has been created.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.GenerateCodeInternal(System.Reflection.MethodBase,System.Boolean,System.Collections.Generic.HashSet{System.Reflection.MethodBase},ILGPU.IR.Method@)">
            <summary>
            Performs the actual (asynchronous) code generation.
            </summary>
            <param name="method">The method.</param>
            <param name="isExternalRequest">
            True, if processing of this method was requested by a user.
            </param>
            <param name="detectedMethods">The set of newly detected methods.</param>
            <param name="generatedMethod">The resolved IR method.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.GenerateCode(System.Reflection.MethodBase)">
            <summary>
            Generates code for the given method.
            </summary>
            <param name="method">The method.</param>
            <returns>A completion future.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.RecordException(System.Exception)">
            <summary>
            Records an exception during code-generation.
            </summary>
            <param name="exception">The exception to record.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Frontend.ILInstructionType">
            <summary>
            Represents an instruction type of a single IL instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Nop">
            
             <summary>Nop</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Break">
            
             <summary>Break</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldarg">
            
             <summary>Ldarg</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldarga">
            
             <summary>Ldarga</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Starg">
            
             <summary>Starg</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldloc">
            
             <summary>Ldloc</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldloca">
            
             <summary>Ldloca</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stloc">
            
             <summary>Stloc</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldnull">
            
             <summary>Ldnull</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.LdI4">
            
             <summary>LdI4</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.LdI8">
            
             <summary>LdI8</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.LdR4">
            
             <summary>LdR4</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.LdR8">
            
             <summary>LdR8</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldstr">
            
             <summary>Ldstr</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Dup">
            
             <summary>Dup</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Pop">
            
             <summary>Pop</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Jmp">
            
             <summary>Jmp</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Call">
            
             <summary>Call</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Calli">
            
             <summary>Calli</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Callvirt">
            
             <summary>Callvirt</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ret">
            
             <summary>Ret</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Br">
            
             <summary>Br</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Brfalse">
            
             <summary>Brfalse</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Brtrue">
            
             <summary>Brtrue</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Beq">
            
             <summary></summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Bne">
            
             <summary>Bne</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Bge">
            
             <summary>Bge</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Bgt">
            
             <summary>Bgt</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ble">
            
             <summary>Ble</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Blt">
            
             <summary>Blt</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Switch">
            
             <summary>Switch</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Add">
            
             <summary>Add</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Sub">
            
             <summary>Sub</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Mul">
            
             <summary>Mul</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Div">
            
             <summary>Div</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Rem">
            
             <summary>Rem</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.And">
            
             <summary>And</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Or">
            
             <summary>Or</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Xor">
            
             <summary>Xor</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Shl">
            
             <summary>Shl</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Shr">
            
             <summary>Shr</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Neg">
            
             <summary>Neg</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Not">
            
             <summary>Not</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Conv">
            
             <summary>Conv</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Initobj">
            
             <summary>Initobj</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Newobj">
            
             <summary>Newobj</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Newarr">
            
             <summary>Newarr</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Castclass">
            
             <summary>Castclass</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Isinst">
            
             <summary>Isinst</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Box">
            
             <summary>Box</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Unbox">
            
             <summary>Unbox</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldfld">
            
             <summary>Ldfld</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldflda">
            
             <summary>Ldflda</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stfld">
            
             <summary>Stfld</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldsfld">
            
             <summary>Ldsfld</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldsflda">
            
             <summary>Ldsflda</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stsfld">
            
             <summary>Stsfld</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldobj">
            
             <summary>Ldobj</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stobj">
            
             <summary>Stobj</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Cpobj">
            
             <summary>Cpobj</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldlen">
            
             <summary>Ldlen</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldelem">
            
             <summary>Ldelem</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldelema">
            
             <summary>Ldelema</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stelem">
            
             <summary>Stelem</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ceq">
            
             <summary>Ceq</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Cgt">
            
             <summary>Cgt</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Clt">
            
             <summary>Clt</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldind">
            
             <summary>Ldind</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stind">
            
             <summary>Stind</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Localloc">
            
             <summary>Localloc</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Cpblk">
            
             <summary>Cpblk</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Initblk">
            
             <summary>Initblk</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.SizeOf">
            
             <summary>SizeOf</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.LdToken">
            
             <summary>LoadToken</summary>
            
        </member>
        <member name="T:ILGPU.Frontend.ILInstructionBranchTargets">
            <summary>
            Represents a collection of branch targets.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionBranchTargets.#ctor(System.Int32[])">
            <summary>
            Constructs a new container for branch targets.
            </summary>
            <param name="targets"></param>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.Count">
            <summary>
            Returns the number of targets
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.Item(System.Int32)">
            <summary>
            Returns the target offset at the given index.
            </summary>
            <param name="index">The index of the target offset.</param>
            <returns>The resolved target offset.</returns>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.UnconditionalBranchTarget">
            <summary>
            Returns the unconditional branch target (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.ConditionalBranchIfTarget">
            <summary>
            Returns the conditional branch if-target (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.ConditionalBranchElseTarget">
            <summary>
            Returns the conditional branch else-target (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.SwitchDefaultTarget">
            <summary>
            Returns the default switch branch target (if any).
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionBranchTargets.GetTargetOffsets">
            <summary>
            Returns the branch offsets.
            </summary>
            <returns>The branch offsets.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionBranchTargets.ToString">
            <summary>
            Returns the string representation of the branch targets.
            </summary>
            <returns>The string representation of the branch targets.</returns>
        </member>
        <member name="T:ILGPU.Frontend.ILInstructionFlags">
            <summary>
            Represent flags of an IL instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Unsigned">
            <summary>
            Unsigned operation.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Overflow">
            <summary>
            Overflow check requested.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Unchecked">
            <summary>
            Unchecked operation.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Unaligned">
            <summary>
            Unaligned operation.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Volatile">
            <summary>
            Volatile access.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.ReadOnly">
            <summary>
            ReadOnly access.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Tail">
            <summary>
            Tail call.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Constrained">
            <summary>
            Constraint virtual-function access.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.ILInstructionFlagsExtensions">
            <summary>
            Contains extension methods for instruction flags.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsExtensions.HasFlags(ILGPU.Frontend.ILInstructionFlags,ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Returns true if given flags have the other flags set;
            </summary>
            <param name="flags">The current flags.</param>
            <param name="otherFlags">The flags to check.</param>
            <returns>True, if given flags have the other flags set.</returns>
        </member>
        <member name="T:ILGPU.Frontend.ILInstructionFlagsContext">
            <summary>
            Represents a context of instruction flags.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.#ctor(ILGPU.Frontend.ILInstructionFlags,System.Object)">
            <summary>
            Constructs a new instruction-flag context.
            </summary>
            <param name="flags">The instruction flags.</param>
            <param name="argument">The flags argument.</param>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionFlagsContext.Flags">
            <summary>
            Returns the flags.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionFlagsContext.Argument">
            <summary>
            Returns the flag argument.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.Equals(ILGPU.Frontend.ILInstructionFlagsContext)">
            <summary>
            Returns true if the current object is equal to the given one.
            </summary>
            <param name="other">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.Equals(System.Object)">
            <summary>
            Returns true if the current object is equal to the given one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.GetHashCode">
            <summary>
            Returns the hash code of this flags.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.ToString">
            <summary>
            Returns the string representation of this flags.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.op_Equality(ILGPU.Frontend.ILInstructionFlagsContext,ILGPU.Frontend.ILInstructionFlagsContext)">
            <summary>
            Returns true if the first instruction context is equal to the second one.
            </summary>
            <param name="first">The first instruction context.</param>
            <param name="second">The second instruction context.</param>
            <returns>
            True, if the first instruction is equal to the second one.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.op_Inequality(ILGPU.Frontend.ILInstructionFlagsContext,ILGPU.Frontend.ILInstructionFlagsContext)">
            <summary>
            Returns true if the first instruction context is not equal to the second
            one.
            </summary>
            <param name="first">The first instruction context.</param>
            <param name="second">The second instruction context.</param>
            <returns>
            True, if the first instruction is not equal to the second one.
            </returns>
        </member>
        <member name="T:ILGPU.Frontend.IILInstructionOffsetOperation">
            <summary>
            An abstract operation that can be invoked for any instruction offset.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.IILInstructionOffsetOperation.Apply(ILGPU.Frontend.ILInstruction,System.Int32)">
            <summary>
            Applies the current operation with the given instruction offset.
            </summary>
            <param name="instruction">The parent instruction.</param>
            <param name="offset">An instruction offset of the parent operation.</param>
        </member>
        <member name="T:ILGPU.Frontend.ILInstruction">
            <summary>
            Represents a single IL instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.#ctor(System.Int32,ILGPU.Frontend.ILInstructionType,ILGPU.Frontend.ILInstructionFlagsContext,System.UInt16,System.UInt16,System.Object,ILGPU.IR.Location)">
            <summary>
            Constructs a new IL instruction.
            </summary>
            <param name="offset">The instruction offset in bytes.</param>
            <param name="type">The instruction type.</param>
            <param name="flagsContext">The flags context.</param>
            <param name="popCount">The number of elements to pop from the stack.</param>
            <param name="pushCount">
            The number of elements to push onto the stack.
            </param>
            <param name="argument">The instruction argument.</param>
            <param name="location">The current location.</param>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.Offset">
            <summary>
            Returns the instruction offset in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.InstructionType">
            <summary>
            Returns the instruction type.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.Flags">
            <summary>
            Returns the instruction flags.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.FlagsContext">
            <summary>
            Returns the instruction-flags context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.PopCount">
            <summary>
            Returns the number of elements to pop from the stack.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.PushCount">
            <summary>
            Returns the number of elements to push onto the stack.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.Argument">
            <summary>
            Returns the instruction argument.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.IsCall">
            <summary>
            Returns true if the instruction is a call instruction.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.IsTerminator">
            <summary>
            Returns true if this instruction is a basic block terminator.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.Location">
            <summary>
            Returns the associated location.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.GetArgumentAs``1">
            <summary>
            Returns the instruction argument as T.
            </summary>
            <typeparam name="T">The target type T.</typeparam>
            <returns>The instruction argument T.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.HasFlags(ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Returns true if current instruction has the given flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, if current instruction has the given flags.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.ForEachOffset``1(``0)">
            <summary>
            Performs the given operation for each instruction offset.
            </summary>
            <param name="operation">The operation to execute.</param>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.Equals(ILGPU.Frontend.ILInstruction)">
            <summary>
            Returns true if the current object is equal to the given one.
            </summary>
            <param name="other">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.Equals(System.Object)">
            <summary>
            Returns true if the current object is equal to the given one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.GetHashCode">
            <summary>
            Returns the hash code of this instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.ToString">
            <summary>
            Returns the string representation of this instruction.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.AcceleratorIntrinsicAttribute">
            <summary>
            Marks accelerator methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.AcceleratorIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.Intrinsics">
            <summary>
            Contains default ILGPU intrinsics.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleAcceleratorOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.AcceleratorIntrinsicAttribute)">
            <summary>
            Handles accelerator operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleAtomicOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.AtomicIntrinsicAttribute)">
            <summary>
            Handles atomics.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleCompareOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.CompareIntriniscAttribute)">
            <summary>
            Handles compare operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleConvertOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.ConvertIntriniscAttribute)">
            <summary>
            Handles convert operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleGridOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.GridIntrinsicAttribute)">
            <summary>
            Handles grid operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleGroupOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.GroupIntrinsicAttribute)">
            <summary>
            Handles group operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleInterop(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.InteropIntrinsicAttribute)">
            <summary>
            Handles interop operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateOffsetOf(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Creates a new offset-of computation.
            </summary>
            <param name="context">The current invocation context.</param>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.Intrinsics.DeviceFunctionHandler">
            <summary>
            Represents a basic handler for compiler-specific device functions.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.Intrinsics.DeviceFunctionHandler`1">
            <summary>
            Represents a basic handler for compiler-specific device functions.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Intrinsic.Intrinsics.FunctionHandlers">
            <summary>
            Stores function handlers.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleIntrinsic(ILGPU.Frontend.InvocationContext@,ILGPU.IR.Values.ValueReference@)">
            <summary>
            Tries to handle a specific invocation context. This method
            can generate custom code instead of the default method-invocation
            functionality.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="result">The resulting value of the intrinsic call.</param>
            <returns>True, if this class could handle the call.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.IsIntrinsicArrayType(System.Type)">
            <summary>
            Determines whether the given type is an intrinsic array type.
            </summary>
            <param name="type">The type to test.</param>
            <returns>True, if the given type is an intrinsic array type.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleActivator(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Handles activator operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleDebugAndTrace(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Handles debugging operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleRuntimeHelper(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Handles runtime operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.InitializeArray(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Initializes arrays.
            </summary>
            <param name="context">The current invocation context.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleArrays(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Handles array operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateNewArray(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Creates a new array instance.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateGetArrayElement(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Gets an array element.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateSetArrayElement(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Sets an array element.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleMathOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.MathIntrinsicAttribute)">
            <summary>
            Handles math operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleMemoryBarrierOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.MemoryBarrierIntrinsicAttribute)">
            <summary>
            Handles memory barriers.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleSharedMemoryOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.SharedMemoryIntrinsicAttribute)">
            <summary>
            Handles view operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleUtilityOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.UtilityIntrinsicAttribute)">
            <summary>
            Handles utility functions.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleViewOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.ViewIntrinsicAttribute)">
            <summary>
            Handles shared memory operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.RemapToLinearElementAddress(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Remaps intrinsic index-linerization functionality to a specific linearization
            function (see also <see cref="M:ILGPU.IndexTypeExtensions.GetViewLinearIndexMethod(System.Type,System.Type)"/>).
            </summary>
            <param name="context">The invocation context.</param>
            <returns>The remapped call reference.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleWarpOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.WarpIntrinsicAttribute)">
            <summary>
            Handles warp operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.AtomicIntrinsicAttribute">
            <summary>
            Marks intrinsic atomic methods.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.AtomicIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the associated intrinsic kind.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.AtomicIntrinsicAttribute.IntrinsicFlags">
            <summary>
            Returns the associated intrinsic flags.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.CompareIntriniscAttribute">
            <summary>
            Marks compare intrinsics that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.CompareIntriniscAttribute.IntrinsicKind">
            <summary>
            Returns the associated intrinsic kind.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.CompareIntriniscAttribute.IntrinsicFlags">
            <summary>
            Returns the associated intrinsic flags.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.ConvertIntriniscAttribute">
            <summary>
            Marks compare intrinsics that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.ConvertIntriniscAttribute.IntrinsicFlags">
            <summary>
            Returns the associated intrinsic flags.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.GridIntrinsicAttribute">
            <summary>
            Marks grid methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.GridIntrinsicAttribute.Dimension">
            <summary>
            The associated constant dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.GridIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.GroupIntrinsicAttribute">
            <summary>
            Marks group methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.GroupIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.InteropIntrinsicAttribute">
            <summary>
            Marks intrinsic interop methods.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.InteropIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.IntrinsicAttribute">
            <summary>
            Marks methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.IntrinsicAttribute.Type">
            <summary>
            Returns the type of this intrinsic attribute.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.MathIntrinsicAttribute">
            <summary>
            Marks math methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.MathIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the associated intrinsic kind.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.MathIntrinsicAttribute.IntrinsicFlags">
            <summary>
            Returns the associated intrinsic flags.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.MemoryBarrierIntrinsicAttribute">
            <summary>
            Marks memory-barrier methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.MemoryBarrierIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.RemappedIntrinsics">
            <summary>
            Contains default remapped ILGPU intrinsics.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.MathType">
            <summary>
            The global <see cref="T:ILGPU.IntrinsicMath"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.CPUMathType">
            <summary>
            The global <see cref="T:ILGPU.IntrinsicMath.CPUOnly"/> type.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.DeviceFunctionRemapper">
            <summary>
            Represents a basic remapper for compiler-specific device functions.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.FunctionRemappers">
            <summary>
            Stores function remappers.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.AddDebugRemapping(System.Type,System.Type)">
            <summary>
            Registers a new debug mapping.
            </summary>
            <param name="remappedType">The remapped intrinsics type.</param>
            <param name="debugType">The debug type.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.AddDebugRemapping(System.Type,System.String,System.Type,System.String,System.Type[])">
            <summary>
            Registers a new debug mapping.
            </summary>
            <param name="remappedType">The remapped intrinsics type.</param>
            <param name="internalMethod">The internal method name.</param>
            <param name="debugType">The debug type.</param>
            <param name="method">The original method name.</param>
            <param name="parameters">The parameters types of all functions.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.AddRemapping(System.Type,System.Type,System.String,System.Type[])">
            <summary>
            Registers a math mapping for a function from a source type to a target type.
            </summary>
            <param name="sourceType">The source math type.</param>
            <param name="targetType">The target math type.</param>
            <param name="functionName">
            The name of the function in the scope of mathType.
            </param>
            <param name="paramTypes">The parameter types of both functions.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.AddRemapping(System.Reflection.MethodInfo,ILGPU.Frontend.Intrinsic.RemappedIntrinsics.DeviceFunctionRemapper)">
            <summary>
            Registers a global remapping for the given method object.
            </summary>
            <param name="methodInfo">The method to remap.</param>
            <param name="remapper">The remapping method.</param>
            <remarks>
            This method is not thread safe.
            </remarks>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.RemapIntrinsic(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Tries to remap the given invocation context.
            </summary>
            <param name="context">The invocation context.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.DebugAssertCondition(System.Boolean)">
            <summary>
            Implements a simple debug assertion.
            </summary>
            <param name="condition">The assertion condition.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.DebugAssertConditionMessage(System.Boolean,System.String)">
            <summary>
            Implements a simple debug assertion.
            </summary>
            <param name="condition">The assertion condition.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.SharedMemoryIntrinsicAttribute">
            <summary>
            Marks shared-memory methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.SharedMemoryIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.UtilityIntrinsicAttribute">
            <summary>
            Marks intrinsic utility methods.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.UtilityIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the associated intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.ViewIntrinsicAttribute">
            <summary>
            Marks view methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.ViewIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.WarpIntrinsicAttribute">
            <summary>
            Marks warp methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.WarpIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.InvocationContext">
            <summary>
            Represents an invocation context for compiler-known methods
            that are supported in the scope of ILGPU programs.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.InvocationContext.argumentsRef">
            <summary>
            The internal arguments pointer.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.#ctor(ILGPU.Frontend.CodeGenerator,ILGPU.IR.Location,ILGPU.Frontend.Block,System.Reflection.MethodBase,System.Reflection.MethodBase,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Constructs a new invocation context.
            </summary>
            <param name="codeGenerator">The associated code generator.</param>
            <param name="location">The current location.</param>
            <param name="block">The current block.</param>
            <param name="callerMethod">The caller.</param>
            <param name="method">The called method.</param>
            <param name="arguments">The method arguments.</param>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.CodeGenerator">
            <summary>
            Returns the associated code generator.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Block">
            <summary>
            Return the current basic block.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Context">
            <summary>
            Returns the current IR context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Builder">
            <summary>
            Returns the current IR builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.CallerMethod">
            <summary>
            Represents the caller method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Method">
            <summary>
            Represents the targeted method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Module">
            <summary>
            Returns the associated module.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Arguments">
            <summary>
            Returns the call arguments.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.NumArguments">
            <summary>
            Returns the number of arguments.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Item(System.Int32)">
            <summary>
            Returns the argument with the given index.
            </summary>
            <param name="index">The argument index.</param>
            <returns>The argument with the given index.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific exception information.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.GetMethodGenericArguments">
            <summary>
            Returns the generic arguments of the used method.
            </summary>
            <returns>The generic arguments of the used method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.GetTypeGenericArguments">
            <summary>
            Returns the generic arguments of the used method.
            </summary>
            <returns>The generic arguments of the used method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.DeclareFunction(System.Reflection.MethodBase)">
            <summary>
            Declares a new top-level function.
            </summary>
            <param name="methodBase">The method to declare.</param>
            <returns>The declared top-level function.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.ToString">
            <summary>
            Returns the string representation of this invocation context.
            </summary>
            <returns>The string representation of this invocation context.</returns>
        </member>
        <member name="T:ILGPU.Frontend.VariableRefType">
            <summary>
            The type of a single variable reference.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.VariableRefType.Argument">
            <summary>
            Represents a reference to a function argument.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.VariableRefType.Local">
            <summary>
            Represents a reference to a local variable.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.VariableRefType.Stack">
            <summary>
            Represents a reference to a stack slot.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.VariableRefType.Memory">
            <summary>
            Represents an abstract memory monad.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.VariableRef">
            <summary>
            Represents a single variable.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.VariableRef.Memory">
            <summary>
            Represents a reference to a memory monad.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.#ctor(System.Int32,ILGPU.Frontend.VariableRefType)">
            <summary>
            Constructs a new variable entry. 
            </summary>
            <param name="index">Index of the variable.</param>
            <param name="refType">Type of this variable reference.</param>
        </member>
        <member name="P:ILGPU.Frontend.VariableRef.Index">
            <summary>
            Returns the index of the variable.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.VariableRef.RefType">
            <summary>
            Returns the variable-reference type.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.Equals(ILGPU.Frontend.VariableRef)">
            <summary>
            Returns true if the given variable ref is equal to the current one.
            </summary>
            <param name="other">The other variable reference.</param>
            <returns>
            True, if the given variable ref is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given variable ref is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.GetHashCode">
            <summary>
            Returns the hash code of this variable reference.
            </summary>
            <returns>The hash code of this variable reference.</returns>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.ToString">
            <summary>
            Returns the string representation of this variable.
            </summary>
            <returns>The string representation of this variable.</returns>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.op_Equality(ILGPU.Frontend.VariableRef,ILGPU.Frontend.VariableRef)">
            <summary>
            Returns true if both variable references represent the same variable.
            </summary>
            <param name="first">The first reference.</param>
            <param name="second">The second reference.</param>
            <returns>
            True, if both variable references represent the same variable.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.op_Inequality(ILGPU.Frontend.VariableRef,ILGPU.Frontend.VariableRef)">
            <summary>
            Returns true if both variable references do not represent the same variable.
            </summary>
            <param name="first">The first reference.</param>
            <param name="second">The second reference.</param>
            <returns>
            True, if both variable references do not represent the same variable.
            </returns>
        </member>
        <member name="T:ILGPU.Grid">
            <summary>
            Contains general grid functions.
            </summary>
        </member>
        <member name="P:ILGPU.Grid.IndexX">
            <summary>
            Returns the X index withing the scheduled thread grid.
            </summary>
            <returns>The X grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.IdxX">
            <summary>
            Returns the X index withing the scheduled thread grid.
            </summary>
            <returns>The X grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.IndexY">
            <summary>
            Returns the Y index withing the scheduled thread grid.
            </summary>
            <returns>The Y grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.IdxY">
            <summary>
            Returns the Y index withing the scheduled thread grid.
            </summary>
            <returns>The Y grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.IndexZ">
            <summary>
            Returns the Z index withing the scheduled thread grid.
            </summary>
            <returns>The Z grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.IdxZ">
            <summary>
            Returns the Z index withing the scheduled thread grid.
            </summary>
            <returns>The Z grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.Index">
            <summary>
            Returns the index within the scheduled thread grid.
            </summary>
            <returns>The grid index.</returns>
        </member>
        <member name="P:ILGPU.Grid.DimensionX">
            <summary>
            Returns the X dimension of the scheduled thread grid.
            </summary>
            <returns>The X grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.DimX">
            <summary>
            Returns the X dimension of the scheduled thread grid.
            </summary>
            <returns>The X grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.DimensionY">
            <summary>
            Returns the Y dimension of the scheduled thread grid.
            </summary>
            <returns>The Y grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.DimY">
            <summary>
            Returns the Y dimension of the scheduled thread grid.
            </summary>
            <returns>The Y grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.DimensionZ">
            <summary>
            Returns the Z dimension of the scheduled thread grid.
            </summary>
            <returns>The Z grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.DimZ">
            <summary>
            Returns the Z dimension of the scheduled thread grid.
            </summary>
            <returns>The Z grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.Dimension">
            <summary>
            Returns the dimension of the scheduled thread grid.
            </summary>
            <returns>The grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.GlobalIndex">
            <summary>
            Returns the global index.
            </summary>
        </member>
        <member name="M:ILGPU.Grid.ComputeGlobalIndex(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Computes the global index of a given gridIdx and a groupIdx.
            </summary>
            <param name="gridIdx">The grid index.</param>
            <param name="groupIdx">The group index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.Grid.ComputeGlobalIndex(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Computes the global index of a given gridIdx and a groupIdx.
            </summary>
            <param name="gridIdx">The grid index.</param>
            <param name="groupIdx">The group index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.Grid.ComputeGlobalIndex(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Computes the global index of a given gridIdx and a groupIdx.
            </summary>
            <param name="gridIdx">The grid index.</param>
            <param name="groupIdx">The group index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="T:ILGPU.Group">
            <summary>
            Contains general grid functions.
            </summary>
        </member>
        <member name="P:ILGPU.Group.IndexX">
            <summary>
            Returns the X index withing the scheduled thread group.
            </summary>
            <returns>The X grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Group.IdxX">
            <summary>
            Returns the X index withing the scheduled thread group.
            </summary>
            <returns>The X grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Group.IndexY">
            <summary>
            Returns the Y index withing the scheduled thread group.
            </summary>
            <returns>The Y grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Group.IdxY">
            <summary>
            Returns the Y index withing the scheduled thread group.
            </summary>
            <returns>The Y grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Group.IndexZ">
            <summary>
            Returns the Z index withing the scheduled thread group.
            </summary>
            <returns>The Z grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Group.IdxZ">
            <summary>
            Returns the Z index withing the scheduled thread group.
            </summary>
            <returns>The Z grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Group.Index">
            <summary>
            Returns the group index within the scheduled thread group.
            </summary>
            <returns>The grid index.</returns>
        </member>
        <member name="P:ILGPU.Group.DimensionX">
            <summary>
            Returns X the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The X thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.DimX">
            <summary>
            Returns X the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The X thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.DimensionY">
            <summary>
            Returns Y the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The Y thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.DimY">
            <summary>
            Returns Y the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The Y thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.DimensionZ">
            <summary>
            Returns Z the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The Z thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.DimZ">
            <summary>
            Returns Z the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The Z thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.Dimension">
            <summary>
            Returns the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.LinearIndex">
            <summary>
            Returns the linear thread index of the current thread within the current
            thread group.
            </summary>
        </member>
        <member name="P:ILGPU.Group.IsFirstThread">
            <summary>
            Returns true if the current thread is the first in the group.
            </summary>
        </member>
        <member name="P:ILGPU.Group.IsLastThread">
            <summary>
            Returns true if the current thread is the last in the group.
            </summary>
        </member>
        <member name="M:ILGPU.Group.Barrier">
            <summary>
            Executes a thread barrier.
            </summary>
        </member>
        <member name="M:ILGPU.Group.BarrierPopCount(System.Boolean)">
            <summary>
            Executes a thread barrier and returns the number of threads for which
            the predicate evaluated to true.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>
            The number of threads for which the predicate evaluated to true.
            </returns>
        </member>
        <member name="M:ILGPU.Group.BarrierAnd(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true if all threads in a block
            fulfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, if all threads in a block fulfills the predicate.</returns>
        </member>
        <member name="M:ILGPU.Group.BarrierOr(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true if any thread in a block
            fulfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, if any thread in a block fulfills the predicate.</returns>
        </member>
        <member name="M:ILGPU.Group.Broadcast``1(``0,System.Int32)">
            <summary>
            Performs a broadcast operation that broadcasts the given value
            from the specified thread to all other threads in the group.
            </summary>
            <param name="value">The value to broadcast.</param>
            <param name="groupIndex">The source thread index within the group.</param>
            <remarks>
            Note that the group index must be the same for all threads in the group.
            </remarks>
        </member>
        <member name="T:ILGPU.Half">
            <summary>
            A half precision floating point value with 16 bit precision.
            </summary>
        </member>
        <member name="M:ILGPU.Half.Abs(ILGPU.Half)">
            <summary>
            Returns the absolute value of the given half value.
            </summary>
            <param name="half">The half value.</param>
            <returns>The absolute value.</returns>
        </member>
        <member name="M:ILGPU.Half.IsNaN(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents a NaN value.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half represents a NaN value.</returns>
        </member>
        <member name="M:ILGPU.Half.IsZero(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents 0.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half represents 0.</returns>
        </member>
        <member name="M:ILGPU.Half.IsPositiveInfinity(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents +infinity.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half value represents +infinity.</returns>
        </member>
        <member name="M:ILGPU.Half.IsNegativeInfinity(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents -infinity.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half value represents -infinity.</returns>
        </member>
        <member name="M:ILGPU.Half.IsInfinity(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents infinity.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half value represents infinity.</returns>
        </member>
        <member name="M:ILGPU.Half.#ctor(System.UInt16)">
            <summary>
            Constructs a new half value.
            </summary>
            <param name="rawValue">The underlying raw value.</param>
        </member>
        <member name="P:ILGPU.Half.RawValue">
            <summary>
            Represents the raw value.
            </summary>
        </member>
        <member name="M:ILGPU.Half.Equals(ILGPU.Half)">
            <summary>
            Returns true if the given half is equal to the current half.
            </summary>
            <param name="other">The other half.</param>
            <returns>True, if the given half is equal to the current half.</returns>
        </member>
        <member name="M:ILGPU.Half.CompareTo(ILGPU.Half)">
            <summary>
            Compares this half value to the given half.
            </summary>
            <param name="other">The other half.</param>
            <returns>The result of the half comparison.</returns>
        </member>
        <member name="M:ILGPU.Half.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current half.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current half.</returns>
        </member>
        <member name="M:ILGPU.Half.GetHashCode">
            <summary>
            Returns the hash code of this half.
            </summary>
            <returns>The hash code of this half.</returns>
        </member>
        <member name="M:ILGPU.Half.ToString">
            <summary>
            Returns the string representation of this half.
            </summary>
            <returns>The string representation of this half.</returns>
        </member>
        <member name="M:ILGPU.Half.op_UnaryNegation(ILGPU.Half)">
            <summary>
            Negates the given half value.
            </summary>
            <param name="halfValue">The half value to negate.</param>
            <returns>The negated half value.</returns>
        </member>
        <member name="M:ILGPU.Half.op_Addition(ILGPU.Half,ILGPU.Half)">
            <summary>
            Adds two half values.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.Half.op_Subtraction(ILGPU.Half,ILGPU.Half)">
            <summary>
            Subtracts two half values.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.Half.op_Multiply(ILGPU.Half,ILGPU.Half)">
            <summary>
            Multiplies two half values.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.Half.op_Division(ILGPU.Half,ILGPU.Half)">
            <summary>
            Divides two half values.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.Half.op_Equality(ILGPU.Half,ILGPU.Half)">
            <summary>
            Returns true if the first and second half represent the same value.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>True, if the first and second half are the same.</returns>
        </member>
        <member name="M:ILGPU.Half.op_Inequality(ILGPU.Half,ILGPU.Half)">
            <summary>
            Returns true if the first and second half represent not the same value.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>True, if the first and second half are not the same.</returns>
        </member>
        <member name="M:ILGPU.Half.op_LessThan(ILGPU.Half,ILGPU.Half)">
            <summary>
            Returns true if the first half is smaller than the second half.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>True, if the first half is smaller than the second half.</returns>
        </member>
        <member name="M:ILGPU.Half.op_LessThanOrEqual(ILGPU.Half,ILGPU.Half)">
            <summary>
            Returns true if the first half is smaller than or equal to the half index.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>
            True, if the first half is smaller than or equal to the second half.
            </returns>
        </member>
        <member name="M:ILGPU.Half.op_GreaterThan(ILGPU.Half,ILGPU.Half)">
            <summary>
            Returns true if the first half is greater than the second half.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>True, if the first half is greater than the second half.</returns>
        </member>
        <member name="M:ILGPU.Half.op_GreaterThanOrEqual(ILGPU.Half,ILGPU.Half)">
            <summary>
            Returns true if the first half is greater than or equal to the second half.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>
            True, if the first index is greater than or equal to the second index.
            </returns>
        </member>
        <member name="M:ILGPU.Half.op_Implicit(ILGPU.Half)~System.Single">
            <summary>
            Implicitly converts a half to an float.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Implicit(ILGPU.Half)~System.Double">
            <summary>
            Implicitly converts a half to an double.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.Single)~ILGPU.Half">
            <summary>
            Explicitly converts a float to a half.
            </summary>
            <param name="floatValue">The float to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.Double)~ILGPU.Half">
            <summary>
            Explicitly converts a double to a half.
            </summary>
            <param name="doubleValue">The double to convert.</param>
        </member>
        <member name="F:ILGPU.Half.Epsilon">
            <summary>
            Represents the smallest positive <see cref="T:ILGPU.Half"/> value that is greater
            than zero.
            </summary>
        </member>
        <member name="F:ILGPU.Half.MaxValue">
            <summary>
            Represents the largest possible <see cref="T:ILGPU.Half"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.Half.MinValue">
            <summary>
            Represents the smallest possible <see cref="T:ILGPU.Half"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.Half.NaN">
            <summary>
            Represents not a number (NaN).
            </summary>
        </member>
        <member name="F:ILGPU.Half.PositiveInfinity">
            <summary>
            Represents positive infinity.
            </summary>
        </member>
        <member name="F:ILGPU.Half.NegativeInfinity">
            <summary>
            Represents negative infinity.
            </summary>
        </member>
        <member name="F:ILGPU.Half.Zero">
            <summary>
            Represents a positive zero <see cref="T:ILGPU.Half"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.Half.One">
            <summary>
            Represents a positive zero <see cref="T:ILGPU.Half"/> value.
            </summary>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.SByte">
            <summary>
            Implicitly converts a half to type Int8.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.SByte)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type Int8 to a half.
            </summary>
            <param name="sbyteValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.Int16">
            <summary>
            Implicitly converts a half to type Int16.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.Int16)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type Int16 to a half.
            </summary>
            <param name="shortValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.Int32">
            <summary>
            Implicitly converts a half to type Int32.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.Int32)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type Int32 to a half.
            </summary>
            <param name="intValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.Int64">
            <summary>
            Implicitly converts a half to type Int64.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.Int64)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type Int64 to a half.
            </summary>
            <param name="longValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.Byte">
            <summary>
            Implicitly converts a half to type UInt8.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.Byte)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type UInt8 to a half.
            </summary>
            <param name="byteValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.UInt16">
            <summary>
            Implicitly converts a half to type UInt16.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.UInt16)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type UInt16 to a half.
            </summary>
            <param name="ushortValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.UInt32">
            <summary>
            Implicitly converts a half to type UInt32.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.UInt32)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type UInt32 to a half.
            </summary>
            <param name="uintValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.UInt64">
            <summary>
            Implicitly converts a half to type UInt64.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.UInt64)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type UInt64 to a half.
            </summary>
            <param name="ulongValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.Neg(ILGPU.Half)">
            <summary>
            Negates the given half value.
            </summary>
            <param name="halfValue">The half value to negate.</param>
            <returns>The negated half value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.Abs(ILGPU.Half)">
            <summary>
            Returns the absolute value of the given half value.
            </summary>
            <param name="half">The half value.</param>
            <returns>The absolute value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.IsNaN(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents a NaN value.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half represents a NaN value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.IsZero(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents 0.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half represents 0.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.IsPositiveInfinity(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents +infinity.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half value represents +infinity.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.IsNegativeInfinity(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents -infinity.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half value represents -infinity.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.IsInfinity(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents infinity.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half value represents infinity.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.AddFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            Implements a FP16 addition using FP32.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.SubFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            Implements a FP16 subtraction using FP32.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.MulFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            Implements a FP16 multiplication using FP32.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.DivFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            Implements a FP16 division using FP32.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.FmaFP32(ILGPU.Half,ILGPU.Half,ILGPU.Half)">
            <summary>
            Implements a FP16 division using FP32.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <param name="third">The third half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="F:ILGPU.HalfExtensions.SignBitMask">
            <summary>
            The bit mask of the sign bit.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.ExponentMask">
            <summary>
            The bit mask of the exponent.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.MantissaMask">
            <summary>
            The bit mask of the mantissa.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.ExponentMantissaMask">
            <summary>
            The bit mask of the exponent and the mantissa.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.OffsetTable">
            <summary>
            The underlying offset table for van der Zijp's algorithm.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.MantissaTable">
            <summary>
            The underlying mantissa table for van der Zijp's algorithm.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.ExponentTable">
            <summary>
            The underlying exponent table for van der Zijp's algorithm.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.BaseTable">
            <summary>
            The underlying base table for van der Zijp's algorithm.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.ShiftTable">
            <summary>
            The underlying shift table for van der Zijp's algorithm.
            </summary>
        </member>
        <member name="M:ILGPU.HalfExtensions.ConvertHalfToFloat(ILGPU.Half)">
            <summary>
            Converts a half value to a float value by using van der Zijp's algorithm.
            </summary>
            <param name="halfValue">The value to convert.</param>
            <returns>The converted float value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.ConvertFloatToHalf(System.Single)">
            <summary>
            Converts a float value to a half value by using van der Zijp's algorithm.
            </summary>
            <param name="floatValue">The value to convert.</param>
            <returns>The converted half value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.RcpFP32(ILGPU.Half)">
            <summary>
            The reciprocal operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.SqrtFP32(ILGPU.Half)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.RsqrtFP32(ILGPU.Half)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.AsinFP32(ILGPU.Half)">
            <summary>
            Computes asin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.SinFP32(ILGPU.Half)">
            <summary>
            Computes sin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.SinhFP32(ILGPU.Half)">
            <summary>
            Computes sinh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.AcosFP32(ILGPU.Half)">
            <summary>
            Computes acos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.CosFP32(ILGPU.Half)">
            <summary>
            Computes cos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.CoshFP32(ILGPU.Half)">
            <summary>
            Computes cosh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.TanFP32(ILGPU.Half)">
            <summary>
            Computes tan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.TanhFP32(ILGPU.Half)">
            <summary>
            Computes tanh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.AtanFP32(ILGPU.Half)">
            <summary>
            Computes atan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.ExpFP32(ILGPU.Half)">
            <summary>
            Computes exp(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.Exp2FP32(ILGPU.Half)">
            <summary>
            Computes 2^x.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.FloorFP32(ILGPU.Half)">
            <summary>
            Computes floor(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.CeilingFP32(ILGPU.Half)">
            <summary>
            Computes ceil(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.LogFP32(ILGPU.Half)">
            <summary>
            Computes log(x) to base e.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.Log2FP32(ILGPU.Half)">
            <summary>
            Computes log(x) to base 2.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.Log10FP32(ILGPU.Half)">
            <summary>
            Computes log(x) to base 10.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.RemFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            The % operation.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.MinFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            The min operation.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.MaxFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            The max operation.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.Atan2FP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            The atan2 operation.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.PowFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            The pow operation.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.LogFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            The binary log operation.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
        </member>
        <member name="T:ILGPU.ClearCacheMode">
            <summary>
            Specifies which resources should be removed from the cache.
            </summary>
        </member>
        <member name="F:ILGPU.ClearCacheMode.Default">
            <summary>
            Removes all non-ILGPU objects form the caches.
            </summary>
        </member>
        <member name="F:ILGPU.ClearCacheMode.Everything">
            <summary>
            Removes everything from the caches.
            </summary>
        </member>
        <member name="T:ILGPU.ICache">
            <summary>
            Represents an object that contains internal caches.
            </summary>
        </member>
        <member name="M:ILGPU.ICache.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>
            Implementations of this method are not guaranteed to be thread-safe.
            </remarks>
        </member>
        <member name="T:ILGPU.IndexType">
            <summary>
            Represents the type of index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.None">
            <summary>
            Represents no compatible index type.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.Index1D">
            <summary>
            Represents a 1D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.Index2D">
            <summary>
            Represents a 2D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.Index3D">
            <summary>
            Represents a 3D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.LongIndex1D">
            <summary>
            Represents a 1D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.LongIndex2D">
            <summary>
            Represents a 2D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.LongIndex3D">
            <summary>
            Represents a 3D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.KernelConfig">
            <summary>
            Represents a generic kernel config.
            </summary>
        </member>
        <member name="T:ILGPU.IndexTypeAttribute">
            <summary>
            An internal attribute to specify the index type of a custom structure.
            </summary>
        </member>
        <member name="M:ILGPU.IndexTypeAttribute.#ctor(ILGPU.IndexType)">
            <summary>
            Constructs a new attribute instance.
            </summary>
            <param name="indexType">The index type.</param>
        </member>
        <member name="P:ILGPU.IndexTypeAttribute.IndexType">
            <summary>
            Returns the associated index type.
            </summary>
        </member>
        <member name="T:ILGPU.IndexTypeExtensions">
            <summary>
            Contains utility functions for handling index types.
            </summary>
        </member>
        <member name="F:ILGPU.IndexTypeExtensions.ManagedIndexTypes">
            <summary>
            An internal mapping of the <see cref="T:ILGPU.IndexType"/> values to managed types.
            </summary>
        </member>
        <member name="F:ILGPU.IndexTypeExtensions.ViewLinearIndex32Method">
            <summary>
            A reference to the 32-bit index linerization method.
            </summary>
        </member>
        <member name="F:ILGPU.IndexTypeExtensions.ViewLinearIndex64Method">
            <summary>
            A reference to the 64-bit index linerization method.
            </summary>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.AssertIntIndex(System.Int64)">
            <summary>
            Asserts that the given long range can be accessed using a 32-bit integer.
            </summary>
            <param name="index">The long value range.</param>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.AssertIntIndexRange(System.Int64)">
            <summary>
            Asserts that the given long range can be expressed by using a 32-bit integer.
            </summary>
            <param name="range">The long value range.</param>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.GetIntSize``1(``0)">
            <summary>
            Returns a 32-bit integer size of the given index.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="index">The index type instance.</param>
            <returns>The 32-bit integer size of the given index.</returns>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.GetManagedIndexType(ILGPU.IndexType)">
            <summary>
            Resolves the managed type of an index for a given index type.
            </summary>
            <param name="indexType">The index type.</param>
            <returns>The resolved managed index type..</returns>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.GetIndexType(System.Type)">
            <summary>
            Tries to resolve an index type based on the given .Net type.
            </summary>
            <param name="indexType">The managed .Net index type.</param>
            <returns>The resolved index type or none.</returns>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.IsLongIndex(System.Type)">
            <summary>
            Returns true if the given type is a 64-bit index type.
            </summary>
            <param name="type">The managed .Net index type.</param>
            <returns>True, if the given index type is a 64-bit index type.</returns>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.IsLongIndex``1">
            <summary>
            Returns true if the given type is a 64-bit index type.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <returns>True, if the given index type is a 64-bit index type.</returns>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.GetViewLinearIndexMethod(System.Type,System.Type)">
            <summary>
            Gets the index linerization method that works either on 32-bit or on 64-bit
            values depending on the index type.
            </summary>
            <param name="indexType">The managed index type.</param>
            <param name="elementType">
            The managed element type of a particular view.
            </param>
            <returns>The managed 32-bit or 64-bit linerization method.</returns>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.ViewLinearIndex32``2(ILGPU.ArrayView{``0},``1,``1)">
            <summary>
            Loads a linear element address using the given multi-dimensional indices.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="view">The source view.</param>
            <param name="index">The element index.</param>
            <param name="dimension">The dimension specifications.</param>
            <returns>A reference to the i-th element.</returns>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.ViewLinearIndex64``2(ILGPU.ArrayView{``0},``1,``1)">
            <summary>
            Loads a linear element address using the given multi-dimensional indices.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="view">The source view.</param>
            <param name="index">The element index.</param>
            <param name="dimension">The dimension specifications.</param>
            <returns>A reference to the i-th element.</returns>
        </member>
        <member name="T:ILGPU.IIndex">
            <summary>
            Represents a basic index type.
            </summary>
        </member>
        <member name="P:ILGPU.IIndex.Size">
            <summary>
            Returns the size represented by this index (e.g. x, x * y or x * y * z).
            </summary>
        </member>
        <member name="T:ILGPU.IIntIndex">
            <summary>
            Represents a 32-bit index.
            </summary>
        </member>
        <member name="P:ILGPU.IIntIndex.Size">
            <summary>
            Returns the size represented by this index (e.g. x, x * y or x * y * z).
            </summary>
        </member>
        <member name="T:ILGPU.ILinearizableIndex`1">
            <summary>
            An abstract index that can be converted to or reconstructed from a linear value.
            </summary>
            <typeparam name="TIndex">The underlying index type.</typeparam>
        </member>
        <member name="M:ILGPU.ILinearizableIndex`1.ComputeLinearIndex(`0)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.ILinearizableIndex`1.ComputeLongLinearIndex(`0)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.ILinearizableIndex`1.ReconstructIndex(System.Int32)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.ILinearizableIndex`1.ReconstructIndex(System.Int64)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="T:ILGPU.IIntrinsicIndex">
            <summary>
            Represents an intrinsic index type.
            </summary>
        </member>
        <member name="P:ILGPU.IIntrinsicIndex.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="T:ILGPU.IGenericIndex`1">
            <summary>
            Represents a generic index type.
            </summary>
            <typeparam name="TIndex">The type of the generic index.</typeparam>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.InBounds(`0)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.InBoundsInclusive(`0)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.Add(`0)">
            <summary>
            Computes this + right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.Subtract(`0)">
            <summary>
            Computes this - right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.ComputedCastedExtent(`0,System.Int32,System.Int32)">
            <summary>
            The given <paramref name="extent"/> describes a chunk of contiguous memory
            of elements with size <paramref name="elementSize"/>. The parameter
            <paramref name="newElementSize"/> describes the requested new element size.
            The result of this function is a new extent dimension that represents the
            given extent in the context of the new element size.
            </summary>
            <param name="extent">The current extent.</param>
            <param name="elementSize">
            The current element size in the scope of the current extent.
            </param>
            <param name="newElementSize">The new element size.</param>
            <returns>The adjusted extent to match the new element size.</returns>
        </member>
        <member name="T:ILGPU.IIntIndex`2">
            <summary>
            An integer register.
            </summary>
            <typeparam name="TIndex">The integer type.</typeparam>
            <typeparam name="TLongIndex">The long integer type.</typeparam>
        </member>
        <member name="M:ILGPU.IIntIndex`2.ToLongIndex">
            <summary>
            Converts this index to a long integer index.
            </summary>
            <returns>The resulting long integer representation.</returns>
        </member>
        <member name="T:ILGPU.ILongIndex`2">
            <summary>
            A long integer register.
            </summary>
            <typeparam name="TLongIndex">The long integer type.</typeparam>
            <typeparam name="TIndex">The integer type.</typeparam>
        </member>
        <member name="M:ILGPU.ILongIndex`2.ToIntIndex">
            <summary>
            Converts this index to an integer index.
            </summary>
            <returns>The resulting integer representation.</returns>
        </member>
        <member name="T:ILGPU.Index1">
            <summary>
            Represents a 1D index.
            </summary>
        </member>
        <member name="M:ILGPU.Index1.op_Implicit(System.Int64)~ILGPU.Index1">
            <summary>
            Converts the given 64-bit index into its 32-bit representation.
            </summary>
            <param name="index">The long index value.</param>
            <remarks>Required due to backwards compatibility.</remarks>
        </member>
        <member name="F:ILGPU.Index1.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.Index1.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.Index1.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="F:ILGPU.Index1.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.Index1.Min(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index1.Max(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index1.Clamp(ILGPU.Index1,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Index1.#ctor(System.Int32)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
        </member>
        <member name="P:ILGPU.Index1.X">
            <summary>
            Returns the X index.
            </summary>
        </member>
        <member name="P:ILGPU.Index1.IsFirst">
            <summary>
            Returns true if this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.Index1.Size">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index1.LongSize">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index1.ILGPU#IIndex#Size">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index1.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="M:ILGPU.Index1.ToLongIndex">
            <summary>
            Converts this index to a long integer index.
            </summary>
            <returns>The resulting long integer representation.</returns>
        </member>
        <member name="M:ILGPU.Index1.ComputeLinearIndex(ILGPU.Index1)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.Index1.ComputeLongLinearIndex(ILGPU.Index1)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.Index1.ReconstructIndex(System.Int32)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Index1.ReconstructIndex(System.Int64)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Index1.InBounds(ILGPU.Index1)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.Index1.InBoundsInclusive(ILGPU.Index1)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.Index1.Add(ILGPU.Index1)">
            <summary>
            Computes this + right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index1.Subtract(ILGPU.Index1)">
            <summary>
            Computes this - right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index1.ComputedCastedExtent(ILGPU.Index1,System.Int32,System.Int32)">
            <summary>
            The given <paramref name="extent"/> describes a chunk of contiguous memory
            of elements with size <paramref name="elementSize"/>. The parameter
            <paramref name="newElementSize"/> describes the requested new element size.
            The result of this function is a new extent dimension that represents the
            given extent in the context of the new element size.
            </summary>
            <param name="extent">The current extent.</param>
            <param name="elementSize">
            The current element size in the scope of the current extent.
            </param>
            <param name="newElementSize">The new element size.</param>
            <returns>The adjusted extent to match the new element size.</returns>
        </member>
        <member name="M:ILGPU.Index1.Equals(ILGPU.Index1)">
            <summary>
            Returns true if the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, if the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index1.CompareTo(ILGPU.Index1)">
            <summary cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:ILGPU.Index1.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index1.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Index1.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_Implicit(ILGPU.Index1)~ILGPU.LongIndex1">
            <summary>
            Converts this index to a long integer index.
            </summary>
            <param name="index">The index to convert.</param>
            <returns>The resulting long integer representation.</returns>
        </member>
        <member name="M:ILGPU.Index1.Add(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_Addition(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index1.Subtract(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_Subtraction(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index1.Multiply(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_Multiply(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index1.Divide(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_Division(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_Equality(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Returns true if the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_Inequality(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Returns true if the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are not the same.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_LessThan(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Returns true if the first index is smaller than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is smaller than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_LessThanOrEqual(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Returns true if the first index is smaller than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>
            True, if the first index is smaller than or equal to the second index.
            </returns>
        </member>
        <member name="M:ILGPU.Index1.op_GreaterThan(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Returns true if the first index is greater than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is greater than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_GreaterThanOrEqual(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Returns true if the first index is greater than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>
            True, if the first index is greater than or equal to the second index.
            </returns>
        </member>
        <member name="M:ILGPU.Index1.ComputeLinearIndex(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Computes the linear index of this 1D index by using the provided 1D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <param name="index">The base index.</param>
            <returns>The computed linear index of this 1D index.</returns>
        </member>
        <member name="M:ILGPU.Index1.ReconstructIndex(System.Int32,ILGPU.Index1)">
            <summary>
            Reconstructs a 1D index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <param name="dimension">The 1D dimension for reconstruction.</param>
            <returns>The reconstructed 1D index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_Implicit(ILGPU.Index1)~System.Int32">
            <summary>
            Implicitly converts an index to an int.
            </summary>
            <param name="idx">The index to convert.</param>
        </member>
        <member name="M:ILGPU.Index1.op_Implicit(System.Int32)~ILGPU.Index1">
            <summary>
            Implicitly converts an int to an index.
            </summary>
            <param name="idx">The int to convert.</param>
        </member>
        <member name="M:ILGPU.Index1.op_Explicit(ILGPU.Index1)~System.UInt32">
            <summary>
            Implicitly converts an index to an unsigned value.
            </summary>
            <param name="idx">The index to convert.</param>
        </member>
        <member name="T:ILGPU.Index2">
            <summary>
            Represents a 2D index.
            </summary>
        </member>
        <member name="M:ILGPU.Index2.op_Implicit(ILGPU.LongIndex2)~ILGPU.Index2">
            <summary>
            Converts the given 64-bit index into its 32-bit representation.
            </summary>
            <param name="index">The long index value.</param>
            <remarks>Required due to backwards compatibility.</remarks>
        </member>
        <member name="F:ILGPU.Index2.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.Index2.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.Index2.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="F:ILGPU.Index2.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.Index2.Min(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index2.Max(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index2.Clamp(ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Index2.#ctor(System.Int32)">
            <summary>
            Constructs a new index using a single value for each component.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Index2.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
        </member>
        <member name="P:ILGPU.Index2.X">
            <summary>
            Returns the X index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.Y">
            <summary>
            Returns the Y index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.IsFirst">
            <summary>
            Returns true if this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.Size">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.LongSize">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.ILGPU#IIndex#Size">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="M:ILGPU.Index2.ToLongIndex">
            <summary>
            Converts this index to a long integer index.
            </summary>
            <returns>The resulting long integer representation.</returns>
        </member>
        <member name="M:ILGPU.Index2.ComputeLinearIndex(ILGPU.Index2)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.Index2.ComputeLongLinearIndex(ILGPU.Index2)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.Index2.ReconstructIndex(System.Int32)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Index2.ReconstructIndex(System.Int64)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Index2.InBounds(ILGPU.Index2)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.Index2.InBoundsInclusive(ILGPU.Index2)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.Index2.Add(ILGPU.Index2)">
            <summary>
            Computes this + right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index2.Subtract(ILGPU.Index2)">
            <summary>
            Computes this - right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index2.ComputedCastedExtent(ILGPU.Index2,System.Int32,System.Int32)">
            <summary>
            The given <paramref name="extent"/> describes a chunk of contiguous memory
            of elements with size <paramref name="elementSize"/>. The parameter
            <paramref name="newElementSize"/> describes the requested new element size.
            The result of this function is a new extent dimension that represents the
            given extent in the context of the new element size.
            </summary>
            <param name="extent">The current extent.</param>
            <param name="elementSize">
            The current element size in the scope of the current extent.
            </param>
            <param name="newElementSize">The new element size.</param>
            <returns>The adjusted extent to match the new element size.</returns>
        </member>
        <member name="M:ILGPU.Index2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all dimensions.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Index2.Deconstruct(System.Int32@,System.Int32@)">
            <summary>
            Deconstructs the current instance into a tuple.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
        </member>
        <member name="M:ILGPU.Index2.Equals(ILGPU.Index2)">
            <summary>
            Returns true if the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, if the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index2.CompareTo(ILGPU.Index2)">
            <summary cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:ILGPU.Index2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index2.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Index2.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Implicit(ILGPU.Index2)~ILGPU.LongIndex2">
            <summary>
            Converts this index to a long integer index.
            </summary>
            <param name="index">The index to convert.</param>
            <returns>The resulting long integer representation.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Implicit(System.ValueTuple{System.Int32,System.Int32})~ILGPU.Index2">
            <summary>
            Converts the given value tuple into an equivalent <see cref="T:ILGPU.Index2"/>.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:ILGPU.Index2.Add(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Addition(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index2.Subtract(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Subtraction(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index2.Multiply(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Multiply(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index2.Divide(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Division(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Equality(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true if the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Inequality(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true if the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are not the same.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_LessThan(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true if the first index is smaller than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is smaller than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_LessThanOrEqual(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true if the first index is smaller than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>
            True, if the first index is smaller than or equal to the second index.
            </returns>
        </member>
        <member name="M:ILGPU.Index2.op_GreaterThan(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true if the first index is greater than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is greater than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_GreaterThanOrEqual(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true if the first index is greater than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>
            True, if the first index is greater than or equal to the second index.
            </returns>
        </member>
        <member name="M:ILGPU.Index2.ComputeLinearIndex(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Computes the linear index of this 2D index by using the provided 2D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <param name="index">The base index.</param>
            <returns>The computed linear index of this 2D index.</returns>
        </member>
        <member name="M:ILGPU.Index2.ReconstructIndex(System.Int32,ILGPU.Index2)">
            <summary>
            Reconstructs a 2D index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <param name="dimension">The 2D dimension for reconstruction.</param>
            <returns>The reconstructed 2D index.</returns>
        </member>
        <member name="T:ILGPU.Index3">
            <summary>
            Represents a 3D index.
            </summary>
        </member>
        <member name="M:ILGPU.Index3.#ctor(ILGPU.Index2,System.Int32)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="xy">The x and y values.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="M:ILGPU.Index3.#ctor(System.Int32,ILGPU.Index2)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
            <param name="yz">The x and y values.</param>
        </member>
        <member name="P:ILGPU.Index3.XY">
            <summary>
            Returns the XY components.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.YZ">
            <summary>
            Returns the YZ components.
            </summary>
        </member>
        <member name="M:ILGPU.Index3.op_Implicit(ILGPU.LongIndex3)~ILGPU.Index3">
            <summary>
            Converts the given 64-bit index into its 32-bit representation.
            </summary>
            <param name="index">The long index value.</param>
            <remarks>Required due to backwards compatibility.</remarks>
        </member>
        <member name="F:ILGPU.Index3.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.Index3.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.Index3.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="F:ILGPU.Index3.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.Index3.Min(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index3.Max(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index3.Clamp(ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Index3.#ctor(System.Int32)">
            <summary>
            Constructs a new index using a single value for each component.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Index3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="P:ILGPU.Index3.X">
            <summary>
            Returns the X index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.Y">
            <summary>
            Returns the Y index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.Z">
            <summary>
            Returns the Z index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.IsFirst">
            <summary>
            Returns true if this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.Size">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.LongSize">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.ILGPU#IIndex#Size">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="M:ILGPU.Index3.ToLongIndex">
            <summary>
            Converts this index to a long integer index.
            </summary>
            <returns>The resulting long integer representation.</returns>
        </member>
        <member name="M:ILGPU.Index3.ComputeLinearIndex(ILGPU.Index3)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.Index3.ComputeLongLinearIndex(ILGPU.Index3)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.Index3.ReconstructIndex(System.Int32)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Index3.ReconstructIndex(System.Int64)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Index3.InBounds(ILGPU.Index3)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.Index3.InBoundsInclusive(ILGPU.Index3)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.Index3.Add(ILGPU.Index3)">
            <summary>
            Computes this + right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index3.Subtract(ILGPU.Index3)">
            <summary>
            Computes this - right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index3.ComputedCastedExtent(ILGPU.Index3,System.Int32,System.Int32)">
            <summary>
            The given <paramref name="extent"/> describes a chunk of contiguous memory
            of elements with size <paramref name="elementSize"/>. The parameter
            <paramref name="newElementSize"/> describes the requested new element size.
            The result of this function is a new extent dimension that represents the
            given extent in the context of the new element size.
            </summary>
            <param name="extent">The current extent.</param>
            <param name="elementSize">
            The current element size in the scope of the current extent.
            </param>
            <param name="newElementSize">The new element size.</param>
            <returns>The adjusted extent to match the new element size.</returns>
        </member>
        <member name="M:ILGPU.Index3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all dimensions.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Index3.Deconstruct(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Deconstructs the current instance into a tuple.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="M:ILGPU.Index3.Equals(ILGPU.Index3)">
            <summary>
            Returns true if the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, if the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index3.CompareTo(ILGPU.Index3)">
            <summary cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:ILGPU.Index3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index3.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Index3.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Implicit(ILGPU.Index3)~ILGPU.LongIndex3">
            <summary>
            Converts this index to a long integer index.
            </summary>
            <param name="index">The index to convert.</param>
            <returns>The resulting long integer representation.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32})~ILGPU.Index3">
            <summary>
            Converts the given value tuple into an equivalent <see cref="T:ILGPU.Index3"/>.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:ILGPU.Index3.Add(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Addition(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index3.Subtract(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Subtraction(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index3.Multiply(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Multiply(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index3.Divide(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Division(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Equality(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true if the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Inequality(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true if the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are not the same.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_LessThan(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true if the first index is smaller than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is smaller than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_LessThanOrEqual(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true if the first index is smaller than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>
            True, if the first index is smaller than or equal to the second index.
            </returns>
        </member>
        <member name="M:ILGPU.Index3.op_GreaterThan(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true if the first index is greater than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is greater than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_GreaterThanOrEqual(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true if the first index is greater than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>
            True, if the first index is greater than or equal to the second index.
            </returns>
        </member>
        <member name="M:ILGPU.Index3.ComputeLinearIndex(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Computes the linear index of this 3D index by using the provided 3D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <param name="index">The base index.</param>
            <returns>The computed linear index of this 3D index.</returns>
        </member>
        <member name="M:ILGPU.Index3.ReconstructIndex(System.Int32,ILGPU.Index3)">
            <summary>
            Reconstructs a 3D index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <param name="dimension">The 3D dimension for reconstruction.</param>
            <returns>The reconstructed 3D index.</returns>
        </member>
        <member name="T:ILGPU.LongIndex3">
            <summary>
            Represents a 3D index.
            </summary>
        </member>
        <member name="M:ILGPU.LongIndex3.#ctor(ILGPU.LongIndex2,System.Int64)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="xy">The x and y values.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="M:ILGPU.LongIndex3.#ctor(System.Int64,ILGPU.LongIndex2)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
            <param name="yz">The x and y values.</param>
        </member>
        <member name="P:ILGPU.LongIndex3.XY">
            <summary>
            Returns the XY components.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex3.YZ">
            <summary>
            Returns the YZ components.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex3.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex3.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex3.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex3.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.LongIndex3.Min(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.Max(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.Clamp(ILGPU.LongIndex3,ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.#ctor(System.Int64)">
            <summary>
            Constructs a new index using a single value for each component.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.LongIndex3.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="P:ILGPU.LongIndex3.X">
            <summary>
            Returns the X index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex3.Y">
            <summary>
            Returns the Y index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex3.Z">
            <summary>
            Returns the Z index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex3.IsFirst">
            <summary>
            Returns true if this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex3.Size">
            <summary>
            Returns the size represented by this index.
            </summary>
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex3.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="M:ILGPU.LongIndex3.ToIntIndex">
            <summary>
            Converts this index to an integer index.
            </summary>
            <returns>The resulting integer representation.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.ILGPU#ILinearizableIndex{ILGPU#LongIndex3}#ComputeLinearIndex(ILGPU.LongIndex3)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.ComputeLinearIndex(ILGPU.LongIndex3)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.ComputeLongLinearIndex(ILGPU.LongIndex3)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.ReconstructIndex(System.Int32)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.ReconstructIndex(System.Int64)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.InBounds(ILGPU.LongIndex3)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.InBoundsInclusive(ILGPU.LongIndex3)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.Add(ILGPU.LongIndex3)">
            <summary>
            Computes this + right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.Subtract(ILGPU.LongIndex3)">
            <summary>
            Computes this - right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.ComputedCastedExtent(ILGPU.LongIndex3,System.Int32,System.Int32)">
            <summary>
            The given <paramref name="extent"/> describes a chunk of contiguous memory
            of elements with size <paramref name="elementSize"/>. The parameter
            <paramref name="newElementSize"/> describes the requested new element size.
            The result of this function is a new extent dimension that represents the
            given extent in the context of the new element size.
            </summary>
            <param name="extent">The current extent.</param>
            <param name="elementSize">
            The current element size in the scope of the current extent.
            </param>
            <param name="newElementSize">The new element size.</param>
            <returns>The adjusted extent to match the new element size.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all dimensions.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.Deconstruct(System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Deconstructs the current instance into a tuple.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="M:ILGPU.LongIndex3.Equals(ILGPU.LongIndex3)">
            <summary>
            Returns true if the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, if the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.CompareTo(ILGPU.LongIndex3)">
            <summary cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:ILGPU.LongIndex3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.op_Explicit(ILGPU.LongIndex3)~ILGPU.Index3">
            <summary>
            Converts this index to an integer index.
            </summary>
            <param name="index">The index to convert.</param>
            <returns>The resulting integer representation.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.op_Implicit(System.ValueTuple{System.Int64,System.Int64,System.Int64})~ILGPU.LongIndex3">
            <summary>
            Converts the given value tuple into an equivalent <see cref="T:ILGPU.LongIndex3"/>.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:ILGPU.LongIndex3.Add(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.op_Addition(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.Subtract(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.op_Subtraction(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.Multiply(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.op_Multiply(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.Divide(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.op_Division(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.op_Equality(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Returns true if the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.op_Inequality(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Returns true if the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are not the same.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.op_LessThan(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Returns true if the first index is smaller than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is smaller than the second index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.op_LessThanOrEqual(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Returns true if the first index is smaller than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>
            True, if the first index is smaller than or equal to the second index.
            </returns>
        </member>
        <member name="M:ILGPU.LongIndex3.op_GreaterThan(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Returns true if the first index is greater than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is greater than the second index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.op_GreaterThanOrEqual(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Returns true if the first index is greater than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>
            True, if the first index is greater than or equal to the second index.
            </returns>
        </member>
        <member name="M:ILGPU.LongIndex3.ComputeLinearIndex(ILGPU.LongIndex3,ILGPU.LongIndex3)">
            <summary>
            Computes the linear index of this 3D index by using the provided 3D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <param name="index">The base index.</param>
            <returns>The computed linear index of this 3D index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3.ReconstructIndex(System.Int64,ILGPU.LongIndex3)">
            <summary>
            Reconstructs a 3D index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <param name="dimension">The 3D dimension for reconstruction.</param>
            <returns>The reconstructed 3D index.</returns>
        </member>
        <member name="T:ILGPU.LongIndex1">
            <summary>
            Represents a 1D index.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex1.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex1.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex1.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex1.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.LongIndex1.Min(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.Max(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.Clamp(ILGPU.LongIndex1,ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.#ctor(System.Int64)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
        </member>
        <member name="P:ILGPU.LongIndex1.X">
            <summary>
            Returns the X index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex1.IsFirst">
            <summary>
            Returns true if this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex1.Size">
            <summary>
            Returns the size represented by this index.
            </summary>
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex1.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="M:ILGPU.LongIndex1.ToIntIndex">
            <summary>
            Converts this index to an integer index.
            </summary>
            <returns>The resulting integer representation.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.ILGPU#ILinearizableIndex{ILGPU#LongIndex1}#ComputeLinearIndex(ILGPU.LongIndex1)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.ComputeLinearIndex(ILGPU.LongIndex1)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.ComputeLongLinearIndex(ILGPU.LongIndex1)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.ReconstructIndex(System.Int32)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.ReconstructIndex(System.Int64)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.InBounds(ILGPU.LongIndex1)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.InBoundsInclusive(ILGPU.LongIndex1)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.Add(ILGPU.LongIndex1)">
            <summary>
            Computes this + right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.Subtract(ILGPU.LongIndex1)">
            <summary>
            Computes this - right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.ComputedCastedExtent(ILGPU.LongIndex1,System.Int32,System.Int32)">
            <summary>
            The given <paramref name="extent"/> describes a chunk of contiguous memory
            of elements with size <paramref name="elementSize"/>. The parameter
            <paramref name="newElementSize"/> describes the requested new element size.
            The result of this function is a new extent dimension that represents the
            given extent in the context of the new element size.
            </summary>
            <param name="extent">The current extent.</param>
            <param name="elementSize">
            The current element size in the scope of the current extent.
            </param>
            <param name="newElementSize">The new element size.</param>
            <returns>The adjusted extent to match the new element size.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.Equals(ILGPU.LongIndex1)">
            <summary>
            Returns true if the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, if the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.CompareTo(ILGPU.LongIndex1)">
            <summary cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:ILGPU.LongIndex1.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.op_Explicit(ILGPU.LongIndex1)~ILGPU.Index1">
            <summary>
            Converts this index to an integer index.
            </summary>
            <param name="index">The index to convert.</param>
            <returns>The resulting integer representation.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.Add(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.op_Addition(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.Subtract(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.op_Subtraction(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.Multiply(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.op_Multiply(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.Divide(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.op_Division(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.op_Equality(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Returns true if the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.op_Inequality(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Returns true if the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are not the same.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.op_LessThan(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Returns true if the first index is smaller than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is smaller than the second index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.op_LessThanOrEqual(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Returns true if the first index is smaller than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>
            True, if the first index is smaller than or equal to the second index.
            </returns>
        </member>
        <member name="M:ILGPU.LongIndex1.op_GreaterThan(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Returns true if the first index is greater than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is greater than the second index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.op_GreaterThanOrEqual(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Returns true if the first index is greater than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>
            True, if the first index is greater than or equal to the second index.
            </returns>
        </member>
        <member name="M:ILGPU.LongIndex1.ComputeLinearIndex(ILGPU.LongIndex1,ILGPU.LongIndex1)">
            <summary>
            Computes the linear index of this 1D index by using the provided 1D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <param name="index">The base index.</param>
            <returns>The computed linear index of this 1D index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.ReconstructIndex(System.Int64,ILGPU.LongIndex1)">
            <summary>
            Reconstructs a 1D index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <param name="dimension">The 1D dimension for reconstruction.</param>
            <returns>The reconstructed 1D index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1.op_Implicit(ILGPU.LongIndex1)~System.Int64">
            <summary>
            Implicitly converts an index to an int.
            </summary>
            <param name="idx">The index to convert.</param>
        </member>
        <member name="M:ILGPU.LongIndex1.op_Implicit(System.Int64)~ILGPU.LongIndex1">
            <summary>
            Implicitly converts an int to an index.
            </summary>
            <param name="idx">The int to convert.</param>
        </member>
        <member name="M:ILGPU.LongIndex1.op_Explicit(ILGPU.LongIndex1)~System.UInt64">
            <summary>
            Implicitly converts an index to an unsigned value.
            </summary>
            <param name="idx">The index to convert.</param>
        </member>
        <member name="T:ILGPU.LongIndex2">
            <summary>
            Represents a 2D index.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex2.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex2.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex2.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex2.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.LongIndex2.Min(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.Max(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.Clamp(ILGPU.LongIndex2,ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.#ctor(System.Int64)">
            <summary>
            Constructs a new index using a single value for each component.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.LongIndex2.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
        </member>
        <member name="P:ILGPU.LongIndex2.X">
            <summary>
            Returns the X index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex2.Y">
            <summary>
            Returns the Y index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex2.IsFirst">
            <summary>
            Returns true if this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex2.Size">
            <summary>
            Returns the size represented by this index.
            </summary>
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex2.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="M:ILGPU.LongIndex2.ToIntIndex">
            <summary>
            Converts this index to an integer index.
            </summary>
            <returns>The resulting integer representation.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.ILGPU#ILinearizableIndex{ILGPU#LongIndex2}#ComputeLinearIndex(ILGPU.LongIndex2)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.ComputeLinearIndex(ILGPU.LongIndex2)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.ComputeLongLinearIndex(ILGPU.LongIndex2)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.ReconstructIndex(System.Int32)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.ReconstructIndex(System.Int64)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.InBounds(ILGPU.LongIndex2)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.InBoundsInclusive(ILGPU.LongIndex2)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.Add(ILGPU.LongIndex2)">
            <summary>
            Computes this + right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.Subtract(ILGPU.LongIndex2)">
            <summary>
            Computes this - right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.ComputedCastedExtent(ILGPU.LongIndex2,System.Int32,System.Int32)">
            <summary>
            The given <paramref name="extent"/> describes a chunk of contiguous memory
            of elements with size <paramref name="elementSize"/>. The parameter
            <paramref name="newElementSize"/> describes the requested new element size.
            The result of this function is a new extent dimension that represents the
            given extent in the context of the new element size.
            </summary>
            <param name="extent">The current extent.</param>
            <param name="elementSize">
            The current element size in the scope of the current extent.
            </param>
            <param name="newElementSize">The new element size.</param>
            <returns>The adjusted extent to match the new element size.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all dimensions.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.Deconstruct(System.Int64@,System.Int64@)">
            <summary>
            Deconstructs the current instance into a tuple.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
        </member>
        <member name="M:ILGPU.LongIndex2.Equals(ILGPU.LongIndex2)">
            <summary>
            Returns true if the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, if the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.CompareTo(ILGPU.LongIndex2)">
            <summary cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:ILGPU.LongIndex2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.op_Explicit(ILGPU.LongIndex2)~ILGPU.Index2">
            <summary>
            Converts this index to an integer index.
            </summary>
            <param name="index">The index to convert.</param>
            <returns>The resulting integer representation.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.op_Implicit(System.ValueTuple{System.Int64,System.Int64})~ILGPU.LongIndex2">
            <summary>
            Converts the given value tuple into an equivalent <see cref="T:ILGPU.LongIndex2"/>.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:ILGPU.LongIndex2.Add(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.op_Addition(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.Subtract(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.op_Subtraction(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.Multiply(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.op_Multiply(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.Divide(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.op_Division(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.op_Equality(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Returns true if the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.op_Inequality(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Returns true if the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are not the same.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.op_LessThan(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Returns true if the first index is smaller than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is smaller than the second index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.op_LessThanOrEqual(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Returns true if the first index is smaller than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>
            True, if the first index is smaller than or equal to the second index.
            </returns>
        </member>
        <member name="M:ILGPU.LongIndex2.op_GreaterThan(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Returns true if the first index is greater than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is greater than the second index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.op_GreaterThanOrEqual(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Returns true if the first index is greater than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>
            True, if the first index is greater than or equal to the second index.
            </returns>
        </member>
        <member name="M:ILGPU.LongIndex2.ComputeLinearIndex(ILGPU.LongIndex2,ILGPU.LongIndex2)">
            <summary>
            Computes the linear index of this 2D index by using the provided 2D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <param name="index">The base index.</param>
            <returns>The computed linear index of this 2D index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2.ReconstructIndex(System.Int64,ILGPU.LongIndex2)">
            <summary>
            Reconstructs a 2D index from a linear index.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <param name="dimension">The 2D dimension for reconstruction.</param>
            <returns>The reconstructed 2D index.</returns>
        </member>
        <member name="T:ILGPU.InternalCompilerException">
            <summary>
            The exception that is thrown when an internal compiler error has been detected.
            </summary>
        </member>
        <member name="M:ILGPU.InternalCompilerException.#ctor">
            <summary>
            Initializes a new instance of the InternalCompilerException class.
            </summary>
        </member>
        <member name="M:ILGPU.InternalCompilerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InternalCompilerException class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ILGPU.InternalCompilerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InternalCompilerException class
            with a specified error message and a reference to the inner exception
            that is the cause of this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.
            </param>
        </member>
        <member name="M:ILGPU.InternalCompilerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InternalCompilerException class with
            serialized data.
            </summary>
            <param name="serializationInfo">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.
            </param>
            <param name="streamingContext">
            The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.
            </param>
        </member>
        <member name="T:ILGPU.Interop">
            <summary>
            Contains general interop functions.
            </summary>
        </member>
        <member name="M:ILGPU.Interop.ComputeEffectiveAddress(System.Byte@,System.Int64,System.Int32)">
            <summary>
            Computes the effective address for the given pointer/index combination.
            </summary>
            <param name="nativePtr">The source pointer.</param>
            <param name="index">The element index.</param>
            <param name="elementSize">The element size.</param>
            <returns>The computed pointer.</returns>
        </member>
        <member name="M:ILGPU.Interop.SizeOf``1">
            <summary>
            Computes the size of the given type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
        </member>
        <member name="M:ILGPU.Interop.SizeOf``1(``0)">
            <summary>
            Computes the size of the given type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
        </member>
        <member name="M:ILGPU.Interop.ComputeRelativeSizeOf``2">
            <summary>
            Computes number of elements of type <typeparamref name="TFirst"/>
            that are required to store a type <typeparamref name="TSecond"/> in
            unmanaged memory.
            </summary>
            <typeparam name="TFirst">
            The type that should represent type <typeparamref name="TSecond"/>.
            </typeparam>
            <typeparam name="TSecond">
            The base type that should be represented with <typeparamref name="TFirst"/>.
            </typeparam>
            <returns>
            The number of required <typeparamref name="TFirst"/> instances to store an
            instance of type <typeparamref name="TSecond"/>.
            </returns>
        </member>
        <member name="M:ILGPU.Interop.ComputeRelativeSizeOf``2(System.Int64)">
            <summary>
            Computes number of elements of type <typeparamref name="TFirst"/>
            that are required to store a type <typeparamref name="TSecond"/> in
            unmanaged memory.
            </summary>
            <typeparam name="TFirst">
            The type that should represent type <typeparamref name="TSecond"/>.
            </typeparam>
            <typeparam name="TSecond">
            The base type that should be represented with <typeparamref name="TFirst"/>.
            </typeparam>
            <param name="numSecondElements">
            The number of <typeparamref name="TSecond"/> elements to be stored.
            </param>
            <returns>
            The number of required <typeparamref name="TFirst"/> instances to store
            <paramref name="numSecondElements"/>
            instances of type <typeparamref name="TSecond"/>.
            </returns>
        </member>
        <member name="M:ILGPU.Interop.OffsetOf``1(System.String)">
            <summary>
            Computes the unsigned offset of the given field in bytes.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="fieldName">The name of the target field.</param>
        </member>
        <member name="M:ILGPU.Interop.FloatAsInt(ILGPU.Half)">
            <summary>
            Casts the given float to an int via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The int value.</returns>
        </member>
        <member name="M:ILGPU.Interop.FloatAsInt(System.Single)">
            <summary>
            Casts the given float to an int via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The int value.</returns>
        </member>
        <member name="M:ILGPU.Interop.FloatAsInt(System.Double)">
            <summary>
            Casts the given float to an int via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The int value.</returns>
        </member>
        <member name="M:ILGPU.Interop.IntAsFloat(System.UInt16)">
            <summary>
            Casts the given int to a float via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The float value.</returns>
        </member>
        <member name="M:ILGPU.Interop.IntAsFloat(System.UInt32)">
            <summary>
            Casts the given int to a float via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The float value.</returns>
        </member>
        <member name="M:ILGPU.Interop.IntAsFloat(System.UInt64)">
            <summary>
            Casts the given int to a float via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The float value.</returns>
        </member>
        <member name="T:ILGPU.IntrinsicMath">
            <summary>
            Represents basic intrinsic math helpers for general
            math operations that are supported on the CPU and the GPU.
            </summary>
            <remarks>
            For more advanced math functions refer to the algorithms library.
            </remarks>
        </member>
        <member name="T:ILGPU.IntrinsicMath.CPUOnly">
            <summary>
            Contains CPU-only math functions that are automatically mapped to IR nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rcp(System.Double)">
            <summary>
            The reciprocal operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsNaN(System.Double)">
            <summary>
            The is-not-a-number operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsInfinity(System.Double)">
            <summary>
            The is-infinity operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sqrt(System.Double)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rsqrt(System.Double)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Asin(System.Double)">
            <summary>
            Computes asin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sin(System.Double)">
            <summary>
            Computes sin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sinh(System.Double)">
            <summary>
            Computes sinh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Acos(System.Double)">
            <summary>
            Computes acos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cos(System.Double)">
            <summary>
            Computes cos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cosh(System.Double)">
            <summary>
            Computes cosh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tan(System.Double)">
            <summary>
            Computes tan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tanh(System.Double)">
            <summary>
            Computes tanh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan(System.Double)">
            <summary>
            Computes atan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp(System.Double)">
            <summary>
            Computes exp(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp2(System.Double)">
            <summary>
            Computes 2^x.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Floor(System.Double)">
            <summary>
            Computes floor(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Ceiling(System.Double)">
            <summary>
            Computes ceil(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(System.Double)">
            <summary>
            Computes log(x) to base e.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log2(System.Double)">
            <summary>
            Computes log(x) to base 2.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log10(System.Double)">
            <summary>
            Computes log(x) to base 10.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rem(System.Double,System.Double)">
            <summary>
            The % operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Min(System.Double,System.Double)">
            <summary>
            The min operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Max(System.Double,System.Double)">
            <summary>
            The max operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan2(System.Double,System.Double)">
            <summary>
            The atan2 operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Pow(System.Double,System.Double)">
            <summary>
            The pow operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(System.Double,System.Double)">
            <summary>
            The binary log operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rcp(System.Single)">
            <summary>
            The reciprocal operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsNaN(System.Single)">
            <summary>
            The is-not-a-number operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsInfinity(System.Single)">
            <summary>
            The is-infinity operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sqrt(System.Single)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rsqrt(System.Single)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Asin(System.Single)">
            <summary>
            Computes asin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sin(System.Single)">
            <summary>
            Computes sin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sinh(System.Single)">
            <summary>
            Computes sinh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Acos(System.Single)">
            <summary>
            Computes acos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cos(System.Single)">
            <summary>
            Computes cos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cosh(System.Single)">
            <summary>
            Computes cosh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tan(System.Single)">
            <summary>
            Computes tan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tanh(System.Single)">
            <summary>
            Computes tanh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan(System.Single)">
            <summary>
            Computes atan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp(System.Single)">
            <summary>
            Computes exp(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp2(System.Single)">
            <summary>
            Computes 2^x.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Floor(System.Single)">
            <summary>
            Computes floor(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Ceiling(System.Single)">
            <summary>
            Computes ceil(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(System.Single)">
            <summary>
            Computes log(x) to base e.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log2(System.Single)">
            <summary>
            Computes log(x) to base 2.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log10(System.Single)">
            <summary>
            Computes log(x) to base 10.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rem(System.Single,System.Single)">
            <summary>
            The % operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Min(System.Single,System.Single)">
            <summary>
            The min operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Max(System.Single,System.Single)">
            <summary>
            The max operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan2(System.Single,System.Single)">
            <summary>
            The atan2 operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Pow(System.Single,System.Single)">
            <summary>
            The pow operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(System.Single,System.Single)">
            <summary>
            The binary log operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rcp(ILGPU.Half)">
            <summary>
            The reciprocal operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsNaN(ILGPU.Half)">
            <summary>
            The is-not-a-number operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsInfinity(ILGPU.Half)">
            <summary>
            The is-infinity operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sqrt(ILGPU.Half)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rsqrt(ILGPU.Half)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Asin(ILGPU.Half)">
            <summary>
            Computes asin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sin(ILGPU.Half)">
            <summary>
            Computes sin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sinh(ILGPU.Half)">
            <summary>
            Computes sinh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Acos(ILGPU.Half)">
            <summary>
            Computes acos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cos(ILGPU.Half)">
            <summary>
            Computes cos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cosh(ILGPU.Half)">
            <summary>
            Computes cosh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tan(ILGPU.Half)">
            <summary>
            Computes tan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tanh(ILGPU.Half)">
            <summary>
            Computes tanh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan(ILGPU.Half)">
            <summary>
            Computes atan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp(ILGPU.Half)">
            <summary>
            Computes exp(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp2(ILGPU.Half)">
            <summary>
            Computes 2^x.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Floor(ILGPU.Half)">
            <summary>
            Computes floor(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Ceiling(ILGPU.Half)">
            <summary>
            Computes ceil(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(ILGPU.Half)">
            <summary>
            Computes log(x) to base e.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log2(ILGPU.Half)">
            <summary>
            Computes log(x) to base 2.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log10(ILGPU.Half)">
            <summary>
            Computes log(x) to base 10.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rem(ILGPU.Half,ILGPU.Half)">
            <summary>
            The % operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Min(ILGPU.Half,ILGPU.Half)">
            <summary>
            The min operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Max(ILGPU.Half,ILGPU.Half)">
            <summary>
            The max operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan2(ILGPU.Half,ILGPU.Half)">
            <summary>
            The atan2 operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Pow(ILGPU.Half,ILGPU.Half)">
            <summary>
            The pow operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(ILGPU.Half,ILGPU.Half)">
            <summary>
            The binary log operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.Double)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.Single)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(ILGPU.Half)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.SByte)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.Int16)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.Int32)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.Int64)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Double,System.Double)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Single,System.Single)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.SByte,System.SByte)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Int16,System.Int16)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Int32,System.Int32)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Int64,System.Int64)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Byte,System.Byte)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.UInt16,System.UInt16)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.UInt32,System.UInt32)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.UInt64,System.UInt64)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Double,System.Double)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Single,System.Single)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.SByte,System.SByte)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Int16,System.Int16)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Int32,System.Int32)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Int64,System.Int64)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Byte,System.Byte)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.UInt16,System.UInt16)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.UInt32,System.UInt32)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.UInt64,System.UInt64)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.SByte,System.SByte,System.SByte)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.DivRoundDown(System.Int32,System.Int32)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            down to zero.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded to zero.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.DivRoundUp(System.Int32,System.Int32)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            up (away from zero).
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>
            The numerator divided by the denominator rounded up (away from zero).
            </returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.DivRoundDown(System.Int64,System.Int64)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            down to zero.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded to zero.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.DivRoundUp(System.Int64,System.Int64)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            up (away from zero).
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>
            The numerator divided by the denominator rounded up (away from zero).
            </returns>
        </member>
        <member name="T:ILGPU.IntrinsicMath.IntegerParts">
            <summary>
            Represents integer parts of an 64 bit integer.
            </summary>
        </member>
        <member name="M:ILGPU.IntrinsicMath.IntegerParts.#ctor(System.UInt64)">
            <summary>
            Converts the given value into lower and upper parts.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.IntegerParts.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Stores the given lower and upper parts.
            </summary>
            <param name="lower">The lower part.</param>
            <param name="upper">The upper part.</param>
        </member>
        <member name="P:ILGPU.IntrinsicMath.IntegerParts.Lower">
            <summary>
            The lower 32 bits.
            </summary>
        </member>
        <member name="P:ILGPU.IntrinsicMath.IntegerParts.Upper">
            <summary>
            The upper 32 bits.
            </summary>
        </member>
        <member name="M:ILGPU.IntrinsicMath.IntegerParts.ToULong">
            <summary>
            Converts the parts into a single ulong value.
            </summary>
            <returns>The resolved ulong value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Decompose(System.Int64)">
            <summary>
            Decomposes the given integer value into a lower and an upper part.
            </summary>
            <param name="value">The value to decompose.</param>
            <returns>The lower and upper part.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Decompose(System.UInt64)">
            <summary>
            Decomposes the given integer value into a lower and an upper part.
            </summary>
            <param name="value">The value to decompose.</param>
            <returns>The lower and upper part.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.ComposeULong(ILGPU.IntrinsicMath.IntegerParts)">
            <summary>
            Composes an integer from the given lower and upper parts.
            </summary>
            <param name="parts">The lower and upper parts.</param>
            <returns>The composed integer.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.ComposeLong(ILGPU.IntrinsicMath.IntegerParts)">
            <summary>
            Composes an integer from the given lower and upper parts.
            </summary>
            <param name="parts">The lower and upper parts.</param>
            <returns>The composed integer.</returns>
        </member>
        <member name="T:ILGPU.InvalidKernelOperationException">
            <summary>
            An exception that is thrown when an ILGPU kernel method is called from the
            managed CPU side instead of a kernel.
            </summary>
        </member>
        <member name="M:ILGPU.InvalidKernelOperationException.#ctor">
            <summary>
            Constructs a new exception.
            </summary>
        </member>
        <member name="T:ILGPU.IR.MemoryAddressSpace">
            <summary>
            Represents an address space.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MemoryAddressSpace.Generic">
            <summary>
            The generic address space (any space).
            </summary>
        </member>
        <member name="F:ILGPU.IR.MemoryAddressSpace.Global">
            <summary>
            Represents the global address space.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MemoryAddressSpace.Shared">
            <summary>
            Represents the shared address space.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MemoryAddressSpace.Local">
            <summary>
            Represents the local address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.IAddressSpace">
            <summary>
            Represents the base interface for all address spaces.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaceAttribute">
            <summary>
            Represents an address-space annotation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.AddressSpaceAttribute.#ctor(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new address-space attribute.
            </summary>
            <param name="addressSpace">The target address space.</param>
        </member>
        <member name="P:ILGPU.IR.AddressSpaceAttribute.AddressSpace">
            <summary>
            Returns the associated address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaces">
            <summary>
            Extensions to encode ILGPU address space information in the .Net type
            system environment.
            </summary>
        </member>
        <member name="F:ILGPU.IR.AddressSpaces.Spaces">
            <summary>
            A readonly array of all address spaces.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaces.Generic">
            <summary>
            Represents the generic address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaces.Global">
            <summary>
            Represents the global address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaces.Shared">
            <summary>
            Represents the shared address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaces.Local">
            <summary>
            Represents the local address space.
            </summary>
        </member>
        <member name="M:ILGPU.IR.AddressSpaces.GetManagedType(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Resolves the managed type for the given address space.
            </summary>
            <param name="space">The address space.</param>
            <returns>The .Net representation of the given address space.</returns>
        </member>
        <member name="M:ILGPU.IR.AddressSpaces.GetAddressSpaceType(System.Type)">
            <summary>
            Resolves the address-space type for the given .Net type.
            </summary>
            <param name="type">The type.</param>
            <returns>The resolved address space.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.AllocaInformation">
            <summary>
            Represents information about an alloca node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaInformation.#ctor(System.Int32,ILGPU.IR.Values.Alloca)">
            <summary>
            Constructs new alloca information.
            </summary>
            <param name="index">The allocation index.</param>
            <param name="alloca">The alloca node.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.Index">
            <summary>
            Returns the allocation index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.Alloca">
            <summary>
            Returns the alloca node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.IsArray">
            <summary>
            Returns true if this is an array.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.IsDynamicArray">
            <summary>
            Returns true if this is an array with dynamic length.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.ArraySize">
            <summary>
            Returns the number 
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.ElementSize">
            <summary>
            Returns the element size in bytes of a single element.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.ElementAlignment">
            <summary>
            Returns the element alignment in bytes of a single element.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.TotalSize">
            <summary>
            Returns the total size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.ElementType">
            <summary>
            Returns the element type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.AllocaKindInformation">
            <summary>
            Represents information about a whole category of alloca nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaKindInformation.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AllocaInformation},System.Int32)">
            <summary>
            Constructs new alloca information.
            </summary>
            <param name="allocas">The alloca nodes.</param>
            <param name="totalSize">The total size.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaKindInformation.Allocas">
            <summary>
            Returns the alloca nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaKindInformation.Item(System.Int32)">
            <summary>
            Returns the i-th allocations.
            </summary>
            <param name="index">The index.</param>
            <returns>The resolved alloca information.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaKindInformation.Length">
            <summary>
            Returns the number of allocations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaKindInformation.TotalSize">
            <summary>
            Returns the element size in bytes of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaKindInformation.Contains(ILGPU.IR.Values.Alloca)">
            <summary>
            Returns true if the given alloca is contained in this collection.
            </summary>
            <param name="alloca">The alloca.</param>
            <returns>True, if the given alloca is contained in this collection.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaKindInformation.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all allocas.
            </summary>
            <returns>An enumerator to enumerate all allocas.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Allocas">
            <summary>
            Implements an alloca analysis to resolve information
            about alloca nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Allocas.Create``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Creates an alloca analysis.
            </summary>
            <typeparam name="TOrder">The traversal order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="collection">The block collection.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Allocas.#ctor(ILGPU.IR.Analyses.AllocaKindInformation@,ILGPU.IR.Analyses.AllocaKindInformation@,ILGPU.IR.Analyses.AllocaKindInformation@)">
            <summary>
            Constructs a new analysis.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Allocas.AddAllocation(ILGPU.IR.Values.Alloca,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AllocaInformation}.Builder,System.Int32@,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AllocaInformation}.Builder)">
            <summary>
            Creates and adds a new allocation to the given list.
            </summary>
            <param name="alloca">The current alloca.</param>
            <param name="builder">The target builder.</param>
            <param name="memorySize">The current memory size.</param>
            <param name="dynamicBuilder">
            The target builder for dynamic allocations.
            </param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Allocas.LocalAllocations">
            <summary>
            Returns all location allocations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Allocas.SharedAllocations">
            <summary>
            Returns all shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Allocas.DynamicSharedAllocations">
            <summary>
            Returns all dynamic shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Allocas.LocalMemorySize">
            <summary>
            Returns the total local memory size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Allocas.SharedMemorySize">
            <summary>
            Returns the total shared memory size in bytes.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.IAnalysisValueContext`1">
            <summary>
            An abstract analysis value context.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Analyses.IAnalysisValueContext`1.Item(ILGPU.IR.Value)">
            <summary>
            Returns the analysis value associated with the given value.
            </summary>
            <param name="value">The source value to lookup.</param>
            <returns>The parent value.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.AnalysisValue`1">
            <summary>
            An analysis value to encapsulate static program analysis values.
            </summary>
            <typeparam name="T">The underlying element type.</typeparam>
            <remarks>
            This type encapsulates a general <see cref="P:ILGPU.IR.Analyses.AnalysisValue`1.Data"/> element that represents
            accumulated analysis information for the whole object. Furthermore, it stores
            additional fine-grained information about each child element in the case of
            structure values. This improves the overall program analysis precision.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.#ctor(`0)">
            <summary>
            Constructs a new analysis value with the given data value.
            </summary>
            <param name="data">The accumulated data value.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.#ctor(`0,`0[])">
            <summary>
            Constructs a new analysis value with different data values for each child.
            </summary>
            <param name="data">The accumulated data value.</param>
            <param name="childArray">All child data values.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.AnalysisValue`1.Data">
            <summary>
            Returns the underlying data value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AnalysisValue`1.NumFields">
            <summary>
            Returns the number of child elements.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AnalysisValue`1.Item(System.Int32)">
            <summary>
            Returns the i-th child data element.
            </summary>
            <param name="index">The child index.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.CloneChildData">
            <summary>
            Clones the internal child-data array into a new one.
            </summary>
            <returns>The cloned child-data array.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.Equals(ILGPU.IR.Analyses.AnalysisValue{`0})">
            <summary>
            Returns true if the given value is equal to the current one.
            </summary>
            <param name="other">The other value.</param>
            <returns>True, if the given value is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current value.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.GetHashCode">
            <summary>
            Returns the hash code of this value.
            </summary>
            <returns>The hash code of this value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.ToString">
            <summary>
            Returns the string representation of this value.
            </summary>
            <returns>The string representation of this value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.op_Equality(ILGPU.IR.Analyses.AnalysisValue{`0},ILGPU.IR.Analyses.AnalysisValue{`0})">
            <summary>
            Returns true if the first and second value are the same.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>True, if the first and second value are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.op_Inequality(ILGPU.IR.Analyses.AnalysisValue{`0},ILGPU.IR.Analyses.AnalysisValue{`0})">
            <summary>
            Returns true if the first and second value are not the same.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>True, if the first and second value are not the same.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.AnalysisValueMapping">
            <summary>
            Helper methods for the structure <see cref="T:ILGPU.IR.Analyses.AnalysisValueMapping`1"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValueMapping.Create``1">
            <summary>
            Creates a new analysis mapping instance.
            </summary>
            <typeparam name="T">The target mapping type.</typeparam>
            <returns>The initialized analysis mapping instance.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.AnalysisValueMapping`1">
            <summary>
            Maps <see cref="T:ILGPU.IR.Value"/> instances to <see cref="T:ILGPU.IR.Analyses.AnalysisValue`1"/> instances
            specialized using the user-defined type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target mapping type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValueMapping`1.#ctor(System.Collections.Generic.Dictionary{ILGPU.IR.Value,ILGPU.IR.Analyses.AnalysisValue{`0}})">
            <summary>
            Constructs a new value mapping using the given dictionary.
            </summary>
            <param name="data">The underlying dictionary to use.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.AnalysisValueMapping`1.Item(ILGPU.IR.Value)">
            <summary>
            Lookups the given key in this map.
            </summary>
            <param name="key">The key to lookup.</param>
            <returns>The resolved analysis value.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.AnalysisValueMapping`1.System#Collections#Generic#IReadOnlyDictionary{ILGPU#IR#Value,ILGPU#IR#Analyses#AnalysisValue{T}}#Keys">
            <summary cref="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys" />
        </member>
        <member name="P:ILGPU.IR.Analyses.AnalysisValueMapping`1.System#Collections#Generic#IReadOnlyDictionary{ILGPU#IR#Value,ILGPU#IR#Analyses#AnalysisValue{T}}#Values">
            <summary cref="P:System.Collections.Generic.IReadOnlyDictionary`2.Values" />
        </member>
        <member name="P:ILGPU.IR.Analyses.AnalysisValueMapping`1.Count">
            <summary>
            Returns the number of elements in this mapping.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValueMapping`1.ContainsKey(ILGPU.IR.Value)">
            <summary>
            Returns true if the given key is contained in this map.
            </summary>
            <param name="key">The key to lookup.</param>
            <returns>True, if the given key is contained in this map.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValueMapping`1.TryGetValue(ILGPU.IR.Value,ILGPU.IR.Analyses.AnalysisValue{`0}@)">
            <summary>
            Tries to get map the given key to a stored value.
            </summary>
            <param name="key">The key to lookup.</param>
            <param name="value">The resolved value (if any).</param>
            <returns>True, if the given key could be found.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValueMapping`1.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all items in this mapping.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValueMapping`1.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{ILGPU#IR#Value,ILGPU#IR#Analyses#AnalysisValue{T}}}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValueMapping`1.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator" />
        </member>
        <member name="T:ILGPU.IR.Analyses.ICFGNode">
            <summary>
            Represents an abstract interface for all CFG nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.ICFGNode.Block">
            <summary>
            Returns the associated function value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.ICFGNode.TraversalIndex">
            <summary>
            Returns the zero-based node index that can be used
            for fast lookups using arrays.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG`2">
            <summary>
            Represents a control-flow graph (CFG).
            </summary>
            <typeparam name="TOrder">The underlying block order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG`2.Node">
            <summary>
            Represents a single node in the scope of a control-flow graph.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG`2.Node.Enumerator">
            <summary>
            Enumerates all CFG nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.Enumerator.CFG">
            <summary>
            Returns the parent graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.Enumerator.Current">
            <summary>
            Returns the current CFG node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.Enumerator.MoveNext">
            <summary>
            Moves the enumerator to the next node.
            </summary>
            <returns>True, if the enumerator could be moved.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG`2.Node.NodeCollection">
            <summary>
            Represents a node collection of attached nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.NodeCollection.CFG">
            <summary>
            Returns the parent graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.NodeCollection.Count">
            <summary>
            Returns the number of nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.NodeCollection.Item(System.Int32)">
            <summary>
            Returns the i-th node.
            </summary>
            <param name="index">The relative node index.</param>
            <returns>The resolved node.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.NodeCollection.GetEnumerator">
            <summary>
            Returns a node enumerator to iterate over all attached nodes.
            </summary>
            <returns>The resulting node enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.#ctor(ILGPU.IR.Analyses.CFG{`0,`1},ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Constructs a new node.
            </summary>
            <param name="cfg">The parent graph.</param>
            <param name="block">The associated block.</param>
            <param name="traversalIndex">The traversal index.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.CFG">
            <summary>
            Returns the parent graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.Block">
            <summary>
            Returns the associated block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.TraversalIndex">
            <summary>
            Returns the zero-based traversal index that has been assigned during
            traversal of all input blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.Predecessors">
            <summary>
            Returns the predecessors of this node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.Successors">
            <summary>
            Returns the successors of this node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.NumPredecessors">
            <summary>
            Returns the number of predecessors.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.NumSuccessors">
            <summary>
            Returns the number of successors.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific exception information.
            </summary>
            <param name="message">The source error message.</param>
            <returns>The formatted error message.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.GetPredecessors">
            <summary>
            Determines the actual predecessors based on the current direction.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.GetSuccessors">
            <summary>
            Determines the actual successors based on the current direction.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.ToString">
            <summary>
            Returns the string representation of this CFG node.
            </summary>
            <returns>The string representation of this CFG node.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.op_Implicit(ILGPU.IR.Analyses.CFG{`0,`1}.Node)~ILGPU.IR.BasicBlock">
            <summary>
            Converts the given node implicitly to its underlying basic block.
            </summary>
            <param name="node">The node to convert.</param>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG`2.Enumerator`1">
            <summary>
            Enumerates all CFG nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Enumerator`1.CFG">
            <summary>
            Returns the parent graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Enumerator`1.Current">
            <summary>
            Returns the current CFG node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Enumerator`1.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Enumerator`1.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Enumerator`1.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG`2.TraversalIndexProvider">
            <summary>
            Provides traversal indices.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.TraversalIndexProvider.GetValue(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Returns the current traversal index.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Create(ILGPU.IR.BasicBlockCollection{`0,`1}@)">
            <summary>
            Creates a new CFG.
            </summary>
            <param name="blocks">The block collection.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.#ctor(ILGPU.IR.BasicBlockCollection{`0,`1}@)">
            <summary>
            Constructs a new CFG.
            </summary>
            <param name="blocks">The block collection.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Blocks">
            <summary>
            Returns the underlying blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Count">
            <summary>
            Returns the number of nodes in the graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Root">
            <summary>
            Returns the root node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Resolves the CFG node for the given basic block.
            </summary>
            <param name="block">The basic block to resolve.</param>
            <returns>The resolved basic block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.GetEnumerator">
            <summary>
            Returns a node enumerator to iterate over all nodes stored in this graph
            using the current order.
            </summary>
            <returns>The resulting node enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.System#Collections#Generic#IEnumerable{ILGPU#IR#Analyses#CFG{TOrder,TDirection}#Node}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG">
            <summary>
            Helper utility for the class <see cref="T:ILGPU.IR.Analyses.CFG`2"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.CreateCFG``2(ILGPU.IR.BasicBlockCollection{``0,``1})">
            <summary>
            Creates a new CFG based on the given blocks.
            </summary>
            <typeparam name="TOrder">The underlying block order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="blocks">The block collection.</param>
            <returns>The created CFG.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.ControlFlowDirection.IControlFlowAnalysisSource`1">
            <summary>
            Defines an abstract control flow-analysis source that has an entry block and
            the ability to find a unique exit block.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Analyses.ControlFlowDirection.IControlFlowAnalysisSource`1.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.ControlFlowDirection.IControlFlowAnalysisSource`1.FindExitBlock">
            <summary>
            Computes the exit block.
            </summary>
            <returns>The exit block.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.ControlFlowDirection.IControlFlowDirection">
            <summary>
            Defines a control-flow direction.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.ControlFlowDirection.IControlFlowDirection.IsForwards">
            <summary>
            Returns true if this is a forwards direction.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.ControlFlowDirection.IControlFlowDirection.GetEntryBlock``2(``0@)">
            <summary>
            Returns the entry block for a given source.
            </summary>
            <typeparam name="TSource">The source base.</typeparam>
            <typeparam name="TDirection">The current direction.</typeparam>
            <param name="source">The source.</param>
            <returns>The entry block.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.ControlFlowDirection.Forwards">
            <summary>
            Defines the default forward control-flow direction.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.ControlFlowDirection.Forwards.IsForwards">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.ControlFlowDirection.Forwards.GetEntryBlock``2(``0@)">
            <summary>
            Returns the entry in case of a forwards source, the exit block otherwise.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.ControlFlowDirection.Backwards">
            <summary>
            Defines the backwards control-flow direction in which predecessors are considered
            to be successors and vice versa.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.ControlFlowDirection.Backwards.IsForwards">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.ControlFlowDirection.Backwards.GetEntryBlock``2(``0@)">
            <summary>
            Returns the entry in case of a backwards source, the exit block otherwise.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Dominators`1">
            <summary>
            Implements a dominator analysis.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.Create(ILGPU.IR.Analyses.CFG{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,`0})">
            <summary>
            Creates a new dominator analysis.
            </summary>
            <param name="cfg">The parent graph.</param>
            <returns>The created dominator analysis.</returns>
        </member>
        <member name="F:ILGPU.IR.Analyses.Dominators`1.idomsInRPO">
            <summary>
            Stores all idoms in RPO.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.Dominators`1.nodesInRPO">
            <summary>
            Stores all blocks in RPO.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.#ctor(ILGPU.IR.Analyses.CFG{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,`0})">
            <summary>
            Constructs the dominators for the given control-flow graph.
            </summary>
            <param name="cfg">The parent graph.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.Intersect(System.Int32,System.Int32)">
            <summary>
            Intersects two RPO numbers in  order to find the associated idom.
            </summary>
            <returns>The resulting LCA node.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.Dominators`1.CFG">
            <summary>
            Returns the underlying graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Dominators`1.Root">
            <summary>
            Returns the root block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.IsDominatedBy(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given <paramref name="block"/> is dominated by the
            <paramref name="dominator"/>.
            </summary>
            <param name="block">The block.</param>
            <param name="dominator">The potential dominator.</param>
            <returns>True, if the given block is dominated by the dominator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.Dominates(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given <paramref name="dominator"/> is dominating the
            <paramref name="block"/>.
            </summary>
            <param name="dominator">The potential dominator.</param>
            <param name="block">The other block.</param>
            <returns>True, if the given block is dominating the other block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.GetImmediateDominator(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the first dominator of the given block. This might be the block
            itself if there are no other dominators.
            </summary>
            <param name="block">The block.</param>
            <returns>The first dominator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.GetImmediateCommonDominator(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Returns the immediate common dominator of both blocks.
            </summary>
            <param name="first">The first block.</param>
            <param name="second">The second block.</param>
            <returns>The immediate common dominator of both blocks.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.GetImmediateCommonDominator(System.ReadOnlySpan{ILGPU.IR.BasicBlock})">
            <summary>
            Returns the immediate common dominator of all blocks.
            </summary>
            <param name="blocks">The list of block.</param>
            <returns>The immediate common dominator of all blocks.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Dominators">
            <summary>
            Helper utility for the class <see cref="T:ILGPU.IR.Analyses.Dominators`1"/>
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators.CreateDominators``1(ILGPU.IR.Analyses.CFG{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,``0})">
            <summary>
            Creates a new dominator analysis.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="cfg">The parent graph.</param>
            <returns>The created dominator analysis.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators.CreateDominators``1(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,``0})">
            <summary>
            Creates a new dominator analysis.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="blocks">The source blocks.</param>
            <returns>The created dominator analysis.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.IFixPointAnalysisContext`2">
            <summary>
            An analysis context that manages data in the scope of a fix point analysis.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <typeparam name="TNode">The node type.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Analyses.IFixPointAnalysisContext`2.Item(`1)">
            <summary>
            Returns the associated data value of the given node.
            </summary>
            <param name="node">The IR node.</param>
            <returns>The associated data value.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.FixPointAnalysis`3">
            <summary>
            An abstract fix point analysis to compute static invariants.
            </summary>
            <typeparam name="TData">The underlying data type of the analysis.</typeparam>
            <typeparam name="TNode">The node type.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.FixPointAnalysis`3.BaseAnalysisContext">
            <summary>
            An internal context implementation for block-based analyses.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.FixPointAnalysis`3.BaseAnalysisContext.#ctor(ILGPU.IR.BasicBlockSet)">
            <summary>
            Constructs an abstract analysis context.
            </summary>
            <param name="onStack">The block set.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.FixPointAnalysis`3.BaseAnalysisContext.OnStack">
            <summary>
            Returns the current stack set.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.FixPointAnalysis`3.BaseAnalysisContext.Stack">
            <summary>
            Returns the current stack.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.FixPointAnalysis`3.BaseAnalysisContext.TryPop(ILGPU.IR.BasicBlock@)">
            <summary>
            Tries to pop one block from the stack.
            </summary>
            <param name="block">The popped block (if any).</param>
            <returns>True, if a value could be popped from the stack.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.FixPointAnalysis`3.BaseAnalysisContext.Push(ILGPU.IR.BasicBlock)">
            <summary>
            Pushes the given block into the stack.
            </summary>
            <param name="block">The block to push.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.FixPointAnalysis`3.CreateData(`1)">
            <summary>
            Creates an initial data value for the given node.
            </summary>
            <param name="node">The source IR node.</param>
            <returns>The created data value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.FixPointAnalysis`3.Update``1(`1,``0)">
            <summary>
            Updates the given value with the latest analysis insights.
            </summary>
            <typeparam name="TContext">The analysis value context.</typeparam>
            <param name="node">The source IR node.</param>
            <param name="context">The current analysis context.</param>
            <returns>
            True, if the analysis has changed the internal data values.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.BlockFixPointAnalysis`2">
            <summary>
            A fix point analysis to compute static invariants across blocks.
            </summary>
            <typeparam name="TData">The underlying data type of the analysis.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.BlockFixPointAnalysis`2.BlockAnalysisContext">
            <summary>
            An internal context implementation for block-based analyses.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.BlockFixPointAnalysis`2.BlockAnalysisContext.#ctor(ILGPU.IR.BasicBlockMap{`0},ILGPU.IR.BasicBlockSet)">
            <summary>
            Constructs a new block analysis context.
            </summary>
            <param name="dataMapping">The block mapping.</param>
            <param name="onStack">The internal block set.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.BlockFixPointAnalysis`2.BlockAnalysisContext.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the data of the given block.
            </summary>
            <param name="block">The block.</param>
            <returns>The associated value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.BlockFixPointAnalysis`2.Analyze``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Executes a fix point analysis working on blocks.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TBlockDirection">The control-flow direction.</typeparam>
            <param name="blocks">The list of blocks.</param>
            <returns>The created analysis mapping from blocks to data elements.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.ValueFixPointAnalysis`2">
            <summary>
            A fix point analysis to compute static invariants across blocks.
            </summary>
            <typeparam name="T">The underlying data type of the analysis.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.ValueAnalysisContext">
            <summary>
            An internal context implementation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.ValueAnalysisContext.mapping">
            <summary>
            Returns the current value mapping.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.ValueAnalysisContext.#ctor(ILGPU.IR.Analyses.AnalysisValueMapping{`0},ILGPU.IR.BasicBlockSet)">
            <summary>
            Constructs a new analysis context.
            </summary>
            <param name="valueMapping">The parent value mapping.</param>
            <param name="onStack">The internal block set.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.ValueAnalysisContext.Item(ILGPU.IR.Value)">
            <summary>
            Returns the data of the given node.
            </summary>
            <param name="valueNode">The value node.</param>
            <returns>The associated value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.#ctor(`0)">
            <summary>
            Constructs a new fix point analysis.
            </summary>
            <param name="defaultValue">
            The default analysis value for generic IR nodes.
            </param>
        </member>
        <member name="P:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.DefaultValue">
            <summary>
            Returns the default analysis value for generic IR nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.Update``1(ILGPU.IR.Value,``0)">
            <summary>
            Updates the given value with the latest analysis insights.
            </summary>
            <typeparam name="TContext">The analysis value context.</typeparam>
            <param name="node">The source IR node.</param>
            <param name="context">The current analysis context.</param>
            <returns>
            True, if the analysis has changed the internal data values.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.Analyze``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Executes a fix point analysis working on values.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TBlockDirection">The control-flow direction.</typeparam>
            <param name="blocks">The list of blocks.</param>
            <returns>The created analysis mapping from values to data elements.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.Analyze``2(ILGPU.IR.BasicBlockCollection{``0,``1}@,ILGPU.IR.Analyses.AnalysisValueMapping{`0})">
            <summary>
            Executes a fix point analysis working on values.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TBlockDirection">The control-flow direction.</typeparam>
            <param name="blocks">The list of blocks.</param>
            <param name="valueMapping">The pre-defined map of input values.</param>
            <returns>The created analysis mapping from values to data elements.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.TryProvide(ILGPU.IR.Types.TypeNode)">
            <summary>
            Tries to provide an analysis value for the given type.
            </summary>
            <param name="typeNode">The type node.</param>
            <returns>The provided analysis value (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.TryMerge``1(ILGPU.IR.Value,``0)">
            <summary>
            Tries to merge the given IR value.
            </summary>
            <typeparam name="TContext">The current value context.</typeparam>
            <param name="value">The IR value.</param>
            <param name="context">The current analysis value context.</param>
            <returns>A merged value in the case of a successful merge.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.Merge(`0,`0)">
            <summary>
            Merges the given intermediate values.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>The merged value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.Merge(ILGPU.IR.Analyses.AnalysisValue{`0},ILGPU.IR.Analyses.AnalysisValue{`0})">
            <summary>
            Merges the given intermediate values.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>The merged value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.Create(`0,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a new analysis value for the given type node.
            </summary>
            <param name="data">The data value.</param>
            <param name="type">The type node.</param>
            <returns>The created analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.Create(ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates an initial analysis value.
            </summary>
            <param name="type">The type node.</param>
            <returns>The created analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.Merge``1(ILGPU.IR.Analyses.AnalysisValue{`0}@,ILGPU.IR.Value,``0)">
            <summary>
            Merges the given IR value into the current analysis value.
            </summary>
            <typeparam name="TContext">The value analysis context.</typeparam>
            <param name="source">The source value to merge.</param>
            <param name="value">The IR value to merge with.</param>
            <param name="context">The current value context.</param>
            <returns>The merged analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.GetField``1(ILGPU.IR.Analyses.AnalysisValue{`0}@,ILGPU.IR.Values.GetField,``0)">
            <summary>
            Merges a <see cref="T:ILGPU.IR.Values.GetField"/> IR value into this analysis value.
            </summary>
            <typeparam name="TContext">The value analysis context.</typeparam>
            <param name="source">The source value to merge.</param>
            <param name="getField">The IR value to merge with.</param>
            <param name="context">The current value context.</param>
            <returns>The merged analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.SetField``1(ILGPU.IR.Analyses.AnalysisValue{`0}@,ILGPU.IR.Values.SetField,``0)">
            <summary>
            Merges a <see cref="T:ILGPU.IR.Values.SetField"/> into this analysis value.
            </summary>
            <typeparam name="TContext">The value analysis context.</typeparam>
            <param name="source">The source value to merge.</param>
            <param name="setField">The IR value to merge with.</param>
            <param name="context">The current value context.</param>
            <returns>The merged analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.StructureValue``1(ILGPU.IR.Analyses.AnalysisValue{`0}@,ILGPU.IR.Values.StructureValue,``0)">
            <summary>
            Merges a <see cref="T:ILGPU.IR.Values.StructureValue"/> into this analysis value.
            </summary>
            <typeparam name="TContext">The value analysis context.</typeparam>
            <param name="source">The source value to merge.</param>
            <param name="structureValue">The IR structure value to merge with.</param>
            <param name="context">The current value context.</param>
            <returns>The merged analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.PhiValue``1(ILGPU.IR.Analyses.AnalysisValue{`0}@,ILGPU.IR.Values.PhiValue,``0)">
            <summary>
            Merges a <see cref="T:ILGPU.IR.Values.PhiValue"/> into this analysis value.
            </summary>
            <typeparam name="TContext">The value analysis context.</typeparam>
            <param name="source">The source value to merge.</param>
            <param name="phi">The IR phi value to merge with.</param>
            <param name="context">The current value context.</param>
            <returns>The merged analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.GenericValue``1(ILGPU.IR.Analyses.AnalysisValue{`0},ILGPU.IR.Value,``0)">
            <summary>
            Merges a generic IR value into this analysis value.
            </summary>
            <typeparam name="TContext">The value analysis context.</typeparam>
            <param name="source">The source value to merge.</param>
            <param name="value">The IR value to merge with.</param>
            <param name="context">The current value context.</param>
            <returns>The merged analysis value.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.IGlobalFixPointAnalysisContext`2">
            <summary>
            An abstract global fix point analysis to compute static invariants across
            different method calls.
            </summary>
            <typeparam name="TMethodData">
            The underlying method data type of the analysis.
            </typeparam>
            <typeparam name="T">
            The underlying value data type of the analysis.
            </typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3">
            <summary>
            An abstract global fix point analysis to compute static invariants across
            different method calls.
            </summary>
            <typeparam name="TMethodData">
            The underlying method data type of the analysis.
            </typeparam>
            <typeparam name="T">
            The underlying value data type of the analysis.
            </typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1">
            <summary>
            Represents an internal analysis entry.
            </summary>
            <typeparam name="TValue">The value type to track.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.#ctor(ILGPU.IR.Method,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AnalysisValue{`3}})">
            <summary>
            Constructs an internal analysis entry.
            </summary>
            <param name="method">The associated method.</param>
            <param name="arguments">The argument bindings.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.Method">
            <summary>
            Returns the current method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.Arguments">
            <summary>
            Returns all call argument data.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.Equals(ILGPU.IR.Analyses.GlobalFixPointAnalysis{`0,`1,`2}.GlobalAnalysisEntry{`3})">
            <summary>
            Returns true if the given entry is equal to the current one.
            </summary>
            <param name="other">The other value.</param>
            <returns>True, if the given entry is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current entry.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current entry.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.GetHashCode">
            <summary>
            Returns the hash code of this entry.
            </summary>
            <returns>The hash code of this entry.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.ToString">
            <summary>
            Returns the string representation of this entry.
            </summary>
            <returns>The string representation of this entry.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.op_Equality(ILGPU.IR.Analyses.GlobalFixPointAnalysis{`0,`1,`2}.GlobalAnalysisEntry{`3},ILGPU.IR.Analyses.GlobalFixPointAnalysis{`0,`1,`2}.GlobalAnalysisEntry{`3})">
            <summary>
            Returns true if the left and right entries are the same.
            </summary>
            <param name="left">The left entry.</param>
            <param name="right">The right entry.</param>
            <returns>True, if the left and right entries are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.op_Inequality(ILGPU.IR.Analyses.GlobalFixPointAnalysis{`0,`1,`2}.GlobalAnalysisEntry{`3},ILGPU.IR.Analyses.GlobalFixPointAnalysis{`0,`1,`2}.GlobalAnalysisEntry{`3})">
            <summary>
            Returns true if the left and right entries are not the same.
            </summary>
            <param name="left">The left entry.</param>
            <param name="right">The right entry.</param>
            <returns>True, if the left and right entries are not the same.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext">
            <summary>
            Implements a global analysis context.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.#ctor(System.Collections.Generic.Dictionary{ILGPU.IR.Method,`0})">
            <summary>
            Constructs a new global analysis context.
            </summary>
            <param name="mapping">The basic data mapping.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.Mapping">
            <summary>
            Returns the current method mapping.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.ValueMapping">
            <summary>
            Returns the current value mapping.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.Visited">
            <summary>
            Returns the set of visited configurations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.Stack">
            <summary>
            Returns the current stack.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.GetMethodData(ILGPU.IR.Method)">
            <summary>
            Returns the method data of the given method.
            </summary>
            <param name="method">The method.</param>
            <returns>The associated method data.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.Item(ILGPU.IR.Value)">
            <summary>
            Returns the data of the given node.
            </summary>
            <param name="valueNode">The value node.</param>
            <returns>The associated data.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.Item(ILGPU.IR.Method)">
            <summary>
            Returns the data of the given method.
            </summary>
            <param name="method">The method.</param>
            <returns>The associated data.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.TryPop(ILGPU.IR.Analyses.GlobalFixPointAnalysis{`0,`1,`2}.GlobalAnalysisEntry{`1}@)">
            <summary>
            Tries to pop one method from the stack.
            </summary>
            <param name="entry">The popped method (if any).</param>
            <returns>True, if a method could be popped from the stack.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.Push(ILGPU.IR.Analyses.GlobalFixPointAnalysis{`0,`1,`2}.GlobalAnalysisEntry{`1}@)">
            <summary>
            Pushes the given entry into the stack.
            </summary>
            <param name="entry">The entry to push.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.#ctor(`1)">
            <summary>
            Constructs a new global fix point analysis.
            </summary>
            <param name="defaultValue">
            The default analysis value for generic IR nodes.
            </param>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.CreateMethodData(ILGPU.IR.Method)">
            <summary>
            Creates an initial data value for the given method.
            </summary>
            <param name="method">The source method.</param>
            <returns>The created method data value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.UpdateMethod``1(ILGPU.IR.Method,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AnalysisValue{`1}},ILGPU.IR.Analyses.AnalysisValueMapping{`1},``0)">
            <summary>
            </summary>
            <typeparam name="TContext">The analysis value context.</typeparam>
            <param name="method">The source method.</param>
            <param name="arguments">The call arguments.</param>
            <param name="valueMapping">The current value mapping.</param>
            <param name="context">The current analysis context.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.AnalyzeGlobal(ILGPU.IR.Method,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AnalysisValue{`1}})">
            <summary>
            Executes a fix point analysis working on values.
            </summary>
            <param name="rootMethod">The root method.</param>
            <param name="arguments">The initial parameter-argument bindings.</param>
            <returns>
            The created analysis mapping from methods to data elements.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.GlobalFixPointAnalysis`2">
            <summary>
            An abstract global fix point analysis to compute static invariants across
            different method calls.
            </summary>
            <typeparam name="T">
            The underlying value data type of the analysis.
            </typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`2.#ctor(`0,`0)">
            <summary>
            Constructs a new global fix point analysis.
            </summary>
            <param name="defaultValue">
            The default analysis value for generic IR nodes.
            </param>
            <param name="initialValue">
            The initial analysis value for entry-point IR nodes.
            </param>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`2.InitialValue">
            <summary>
            Returns the initial analysis value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`2.CreateMethodData(ILGPU.IR.Method)">
            <summary>
            Creates an initial data value for the given method.
            </summary>
            <param name="method">The source method.</param>
            <returns>The created method data value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`2.UpdateMethod``1(ILGPU.IR.Method,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AnalysisValue{`0}},ILGPU.IR.Analyses.AnalysisValueMapping{`0},``0)">
            <summary>
            Merges previous value bindings with the latest argument value updates.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`2.AnalyzeGlobal(ILGPU.IR.Method)">
            <summary>
            Executes a fix point analysis working on values.
            </summary>
            <param name="rootMethod">The root method.</param>
            <returns>
            The created analysis mapping from methods to data elements.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape`1">
            <summary>
            Represents the structure of multiple <see cref="T:ILGPU.IR.Method"/> objects.
            This includes the call graph, function size and dependency information.
            </summary>
            <typeparam name="T">Custom information type per entry.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape`1.Entry">
            <summary>
            Represents a landscape entry.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.Landscape`1.Entry.Comparison">
            <summary>
            Compares two entries according to their associated method's id.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.Data">
            <summary>
            Returns custom information.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.NumBlocks">
            <summary>
            Returns the number of basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.NumUses">
            <summary>
            Returns the number of uses.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.HasReferences">
            <summary>
            Returns true if this function has references.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.References">
            <summary>
            Returns all method references to other methods.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Entry.IsUsedBy(ILGPU.IR.Method)">
            <summary>
            Registers all resolved uses (backward edges).
            </summary>
            <param name="method">The method.</param>
            <returns>True, if this method is used by the given one.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Entry.AddUse(ILGPU.IR.Method)">
            <summary>
            Registers the given method use.
            </summary>
            <param name="method">The method to register.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Entry.FinishUses">
            <summary>
            Finishes the adding of use nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Entry.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all method entries that
            depend on this one (backward edges).
            </summary>
            <returns>
            An enumerator to enumerate all depending method entries.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Entry.ToString">
            <summary>
            Returns the string representation of this entry.
            </summary>
            <returns>The string representation of this entry.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape`1.IDataProvider">
            <summary>
            An abstract data provider per node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.IDataProvider.GetData(ILGPU.IR.Method,ILGPU.IR.Analyses.References)">
            <summary>
            Resolves custom entry information for the given node.
            </summary>
            <param name="method">The current method.</param>
            <param name="methodReferences">
            All references to other methods.
            </param>
            <returns>The resolved custom data.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape`1.Enumerator">
            <summary>
            Enumerates all functions in the call graph scope in post order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Enumerator.#ctor(ILGPU.IR.Analyses.Landscape{`0})">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="landscape">The parent landscape.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Enumerator.Landscape">
            <summary>
            Returns the parent scope;
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Enumerator.Current">
            <summary>
            Returns the current function entry.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current" />
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext" />
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset" />
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose" />
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Create``2(ILGPU.IR.MethodCollection{``0}@,``1@)">
            <summary>
            Creates a function structure instance.
            </summary>
            <typeparam name="TPredicate">The view predicate.</typeparam>
            <typeparam name="TDataProvider">The custom data provider type.</typeparam>
            <param name="functionView">The source function view.</param>
            <param name="dataProvider">A custom data provider.</param>
            <returns>The created function structure object.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Create``2(ILGPU.IR.UnsafeMethodCollection{``0}@,``1@)">
            <summary>
            Creates a function structure instance.
            </summary>
            <typeparam name="TPredicate">The view predicate.</typeparam>
            <typeparam name="TDataProvider">The custom data provider type.</typeparam>
            <param name="functionView">The source function view.</param>
            <param name="dataProvider">A custom data provider.</param>
            <returns>The created function structure object.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Create``3(``0@,``2@)">
            <summary>
            Creates a function structure instance.
            </summary>
            <typeparam name="TFunctionView">The type of the function view.</typeparam>
            <typeparam name="TPredicate">The view predicate.</typeparam>
            <typeparam name="TDataProvider">The custom data provider type.</typeparam>
            <param name="functionView">The source function view.</param>
            <param name="dataProvider">A custom data provider.</param>
            <returns>The created function structure object.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.#ctor">
            <summary>
            Constructs a new structure instance.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Item(ILGPU.IR.Method)">
            <summary>
            Returns the landscape entry of the given method.
            </summary>
            <param name="method">The source method.</param>
            <returns>The resolved landscape entry.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Count">
            <summary>
            Returns the number of function entries.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.TryGetEntry(ILGPU.IR.Method,ILGPU.IR.Analyses.Landscape{`0}.Entry@)">
            <summary>
            Tries to resolve the landscape entry of the given method.
            </summary>
            <param name="method">The method.</param>
            <param name="entry">The resolved entry.</param>
            <returns>True, if the entry could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Init``3(``0@,``2)">
            <summary>
            Computes all entries.
            </summary>
            <param name="view">The source view.</param>
            <param name="dataProvider">A custom data provider.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.ComputeOrder">
            <summary>
            Computes the post order of the nested call graph.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all functions in the call graph in
            post order.
            </summary>
            <returns>
            An enumerator that enumerates all functions in the call graph.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape">
            <summary>
            Represents the structure of multiple <see cref="T:ILGPU.IR.Method"/> objects.
            This includes the call graph, function size and dependency information.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape.DataProvider">
            <summary>
            The default data provider.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape.DataProvider.GetData(ILGPU.IR.Method,ILGPU.IR.Analyses.References)">
            <summary cref="M:ILGPU.IR.Analyses.Landscape`1.IDataProvider.GetData(ILGPU.IR.Method,ILGPU.IR.Analyses.References)"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape.Create``2(``0@)">
            <summary>
            Creates a function structure instance.
            </summary>
            <typeparam name="TFunctionView">The type of the function view.</typeparam>
            <typeparam name="TPredicate">The view predicate.</typeparam>
            <param name="functionView">The source function view.</param>
            <returns>The created function structure object.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape.Create``4(``1@,``3@)">
            <summary>
            Creates a function structure instance.
            </summary>
            <typeparam name="T">The custom information type.</typeparam>
            <typeparam name="TFunctionView">The type of the function view.</typeparam>
            <typeparam name="TPredicate">The view predicate.</typeparam>
            <typeparam name="TDataProvider">The custom data provider type.</typeparam>
            <param name="functionView">The source function view.</param>
            <param name="dataProvider">A custom data provider.</param>
            <returns>The created function structure object.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape.#ctor">
            <summary>
            Constructs a new function structure instance.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.LoopInfo`2">
            <summary>
            A simple loop info object.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.LoopInfo`2.ExitSuccessorProvider">
            <summary>
            A specialized successor provider for loop regions that exclude the exit
            block of a particular loop. This emulates a return exit block without any
            successors.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.ExitSuccessorProvider.#ctor(ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new successor provider.
            </summary>
            <param name="exitBlock">The exit block.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.ExitSuccessorProvider.ExitBlock">
            <summary>
            Returns the unique exit block (the first block that does not belong to
            the loop).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.ExitSuccessorProvider.GetSuccessors(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the successors of the given basic block that do not contain the
            loop's exit block.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.LoopInfo`2.ExitAndHeaderSuccessorProvider">
            <summary>
            A specialized successor provider for loop regions that exclude the exit and
            the header blocks of a particular loop. This emulates a return exit block
            without any successors.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.ExitAndHeaderSuccessorProvider.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new successor provider.
            </summary>
            <param name="exitBlock">The exit block.</param>
            <param name="headerBlock">The header block.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.ExitAndHeaderSuccessorProvider.HeaderBlock">
            <summary>
            Returns the unique header block (the first block that belongs to the
            loop).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.ExitAndHeaderSuccessorProvider.GetSuccessors(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the successors of the given basic block that do not contain the
            loop's exit block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.Create(ILGPU.IR.Analyses.Loops{`0,`1}.Node)">
            <summary>
            Creates a new loop info instance from the given SCC while checking for
            unique entry and exit blocks.
            </summary>
            <param name="loop">The SCC.</param>
            <returns>The resolved loop info instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.TryCreate(ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.IR.Analyses.LoopInfo{`0,`1}@)">
            <summary>
            Tries to create a new loop info instance from the given SCC while checking
            for unique entry and exit blocks.
            </summary>
            <param name="loop">The SCC.</param>
            <param name="loopInfo">The resolved loop info object (if any).</param>
            <returns>True, if the resulting loop info object could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.TryGetLoopBody(ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.IR.BasicBlock@)">
            <summary>
            Tries to determine a unique body start block.
            </summary>
            <param name="loop">The parent loop.</param>
            <param name="body">The loop body (if any).</param>
            <returns>True, if the given loop body could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.TryGetPhis(ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.Util.InlineList{ILGPU.IR.Analyses.InductionVariable}@,ILGPU.Util.InlineList{System.ValueTuple{ILGPU.IR.Values.PhiValue,ILGPU.IR.Value}}@)">
            <summary>
            Tries to get all induction variables and supported phi values of the given
            loop object.
            </summary>
            <param name="loop">The parent loop.</param>
            <param name="inductionVariables">The list of induction variables.</param>
            <param name="phiValues">The list of phi values.</param>
            <returns>True, if the given loop has supported phi values.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.TryGetPhiOperands(ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.IR.Values.PhiValue,ILGPU.IR.Value@,ILGPU.IR.Value@)">
            <summary>
            Tries to determine the inside and outside operands of the given phi value.
            </summary>
            <param name="loop">The parent loop.</param>
            <param name="phiValue">The phi value.</param>
            <param name="insideOperand">The inside operand (if any).</param>
            <param name="outsideOperand">The outside operand (if any).</param>
            <returns>True, if both operands could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.IsInductionVariable(ILGPU.IR.Value,ILGPU.IR.Values.PhiValue@)">
            <summary>
            Returns true if the given value is an induction variable.
            </summary>
            <param name="value">The value to test.</param>
            <param name="phiValue">The resolved induction-variable phi (if any)..</param>
            <returns>True, if the given node is an induction-variable branch.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.#ctor(ILGPU.IR.Analyses.Loops{`0,`1}.Node@,ILGPU.IR.BasicBlock,ILGPU.Util.InlineList{ILGPU.IR.Analyses.InductionVariable}@,ILGPU.Util.InlineList{System.ValueTuple{ILGPU.IR.Values.PhiValue,ILGPU.IR.Value}}@)">
            <summary>
            Constructs a new loop info instance.
            </summary>
            <param name="loop">The parent loop.</param>
            <param name="body">The start loop-body block.</param>
            <param name="variables">All induction variables.</param>
            <param name="values">All affected phi values.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.Loop">
            <summary>
            Returns the associated loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.Entry">
            <summary>
            Returns the unique predecessor that does not belong to the loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.Header">
            <summary>
            Returns the unique loop header that belongs to the loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.Body">
            <summary>
            Returns the body entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.Exit">
            <summary>
            Returns the unique exit block that does not belong to the loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.BackEdge">
            <summary>
            Returns the unique back-edge block that jumps to the loop header.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.InductionVariables">
            <summary>
            Returns all underlying induction variables.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.PhiValues">
            <summary>
            Returns all phi values that are referenced outside of this loop.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.Contains(ILGPU.IR.BasicBlock)">
            <summary>
            Checks whether the given block belongs to the associated SCC.
            </summary>
            <param name="block">The block to map to an SCC.</param>
            <returns>True, if the node belongs to the associated SCC.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.ComputeOrderedBlocks">
            <summary>
            Computes a block ordering of all blocks in this loop.
            </summary>
            <returns>The computed block ordering.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.ComputeOrderedBodyBlocks">
            <summary>
            Computes a block ordering of all blocks in this loop.
            </summary>
            <returns>The computed block ordering.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.LoopInfo">
            <summary>
            Helper utility for the class <see cref="T:ILGPU.IR.Analyses.LoopInfo`2"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo.TryGetLoopInfo``2(ILGPU.IR.Analyses.Loops{``0,``1}.Node,ILGPU.IR.Analyses.LoopInfo{``0,``1}@)">
            <summary>
            Creates a new SCCs analysis instance based on the given CFG.
            </summary>
            <typeparam name="TOrder">The underlying block order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="loop">The underlying SCC entry.</param>
            <param name="loopInfo">The resolved loop information (if any).</param>
            <returns>The created SCCs analysis.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.InductionVariableOperation`1">
            <summary>
            Represents an operation that works on an induction variable.
            </summary>
            <typeparam name="T">The operation kind.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableOperation`1.Index">
            <summary>
            Returns the operand index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableOperation`1.Value">
            <summary>
            Returns the associated constant value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableOperation`1.Kind">
            <summary>
            Returns the kind of the operation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableOperation`1.IsLeft">
            <summary>
            Returns true if the constant operand value is on the left.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.InductionVariableBounds">
            <summary>
            Represents variable bounds of an induction variable.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariableBounds.TryGetIntegerBound(ILGPU.IR.Value)">
            <summary>
            Tries to map a loop variable to an integer constant.
            </summary>
            <param name="value">The value to map to an integer bound.</param>
            <returns>The mapped integer (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariableBounds.#ctor(ILGPU.IR.Value,ILGPU.IR.Analyses.InductionVariableOperation{ILGPU.IR.Values.BinaryArithmeticKind},ILGPU.IR.Analyses.InductionVariableOperation{ILGPU.IR.Values.CompareKind})">
            <summary>
            Constructs a new induction-variable bounds.
            </summary>
            <param name="init">The initialization value.</param>
            <param name="updateOperation">The update operation.</param>
            <param name="breakOperation">The break operation.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.Init">
            <summary>
            The initialization value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.UpdateValue">
            <summary>
            Returns the update value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.BreakValue">
            <summary>
            Returns the break value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.UpdateOperation">
            <summary>
            The update kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.BreakOperation">
            <summary>
            The break kind.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariableBounds.GetIntegerBounds">
            <summary>
            Tries to get integer bounds for all loop variables.
            </summary>
            <returns>The determined integer-based loop bounds.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariableBounds.TryGetTripCount(System.ValueTuple{System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32}}@)">
            <summary>
            Tries to compute the trip count of the loop.
            </summary>
            <param name="intBounds"></param>
            <returns></returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.InductionVariable">
            <summary>
            A single induction variable.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariable.#ctor(System.Int32,ILGPU.IR.Values.PhiValue,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.ConditionalBranch)">
            <summary>
            Constructs a new induction variable.
            </summary>
            <param name="index">The variable index.</param>
            <param name="phi">The phi node.</param>
            <param name="init">The init value.</param>
            <param name="update">The update value.</param>
            <param name="breakBranch">The branch that breaks the loop.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.Index">
            <summary>
            Returns the variable index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.Phi">
            <summary>
            Returns the associated phi value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.Init">
            <summary>
            Returns a link to the init expression.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.Update">
            <summary>
            Returns a link to the update expression.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.BreakCondition">
            <summary>
            Returns a link to the break-condition expression.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.BreakBranch">
            <summary>
            Returns the branch that actually breaks the loop.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariable.TryResolveUpdateOperation(ILGPU.IR.Analyses.InductionVariableOperation{ILGPU.IR.Values.BinaryArithmeticKind}@)">
            <summary>
            Tries to resolve a known update operation.
            </summary>
            <param name="updateOperation">The resolved update operation.</param>
            <returns>True, if a known operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariable.TryResolveBreakOperation(ILGPU.IR.Analyses.InductionVariableOperation{ILGPU.IR.Values.CompareKind}@)">
            <summary>
            Tries to resolve a known break operation.
            </summary>
            <param name="breakOperation">The resolved break operation.</param>
            <returns>True, if a known operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariable.TryResolveBounds(ILGPU.IR.Analyses.InductionVariableBounds@)">
            <summary>
            Tries to resolve the related loop bounds.
            </summary>
            <param name="bounds">The resolved loop bounds (if any).</param>
            <returns>True, if the bounds could be resoled.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2">
            <summary>
            An analysis to detect strongly-connected components.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2.Node">
            <summary>
            Represents a single strongly-connected component.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2.Node.Enumerator">
            <summary>
            An enumerator to iterate over all nodes in the current SCC.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.Enumerator.#ctor(System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock})">
            <summary>
            Constructs a new node enumerator.
            </summary>
            <param name="nodes">The nodes to iterate over.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Enumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2.Node.ValueEnumerator">
            <summary>
            A value enumerator to iterate over all values in the current SCC.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.ValueEnumerator.#ctor(ILGPU.IR.Analyses.Loops{`0,`1}.Node.Enumerator)">
            <summary>
            Constructs a new value enumerator.
            </summary>
            <param name="iterator">The SCC enumerator.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.ValueEnumerator.Current">
            <summary>
            Returns the current value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.ValueEnumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.ValueEnumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.ValueEnumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.ValueEnumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2.Node.PhiValueEnumerator">
            <summary>
            A value enumerator to iterate over all phi values
            that have a dependency on outer and inner values of this SCC.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.PhiValueEnumerator.#ctor(ILGPU.IR.Analyses.Loops{`0,`1}.Node)">
            <summary>
            Constructs a new value enumerator.
            </summary>
            <param name="parent">The parent SCC.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.PhiValueEnumerator.Parent">
            <summary>
            The parent loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.PhiValueEnumerator.Current">
            <summary>
            Returns the current value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.PhiValueEnumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.PhiValueEnumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.PhiValueEnumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.PhiValueEnumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="F:ILGPU.IR.Analyses.Loops`2.Node.children">
            <summary>
            All child nodes (if any).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.#ctor(ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@,System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock},System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock},System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock})">
            <summary>
            Constructs a new loop node.
            </summary>
            <param name="parent">The parent loop.</param>
            <param name="headerBlocks">All loop headers.</param>
            <param name="breakerBlocks">All blocks that can break the loop.</param>
            <param name="backEdgeBlocks">All blocks with back edges.</param>
            <param name="members">All blocks in the scope of this loop.</param>
            <param name="entries">All entry block that jump into this loop.</param>
            <param name="exits">All exit block that this loop can jump to.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Count">
            <summary>
            Returns the number of members.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.BackEdges">
            <summary>
            Returns the block containing the associated back edge.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Headers">
            <summary>
            Returns all loop headers.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Breakers">
            <summary>
            Returns all loop breakers that contain branches to exit the loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Entries">
            <summary>
            All entry blocks that jump into the loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Exits">
            <summary>
            All exit blocks that are reachable by all breakers from the loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Parent">
            <summary>
            Returns the parent loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Children">
            <summary>
            Returns all child loops.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.IsNestedLoop">
            <summary>
            Returns true if this is a nested loop
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.IsInnermostLoop">
            <summary>
            Returns true if this is an innermost loop.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.Contains(ILGPU.IR.BasicBlock)">
            <summary>
            Checks whether the given block belongs to this SCC.
            </summary>
            <param name="block">The block to map to an SCC.</param>
            <returns>True, if the node belongs to this SCC.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.ResolvePhis">
            <summary>
            Resolves all <see cref="T:ILGPU.IR.Values.PhiValue"/>s that are contained
            in this SCC which reference at least one operand that is not
            defined in this SCC.
            </summary>
            <returns>The list of resolved phi values.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.AddChild(ILGPU.IR.Analyses.Loops{`0,`1}.Node)">
            <summary>
            Adds the given child node.
            </summary>
            <param name="child">The child node to add.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.GetValueEnumerator">
            <summary>
            Returns a new value enumerator.
            </summary>
            <returns>The resolved value enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over all members
            of this SCC.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2.Enumerator">
            <summary>
            An enumerator to iterate over all SCCs.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Enumerator.#ctor(System.Collections.Generic.List{ILGPU.IR.Analyses.Loops{`0,`1}.Node})">
            <summary>
            Constructs a new node enumerator.
            </summary>
            <param name="nodes">The nodes to iterate over.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Enumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2.NodeData">
            <summary>
            Represents node data that is required for Tarjan's algorithm.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.NodeData.Pop(System.Collections.Generic.List{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData})">
            <summary>
            Pops a new data element.
            </summary>
            <param name="stack">The source stack to pop from.</param>
            <returns>The popped node data.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.NodeData.#ctor(ILGPU.IR.Analyses.CFG{`0,`1}.Node@)">
            <summary>
            Constructs a new data instance.
            </summary>
            <param name="node">The CFG node.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeData.Node">
            <summary>
            Returns the associated node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeData.Index">
            <summary>
            The associated SCC index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeData.LowLink">
            <summary>
            The associated SCC low link.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeData.OnStack">
            <summary>
            Return true if the associated node is on the stack.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeData.IsInSCC">
            <summary>
            Returns true if the current block is a header.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeData.IsHeader">
            <summary>
            Returns true if the current block is a header.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeData.HasIndex">
            <summary>
            Returns true if the index has been initialized.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.NodeData.Clear">
            <summary>
            Clears all internal links.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.NodeData.Push(System.Collections.Generic.List{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData},System.Int32@)">
            <summary>
            Pushes the current node onto the processing stack.
            </summary>
            <param name="stack">The processing stack.</param>
            <param name="index">The current traversal index.</param>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2.NodeListProvider">
            <summary>
            Provides new intermediate <see cref="T:ILGPU.IR.Analyses.Loops`2.NodeData"/> list instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.NodeListProvider.GetValue(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Creates a new <see cref="T:ILGPU.IR.Analyses.Loops`2.NodeData"/> instance.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2.NodeDataProvider">
            <summary>
            Provides new intermediate <see cref="T:ILGPU.IR.Analyses.Loops`2.NodeData"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.NodeDataProvider.#ctor(ILGPU.IR.Analyses.CFG{`0,`1})">
            <summary>
            Constructs a new data provider.
            </summary>
            <param name="cfg">The underlying CFG.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeDataProvider.CFG">
            <summary>
            Returns the underlying CFG.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.NodeDataProvider.GetValue(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Creates a new <see cref="T:ILGPU.IR.Analyses.Loops`2.NodeData"/> instance.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.IsLoop(System.Collections.Generic.List{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData},ILGPU.IR.BasicBlockMap{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData},ILGPU.IR.Analyses.Loops{`0,`1}.NodeData,System.Int32@)">
            <summary>
            Returns true if this is a loop.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Create(ILGPU.IR.Analyses.CFG{`0,`1})">
            <summary>
            Creates a new SCC analysis.
            </summary>
            <param name="cfg">The underlying source CFG.</param>
            <returns>The created SCC analysis.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.#ctor(ILGPU.IR.Analyses.CFG{`0,`1})">
            <summary>
            Constructs a new collection of SCCs.
            </summary>
            <param name="cfg">The source CFG.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.CFG">
            <summary>
            Returns the underlying CFG.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Count">
            <summary>
            Returns the number of SCCs.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Item(System.Int32)">
            <summary>
            Returns the i-th SCC.
            </summary>
            <param name="index">The index of the i-th SCC.</param>
            <returns>The resolved SCC.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.StrongConnect(System.Collections.Generic.List{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData},ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.IR.BasicBlockMap{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData}@,ILGPU.IR.Analyses.Loops{`0,`1}.NodeData,System.Int32@)">
            <summary>
            The modified heart of Tarjan's SCC algorithm.
            </summary>
            <param name="stack">The current processing stack.</param>
            <param name="parent">The parent loop.</param>
            <param name="nodeMapping">The current node mapping.</param>
            <param name="v">The current node.</param>
            <param name="index">The current index value.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.RegisterLoop(System.Collections.Generic.List{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData},ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.IR.BasicBlockMap{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData}@,ILGPU.IR.Analyses.Loops{`0,`1}.NodeData)">
            <summary>
            Registers a new loop entry (if possible).
            </summary>
            <param name="stack">The current processing stack.</param>
            <param name="parent">The parent loop.</param>
            <param name="nodeMapping">The current node mapping.</param>
            <param name="v">The current node.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.TryGetLoops(ILGPU.IR.BasicBlock,ILGPU.IR.Analyses.Loops{`0,`1}.Node@)">
            <summary>
            Tries to resolve the given block to an associated innermost loop.
            </summary>
            <param name="block">The block to map to a loop.</param>
            <param name="loop">The resulting loop.</param>
            <returns>True, if the node could be resolved to a loop.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over all SCCs.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.System#Collections#Generic#IEnumerable{ILGPU#IR#Analyses#Loops{TOrder,TDirection}#Node}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops">
            <summary>
            Utility methods for the <see cref="T:ILGPU.IR.Analyses.Loops`2"/> analysis.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops.CreateLoops``2(ILGPU.IR.Analyses.CFG{``0,``1})">
            <summary>
            Creates a new loops analysis instance based on the given CFG.
            </summary>
            <typeparam name="TOrder">The underlying block order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="cfg">The underlying CFG.</param>
            <returns>The created loops analysis.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Phis">
            <summary>
            Gathers all phis in a basic block.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Phis.Enumerator">
            <summary>
            Represents a phi-value enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Enumerator.#ctor(System.Collections.Generic.List{ILGPU.IR.Values.PhiValue})">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="phiValues">All phi values.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Phis.Enumerator.Current">
            <summary>
            Returns the current basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Phis.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.GaterhPhiSources``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Gathers all phi source blocks.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="blocks">The blocks to use.</param>
            <returns>All phi value source blocks.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Create(ILGPU.IR.BasicBlock)">
            <summary>
            Resolves all phi values in the given block.
            </summary>
            <param name="block">The source block.</param>
            <returns>The resolved phis.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Create``1(``0)">
            <summary>
            Resolves all phi values using the given enumerator.
            </summary>
            <param name="enumerator">The enumerator.</param>
            <returns>The resolved phis.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.#ctor(System.Collections.Generic.List{ILGPU.IR.Values.PhiValue})">
            <summary>
            Constructs a new Phis instance.
            </summary>
            <param name="phis">All detected phi values.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Phis.Count">
            <summary>
            Returns the number of phi values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Phis.Item(System.Int32)">
            <summary>
            Returns the i-th phi value.
            </summary>
            <param name="index">The phi value index.</param>
            <returns>The resolved phi value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.GetEnumerator">
            <summary>
            Returns a phi-value enumerator.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.System#Collections#Generic#IEnumerable{ILGPU#IR#Values#PhiValue}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAddressSpaces">
            <summary>
            An analysis to determine safe address-space information for all values.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags">
            <summary>
            Represents different address spaces that can coexist via flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags.None">
            <summary>
            No specific address spaces.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags.Generic">
            <summary cref="F:ILGPU.IR.MemoryAddressSpace.Generic"/>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags.Global">
            <summary cref="F:ILGPU.IR.MemoryAddressSpace.Global"/>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags.Shared">
            <summary cref="F:ILGPU.IR.MemoryAddressSpace.Shared"/>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags.Local">
            <summary cref="F:ILGPU.IR.MemoryAddressSpace.Local"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo">
            <summary>
            An internal address-space information object used to manage
            <see cref="T:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags"/> flags.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Enumerator">
            <summary>
            Iterates over all internally stored address spaces.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Enumerator.Info">
            <summary>
            Returns the parent flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Enumerator.Current">
            <summary>
            Returns the current address space.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.#ctor(ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags)">
            <summary>
            Constructs a new address-space information object.
            </summary>
            <param name="flags">The associated flags.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Flags">
            <summary>
            Returns the underlying address-space flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.UnifiedAddressSpace">
            <summary>
            Returns the most generic address space that is compatible with all
            internally gathered address spaces.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.HasFlags(ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags)">
            <summary>
            Returns true if the given flags are set.
            </summary>
            <param name="flags">The flags to test.</param>
            <returns>True, if the given flags are set.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.HasAddressSpace(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Returns true if the current instance is associated with the given
            address space.
            </summary>
            <param name="addressSpace">The address space to test.</param>
            <returns>
            True, if the current instance is associated with the given address space.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Equals(ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo)">
            <summary>
            Returns true if the given info object is equal to the current instance.
            </summary>
            <param name="other">The other info object.</param>
            <returns>
            True, if the given info object is equal to the current instance.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.GetEnumerator">
            <summary>
            Returns an enumerator to iterate over all address spaces.
            </summary>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current instance.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current instance.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.GetHashCode">
            <summary>
            Returns the hash code of this instance.
            </summary>
            <returns>The hash code of this instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.op_Implicit(System.Nullable{ILGPU.IR.MemoryAddressSpace})~ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo">
            <summary>
            Converts nullable <see cref="T:ILGPU.IR.MemoryAddressSpace"/> values to information
            instances.
            </summary>
            <param name="addressSpace">The address space to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.op_Equality(ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo,ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo)">
            <summary>
            Returns true if the first and second information instances are the same.
            </summary>
            <param name="first">The first instance.</param>
            <param name="second">The second instance.</param>
            <returns>True, if the first and second instances are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.op_Inequality(ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo,ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo)">
            <summary>
            Returns true if the first and second information instances are not the
            same.
            </summary>
            <param name="first">The first instance.</param>
            <param name="second">The second instance.</param>
            <returns>
            True, if the first and second instances are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAddressSpaces.AnalysisImplementation">
            <summary>
            Models the internal address-space analysis.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AnalysisImplementation.#ctor(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new analysis implementation.
            </summary>
            <param name="globalAddressSpace">
            The global address space for all input parameters.
            </param>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AnalysisImplementation.GetInitialSpace(ILGPU.IR.Value)">
            <summary>
            Returns initial and address space information.
            </summary>
            <param name="node">The IR node.</param>
            <returns>The initial address space information.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AnalysisImplementation.CreateData(ILGPU.IR.Value)">
            <summary>
            Creates initial analysis data.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AnalysisImplementation.Merge(ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo,ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo)">
            <summary>
            Returns the unified address-space flags.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AnalysisImplementation.TryMerge``1(ILGPU.IR.Value,``0)">
            <summary>
            Returns no analysis value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.Create(ILGPU.IR.Method,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new address space analysis.
            </summary>
            <param name="rootMethod">The root (entry) method.</param>
            <param name="globalAddressSpace">
            The initial address space information of all pointers and views of the root
            method.
            </param>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAddressSpaces.addressSpaces">
            <summary>
            Stores a method value-address-space mapping.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.#ctor(ILGPU.IR.Method,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new address-spaces analysis.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAddressSpaces.Item(ILGPU.IR.Value)">
            <summary>
            Returns address-space information for the given value.
            </summary>
            <param name="value">The value to get the information for.</param>
            <returns>Address-space information.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAlignments">
            <summary>
            An analysis to determine safe alignment information for all pointer values.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAlignments.AlignmentInfo">
            <summary>
            Stores alignment information of a specific method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAlignments.AlignmentInfo.Alignments">
            <summary>
            Returns the underlying alignments object.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAlignments.AlignmentInfo.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAlignments.AlignmentInfo.Item(ILGPU.IR.Value)">
            <summary>
            Returns pointer alignment information for the given value.
            </summary>
            <param name="value">The value to get alignment information for.</param>
            <returns>Pointer alignment in bytes (can be 1 byte).</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAlignments.AnalysisImplementation">
            <summary>
            Models the internal pointer alignment analysis.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.AnalysisImplementation.#ctor(System.Int32)">
            <summary>
            Constructs a new analysis implementation.
            </summary>
            <param name="globalAlignment">The global alignment information.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.AnalysisImplementation.CreateData(ILGPU.IR.Value)">
            <summary>
            Creates initial analysis data.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.AnalysisImplementation.Merge(System.Int32,System.Int32)">
            <summary>
            Returns the minimum of the first and the second value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.AnalysisImplementation.TryMerge``1(ILGPU.IR.Value,``0)">
            <summary>
            Returns merged information about <see cref="T:ILGPU.IR.Values.LoadFieldAddress"/> and
            <see cref="T:ILGPU.IR.Values.LoadElementAddress"/> IR nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.AnalysisImplementation.TryProvide(ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates alignment information for global pointer and view types.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.GetInitialAlignment(ILGPU.IR.Value)">
            <summary>
            Returns initial and unconstrained alignment information.
            </summary>
            <param name="node">The IR node.</param>
            <returns>The initial alignment information.</returns>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAlignments.EmptyMapping">
            <summary>
            An empty value mapping.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAlignments.Empty">
            <summary>
            Represents no pointer alignment information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.Create(ILGPU.IR.Method,System.Int32)">
            <summary>
            Creates a new alignment analysis.
            </summary>
            <param name="rootMethod">The root (entry) method.</param>
            <param name="globalAlignment">
            The initial alignment information of all pointers and views of the root
            method.
            </param>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAlignments.alignments">
            <summary>
            Stores a method value-alignment mapping.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.#ctor">
            <summary>
            Constructs an empty pointer alignment analysis.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.#ctor(ILGPU.IR.Method,System.Int32)">
            <summary>
            Constructs a new alignment analysis.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAlignments.Item(ILGPU.IR.Method)">
            <summary>
            Returns pointer alignment information for the given method.
            </summary>
            <param name="method">The method to get alignment information for.</param>
            <returns>Resolved pointer alignment information.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAlignments.Item(ILGPU.IR.Value)">
            <summary>
            Returns pointer alignment information for the given value.
            </summary>
            <param name="value">The value to get alignment information for.</param>
            <returns>Pointer alignment in bytes (can be 1 byte).</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.GetAlignment(ILGPU.IR.Value,System.Int32)">
            <summary>
            Returns safe alignment information.
            </summary>
            <param name="value">The value for which to compute the alignment for.</param>
            <param name="safeMinAlignment">The safe minimum alignment in bytes.</param>
            <returns>The computed alignment.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.GetAlignment(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode)">
            <summary>
            Returns safe alignment information.
            </summary>
            <param name="value">The value for which to compute the alignment for.</param>
            <param name="safeMinTypeAlignment">The safe minimum type alignment.</param>
            <returns>The computed alignment.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.References">
            <summary>
            Represents references to other methods.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.References.Enumerator">
            <summary>
            Enumerates all references.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Enumerator.#ctor(ILGPU.IR.Analyses.References@)">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="references">The source references.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.Enumerator.Current">
            <summary>
            Returns the current function reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current" />
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext" />
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset" />
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose" />
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Create``1(ILGPU.IR.Method,``0@)">
            <summary>
            Computes all direct method references to all called methods.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <param name="method">The method.</param>
            <param name="predicate">The current predicate.</param>
            <returns>A references instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Create``3(ILGPU.IR.BasicBlockCollection{``0,``1}@,``2)">
            <summary>
            Computes all direct method references to all called methods.
            </summary>
            <typeparam name="TOrder">The order collection.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <param name="collection">The block collection.</param>
            <param name="predicate">The current predicate.</param>
            <returns>A references instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.CreateRecursive``1(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards},``0)">
            <summary>
            Computes all direct and indirect method references to all called methods.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <param name="collection">The block collection.</param>
            <param name="predicate">The current predicate.</param>
            <returns>A references instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.#ctor(ILGPU.IR.Method,System.Collections.Generic.HashSet{ILGPU.IR.Method},System.Collections.Generic.List{ILGPU.IR.Method})">
            <summary>
            Constructs a references instance.
            </summary>
            <param name="method">The source method.</param>
            <param name="referenceSet">The set of all method references.</param>
            <param name="referenceList">The list of all method references.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.SourceMethod">
            <summary>
            Returns the associated source function.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.Count">
            <summary>
            Returns the number of function references.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.IsEmpty">
            <summary>
            Returns true if the number of function references is zero.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.HasReferenceTo(ILGPU.IR.Method)">
            <summary>
            Returns true if the given method is referenced.
            </summary>
            <param name="method">The method to test.</param>
            <returns>True, if the given method is referenced.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all method references.
            </summary>
            <returns>An enumerator to enumerate all method references.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState">
            <summary>
            A enumeration state of a generic traversal.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState.Index">
            <summary>
            The current enumeration index.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.ITraversalSuccessorsProvider`1">
            <summary>
            Provides successors for a given basic block.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ITraversalSuccessorsProvider`1.GetSuccessors(ILGPU.IR.BasicBlock)">
            <summary>
            Returns or computes successors of the given basic block.
            </summary>
            <param name="basicBlock">The source basic block.</param>
            <returns>The returned successor collection.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.ITraversalVisitor">
            <summary>
            A general traversal visitor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ITraversalVisitor.Visit(ILGPU.IR.BasicBlock)">
            <summary>
            Visits the given block.
            </summary>
            <param name="block">The block to visit.</param>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.TraversalCollectionVisitor`1">
            <summary>
            A generic collection visitor.
            </summary>
            <typeparam name="TCollection"></typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.TraversalCollectionVisitor`1.#ctor(`0)">
            <summary>
            Constructs a new collection visitor.
            </summary>
            <param name="collection">The target collection.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.TraversalOrders.TraversalCollectionVisitor`1.Collection">
            <summary>
            Returns the target collection to add the elements to.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.TraversalCollectionVisitor`1.Visit(ILGPU.IR.BasicBlock)">
            <summary>
            Adds the given block to the target collection.
            </summary>
            <param name="block">The block to add.</param>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.ITraversalOrder">
            <summary>
            A generic traversal order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ITraversalOrder.Init``1(``0)">
            <summary>
            Initializes a new enumeration state.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ITraversalOrder.MoveNext``1(``0,ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState@)">
            <summary>
            Tries to move the state to the next block.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
            <param name="state">The current enumeration state.</param>
            <returns>True, if there is a next block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ITraversalOrder.Traverse``3(ILGPU.IR.BasicBlock,``0@,``1)">
            <summary>
            Computes a traversal using the current order.
            </summary>
            <typeparam name="TVisitor">The visitor type.</typeparam>
            <typeparam name="TSuccessorProvider">The successor provider.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="entryBlock">The entry block.</param>
            <param name="visitor">The visitor instance.</param>
            <param name="successorProvider">The successor provider.</param>
            <returns>The created traversal.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.ICompatibleTraversalOrder`1">
            <summary>
            Another view that is compatible with the current type without requiring a new
            computation.
            </summary>
            <typeparam name="TOther">The other view.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.TraversalOrder">
            <summary>
            A helper class for traversal.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.TraversalOrders.TraversalOrder.InitStackSize">
            <summary>
            Specifies the default initial stack size.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.TraversalOrder.ForwardsInit">
            <summary>
            Initializes a forwards enumeration state.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.TraversalOrder.ForwardsMoveNext``1(``0,ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState@)">
            <summary>
            Tries to move a forwards state to the next block.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
            <param name="state">The current enumeration state.</param>
            <returns>True, if there is a next block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.TraversalOrder.BackwardsInit``1(``0)">
            <summary>
            Initializes a backwards enumeration state.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.TraversalOrder.BackwardsMoveNext(ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState@)">
            <summary>
            Tries to move a backwards state to the next block.
            </summary>
            <param name="state">The current enumeration state.</param>
            <returns>True, if there is a next block.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.PreOrder">
            <summary>
            Enumerates all basic blocks in pre order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.PreOrder.Init``1(``0)">
            <summary>
            Initializes a new enumeration state.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.PreOrder.MoveNext``1(``0,ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState@)">
            <summary>
            Tries to move the state to the next block.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
            <param name="state">The current enumeration state.</param>
            <returns>True, if there is a next block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.PreOrder.Traverse``3(ILGPU.IR.BasicBlock,``0@,``1)">
            <summary>
            Computes a traversal using the current order.
            </summary>
            <typeparam name="TVisitor">The visitor type.</typeparam>
            <typeparam name="TSuccessorProvider">The successor provider.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="entryBlock">The entry block.</param>
            <param name="visitor">The visitor instance.</param>
            <param name="successorProvider">The successor provider.</param>
            <returns>The created traversal.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.ReversePreOrder">
            <summary>
            Enumerates all basic blocks in reverse pre order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ReversePreOrder.Init``1(``0)">
            <summary>
            Initializes a new enumeration state.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ReversePreOrder.MoveNext``1(``0,ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState@)">
            <summary>
            Tries to move the state to the next block.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
            <param name="state">The current enumeration state.</param>
            <returns>True, if there is a next block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ReversePreOrder.Traverse``3(ILGPU.IR.BasicBlock,``0@,``1)">
            <summary>
            Computes a traversal using the current order.
            </summary>
            <typeparam name="TVisitor">The visitor type.</typeparam>
            <typeparam name="TSuccessorProvider">The successor provider.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="entryBlock">The entry block.</param>
            <param name="successorProvider">The successor provider.</param>
            <param name="visitor">The visitor instance.</param>
            <returns>The created traversal.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.PostOrder">
            <summary>
            Enumerates all basic blocks in post order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.PostOrder.Init``1(``0)">
            <summary>
            Initializes a new enumeration state.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.PostOrder.MoveNext``1(``0,ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState@)">
            <summary>
            Tries to move the state to the next block.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
            <param name="state">The current enumeration state.</param>
            <returns>True, if there is a next block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.PostOrder.Traverse``3(ILGPU.IR.BasicBlock,``0@,``1)">
            <summary>
            Computes a traversal using the current order.
            </summary>
            <typeparam name="TVisitor">The visitor type.</typeparam>
            <typeparam name="TSuccessorProvider">The successor provider.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="entryBlock">The entry block.</param>
            <param name="visitor">The visitor instance.</param>
            <param name="successorProvider">The successor provider.</param>
            <returns>The created traversal.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder">
            <summary>
            Enumerates all basic blocks in reverse post order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder.Init``1(``0)">
            <summary>
            Initializes a new enumeration state.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder.MoveNext``1(``0,ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState@)">
            <summary>
            Tries to move the state to the next block.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
            <param name="state">The current enumeration state.</param>
            <returns>True, if there is a next block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder.Traverse``3(ILGPU.IR.BasicBlock,``0@,``1)">
            <summary>
            Computes a traversal using the current order.
            </summary>
            <typeparam name="TVisitor">The visitor type.</typeparam>
            <typeparam name="TSuccessorProvider">The successor provider.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="entryBlock">The entry block.</param>
            <param name="visitor">The visitor instance.</param>
            <param name="successorProvider">The successor provider.</param>
            <returns>The created traversal.</returns>
        </member>
        <member name="T:ILGPU.IR.BasicBlock">
            <summary>
            Represents a single basic block.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.Comparer">
            <summary>
            An equality comparer for basic blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Comparer.Equals(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if both blocks represent the same block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Comparer.GetHashCode(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if both blocks represent the same block.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.ValueVisitor`1">
            <summary>
            Represents a visitor for values.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="value">The value to visit.</param>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.ValueEntry">
            <summary>
            Represents a value reference within a single basic block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ValueEntry.#ctor(System.Int32,ILGPU.IR.Values.ValueReference)">
            <summary>
            Converts a new value entry.
            </summary>
            <param name="index">The index within the block.</param>
            <param name="valueReference">The actual value reference.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.ValueEntry.Index">
            <summary>
            The current index of the associated value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.ValueEntry.ValueReference">
            <summary>
            The actual value reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.ValueEntry.Value">
            <summary>
            The resolved value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.ValueEntry.DirectTarget">
            <summary>
            The direct target.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.ValueEntry.BasicBlock">
            <summary>
            Returns the associated basic block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ValueEntry.Accept``1(``0)">
            <summary>
            Accepts a value visitor.
            </summary>
            <typeparam name="T">The type of the visitor.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ValueEntry.ToValue">
            <summary>
            Implicitly converts the current value entry to its associated value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ValueEntry.ToString">
            <summary>
            Returns the string representation of the underlying value.
            </summary>
            <returns>The string representation of the underlying value.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ValueEntry.op_Implicit(ILGPU.IR.BasicBlock.ValueEntry)~ILGPU.IR.Value">
            <summary>
            Implicitly converts the given value entry to its associated value.
            </summary>
            <param name="valueEntry">The value entry to convert.</param>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.Enumerator">
            <summary>
            An enumerator for values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Enumerator.#ctor(ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new node enumerator.
            </summary>
            <param name="basicBlock">The basic block to iterate over.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Enumerator.BasicBlock">
            <summary>
            Returns the parent basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Enumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.TerminatorSuccessorsProvider">
            <summary>
            A provider that uses terminators to determine the successors of a block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.TerminatorSuccessorsProvider.GetSuccessors(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the terminator targets.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.SuccessorsProvider`1">
            <summary>
            A provider that uses registered successors and predecessors of a block.
            </summary>
            <typeparam name="TDirection"></typeparam>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.SuccessorsProvider`1.GetSuccessors(ILGPU.IR.BasicBlock)">
            <summary>
            Returns registered successors or predecessors of a block.
            </summary>
            <param name="basicBlock"></param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.#ctor(ILGPU.IR.Method,ILGPU.IR.Location,System.String)">
            <summary>
            Constructs a new basic block.
            </summary>
            <param name="method">The parent method.</param>
            <param name="location">The current location.</param>
            <param name="name">The name of the block (or null).</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Method">
            <summary>
            Returns the parent IR method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Name">
            <summary>
            Returns the (meaningless) name.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Predecessors">
            <summary>
            The list of predecessors (see <see cref="T:ILGPU.IR.Analyses.ControlFlowDirection.Backwards"/>).
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Successors">
            <summary>
            The list of successors (see <see cref="T:ILGPU.IR.Analyses.ControlFlowDirection.Forwards"/>).
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Terminator">
            <summary>
            Returns the current terminator.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.CurrentSuccessors">
            <summary>
            The current list of successor blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Count">
            <summary>
            Returns the number of values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Item(System.Int32)">
            <summary>
            Returns the i-th value.
            </summary>
            <param name="index">The value index.</param>
            <returns>The resolved value reference.</returns>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.BlockIndex">
            <summary>
            Returns the associated block index that is updated during traversal and can
            be used to map blocks to values using fast array lookups.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.AssertNoControlFlowUpdate">
            <summary>
            Asserts that no control-flow update has happened and the predecessor
            and successor relations are still up to date.
            </summary>
            <remarks>
            This operation is only available in debug mode.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GetPredecessors``1">
            <summary>
            Determines the actual predecessors based on the specified direction.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GetSuccessors``1">
            <summary>
            Determines the actual successors based on the specified direction.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.BeginControlFlowUpdate(System.Int32)">
            <summary>
            Setups the internal block index.
            </summary>
            <param name="index">The new block index.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.PropagateSuccessors">
            <summary>
            Propagate terminator targets as successors to all child nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.HasSideEffects">
            <summary>
            Checks whether this block has side effects.
            </summary>
            <returns>True, if this block has side effects.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GetTerminatorAs``1">
            <summary>
            Returns the terminator converted to the given type.
            </summary>
            <typeparam name="T">The target terminator type.</typeparam>
            <returns>The converted terminator value.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GetOrCreateBuilder(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock.Builder@)">
            <summary>
            Resolves the current builder or creates a new one.
            </summary>
            <param name="functionBuilder">The current function builder.</param>
            <param name="resolvedBuilder">The resolved bloc builder.</param>
            <returns>True, if the builder was created.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ReleaseBuilder(ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Releases the given builder.
            </summary>
            <param name="otherBuilder">The builder to release.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.CompactTerminator">
            <summary>
            Compacts the terminator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Dump(System.IO.TextWriter)">
            <summary>
            Dumps this block to the given text writer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GC">
            <summary>
            Performs a GC run on this block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ForEachValue``1(ILGPU.IR.BasicBlock.ValueVisitor{``0})">
            <summary>
            Executes the given visitor for each value in this scope.
            </summary>
            <typeparam name="TValue">The value to match.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GetEnumerator">
            <summary>
            Returns a value enumerator.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock#ValueEntry}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.Builder">
            <summary>
            Represents a basic block builder.
            </summary>
        </member>
        <member name="F:ILGPU.IR.BasicBlock.Builder.values">
            <summary>
            A local cache of the value list.
            </summary>
        </member>
        <member name="F:ILGPU.IR.BasicBlock.Builder.toRemove">
            <summary>
            A collection of values to remove
            </summary>
        </member>
        <member name="F:ILGPU.IR.BasicBlock.Builder.insertPosition">
            <summary>
            The current insert position for new instructions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.#ctor(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new builder.
            </summary>
            <param name="methodBuilder">The parent method builder.</param>
            <param name="block">The parent block.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Builder.MethodBuilder">
            <summary>
            Returns the parent function builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Builder.Terminator">
            <summary>
            Gets or sets the current terminator.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Builder.Count">
            <summary>
            Returns the number of attached values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Builder.Values">
            <summary>
            Gets or sets the current value list.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Builder.InsertPosition">
            <summary>
            Gets or sets the current insert position for new instructions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SetupInsertPosition(ILGPU.IR.BasicBlock.ValueEntry)">
            <summary>
            Sets the insert position to the index stored in the given value entry.
            </summary>
            <param name="valueEntry">The value entry.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SetupInsertPositionToStart">
            <summary>
            Sets the insert position to the start of the current value list.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SetupInsertPositionToEnd">
            <summary>
            Sets the insert position to the end of the current value list.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SetupInsertPosition(ILGPU.IR.Value)">
            <summary>
            Sets the insert position to the index stored in the given value entry.
            </summary>
            <param name="value">The value entry.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.InsertAtBeginning(ILGPU.IR.Value)">
            <summary>
            Inserts the given value at the beginning of this block.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given value to this block.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Clear">
            <summary>
            Removes all operations of this block (including the terminator).
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.ClearLists">
            <summary>
            Clears all attached values (except the terminator).
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Remove(ILGPU.IR.Value)">
            <summary>
            Schedules the given value for removal.
            </summary>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.PerformRemoval">
            <summary>
            Applies all scheduled removal operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.PerformRemoval``1(``0)">
            <summary>
            Applies all scheduled removal operations by adding them to
            the given <paramref name="targetCollection"/>.
            </summary>
            <param name="targetCollection">
            The target collection to which all elements will be appended.
            </param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.RemapPhiArguments``1(``0)">
            <summary>
            Updates phi values in the current block to point to the new blocks
            instead.
            </summary>
            <typeparam name="TArgumentRemapper">The argument mapper type.</typeparam>
            <param name="remapper">The remapper to use.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.RemapPhiArguments``1(System.ReadOnlySpan{ILGPU.IR.BasicBlock},``0)">
            <summary>
            Updates phi values in the supplied blocks to point to the new blocks
            instead.
            </summary>
            <typeparam name="TArgumentRemapper">The argument mapper type.</typeparam>
            <param name="blocks">
            The blocks containing phi values to be updated.
            </param>
            <param name="remapper">The remapper to use.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.UpdatePhiType``1(ILGPU.IR.Values.PhiValue,``0)">
            <summary>
            Updates the type of the given phi value.
            </summary>
            <typeparam name="TTypeConverter">The type converter.</typeparam>
            <param name="phiValue">The phi value.</param>
            <param name="typeConverter">The type converter instance.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SpecializeCall(ILGPU.IR.Values.MethodCall)">
            <summary>
            Specializes a function call.
            </summary>
            <param name="call">The call to specialize.</param>
            <returns>The created target block.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SplitBlock(ILGPU.IR.Value,System.Boolean)">
            <summary>
            Splits the current block at the given value.
            </summary>
            <param name="splitPoint">The split point.</param>
            <param name="keepSplitPoint">
            True, if you want to keep the split point.
            </param>
            <returns>The created temporary block.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.MergeBlock(ILGPU.IR.BasicBlock)">
            <summary>
            Merges the given block into the current one.
            </summary>
            <param name="other">The other block to merge.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.ReplaceWithCall(ILGPU.IR.Value,ILGPU.IR.Method)">
            <summary>
            Replaces the given value with a call to the provided function.
            </summary>
            <param name="value">The value to replace.</param>
            <param name="implementationMethod">
            The target implementation method.
            </param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.CreateTerminator``1(``0)">
            <summary cref="M:ILGPU.IR.Construction.IRBuilder.CreateTerminator``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.CreatePhiValue(ILGPU.IR.Values.PhiValue)">
            <summary cref="M:ILGPU.IR.Construction.IRBuilder.CreatePhiValue(ILGPU.IR.Values.PhiValue)"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Append``1(``0)">
            <summary cref="M:ILGPU.IR.Construction.IRBuilder.Append``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.ToBasicBlock">
            <summary>
            Implicitly converts the current builder into its associated basic block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the underlying method to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.op_Implicit(ILGPU.IR.BasicBlock.Builder)~ILGPU.IR.BasicBlock">
            <summary>
            Implicitly converts the given builder into its associated basic block.
            </summary>
            <param name="builder">The builder to convert.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.GetEnumerator">
            <summary>
            Returns a value enumerator.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock#ValueEntry}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.IR.IBasicBlockCollection`1">
            <summary>
            An abstract block collection with a particular control-flow direction.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="P:ILGPU.IR.IBasicBlockCollection`1.Count">
            <summary>
            Returns the number of blocks.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlockCollection`2">
            <summary>
            A collection of basic blocks following a particular order.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="T:ILGPU.IR.BasicBlockCollection`2.Enumerator">
            <summary>
            Enumerates all basic blocks in the underlying default order.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.Enumerator.Current">
            <summary>
            Returns the current basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.BasicBlockCollection`2.ValueCollection">
            <summary>
            An abstract view on all values.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlockCollection`2.ValueCollection.Enumerator">
            <summary>
            Enumerates all nodes in all blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.Enumerator.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.BasicBlock})">
            <summary>
            Constructs a new basic block enumerator.
            </summary>
            <param name="blocks">The parent blocks.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.ValueCollection.Enumerator.Current">
            <summary>
            Returns the current value and its parent basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="F:ILGPU.IR.BasicBlockCollection`2.ValueCollection.blocks">
            <summary>
            The list of all blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.#ctor(ILGPU.IR.BasicBlockCollection{`0,`1}@)">
            <summary>
            Constructs a new value collection.
            </summary>
            <param name="blockCollection">The parent blocks.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.GetEnumerator">
            <summary>
            Returns a value enumerator.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock#ValueEntry}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.#ctor(ILGPU.IR.BasicBlock,System.Collections.Immutable.ImmutableArray{ILGPU.IR.BasicBlock})">
            <summary>
            Constructs a new block collection.
            </summary>
            <param name="entryBlock">The entry block.</param>
            <param name="blockReferences">The source blocks.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.Count">
            <summary>
            Returns the number of blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.Values">
            <summary>
            Returns an abstract view on all values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.AssertUniqueExitBlock">
            <summary>
            Asserts that there is a unique exit block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.FindExitBlock">
            <summary>
            Computes the exit block.
            </summary>
            <returns>The exit block.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ForEachTerminator``1(ILGPU.IR.BasicBlock.ValueVisitor{``0})">
            <summary>
            Executes the given visitor for each terminator is this collection.
            </summary>
            <typeparam name="TTerminatorValue">The terminator value to match.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ForEachValue``1(ILGPU.IR.BasicBlock.ValueVisitor{``0})">
            <summary>
            Executes the given visitor for each value in this collection.
            </summary>
            <typeparam name="TValue">The value to match.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.AsImmutable">
            <summary>
            Returns the underlying immutable block array.
            </summary>
            <returns>The underlying block array.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ToSet">
            <summary>
            Converts this collection into a hash set.
            </summary>
            <returns>The created set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.AsOrder``1">
            <summary>
            Changes the order of this collection.
            </summary>
            <typeparam name="TOtherOrder">The collection order.</typeparam>
            <returns>The newly ordered collection.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ChangeDirection``1">
            <summary>
            Changes the direction of this collection.
            </summary>
            <typeparam name="TOtherDirection">The other direction.</typeparam>
            <returns>The newly ordered collection.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ChangeOrder``2">
            <summary>
            Changes the order of this collection.
            </summary>
            <typeparam name="TOtherOrder">The collection order.</typeparam>
            <typeparam name="TOtherDirection">The control-flow direction.</typeparam>
            <remarks>
            Note that this function uses successor/predecessor links on all basic blocks.
            </remarks>
            <returns>The newly ordered collection.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.CreateSet">
            <summary>
            Constructs a new block set.
            </summary>
            <returns>The created block set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.CreateSetList">
            <summary>
            Constructs a new block set list.
            </summary>
            <returns>The created block set list.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.CreateMap``1">
            <summary>
            Constructs a new block map.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <returns>The created block map.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.CreateMap``1(ILGPU.IR.IBasicBlockMapValueProvider{``0})">
            <summary>
            Constructs a new block map.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="valueProvider">The initial value provider.</param>
            <returns>The created block map.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all attached blocks.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.BasicBlockSet">
            <summary>
            Represents a set of basic blocks.
            </summary>
        </member>
        <member name="F:ILGPU.IR.BasicBlockSet.NumElementsPerBucket">
            <summary>
            The number of elements per bucket.
            </summary>
        </member>
        <member name="F:ILGPU.IR.BasicBlockSet.NumDefaultElements">
            <summary>
            The number of default elements.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.Create``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Creates a new block set.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <typeparam name="TOrder">The traversal order.</typeparam>
            <param name="blocks">The block collection.</param>
            <returns>The created block set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.Create(ILGPU.IR.BasicBlock)">
            <summary>
            Creates a new block set.
            </summary>
            <param name="entryBlock">The entry block.</param>
            <returns>The created block set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.ComputeBucketIndex(System.Int32,System.UInt64@)">
            <summary>
            Computes the bucket index and the bit mask.
            </summary>
            <param name="index">The block index.</param>
            <param name="bitMask">The resulting bit mask.</param>
            <returns>The bucket index.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.#ctor(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Constructs a new block set.
            </summary>
            <param name="entryBlock">The entry block.</param>
            <param name="numBlocks">The initial number of blocks.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.InitBlockSet">
            <summary cref="M:ILGPU.IR.BasicBlockSet.InitBlockSet"/>
        </member>
        <member name="P:ILGPU.IR.BasicBlockSet.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockSet.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockSet.HasAny">
            <summary>
            Returns true if this set has at least one element.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.AssertAdd(ILGPU.IR.BasicBlock,System.Boolean)">
            <summary cref="M:ILGPU.IR.BasicBlockSet.AssertAdd(ILGPU.IR.BasicBlock,System.Boolean)"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.Add(ILGPU.IR.BasicBlock)">
            <summary>
            Adds the given block to this set.
            </summary>
            <param name="block">The block to add.</param>
            <returns>True, if the block has been added.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.AssertContained(ILGPU.IR.BasicBlock,System.Boolean)">
            <summary cref="M:ILGPU.IR.BasicBlockSet.AssertContained(ILGPU.IR.BasicBlock,System.Boolean)"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.Contains(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given block is contained in this set.
            </summary>
            <param name="block">The block to test.</param>
            <returns>True, if the given block is contained in this set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.Remove(ILGPU.IR.BasicBlock)">
            <summary>
            Removes the given block from this set and returns true if the block has been
            removed.
            </summary>
            <param name="block">The basic block.</param>
            <returns>True, whether the block has been removed.</returns>
        </member>
        <member name="T:ILGPU.IR.BasicBlockSetList">
            <summary>
            Represents a set list of basic blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSetList.Create``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Creates a new block set.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <typeparam name="TOrder">The traversal order.</typeparam>
            <param name="blocks">The block collection.</param>
            <returns>The created block set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSetList.#ctor(ILGPU.IR.BasicBlockSet@,System.Int32)">
            <summary>
            Constructs a new block set.
            </summary>
            <param name="blockSet">The block set.</param>
            <param name="numBlocks">The initial number of blocks.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlockSetList.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockSetList.Count">
            <summary>
            Returns the number of elements in this set.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockSetList.Item(System.Int32)">
            <summary>
            Returns the i-th basic block.
            </summary>
            <param name="index">The block index.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSetList.Add(ILGPU.IR.BasicBlock)">
            <summary>
            Adds the given block to this set.
            </summary>
            <param name="block">The block to add.</param>
            <returns>True, if the block has been added.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSetList.Contains(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given block is contained in this set.
            </summary>
            <param name="block">The block to test.</param>
            <returns>True, if the given block is contained in this set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSetList.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all attached blocks.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSetList.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSetList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.IBasicBlockMapValueProvider`1">
            <summary>
            A value provider for each block in a collection.
            </summary>
            <typeparam name="T">The map value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.IBasicBlockMapValueProvider`1.GetValue(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Extracts the value from the given block.
            </summary>
            <param name="block">The source block.</param>
            <param name="traversalIndex">The current traversal index.</param>
            <returns>The extracted value.</returns>
        </member>
        <member name="T:ILGPU.IR.BasicBlockMap`1">
            <summary>
            A mapping of basic block to values.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.BasicBlockMap`1.Enumerator">
            <summary>
            Enumerates all block value pairs.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockMap`1.Enumerator.Count">
            <summary>
            The number of elements in the collection.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockMap`1.Enumerator.Current">
            <summary>
            Returns the current basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockMap`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Create``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Constructs a new block map.
            </summary>
            <typeparam name="TOrder">The traversal order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="blocks">The block collection.</param>
            <returns>The created block map.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Create(ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new block map.
            </summary>
            <param name="entryBlock">The entry block.</param>
            <returns>The created block map.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.#ctor(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Constructs a new block map.
            </summary>
            <param name="entryBlock">The entry block.</param>
            <param name="numBlocks">The number of blocks.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.InitBlockMap">
            <summary cref="M:ILGPU.IR.BasicBlockMap`1.InitBlockMap"/>
        </member>
        <member name="P:ILGPU.IR.BasicBlockMap`1.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockMap`1.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockMap`1.Count">
            <summary>
            Returns the number of elements in this set.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockMap`1.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the value associated to the given block.
            </summary>
            <param name="block">The block.</param>
            <returns>The value associated to the given block.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.AssertAdd(ILGPU.IR.BasicBlock,`0@,System.Boolean)">
            <summary cref="M:ILGPU.IR.BasicBlockMap`1.AssertAdd(ILGPU.IR.BasicBlock,`0@,System.Boolean)"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.GetItemRef(ILGPU.IR.BasicBlock)">
            <summary>
            Returns an immutable reference to the associated value.
            </summary>
            <param name="block">The basic block.</param>
            <returns>The reference to the associated value.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.AssertContained(ILGPU.IR.BasicBlock,`0@,System.Boolean)">
            <summary cref="M:ILGPU.IR.BasicBlockMap`1.AssertContained(ILGPU.IR.BasicBlock,`0@,System.Boolean)"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.UpdateValueMap(ILGPU.IR.BasicBlock)">
            <summary>
            Updates the value map to store the given block.
            </summary>
            <param name="block">The block to store in this map.</param>
            <returns>The block index.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Add(ILGPU.IR.BasicBlock,`0)">
            <summary>
            Adds the given block to this set.
            </summary>
            <param name="block">The block to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.TryAdd(ILGPU.IR.BasicBlock,`0)">
            <summary>
            Adds the given block to this set.
            </summary>
            <param name="block">The block to add.</param>
            <param name="value">The value to add.</param>
            <returns>True, if the block has been added.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.TryGetValue(ILGPU.IR.BasicBlock,`0@)">
            <summary>
            Tries to get a stored value for the given block.
            </summary>
            <param name="block">The block to lookup.</param>
            <param name="value">The stored value (if any).</param>
            <returns>True, if the block could be found.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Contains(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given block is contained in this set.
            </summary>
            <param name="block">The block to test.</param>
            <returns>True, if the given block is contained in this set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Remap``1(System.Func{`0,``0})">
            <summary>
            Remaps the current values to other values.
            </summary>
            <typeparam name="TOther">The other element type.</typeparam>
            <param name="valueProvider">The value provider to map the values.</param>
            <returns>The created block mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all attached blocks.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.System#Collections#Generic#IEnumerable{(ILGPU#IR#BasicBlock,T)}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.Construction.IRBuilder">
            <summary>
            An IR builder that can construct IR nodes.
            </summary>
            <remarks>Members of this class are thread safe.</remarks>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Values.UnaryArithmeticKind)">
            <summary>
            Creates a unary arithmetic operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Creates a unary arithmetic operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">Operation flags.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.BinaryArithmeticKind)">
            <summary>
            Creates a binary arithmetic operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Creates a binary arithmetic operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">Operation flags.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.TernaryArithmeticKind)">
            <summary>
            Creates a ternary arithmetic operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <param name="third">The second operand.</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Creates a ternary arithmetic operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <param name="third">The second operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">Operation flags.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.VerifyLinearArray(ILGPU.IR.Location,System.Int32)">
            <summary>
            Verifies that array operations work on linear arrays only.
            </summary>
            <param name="location">The current location.</param>
            <param name="dimensions">The array dimensions.</param>
            <remarks>
            TODO: remove this constraint in future releases.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArray(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode,System.Int32,ILGPU.IR.Value)">
            <summary>
            Creates a new array value.
            </summary>
            <param name="location">The current location.</param>
            <param name="elementType">The array element type.</param>
            <param name="dimensions">The array dimensions.</param>
            <param name="extent">The array length.</param>
            <returns>The created empty array value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArray(ILGPU.IR.Location,ILGPU.IR.Types.ArrayType,ILGPU.IR.Value)">
            <summary>
            Creates a new array value.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The array type.</param>
            <param name="extent">The array length.</param>
            <returns>The created empty array value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetArrayExtent(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates an operation to extract the extent from an array value.
            </summary>
            <param name="location">The current location.</param>
            <param name="arrayValue">The array value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetArrayElement(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Creates a load operation of an array element.
            </summary>
            <param name="location">The current location.</param>
            <param name="arrayValue">The array value.</param>
            <param name="index">The field index to load.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSetArrayElement(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Creates a store operation of an array element.
            </summary>
            <param name="location">The current location.</param>
            <param name="arrayValue">The array value.</param>
            <param name="index">The array index to store.</param>
            <param name="value">The array value to store.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetArrayLength(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a value reference that represents an array length.
            </summary>
            <param name="location">The current location.</param>
            <param name="arrayValue">The array value to compute the length for.</param>
            <returns>The created value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.ComputeArrayLength(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Computes a linear array length based on an array extent.
            </summary>
            <param name="location">The current location.</param>
            <param name="arrayExtent">The array extent.</param>
            <returns>The linear array length.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.ComputeArrayAddress(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,System.Int32)">
            <summary>
            Computes a linear array address.
            </summary>
            <param name="location">The current location.</param>
            <param name="arrayIndex">The array index.</param>
            <param name="arrayExtent">The array extent.</param>
            <param name="arrayExtentOffset">The extent offset.</param>
            <returns>The linear array address.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAtomic(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.AtomicKind,ILGPU.IR.Values.AtomicFlags)">
            <summary>
            Creates a new atomic operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="target">The target address.</param>
            <param name="value">The target value.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
            <returns>A node that represents the atomic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAtomicCAS(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.AtomicFlags)">
            <summary>
            Creates a new atomic compare-and-swap operation
            </summary>
            <param name="location">The current location.</param>
            <param name="target">The parent memory operation.</param>
            <param name="value">The target value.</param>
            <param name="compareValue">The comparison value.</param>
            <param name="flags">The operation flags.</param>
            <returns>
            A node that represents the atomic compare-and-swap operation.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateIntAsPointerCast(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a cast operation that casts an integer value to a raw pointer.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePointerCast(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a cast operation that casts the element type of a pointer
            but does not change its address space.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="targetElementType">The target element type.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAddressSpaceCast(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates an address-space cast.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="targetAddressSpace">The target address space.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateViewCast(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a view cast.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="targetElementType">The target element type.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateFloatAsIntCast(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a float as int reinterpret bit cast.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateIntAsFloatCast(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates an int as float reinterpret bit cast.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateCompare(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.CompareKind)">
            <summary>
            Creates a compare operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the compare operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateCompare(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.CompareKind,ILGPU.IR.Values.CompareFlags)">
            <summary>
            Creates a compare operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">Operation flags.</param>
            <returns>A node that represents the compare operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePredicate(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Creates a conditional predicate.
            </summary>
            <param name="location">The current location.</param>
            <param name="conditionOrValue">The condition or select value.</param>
            <param name="values">The list of condition/select values.</param>
            <returns>A node that represents the conditional predicate.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateIfPredicate(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Creates a conditional if predicate.
            </summary>
            <param name="location">The current location.</param>
            <param name="condition">The condition.</param>
            <param name="trueValue">The true value.</param>
            <param name="falseValue">The false value.</param>
            <returns>A node that represents the predicate operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSwitchPredicate(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a conditional switch predicate.
            </summary>
            <param name="location">The current location.</param>
            <param name="condition">The condition.</param>
            <returns>A node that represents the predicate operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSwitchPredicate(ILGPU.IR.Location,ILGPU.IR.Value,System.Int32)">
            <summary>
            Creates a conditional switch predicate.
            </summary>
            <param name="location">The current location.</param>
            <param name="condition">The condition.</param>
            <param name="capacity">The initial case capacity.</param>
            <returns>A node that represents the predicate operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSwitchPredicate(ILGPU.IR.Location,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Creates a conditional switch predicate.
            </summary>
            <param name="location">The current location.</param>
            <param name="values">The switch predicate values.</param>
            <returns>A node that represents the predicate operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateConvertToInt32(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a convert operation to a 32bit integer.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <returns>A node that represents the convert operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateConvertToInt64(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a convert operation to a 64bit integer.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <returns>A node that represents the convert operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateConvert(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.BasicValueType)">
            <summary>
            Creates a convert operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="basicValueType">The target basic value type.</param>
            <returns>A node that represents the convert operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateConvert(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a convert operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="targetType">The target type.</param>
            <returns>A node that represents the convert operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateConvert(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Creates a convert operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="targetType">The target type.</param>
            <param name="flags">Operation flags.</param>
            <returns>A node that represents the convert operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDebug(ILGPU.IR.Location,ILGPU.IR.Values.DebugKind,ILGPU.IR.Value)">
            <summary>
            Creates a new failed debug assertion.
            </summary>
            <param name="location">The current location.</param>
            <param name="kind">The operation kind.</param>
            <param name="message">The assertion message.</param>
            <returns>A node that represents the debug assertion.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.#ctor(ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new IR builder.
            </summary>
            <param name="basicBlock">The current basic block.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.BasicBlock">
            <summary>
            Returns the associated basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.VoidType">
            <summary>
            Returns the void type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.StringType">
            <summary>
            Returns the string type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.UseConstantPropagation">
            <summary>
            True, if the IR builder should use constant propagation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific exception information.
            </summary>
            <param name="message">The source error message.</param>
            <returns>The formatted error message.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.GetInitializer(ILGPU.IR.Location)">
            <summary>
            Creates a new initializer that is bound to the current block.
            </summary>
            <returns>The created value initializer.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAcceleratorTypeValue(ILGPU.IR.Location)">
            <summary>
            Creates a node that represents an <see cref="P:ILGPU.Runtime.Accelerator.CurrentType"/>
            property.
            </summary>
            <param name="location">The current location.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateWarpSizeValue(ILGPU.IR.Location)">
            <summary>
            Creates a node that represents a <see cref="P:ILGPU.Warp.WarpSize"/> property.
            </summary>
            <param name="location">The current location.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLaneIdxValue(ILGPU.IR.Location)">
            <summary>
            Creates a node that represents a <see cref="P:ILGPU.Warp.LaneIdx"/> property.
            </summary>
            <param name="location">The current location.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGridIndexValue(ILGPU.IR.Location,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Creates a node that represents a <see cref="P:ILGPU.Grid.Index"/> property.
            </summary>
            <param name="location">The current location.</param>
            <param name="dimension">The constant dimension.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGroupIndexValue(ILGPU.IR.Location,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Creates a node that represents a <see cref="P:ILGPU.Group.Index"/> property.
            </summary>
            <param name="location">The current location.</param>
            <param name="dimension">The constant dimension.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGridDimensionValue(ILGPU.IR.Location,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Creates a node that represents a <see cref="P:ILGPU.Grid.Dimension"/> property.
            </summary>
            <param name="location">The current location.</param>
            <param name="dimension">The constant dimension.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGroupDimensionValue(ILGPU.IR.Location,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Creates a node that represents of a <see cref="P:ILGPU.Group.Dimension"/> property.
            </summary>
            <param name="location">The current location.</param>
            <param name="dimension">The constant dimension.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSizeOf(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a node that represents the native size of the given type.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The type.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLongSizeOf(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a node that represents the native size of the given type.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The type.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateOffsetOf(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a node that represents the native offset of the specified field
            index.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The type.</param>
            <param name="fieldIndex">The field index.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateUndefined">
            <summary>
            Creates a node that represents an undefined value.
            </summary>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateRuntimeHandle(ILGPU.IR.Location,System.Object)">
            <summary>
            Creates a node that represents a managed runtime handle.
            </summary>
            <param name="location">The current location.</param>
            <param name="handle">The runtime handle.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateIndex(ILGPU.IR.Location,ILGPU.IR.Values.ValueReference)">
            <summary>
            Creates a new index structure instance.
            </summary>
            <param name="location">The current location.</param>
            <param name="dimension">The dimension value.</param>
            <returns>The created index type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePhiValue(ILGPU.IR.Values.PhiValue)">
            <summary>
            Creates an instantiated phi value.
            </summary>
            <param name="phiValue">The phi value to create.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateTerminator``1(``0)">
            <summary>
            Creates an instantiated terminator.
            </summary>
            <typeparam name="T">The terminator value type.</typeparam>
            <param name="node">The terminator to create.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.Append``1(``0)">
            <summary>
            Append a new value.
            </summary>
            <typeparam name="T">The node type.</typeparam>
            <param name="node">The node to create.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAlloca(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a local allocation.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The type of the allocation.</param>
            <param name="addressSpace">The target address space.</param>
            <returns>A node that represents the alloca operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateStaticAllocaArray(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates an array based local allocation.
            </summary>
            <param name="location">The current location.</param>
            <param name="arrayLength">
            The array length (number of elements to allocate).
            </param>
            <param name="type">The type of the allocation.</param>
            <param name="addressSpace">The target address space.</param>
            <returns>A node that represents the alloca operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDynamicAllocaArray(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a dynamic local memory allocation.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The type of the allocation.</param>
            <param name="addressSpace">The target address space.</param>
            <returns>A node that represents the alloca operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAlloca(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Value)">
            <summary>
            Creates a local allocation.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The type of the allocation.</param>
            <param name="addressSpace">The target address space.</param>
            <param name="arrayLength">
            The array length (number of elements to allocate or undefined).
            </param>
            <returns>A node that represents the alloca operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLoad(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a load operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="source">The source address.</param>
            <returns>A node that represents the load operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateStore(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Creates a store operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="target">The target address.</param>
            <param name="value">The value to store.</param>
            <returns>A node that represents the store operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateMemoryBarrier(ILGPU.IR.Location,ILGPU.IR.Values.MemoryBarrierKind)">
            <summary>
            Creates a memory barrier.
            </summary>
            <param name="location">The current location.</param>
            <param name="kind">The type of the memory barrier.</param>
            <returns>A node that represents the memory barrier.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSubViewValue(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Computes a new sub view from a given view.
            </summary>
            <param name="location">The current location.</param>
            <param name="source">The source.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>A node that represents the new sub view.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLoadElementAddress(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Computes the address of a single element in the scope of a view or a pointer.
            </summary>
            <param name="location">The current location.</param>
            <param name="source">The source view.</param>
            <param name="elementIndex">The element index to load.</param>
            <returns>A node that represents the element address.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLoadFieldAddress(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Computes the address of a single field.
            </summary>
            <param name="location">The current location.</param>
            <param name="source">The source.</param>
            <param name="fieldSpan">The associated field span (if any).</param>
            <returns>A node that represents the field address.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateCall(ILGPU.IR.Location,ILGPU.IR.Method)">
            <summary>
            Creates a new call node builder.
            </summary>
            <param name="location">The current location.</param>
            <param name="target">The jump target.</param>
            <returns>A call builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateCall(ILGPU.IR.Location,ILGPU.IR.Method,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Creates a new method call.
            </summary>
            <param name="location">The current location.</param>
            <param name="target">The method target.</param>
            <param name="values">The argument values.</param>
            <returns>The created method call value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePhi(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a new phi node builder.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The given node type.</param>
            <returns>The created phi builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePhi(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new phi node builder.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The given node type.</param>
            <param name="capacity">The initial capacity.</param>
            <returns>The created phi builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.DeclareMethod(ILGPU.IR.MethodDeclaration@,System.Boolean@)">
            <summary>
            Declares a method.
            </summary>
            <param name="declaration">The method declaration.</param>
            <param name="created">True, if the method has been created.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateObjectValue(ILGPU.IR.Location,System.Object)">
            <summary>
            Creates a new object value.
            </summary>
            <param name="location">The current location.</param>
            <param name="instance">The object value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateStructure(ILGPU.IR.Location,ILGPU.IR.Types.StructureType)">
            <summary>
            Creates a new structure instance builder.
            </summary>
            <param name="location">The current location.</param>
            <param name="structureType">The structure type.</param>
            <returns>The created structure instance builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDynamicStructure(ILGPU.IR.Location)">
            <summary>
            Creates a new dynamic structure instance builder.
            </summary>
            <param name="location">The current location.</param>
            <returns>The created structure instance builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDynamicStructure(ILGPU.IR.Location,System.Int32)">
            <summary>
            Creates a new dynamic structure instance builder.
            </summary>
            <param name="location">The current location.</param>
            <param name="capacity">The initial capacity.</param>
            <returns>The created structure instance builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDynamicStructure(ILGPU.IR.Location,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Creates a new dynamic structure instance.
            </summary>
            <param name="location">The current location.</param>
            <param name="values">The initial values.</param>
            <returns>The created structure instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDynamicStructure(ILGPU.IR.Location,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Creates a new dynamic structure instance.
            </summary>
            <param name="location">The current location.</param>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
            <returns>The created structure instance value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDynamicStructure(ILGPU.IR.Location,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Creates a new dynamic structure instance.
            </summary>
            <param name="location">The current location.</param>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
            <param name="item3">The third item.</param>
            <returns>The created structure instance value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDynamicStructure``1(ILGPU.IR.Location,``0)">
            <summary>
            Creates a new dynamic structure instance.
            </summary>
            <param name="location">The current location.</param>
            <param name="values">The list of all values to add.</param>
            <returns>The created structure instance value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.FinishStructureBuilder``1(``0@)">
            <summary>
            Creates a new structure instance value.
            </summary>
            <param name="builder">The structure instance builder.</param>
            <returns>The created structure instance value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetField(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Creates a load operation of an object field.
            </summary>
            <param name="location">The current location.</param>
            <param name="objectValue">The object value.</param>
            <param name="fieldSpan">The field span.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSetField(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Values.FieldSpan,ILGPU.IR.Value)">
            <summary>
            Creates a store operation of an object field using the given field access.
            </summary>
            <param name="location">The current location.</param>
            <param name="objectValue">The object value.</param>
            <param name="fieldSpan">The field span.</param>
            <param name="value">The field value to store.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateReturn(ILGPU.IR.Location)">
            <summary>
            Creates a new return terminator.
            </summary>
            <param name="location">The current location.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateReturn(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a new return terminator.
            </summary>
            <param name="location">The current location.</param>
            <param name="returnValue">The return value.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBranch(ILGPU.IR.Location,ILGPU.IR.BasicBlock)">
            <summary>
            Creates a new unconditional branch.
            </summary>
            <param name="location">The current location.</param>
            <param name="target">The target block.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateIfBranch(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Creates a new conditional branch.
            </summary>
            <param name="location">The current location.</param>
            <param name="condition">The branch condition.</param>
            <param name="trueTarget">The true target block.</param>
            <param name="falseTarget">The false target block.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSwitchBranch(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a switch terminator builder.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The selection value.</param>
            <returns>The created switch builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSwitchBranch(ILGPU.IR.Location,ILGPU.IR.Value,System.Int32)">
            <summary>
            Creates a switch terminator builder.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The selection value.</param>
            <param name="capacity">The expected number of cases to append.</param>
            <returns>The created switch builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSwitchBranch(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Creates a switch terminator.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The selection value.</param>
            <param name="targets">The list of target blocks.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBuilderTerminator(System.Int32)">
            <summary>
            Creates a temporary builder terminator.
            </summary>
            <param name="capacity">The expected number of branch targets.</param>
            <returns>The created terminator builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBuilderTerminator(ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Creates a temporary builder terminator.
            </summary>
            <param name="targets">All branch targets.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBarrier(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Values.PredicateBarrierKind)">
            <summary>
            Creates a new predicated barrier.
            </summary>
            <param name="location">The current location.</param>
            <param name="predicate">The barrier predicate.</param>
            <param name="kind">The barrier kind.</param>
            <returns>A node that represents the barrier.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBarrier(ILGPU.IR.Location,ILGPU.IR.Values.BarrierKind)">
            <summary>
            Creates a new barrier.
            </summary>
            <param name="location">The current location.</param>
            <param name="kind">The barrier kind.</param>
            <returns>A node that represents the barrier.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBroadcast(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.BroadcastKind)">
            <summary>
            Creates a new broadcast operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="variable">The variable.</param>
            <param name="origin">
            The broadcast origin (thread index within a group or a warp).
            </param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the broadcast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateShuffle(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Creates a new shuffle operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="variable">The variable.</param>
            <param name="origin">The shuffle origin (depends on the operation).</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the shuffle operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateShuffle(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Creates a new sub-warp shuffle operation that operates
            on sub-groups of a warp.
            </summary>
            <param name="location">The current location.</param>
            <param name="variable">The variable.</param>
            <param name="origin">The shuffle origin (depends on the operation).</param>
            <param name="width">The sub-warp width.</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the sub shuffle operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.GetPrimitiveType(ILGPU.BasicValueType)">
            <summary>
            Creates a primitive type.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The created primitive type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.GetIndexType(System.Int32)">
            <summary>
            Creates an intrinsic index type.
            </summary>
            <param name="dimension">The dimension of the index type.</param>
            <returns>The created index type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePointerType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a pointer type.
            </summary>
            <param name="elementType">The pointer element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created pointer type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a view type.
            </summary>
            <param name="elementType">The view element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArrayType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new array type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="dimension">The array dimension.</param>
            <returns>The created array type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateStructureType(System.Int32)">
            <summary>
            Creates a new structure type builder with the given capacity.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <returns>The created structure builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateType(System.Type)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateType(System.Type,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <param name="addressSpace">The address space for pointer types.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.SpecializeAddressSpaceType(ILGPU.IR.Types.AddressSpaceType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Specializes the address space of the given <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.
            </summary>
            <param name="addressSpaceType">The source type.</param>
            <param name="addressSpace">The new address space.</param>
            <returns>The created specialized <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.TrySpecializeAddressSpaceType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Types.TypeNode@)">
            <summary>
            Tries to specialize a view or a pointer address space.
            </summary>
            <param name="type">The pointer or view type.</param>
            <param name="addressSpace">The target address space.</param>
            <param name="specializedType">The specialized type.</param>
            <returns>True, if the type could be specialized.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateNull(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a null value for the given type.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The target type.</param>
            <returns>The null reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateEnumValue(ILGPU.IR.Location,System.Object)">
            <summary>
            Creates a new primitive <see cref="T:System.Enum"/> constant.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The object value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Object)">
            <summary>
            Creates a new primitive constant.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The object value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.String)">
            <summary>
            Creates a new string constant.
            </summary>
            <param name="location">The current location.</param>
            <param name="string">The string value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Boolean)">
            <summary>
            Creates a primitive <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.SByte)">
            <summary>
            Creates a primitive <see cref="T:System.SByte"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Byte)">
            <summary>
            Creates a primitive <see cref="T:System.Byte"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Int16)">
            <summary>
            Creates a primitive <see cref="T:System.Int16"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.UInt16)">
            <summary>
            Creates a primitive <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Int32)">
            <summary>
            Creates a primitive <see cref="T:System.Int32"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.UInt32)">
            <summary>
            Creates a primitive <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Int64)">
            <summary>
            Creates a primitive <see cref="T:System.Int64"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.UInt64)">
            <summary>
            Creates a primitive <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,ILGPU.Half)">
            <summary>
            Creates a primitive <see cref="T:ILGPU.Half"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Single)">
            <summary>
            Creates a primitive <see cref="T:System.Single"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Double)">
            <summary>
            Creates a primitive <see cref="T:System.Double"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,ILGPU.BasicValueType,System.Int64)">
            <summary>
            Creates a primitive value.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The value type.</param>
            <param name="rawValue">The raw value (sign-extended to long).</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateValue(ILGPU.IR.Location,System.Object,System.Type)">
            <summary>
            Creates a generic value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <param name="type">The value type.</param>
            <returns>The created value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateNewView(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Constructs a new view from a pointer and a length.
            </summary>
            <param name="location">The current location.</param>
            <param name="pointer">The source pointer.</param>
            <param name="length">The length.</param>
            <returns>A node that represents the created view.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetViewLength(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a node that resolves the length of the given view.
            </summary>
            <param name="location">The current location.</param>
            <param name="view">The source view.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetViewLongLength(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a node that resolves the length of the given view.
            </summary>
            <param name="location">The current location.</param>
            <param name="view">The source view.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetViewLength(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.BasicValueType)">
            <summary>
            Creates a node that resolves the length of the given view.
            </summary>
            <param name="location">The current location.</param>
            <param name="view">The source view.</param>
            <param name="lengthType">The length type.</param>
            <returns>The created node.</returns>
        </member>
        <member name="T:ILGPU.IR.Construction.IRRebuilder">
            <summary>
            Represents an IR rebuilder to rebuild parts of the IR.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Construction.IRRebuilder.IMode">
            <summary>
            An abstract rebuilder mode.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.IMode.InitMapping``1(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,``0@,ILGPU.IR.BasicBlockMap{ILGPU.IR.BasicBlock.Builder}@)">
            <summary>
            Initializes a new block mapping.
            </summary>
            <typeparam name="TRemapper">The custom remapper type.</typeparam>
            <param name="builder">The parent builder.</param>
            <param name="blocks">The block collection.</param>
            <param name="remapper">The custom block remapper.</param>
            <param name="mapping">The mapping to initialize.</param>
        </member>
        <member name="T:ILGPU.IR.Construction.IRRebuilder.CloneMode">
            <summary>
            The clone mode for rebuilding methods into a stub.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.CloneMode.InitMapping``1(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,``0@,ILGPU.IR.BasicBlockMap{ILGPU.IR.BasicBlock.Builder}@)">
            <summary>
            Initializes a new mapping that maps each block to a new block except
            the init block which will be rewired.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Construction.IRRebuilder.InlineMode">
            <summary>
            The inlining mode for rebuilding a method into a set of new blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.InlineMode.Register``1(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock,``0@,ILGPU.IR.BasicBlockMap{ILGPU.IR.BasicBlock.Builder}@)">
            <summary>
            Registers an internal block.
            </summary>
            <typeparam name="TRemapper">The user-defined remapper type.</typeparam>
            <param name="builder">The parent builder.</param>
            <param name="block">The current block to register.</param>
            <param name="remapper">The custom block remapper.</param>
            <param name="mapping">The mapping to initialize.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.InlineMode.InitMapping``1(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,``0@,ILGPU.IR.BasicBlockMap{ILGPU.IR.BasicBlock.Builder}@)">
            <summary>
            Initializes a new mapping that maps each block to a new block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Create``1(ILGPU.IR.Method.Builder,ILGPU.IR.Method.ParameterMapping,ILGPU.IR.Method.MethodMapping,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Creates a new rebuilder.
            </summary>
            <typeparam name="TMode">The rebuilder mode.</typeparam>
            <param name="builder">The parent builder.</param>
            <param name="parameterMapping">The used parameter remapping.</param>
            <param name="methodRemapping">The used method remapping.</param>
            <param name="blocks">The block collection.</param>
            <returns>The created rebuilder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Create``2(ILGPU.IR.Method.Builder,ILGPU.IR.Method.ParameterMapping,ILGPU.IR.Method.MethodMapping,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,``1@)">
            <summary>
            Creates a new rebuilder.
            </summary>
            <typeparam name="TMode">The rebuilder mode.</typeparam>
            <typeparam name="TRemapper">The custom remapper type.</typeparam>
            <param name="builder">The parent builder.</param>
            <param name="parameterMapping">The used parameter remapping.</param>
            <param name="methodRemapping">The used method remapping.</param>
            <param name="blocks">The block collection.</param>
            <param name="remapper">The custom block remapper.</param>
            <returns>The created rebuilder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Create(ILGPU.IR.Method.Builder,System.Collections.Generic.Dictionary{ILGPU.IR.Value,ILGPU.IR.Value},ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Creates a new rebuilder.
            </summary>
            <param name="builder">The parent builder.</param>
            <param name="valueRemapping">The value remapping to use.</param>
            <param name="blocks">The block collection.</param>
            <returns>The created rebuilder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Create``1(ILGPU.IR.Method.Builder,System.Collections.Generic.Dictionary{ILGPU.IR.Value,ILGPU.IR.Value},ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,``0@)">
            <summary>
            Creates a new rebuilder.
            </summary>
            <typeparam name="TRemapper">The custom remapper type.</typeparam>
            <param name="builder">The parent builder.</param>
            <param name="valueRemapping">The value remapping to use.</param>
            <param name="blocks">The block collection.</param>
            <param name="remapper">The custom block remapper.</param>
            <returns>The created rebuilder.</returns>
        </member>
        <member name="F:ILGPU.IR.Construction.IRRebuilder.methodMapping">
            <summary>
            Maps source methods to target methods.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.IRRebuilder.blockMapping">
            <summary>
            Maps old blocks to new block builders.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.IRRebuilder.phiMapping">
            <summary>
            Maps old phi nodes to new phi builders.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.IRRebuilder.valueMapping">
            <summary>
            Maps old nodes to new nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.#ctor(ILGPU.IR.Method.Builder,ILGPU.IR.Method.ParameterMapping,ILGPU.IR.Method.MethodMapping,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.BasicBlockMap{ILGPU.IR.BasicBlock.Builder}@)">
            <summary>
            Constructs a new IR rebuilder.
            </summary>
            <param name="builder">The parent builder.</param>
            <param name="parameterMapping">The used parameter remapping.</param>
            <param name="blocks">The block collection.</param>
            <param name="methodRemapping">The used method remapping.</param>
            <param name="blockRemapping">The internal block remapping.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.#ctor(ILGPU.IR.Method.Builder,System.Collections.Generic.Dictionary{ILGPU.IR.Value,ILGPU.IR.Value},ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.BasicBlockMap{ILGPU.IR.BasicBlock.Builder}@)">
            <summary>
            Constructs a new IR rebuilder.
            </summary>
            <param name="builder">The parent builder.</param>
            <param name="valueRemapping">The values to remap.</param>
            <param name="blocks">The block collection.</param>
            <param name="blockRemapping">The internal block remapping.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.InitPhiValues(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Initializes all phi values.
            </summary>
            <param name="blocks">The source block collection.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.Builder">
            <summary>
            Returns the associated method builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.Blocks">
            <summary>
            Returns the associated collection.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.EntryBlock">
            <summary>
            Returns the target entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.CurrentBlock">
            <summary>
            Gets or sets the current block builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Lookups the given block in the internal rebuilder remapping.
            </summary>
            <param name="block">The block to lookup.</param>
            <returns>The mapped block builder representing the new block.</returns>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.Item(ILGPU.IR.Value)">
            <summary>
            Lookups the given value in the internal rebuilder remapping.
            </summary>
            <param name="value">The value to lookup.</param>
            <returns>The mapped block builder representing the new block.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Rebuild">
            <summary>
            Rebuilds all values.
            </summary>
            <returns>The exit block and the associated return value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.TryGetNewNode(ILGPU.IR.Value,ILGPU.IR.Value@)">
            <summary>
            Tries to lookup the new node representation of the given old node.
            </summary>
            <param name="oldNode">The old node.</param>
            <param name="newNode">The new node.</param>
            <returns>True, if a corresponding new node could be found.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Map(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Maps the old node to the new node.
            </summary>
            <param name="oldNode">The old node.</param>
            <param name="newNode">The new node.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.ExportNodeMapping``1(``0)">
            <summary>
            Exports the internal node mapping to the given target dictionary.
            </summary>
            <typeparam name="TDictionary">The dictionary type.</typeparam>
            <param name="target">The target dictionary.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.LookupCallTarget(ILGPU.IR.Method)">
            <summary>
            Resolves a method for the given old method
            </summary>
            <param name="oldTarget">The old method.</param>
            <returns>The resolved method.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.LookupTarget(ILGPU.IR.BasicBlock)">
            <summary>
            Resolves a basic block builder for the given old block.
            </summary>
            <param name="oldTarget">The old basic block.</param>
            <returns>The resolved block builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Rebuild(ILGPU.IR.Value)">
            <summary>
            Rebuilds to given source node using lookup tables.
            </summary>
            <param name="source">The source node.</param>
            <returns>The new node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.RebuildAs``1(ILGPU.IR.Value)">
            <summary>
            Rebuilds to given source node using lookup tables and
            returns the resolved casted to a specific type.
            </summary>
            <typeparam name="T">The target type to cast the new node to.</typeparam>
            <param name="source">The source node.</param>
            <returns>The new node.</returns>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1">
            <summary>
            Constructs IR nodes that are in SSA form.
            </summary>
            <typeparam name="TVariable">The variable type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1.Enumerator">
            <summary>
            A successor or predecessor enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Enumerator.#ctor(System.Collections.Generic.HashSet{ILGPU.IR.Construction.SSABuilder{`0}.ValueContainer})">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="values">The values to enumerate.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.Enumerator.Current">
            <summary>
            Returns the current value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Enumerator.Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1.MarkerProvider">
            <summary>
            Provides marker values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.MarkerProvider.#ctor(System.Int32)">
            <summary>
            Constructs a new marker provider.
            </summary>
            <param name="markerValue">The current marker value.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.MarkerProvider.MarkerValue">
            <summary>
            Returns the current marker value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.MarkerProvider.CreateMarker">
            <summary>
            Creates a new marker value.
            </summary>
            <returns>The created marker value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.MarkerProvider.Apply(System.Int32@)">
            <summary>
            Applies the internal marker value to the given target.
            </summary>
            <param name="targetMarkerValue">
            The target marker value reference.
            </param>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1.ValueContainer">
            <summary>
            Represents a basic block during cps construction.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi">
            <summary>
            Represents an incomplete phi parameter that has to be
            completed by adding its required operands later on.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi.#ctor(`0,ILGPU.IR.Values.PhiValue.Builder)">
            <summary>
            Constructs an incomplete phi.
            </summary>
            <param name="variableRef">The referenced variable.</param>
            <param name="phiBuilder">The phi builder.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi.VariableRef">
            <summary>
            Returns the associated variable ref.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi.PhiBuilder">
            <summary>
            Returns the associated phi builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi.PhiType">
            <summary>
            Returns the type of the underlying phi node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi.Location">
            <summary>
            Returns the location of the phi node.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.markerValue">
            <summary>
            Represents the internal marker value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.blockBuilder">
            <summary>
            Represents the current block builder.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.values">
            <summary>
            Value cache for SSA GetValue and SetValue functionality.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.incompletePhis">
            <summary>
            Container for incomplete "phis" that have to be wired during block
            sealing.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.#ctor(ILGPU.IR.Construction.SSABuilder{`0},ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new SSA block.
            </summary>
            <param name="parent">The associated parent builder.</param>
            <param name="block">The current block.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.Parent">
            <summary>
            Returns the parent SSA builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.Block">
            <summary>
            Returns the associated basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.Builder">
            <summary>
            Returns the associated block builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IsSealed">
            <summary>
            Returns True if this block is sealed.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.CanSeal">
            <summary>
            Returns true if this block can be sealed.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IsProcessed">
            <summary>
            Returns true if this block has been processed.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.Mark(System.Int32)">
            <summary>
            Marks the current block with the new marker value.
            </summary>
            <param name="newMarker">The new value to apply.</param>
            <returns>
            True, if the old marker was not equal to the new marker
            (the block was not marked with the new marker value).
            </returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.SetValue(`0,ILGPU.IR.Value)">
            <summary>
            Sets the given variable to the given value.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.GetValue(`0,ILGPU.IR.Construction.SSABuilder{`0}.MarkerProvider@)">
            <summary>
            Returns the value of the given variable.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="markerProvider">A provider of new marker values.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.RemoveValue(`0)">
            <summary>
            Removes the value of the given variable.
            </summary>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.PeekValue(`0,System.Int32)">
            <summary>
            Peeks a value recursively. This method only retrieves a value
            from a predecessor but does not build any phi nodes.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="marker">The current marker to break cycles.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.GetValueRecursive(`0,ILGPU.IR.Construction.SSABuilder{`0}.MarkerProvider@)">
            <summary>
            Returns the value of the given variable by asking the predecessors.
            This method recursively constructs required phi nodes to break cycles.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="markerProvider">A provider of new marker values.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.SetupPhiArguments(ILGPU.IR.Construction.SSABuilder{`0}.ValueContainer.IncompletePhi@,ILGPU.IR.Construction.SSABuilder{`0}.MarkerProvider@)">
            <summary>
            Setups phi arguments for the given variable reference and the given
            phi parameter. This method is invoked for sealed blocks during CPS
            construction or during the sealing process in the last step.
            </summary>
            <param name="incompletePhi">An incomplete phi node to complete.</param>
            <param name="markerProvider">A provider of new marker values.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.Seal(ILGPU.IR.Construction.SSABuilder{`0}.MarkerProvider@)">
            <summary>
            Seals this block (called when all predecessors have been seen) and
            wires all (previously unwired) phi nodes.
            </summary>
            <param name="markerProvider">A provider of new marker values.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.TrySealSuccessors(ILGPU.IR.Construction.SSABuilder{`0}.MarkerProvider@)">
            <summary>
            Tries to seal all successor blocks of this one.
            </summary>
            <param name="markerProvider">A provider of new marker values.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.ToString">
            <summary>
            Returns the string representation of this block.
            </summary>
            <returns>The string representation of this block.</returns>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1.ValueContainerProvider">
            <summary>
            Provides <see cref="T:ILGPU.IR.Construction.SSABuilder`1.ValueContainer"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainerProvider.#ctor(ILGPU.IR.Construction.SSABuilder{`0})">
            <summary>
            Constructs a new container provider.
            </summary>
            <param name="parent">The parent SSA builder.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainerProvider.Parent">
            <summary>
            Returns the parent SSA builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainerProvider.GetValue(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Creates a new <see cref="T:ILGPU.IR.Construction.SSABuilder`1.ValueContainer"/> instance.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Create(ILGPU.IR.Method.Builder)">
            <summary>
            Creates a new SSA builder.
            </summary>
            <param name="methodBuilder">The current method builder.</param>
            <returns>The created SSA builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Create(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Creates a new SSA builder.
            </summary>
            <param name="methodBuilder">The current method builder.</param>
            <param name="blockCollection">The block collection.</param>
            <returns>The created SSA builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.#ctor(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Constructs a new SSA builder.
            </summary>
            <param name="methodBuilder">The current method builder.</param>
            <param name="blockCollection">The block collection.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.MethodBuilder">
            <summary>
            Returns the associated method builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.Blocks">
            <summary>
            Returns the underlying list of blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the internal value container for the given block.
            </summary>
            <param name="block">The basic block.</param>
            <returns>The resolved value container.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.SetValue(ILGPU.IR.BasicBlock,`0,ILGPU.IR.Value)">
            <summary>
            Sets the given variable to the given value.
            </summary>
            <param name="block">The target block.</param>
            <param name="var">The variable reference.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.GetValue(ILGPU.IR.BasicBlock,`0)">
            <summary>
            Returns the value of the given variable.
            </summary>
            <param name="block">The target block.</param>
            <param name="var">The variable reference.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.RemoveValue(ILGPU.IR.BasicBlock,`0)">
            <summary>
            Removes the value of the given variable.
            </summary>
            <param name="block">The target block.</param>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Process(ILGPU.IR.BasicBlock)">
            <summary>
            Tries to process the associated block.
            </summary>
            <param name="block">The target block.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Seal(ILGPU.IR.Construction.SSABuilder{`0}.ValueContainer)">
            <summary>
            Tries to seals the associated block.
            </summary>
            <param name="container">The container to seal.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Seal(ILGPU.IR.BasicBlock)">
            <summary>
            Tries to seals the associated node.
            </summary>
            <param name="block">The target block.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ProcessAndSeal(ILGPU.IR.BasicBlock)">
            <summary>
            Tries to process the given node while always trying to seal the given node.
            </summary>
            <param name="block">The basic block.</param>
            <returns>True, if the node has not been processed.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.TrySealSuccessors(ILGPU.IR.BasicBlock)">
            <summary>
            Tries to seal all successors of the given block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.SealRemainingBlocks">
            <summary>
            Seals all remaining blocks in the appropriate order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.AssertAllSealed">
            <summary>
            Asserts that all blocks have been sealed.
            </summary>
            <remarks>
            This operation is only available in debug mode.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Method">
            <summary>
            Represents a method node within the IR.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Method.Builder">
            <summary>
            A builder to build methods.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Method.Builder.ExitBlockVisitor">
            <summary>
            An exit block visitor to gather exit blocks.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Method.Builder.ExitBlockVisitor.exitBlock">
            <summary>
            The exit block in case of a single one.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.ExitBlockVisitor.HasMultipleExitBlocks">
            <summary>
            Returns true if there is more than one exit block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.ExitBlockVisitor.ExitBlocks">
            <summary>
            Returns the list of exit blocks in the case of multiple exit blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.ExitBlockVisitor.Visit(ILGPU.IR.BasicBlock)">
            <summary>
            Checks whether the given block is an exit block and collects this
            block if it turns out to be an exit block.
            </summary>
            <param name="block">The block to add.</param>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.RequiresControlFlowUpdate(ILGPU.IR.Values.TerminatorValue,ILGPU.IR.Values.TerminatorValue)">
            <summary>
            Checks whether we have to update the control-flow structure.
            </summary>
            <param name="oldTerminator">The old terminator (if any).</param>
            <param name="newTerminator">The new terminator.</param>
            <returns>
            True, if we have to update the control-flow structure.
            </returns>
        </member>
        <member name="F:ILGPU.IR.Method.Builder.basicBlockBuilders">
            <summary>
            All created basic block builders.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.#ctor(ILGPU.IR.Method)">
            <summary>
            Constructs a new method builder.
            </summary>
            <param name="method">The parent method.</param>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Context">
            <summary>
            Returns the associated IR context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Location">
            <summary>
            Returns the location of the underlying method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.EntryBlock">
            <summary>
            Gets the current entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.EntryBlockBuilder">
            <summary>
            Returns the builder of the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Handle">
            <summary>
            Returns the associated function handle.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Source">
            <summary>
            Returns the original source method (may be null).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.SourceBlocks">
            <summary>
            Returns all blocks of the source method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Item(System.Int32)">
            <summary>
            Returns the parameter with the given index.
            </summary>
            <param name="index">The parameter index.</param>
            <returns>The resolved parameter.</returns>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the associated basic block builder.
            </summary>
            <param name="basicBlock">
            The basic block to resolve the builder for.
            </param>
            <returns>The resolved basic block builder.</returns>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.NumParams">
            <summary>
            Returns the number of parameters.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.ScheduleControlFlowUpdate">
            <summary>
            Schedules control-flow updates.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.ScheduleControlFlowUpdate(ILGPU.IR.Values.TerminatorValue,ILGPU.IR.Values.TerminatorValue)">
            <summary>
            Schedules control-flow updates if the successor relation has been
            changed by setting a new terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.AcceptControlFlowUpdates(System.Boolean)">
            <summary>
            Accepts or rejects control-flow updates in case of control-flow changes.
            </summary>
            <param name="accept">True, if all changes will be accepted.</param>
            <remarks>
            This operation is only available in debug mode.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.AssertNoControlFlowUpdate">
            <summary>
            Asserts that no control-flow update has happened and the predecessor
            and successor relations are still up to date.
            </summary>
            <remarks>
            This operation is only available in debug mode.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include the current debug information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.UpdateReturnType``1(``0)">
            <summary>
            Converts the return type.
            </summary>
            <typeparam name="TTypeConverter">The type converter.</typeparam>
            <param name="typeConverter">The type converter instance.</param>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.UpdateParameterTypes``1(``0)">
            <summary>
            Converts all parameter types.
            </summary>
            <typeparam name="TTypeConverter">The type converter.</typeparam>
            <param name="typeConverter">The type converter instance.</param>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateRebuilder``1(ILGPU.IR.Method.ParameterMapping,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Creates a new rebuilder that works on the given scope.
            </summary>
            <typeparam name="TMode">The rebuilder mode.</typeparam>
            <param name="parameterMapping">
            The target value of every parameter.
            </param>
            <param name="blocks">The block collection.</param>
            <returns>The created rebuilder.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateRebuilder``1(ILGPU.IR.Method.ParameterMapping,ILGPU.IR.Method.MethodMapping,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Creates a new rebuilder that works on the given scope.
            </summary>
            <typeparam name="TMode">The rebuilder mode.</typeparam>
            <param name="parameterMapping">
            The target value of every parameter.
            </param>
            <param name="methodMapping">The method mapping.</param>
            <param name="blocks">The block collection.</param>
            <returns>The created rebuilder.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.AddParameter(ILGPU.IR.Types.TypeNode)">
            <summary>
            Adds a new parameter to the encapsulated function.
            </summary>
            <param name="type">The parameter type.</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.AddParameter(ILGPU.IR.Types.TypeNode,System.String)">
            <summary>
            Adds a new parameter to the encapsulated function.
            </summary>
            <param name="type">The parameter type.</param>
            <param name="name">The parameter name (for debugging purposes).</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.InsertParameter(ILGPU.IR.Types.TypeNode)">
            <summary>
            Inserts a new parameter to the encapsulated function at the beginning.
            </summary>
            <param name="type">The parameter type.</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.InsertParameter(ILGPU.IR.Types.TypeNode,System.String)">
            <summary>
            Inserts a new parameter to the encapsulated function at the beginning.
            </summary>
            <param name="type">The parameter type.</param>
            <param name="name">The parameter name (for debugging purposes).</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateParam(ILGPU.IR.Types.TypeNode,System.String)">
            <summary>
            Creates a parameter with the given index and type information.
            </summary>
            <param name="type">The parameter type.</param>
            <param name="name">The parameter name (for debugging purposes).</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateBasicBlock(ILGPU.IR.Location)">
            <summary>
            Creates a new basic block.
            </summary>
            <param name="location">The current location.</param>
            <returns>The created basic block.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateBasicBlock(ILGPU.IR.Location,System.String)">
            <summary>
            Creates a new basic block.
            </summary>
            <param name="location">The current location.</param>
            <param name="name">The block name.</param>
            <returns>The created basic block.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.DeclareMethod(System.Reflection.MethodBase,System.Boolean@)">
            <summary>
            Declares a method.
            </summary>
            <param name="methodBase">The method base.</param>
            <param name="created">True, if the method has been created.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.DeclareMethod(ILGPU.IR.MethodDeclaration@,System.Boolean@)">
            <summary>
            Declares a method.
            </summary>
            <param name="declaration">The method declaration.</param>
            <param name="created">True, if the method has been created.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.ComputeBlockCollection``1">
            <summary>
            Computes an updated block collection using the latest terminator
            information.
            </summary>
            <typeparam name="TOrder">The collection order.</typeparam>
            <returns>The newly ordered collection.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the underlying method to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.EnsureUniqueExitBlock">
            <summary>
            Ensures that there is only one exit block.
            </summary>
            <remarks>
            CAUTION: This function changes the control flow.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.UpdateParameters">
            <summary>
            Updates all parameter bindings.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.UpdateControlFlow">
            <summary>
            Updates the whole control-flow information of all blocks.
            </summary>
            <remarks>
            CAUTION: Applying a control-flow update to all blocks will cause all
            block instances to be modified.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.ToString">
            <summary>
            Returns the string representation of the underlying function.
            </summary>
            <returns>The string representation of the underlying function.</returns>
        </member>
        <member name="T:ILGPU.IR.Method.ParameterCollection">
            <summary>
            Represents a readonly view on all parameters.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Method.ParameterCollection.Enumerator">
            <summary>
            Enumerates all actual (not replaced) parameters.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.Enumerator.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.Parameter})">
            <summary>
            Constructs a new parameter enumerator.
            </summary>
            <param name="arguments">The parent source array.</param>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterCollection.Enumerator.Current">
            <summary>
            Returns the current parameter.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.Parameter})">
            <summary>
            Constructs a new parameter collection.
            </summary>
            <param name="nodeReferences">The source parameters.</param>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterCollection.Count">
            <summary>
            Returns the number of attached parameters.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterCollection.Item(System.Int32)">
            <summary>
            Returns the i-th parameter.
            </summary>
            <param name="index">The parameter index.</param>
            <returns>The resolved parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.System#Collections#Generic#IEnumerable{ILGPU#IR#Values#Parameter}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.Method.ParameterMapping">
            <summary>
            Represents a parameter mapping.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterMapping.#ctor(ILGPU.IR.Method,System.ReadOnlySpan{ILGPU.IR.Values.ValueReference})">
            <summary>
            Constructs a new parameter mapping.
            </summary>
            <param name="method">The associated method.</param>
            <param name="arguments">The parameter arguments.</param>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterMapping.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterMapping.Arguments">
            <summary>
            Returns the associated arguments.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterMapping.Item(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the value that is assigned to the given parameter.
            </summary>
            <param name="parameter">The parameter to map to a value.</param>
            <returns>The mapped value.</returns>
        </member>
        <member name="T:ILGPU.IR.Method.MethodMapping">
            <summary>
            Represents a method mapping.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.MethodMapping.#ctor(System.Collections.Generic.Dictionary{ILGPU.IR.Method,ILGPU.IR.Method})">
            <summary>
            Constructs a new method mapping.
            </summary>
            <param name="methodMapping">The method mapping.</param>
        </member>
        <member name="P:ILGPU.IR.Method.MethodMapping.Item(ILGPU.IR.Method)">
            <summary>
            Resolve the source method to a remapped target method.
            </summary>
            <param name="source">The source method.</param>
            <returns>The resolved target method.</returns>
        </member>
        <member name="T:ILGPU.IR.Method.MethodLocation">
            <summary>
            Represents a location that is bound to a managed method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.MethodLocation.#ctor(System.Reflection.MethodBase)">
            <summary>
            Constructs a new method location.
            </summary>
            <param name="method">The target method (if any).</param>
        </member>
        <member name="P:ILGPU.IR.Method.MethodLocation.Method">
            <summary>
            Returns the managed method (if any).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.MethodLocation.FormatErrorMessage(System.String)">
            <summary>
            Tries to include managed method information if possible.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Method.Comparison">
            <summary>
            Compares two methods according to their id.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.ResolveMethodFlags(System.Reflection.MethodBase)">
            <summary>
            Resolves <see cref="T:ILGPU.IR.MethodFlags"/> that represents properties of the
            given method base.
            </summary>
            <param name="methodBase">The method base.</param>
            <returns>The resolved method flags.</returns>
        </member>
        <member name="F:ILGPU.IR.Method.transformationFlags">
            <summary>
            Stores internal transformation flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Method.blocks">
            <summary>
            Stores all blocks.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Method.parameters">
            <summary>
            Stores all parameters.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.#ctor(ILGPU.IR.IRContext,ILGPU.IR.MethodDeclaration@,ILGPU.IR.Location)">
            <summary>
            Creates a new method instance.
            </summary>
            <param name="context">The context this method belongs to.</param>
            <param name="declaration">The associated declaration.</param>
            <param name="location">The current location.</param>
        </member>
        <member name="P:ILGPU.IR.Method.Context">
            <summary>
            Returns the associated IR context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Name">
            <summary>
            Returns the associated method name.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Flags">
            <summary>
            Returns the associated method flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Declaration">
            <summary>
            Returns the associated method declaration.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Handle">
            <summary>
            Returns the associated method handle.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Source">
            <summary>
            Returns the original source method (may be null).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.HasSource">
            <summary>
            Returns true if the associated source method is not null.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.ReturnType">
            <summary>
            Returns the return-type of the method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.IsVoid">
            <summary>
            Returns true if the return type of the method is void.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.HasImplementation">
            <summary>
            Returns true if this method has an implementation
            (no intrinsic or external method).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.TransformationFlags">
            <summary>
            Returns the current transformation flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Parameters">
            <summary>
            Returns all attached parameters.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.NumParameters">
            <summary>
            Returns the number of attached parameters.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.EntryBlock">
            <summary>
            Returns the associated entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Blocks">
            <summary>
            Returns all attached blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Values">
            <summary>
            Returns all attached values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.MethodBuilder">
            <summary>
            Returns the current builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.FindExitBlock">
            <summary>
            Computes the exit block.
            </summary>
            <returns>The exit block.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.GC">
            <summary>
            Performs an internal GC run.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.CreateParameterMapping(System.ReadOnlySpan{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Creates a new parameter mapping.
            </summary>
            <param name="arguments">The argument values.</param>
            <returns>The created parameter mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Dump(System.IO.TextWriter)">
            <summary>
            Dumps this method to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.Method.SealParameters(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.Parameter})">
            <summary>
            Seals the current parameters.
            </summary>
            <param name="parameterArray">The new parameters.</param>
        </member>
        <member name="M:ILGPU.IR.Method.CreateBuilder">
            <summary>
            Creates a new builder for this method.
            </summary>
            <returns>The created builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.ReleaseBuilder(ILGPU.IR.Method.Builder)">
            <summary>
            Releases the given builder.
            </summary>
            <param name="oldBuilder">The builder to release.</param>
        </member>
        <member name="M:ILGPU.IR.Method.HasFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Returns true if this method has the given method flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, if this method has the given method flags.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.AddFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Adds the given flags to this method.
            </summary>
            <param name="flags">The flags to add.</param>
        </member>
        <member name="M:ILGPU.IR.Method.RemoveFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Removes the given flags from this method.
            </summary>
            <param name="flags">The flags to remove.</param>
        </member>
        <member name="M:ILGPU.IR.Method.HasTransformationFlags(ILGPU.IR.MethodTransformationFlags)">
            <summary>
            Returns true if this method has the given transformation flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, if this method has the given transformation flags.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.AddTransformationFlags(ILGPU.IR.MethodTransformationFlags)">
            <summary>
            Adds the given flags to this method.
            </summary>
            <param name="flags">The flags to add.</param>
        </member>
        <member name="M:ILGPU.IR.Method.RemoveTransformationFlags(ILGPU.IR.MethodTransformationFlags)">
            <summary>
            Removes the given flags from this method.
            </summary>
            <param name="flags">The flags to remove.</param>
        </member>
        <member name="M:ILGPU.IR.Method.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.IDumpable">
            <summary>
            A dumpable IR object for debugging purposes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IDumpable.Dump(System.IO.TextWriter)">
            <summary>
            Dumps this object to the given text writer.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Dumpable">
            <summary>
            Helper methods for <see cref="T:ILGPU.IR.IDumpable"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Dumpable.DumpToConsole(ILGPU.IR.IDumpable)">
            <summary>
            Dumps the IR object to the console output.
            </summary>
            <param name="dumpable">The IR object to dump.</param>
        </member>
        <member name="M:ILGPU.IR.Dumpable.DumpToError(ILGPU.IR.IDumpable)">
            <summary>
            Dumps the IR object to the console error output.
            </summary>
            <param name="dumpable">The IR object to dump.</param>
        </member>
        <member name="M:ILGPU.IR.Dumpable.DumpToFile(ILGPU.IR.IDumpable,System.String)">
            <summary>
            Dumps the IR object to a file.
            </summary>
            <param name="dumpable">The IR object to dump.</param>
            <param name="fileName">The target file name to write to.</param>
        </member>
        <member name="T:ILGPU.IR.ILocation">
            <summary>
            Represents an abstract location.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ILocation.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific location information.
            </summary>
            <param name="message">The source error message.</param>
            <returns>The formatted error message.</returns>
        </member>
        <member name="T:ILGPU.IR.Locations">
            <summary>
            Extension methods for <see cref="T:ILGPU.IR.ILocation"/> implementations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Locations.GetException(ILGPU.IR.ILocation,System.Exception)">
            <summary>
            Constructs a new exception of the given type based on the given
            message, the formatting arguments and the current sequence point.
            information.
            </summary>
            <param name="location">The current location.</param>
            <param name="exception">The inner exception.</param>
            <returns>
            A new <see cref="T:ILGPU.InternalCompilerException"/> with an inner exception of
            <paramref name="exception"/>. Includes detailed origin information about
            the current source location at which this exception has been created.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Locations.GetArgumentException(ILGPU.IR.ILocation,System.String)">
            <summary>
            Constructs a new <see cref="T:System.ArgumentOutOfRangeException"/> based on the given
            message, the formatting arguments and the current sequence point.
            </summary>
            <param name="location">The current location.</param>
            <param name="paramName">The parameter name.</param>
            <returns>
            A new <see cref="T:ILGPU.InternalCompilerException"/> with an inner exception of
            <see cref="T:System.ArgumentOutOfRangeException"/>.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Locations.GetArgumentNullException(ILGPU.IR.ILocation,System.String)">
            <summary>
            Constructs a new <see cref="T:System.ArgumentException"/> based on the given
            message, the formatting arguments and the current sequence point.
            </summary>
            <param name="location">The current location.</param>
            <param name="paramName">The parameter name.</param>
            <returns>
            A new <see cref="T:ILGPU.InternalCompilerException"/> with an inner exception of
            <see cref="T:System.ArgumentNullException"/>.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Locations.GetNotSupportedException(ILGPU.IR.ILocation,System.String,System.Object[])">
            <summary>
            Constructs a new <see cref="T:System.NotSupportedException"/> based on the given
            message, the formatting arguments and the current sequence point.
            </summary>
            <param name="location">The current location.</param>
            <param name="message">The main contents of the error message.</param>
            <param name="args">The formatting arguments.</param>
            <returns>
            A new <see cref="T:ILGPU.InternalCompilerException"/> with an inner exception of
            <see cref="T:System.NotSupportedException"/>.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Locations.GetInvalidOperationException(ILGPU.IR.ILocation)">
            <summary>
            Constructs a new <see cref="T:System.InvalidOperationException"/> that refers to an
            invalid compiler state.
            </summary>
            <param name="location">The current location.</param>
            <returns>
            A new <see cref="T:ILGPU.InternalCompilerException"/> with an inner exception of
            <see cref="T:System.InvalidOperationException"/>.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Locations.GetInvalidOperationException(ILGPU.IR.ILocation,System.String)">
            <summary>
            Constructs a new <see cref="T:System.InvalidOperationException"/> that refers to an
            invalid compiler state.
            </summary>
            <param name="location">The current location.</param>
            <param name="message">The main content of the error message.</param>
            <returns>
            A new <see cref="T:ILGPU.InternalCompilerException"/> with an inner exception of
            <see cref="T:System.InvalidOperationException"/>.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Locations.AssertNotNull``1(ILGPU.IR.ILocation,``0)">
            <summary>
            Ensures that a certain reference value is not null.
            </summary>
            <remarks>
            This assertion method implementation will not be present in release modes.
            </remarks>
            <param name="location">The current location.</param>
            <param name="value">The value to be not null.</param>
        </member>
        <member name="M:ILGPU.IR.Locations.Assert(ILGPU.IR.ILocation,System.Boolean)">
            <summary>
            Ensures a certain compiler-internal assertion to hold. In contrast to
            <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)"/>, this method creates an exception
            that is easy to capture and recognize in the scope of test suites.
            </summary>
            <remarks>
            This assertion method implementation will not be present in release modes.
            </remarks>
            <param name="location">The current location.</param>
            <param name="condition">The condition to hold.</param>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationMode">
            <summary>
            Represents the handler mode of a custom handler routine.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Intrinsics.IntrinsicImplementationMode.Redirect">
            <summary>
            Indicates whether the associated method should be replaced by a
            different method.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Intrinsics.IntrinsicImplementationMode.GenerateCode">
            <summary>
            Indicates whether the associated method has a custom code-generation
            module is invoked during code generation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementation">
            <summary>
            Represents an abstract intrinsic implementation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.#ctor(ILGPU.Backends.BackendType,System.Reflection.MethodInfo,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new implementation.
            </summary>
            <param name="backendType">The main backend type.</param>
            <param name="targetMethod">The associated target method.</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.#ctor(ILGPU.Backends.BackendType,System.Type,System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new implementation.
            </summary>
            <param name="backendType">The main backend type.</param>
            <param name="handlerType">The associated target handler type.</param>
            <param name="methodName">The target method name (or null).</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementation.BackendType">
            <summary>
            Returns the associated backend type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementation.Mode">
            <summary>
            Returns the associated code-generator mode.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementation.TargetMethod">
            <summary>
            Returns the user-defined target method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.CanHandle(ILGPU.Backends.Backend)">
            <summary>
            Determines whether the attribute is compatible with the given backend.
            </summary>
            <param name="backend">The current backend.</param>
            <returns>
            True, if the attribute is compatible with the given backend.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.CanHandleBackend(ILGPU.Backends.Backend)">
            <summary>
            Determines whether the attribute is compatible with the given backend.
            </summary>
            <param name="backend">The current backend.</param>
            <returns>
            True, if the attribute is compatible with the given backend.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.ResolveMapping``1">
            <summary>
            Resolves an intrinsic implementation for the current attribute.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <returns>The resolved intrinsic implementation.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationAttribute">
            <summary>
            Marks methods that rely on an intrinsic-implementation provider during backend
            specialization.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IIntrinsicImplementationManager">
            <summary>
            Represents an abstract intrinsic manager that caches intrinsic methods.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IIntrinsicImplementationManager.CreateProvider``1(ILGPU.Backends.Backend)">
            <summary>
            Creates a specialized and typed intrinsic provider for the given backend.
            </summary>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
            <param name="backend">The backend.</param>
            <returns>The created implementation provider.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationManager">
            <summary>
            Represents an intrinsic manager that caches intrinsic methods.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry">
            <summary>
            Represents a single entry that is associated with a matcher.
            It stores several possible intrinsic implementations for specific backends.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator">
            <summary>
            An enumerator to enumerate all implementations in the scope of an entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.#ctor(System.Collections.Generic.List{ILGPU.IR.Intrinsics.IntrinsicImplementation})">
            <summary>
            Constructs a new implementation enumerator.
            </summary>
            <param name="implementationSet">The implementations.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.Current">
            <summary>
            Returns the current implementation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Register(ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given implementation with the current entry.
            </summary>
            <param name="implementation">The implementation to register.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.GetEnumerator">
            <summary>
            Returns a new enumerator to iterate over all implementations.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.System#Collections#Generic#IEnumerable{ILGPU#IR#Intrinsics#IntrinsicImplementation}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.BackendContainer">
            <summary>
            Represents a mapping of matchers to backend-type specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.BackendContainer.Create">
            <summary>
            Creates a new backend container.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.BackendContainer.Item(ILGPU.IR.Intrinsics.IntrinsicMatcher.MatcherKind)">
            <summary>
            Returns the associated intrinsic matcher.
            </summary>
            <param name="kind">The matcher kind.</param>
            <returns>The resolved intrinsic matcher.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.BackendContainer.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0}[])">
            <summary>
            Transforms all internal entries using the transformation provided.
            </summary>
            <typeparam name="TOther">The other matcher type.</typeparam>
            <typeparam name="TTransformer">The transformer type to use.</typeparam>
            <param name="transformer">The transformer instance.</param>
            <param name="otherMatchers">The other matchers (target array).</param>
        </member>
        <member name="F:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.containers">
            <summary>
            Stores all intrinsic containers.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.#ctor">
            <summary>
            Constructs a new empty implementation manager.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.Item(ILGPU.Backends.BackendType)">
            <summary>
            Resolves the associated intrinsic container for the given backend type.
            </summary>
            <param name="backendType">The backend type.</param>
            <returns>The resolved intrinsic container.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ResolveMatcher``1(ILGPU.IR.Intrinsics.IntrinsicMatcher.MatcherKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Resolves an intrinsic matcher.
            </summary>
            <typeparam name="TMatcher">The matcher type.</typeparam>
            <param name="kind">The matcher kind.</param>
            <param name="implementation">The implementation to use.</param>
            <returns>The resolved matcher.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterMethod(System.Reflection.MethodInfo,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="method">The method information.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.CreateProvider``1(ILGPU.Backends.Backend)">
            <summary>
            Creates a specialized and typed intrinsic provider for the given backend.
            </summary>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
            <param name="backend">The backend.</param>
            <returns>The created implementation provider.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterDebug(ILGPU.IR.Values.DebugKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterBroadcast(ILGPU.IR.Values.BroadcastKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterBroadcast(ILGPU.IR.Values.BroadcastKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterPredicateBarrier(ILGPU.IR.Values.PredicateBarrierKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterPredicateBarrier(ILGPU.IR.Values.PredicateBarrierKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterWarpShuffle(ILGPU.IR.Values.ShuffleKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterWarpShuffle(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterSubWarpShuffle(ILGPU.IR.Values.ShuffleKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterSubWarpShuffle(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterUnaryArithmetic(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterUnaryArithmetic(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterBinaryArithmetic(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterBinaryArithmetic(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterTernaryArithmetic(ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterTernaryArithmetic(ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterGenericAtomic(ILGPU.IR.Values.AtomicKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterGenericAtomic(ILGPU.IR.Values.AtomicKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1">
            <summary>
            Represents an intrinsic provider that caches intrinsic remappings and
            implementations.
            </summary>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationTransformer">
            <summary>
            Represents an implementation transformer to convert high-level intrinsic
            values into instantiated intrinsic mappings.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationTransformer.Backend">
            <summary>
            Returns the associated backend.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationTransformer.Transform(ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry)">
            <summary cref="M:ILGPU.IR.Intrinsics.IIntrinsicImplementationTransformer`2.Transform(`0)"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationTransformer.CheckImplementations(ILGPU.Backends.Backend,ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry,ILGPU.IR.Intrinsics.IntrinsicImplementation@)">
            <summary>
            Checks the given intrinsic implementations.
            </summary>
            <param name="backend">The current backend.</param>
            <param name="implementations">
            The available intrinsic implementations.
            </param>
            <param name="mainImplementation">
            The resolved main implementation.
            </param>
            <returns>
            True, if at least a single implementation could be resolved.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry">
            <summary>
            Represents a mapping entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry.#ctor(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey,ILGPU.Frontend.CodeGenerationResult)">
            <summary>
            Constructs a new mapping entry.
            </summary>
            <param name="mapping">The parent mapping.</param>
            <param name="mappingKey">The current mapping key.</param>
            <param name="codeGenerationResult">
            The intermediate code-generation result.
            </param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry.Mapping">
            <summary>
            The associated mapping.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry.MappingKey">
            <summary>
            The associated method mapping key.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry.CodeGenerationResult">
            <summary>
            The code-generation result from the IL frontend.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry.Apply">
            <summary>
            Applies the code-generation result to the underlying mapping.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase">
            <summary>
            Represents a code generation phase for intrinsic methods.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase.Provider">
            <summary>
            Returns the associated provider.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase.TryRegisterIntrinsic``1(``0,ILGPU.IR.Intrinsics.IntrinsicMapping{`0})">
            <summary>
            Internal method to register an intrinsic.
            </summary>
            <typeparam name="TResolver">
            The generic argument resolver type.
            </typeparam>
            <param name="resolver">The argument resolver.</param>
            <param name="mapping">The current mapping instance.</param>
            <returns>True, if the intrinsic could be registered.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase.RegisterIntrinsic(ILGPU.IR.Method)">
            <summary>
            Tries to register an intrinsic for the given method.
            </summary>
            <param name="method">The method to register.</param>
            <returns>True, if an intrinsic mapping could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase.RegisterIntrinsic(ILGPU.IR.Value)">
            <summary>
            Tries to register an intrinsic for the given value.
            </summary>
            <param name="value">The value to register.</param>
            <returns>True, if an intrinsic mapping could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase.Dispose">
            <summary>
            Ends the current specialization phase.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1">
            <summary>
            Represents an abstract data provider. It can be used in combination
            with the <see cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetData``2(ILGPU.IR.Value,``0@)"/> method.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.Mode">
            <summary>
            Returns the compatible implementation mode.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.GetData``1(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},``0)">
            <summary>
            Gets data from the given intrinsic mapping.
            </summary>
            <typeparam name="TResolver">The resolver type.</typeparam>
            <param name="mapping">The mapping instance.</param>
            <param name="resolver">The resolver instance.</param>
            <returns>The resolved result.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationProvider">
            <summary>
            Resolves IR implementations from mappings.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationProvider.Mode">
            <summary cref="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.Mode"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationProvider.GetData``1(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},``0)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.GetData``1(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},``0)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.CodeGeneratorProvider">
            <summary>
            Resolves code generators from mappings.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.CodeGeneratorProvider.Mode">
            <summary cref="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.Mode"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.CodeGeneratorProvider.GetData``1(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},``0)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.GetData``1(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},``0)"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.#ctor(ILGPU.IR.Intrinsics.IntrinsicImplementationManager.BackendContainer,ILGPU.Backends.Backend)">
            <summary>
            Constructs a new intrinsic implementation mapping.
            </summary>
            <param name="container">The source intrinsic container.</param>
            <param name="backend">The associated backend.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.BeginIRSpecialization">
            <summary>
            Begins a new specialization phase.
            </summary>
            <returns>The specialization context.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetMapping(ILGPU.IR.Method,ILGPU.IR.Intrinsics.IntrinsicMapping{`0}@)">
            <summary>
            Resolves the intrinsic mapping for the given method.
            </summary>
            <param name="method">The method to resolve an implementation for.</param>
            <param name="mapping">The resolved mapping.</param>
            <returns>True, if the given method could be resolved to a mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetMapping(ILGPU.IR.Method,System.Reflection.MethodInfo@,ILGPU.IR.Intrinsics.IntrinsicMapping{`0}@)">
            <summary>
            Resolves the intrinsic mapping for the given method.
            </summary>
            <param name="method">The method to resolve an implementation for.</param>
            <param name="methodInfo">
            The resolved method information object (if any).
            </param>
            <param name="mapping">The resolved mapping.</param>
            <returns>True, if the given method could be resolved to a mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetMapping(System.Reflection.MethodInfo,ILGPU.IR.Intrinsics.IntrinsicMapping{`0}@)">
            <summary>
            Resolves the intrinsic mapping for the given method.
            </summary>
            <param name="method">The method to resolve an implementation for.</param>
            <param name="mapping">The resolved mapping.</param>
            <returns>True, if the given method could be resolved to a mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetMapping(ILGPU.IR.Value,ILGPU.IR.Intrinsics.IntrinsicMapping{`0}@)">
            <summary>
            Resolves the intrinsic mapping for the given value kind.
            </summary>
            <param name="value">The value to resolve an implementation for.</param>
            <param name="mapping">The resolved mapping.</param>
            <returns>True, if the given method could be resolved to a mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetData``2(ILGPU.IR.Value,``0@)">
            <summary>
            Tries to resolve data from the given value.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <typeparam name="TDataProvider">The resolver type.</typeparam>
            <param name="value">The value to resolve.</param>
            <param name="result">The resulting value.</param>
            <returns>
            True, if the value could be resolved to an intrinsic value.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetImplementation(ILGPU.IR.Value,ILGPU.IR.Method@)">
            <summary>
            Resolves the intrinsic implementation (if any) for the given value kind.
            </summary>
            <param name="value">The value to resolve an implementation for.</param>
            <param name="irImplementation">The resolved IR implementation.</param>
            <returns>
            True, if the given method could be resolved to an IR implementation.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetCodeGenerator(ILGPU.IR.Value,`0@)">
            <summary>
            Resolves the intrinsic code generator (if any) for the given value kind.
            </summary>
            <param name="value">The value to resolve an implementation for.</param>
            <param name="codeGenerator">The resolved code generator.</param>
            <returns>
            True, if the given method could be resolved to a code generator.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>This method is not thread-safe.</remarks>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping">
            <summary>
            Represents an abstract intrinsic implementation mapping.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping.IGenericArgumentResolver">
            <summary>
            Resolves generic arguments for redirection/code-generation purposes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.IGenericArgumentResolver.ResolveGenericArguments">
            <summary>
            Resolves generic arguments for redirection/code-generation purposes.
            </summary>
            <returns>The resolved generic arguments.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping.MethodInfoArgumentResolver">
            <summary>
            Resolves generic arguments from <see cref="T:System.Reflection.MethodInfo"/>
            objects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MethodInfoArgumentResolver.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Constructs a new method-info argument resolver.
            </summary>
            <param name="methodInfo">The associated method information.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.MethodInfoArgumentResolver.MethodInfo">
            <summary>
            Returns the associated method information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MethodInfoArgumentResolver.ResolveGenericArguments">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMapping.IGenericArgumentResolver.ResolveGenericArguments"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping.ValueArgumentResolver">
            <summary>
            Resolves generic arguments from <see cref="P:ILGPU.IR.Intrinsics.IntrinsicMapping.ValueArgumentResolver.Value"/> objects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.ValueArgumentResolver.#ctor(ILGPU.IR.Value)">
            <summary>
            Constructs a new value argument resolver.
            </summary>
            <param name="value">The associated value.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.ValueArgumentResolver.Value">
            <summary>
            Returns the associated value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.ValueArgumentResolver.ResolveGenericArguments">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMapping.IGenericArgumentResolver.ResolveGenericArguments"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey">
            <summary>
            Represents a cached mapping key.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.#ctor(System.Type[])">
            <summary>
            Constructs a new mapping key.
            </summary>
            <param name="arguments">The type arguments.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.Length">
            <summary>
            Returns the number of mapped generic arguments.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.Equals(ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey)">
            <summary>
            Returns true if the given object is equal to this mapping key.
            </summary>
            <param name="other">The other object.</param>
            <returns>
            True, if the given object is equal to this mapping key.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this mapping key.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            True, if the given object is equal to this mapping key.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.GetHashCode">
            <summary>
            Returns the hash code of this instance.
            </summary>
            <returns>The hash code of this instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.ToString">
            <summary>
            Returns the string representation of this mapping key.
            </summary>
            <returns>The string representation of this mapping key.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.op_Equality(ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey,ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey)">
            <summary>
            Returns true if both mapping keys are identical.
            </summary>
            <param name="first">The first mapping key.</param>
            <param name="second">The second mapping key.</param>
            <returns>True, if both mapping keys are identical.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.op_Inequality(ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey,ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey)">
            <summary>
            Returns true if both mapping keys are not identical.
            </summary>
            <param name="first">The first mapping key.</param>
            <param name="second">The second mapping key.</param>
            <returns>True, if both mapping keys are not identical.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.#ctor(ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Constructs a new intrinsic implementation.
            </summary>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.Implementation">
            <summary>
            Returns the associated intrinsic implementation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.BackendType">
            <summary>
            Returns the associated backend type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.Mode">
            <summary>
            Returns the associated implementation mode.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.TargetMethod">
            <summary>
            Returns the associated target method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.ResolveTarget``1(``0,System.Type[]@)">
            <summary>
            Resolves the target method (if any).
            </summary>
            <typeparam name="TResolver">The generic argument resolver type.</typeparam>
            <param name="resolver">The argument resolver.</param>
            <param name="genericArguments">
            The resolved generic arguments (if any).
            </param>
            <returns>The resolved target method (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.ResolveRedirect``1(``0,ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey@)">
            <summary>
            Resolves the redirection method (if any).
            </summary>
            <typeparam name="TResolver">The generic argument resolver type.</typeparam>
            <param name="resolver">The argument resolver.</param>
            <param name="genericMapping">The resolved generic mapping key.</param>
            <returns>The resolved redirection method (if any).</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping`1">
            <summary>
            Represents a single intrinsic implementation mapping.
            </summary>
            <typeparam name="TDelegate">The implementation delegate type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping`1.#ctor(ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Constructs a new intrinsic implementation.
            </summary>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping`1.CodeGenerator">
            <summary>
            Returns the associated default code generator (if any).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping`1.ProvideImplementation(ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey,ILGPU.IR.Method)">
            <summary>
            Provides the given implementation.
            </summary>
            <param name="genericMapping">The generic mapping key.</param>
            <param name="implementation">The implementation to provide.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping`1.ResolveImplementation``1(``0)">
            <summary>
            Resolves the redirection method (if any).
            </summary>
            <typeparam name="TResolver">The generic argument resolver type.</typeparam>
            <param name="resolver">The argument resolver.</param>
            <returns>The resolved redirection method (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping`1.ResolveCodeGenerator``1(``0)">
            <summary>
            Resolves the code-generation method (if any).
            </summary>
            <typeparam name="TResolver">The generic argument resolver type.</typeparam>
            <param name="resolver">The argument resolver.</param>
            <returns>The resolved code-generation method (if any).</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMatcher">
            <summary>
            Matches whether intrinsic implementations are compatible
            to internal requirements.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher.#ctor">
            <summary>
            Constructs a new intrinsic matcher.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMatcher.MatcherKind">
            <summary>
            Represents a matcher kind.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher.CreateMatchers``1">
            <summary>
            Creates a new set of intrinsic matchers.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IIntrinsicImplementation">
            <summary>
            Defines an abstract intrinsic implementation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IIntrinsicImplementationTransformer`2">
            <summary>
            Transforms a single intrinsic implementation into another one.
            </summary>
            <typeparam name="TFirst">The first implementation type.</typeparam>
            <typeparam name="TSecond">The second implementation type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IIntrinsicImplementationTransformer`2.Transform(`0)">
            <summary>
            Transforms the given implementation into another one.
            </summary>
            <param name="implementation">The implementation to transform.</param>
            <returns>The transformed implementation.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMatcher`1">
            <summary>
            Matches whether intrinsic implementations are compatible
            to internal requirements.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.#ctor">
            <summary>
            Constructs a new intrinsic matcher.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})">
            <summary>
            Transforms the currently stored intrinsic implementations.
            </summary>
            <typeparam name="TOther">The other matcher value type.</typeparam>
            <typeparam name="TTransformer">The implementation transformer.</typeparam>
            <param name="transformer">The transformer to use.</param>
            <param name="other">The other matcher.</param>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMatcher`2">
            <summary>
            Matches whether intrinsic implementations are compatible
            to internal requirements.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
            <typeparam name="TMatchedValue">The value type to be matched.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.#ctor">
            <summary>
            Constructs a new intrinsic matcher.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="value">The value instance.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMethodMatcher`1">
            <summary>
            Represents an intrinsic matcher that matches managed methods.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMethodMatcher`1.#ctor">
            <summary>
            Constructs a new intrinsic matcher.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMethodMatcher`1.Register(System.Reflection.MethodInfo,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="value">The method information.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMethodMatcher`1.TryGetImplementation(System.Reflection.MethodInfo,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMethodMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.BaseIntrinsicValueMatcher`1">
            <summary>
            Represents an intrinsic matcher that matches values.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BaseIntrinsicValueMatcher`1.#ctor(ILGPU.IR.ValueKind)">
            <summary>
            Constructs a new abstract intrinsic value matcher.
            </summary>
            <param name="valueKind">The value kind.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.BaseIntrinsicValueMatcher`1.ValueKind">
            <summary>
            Returns the target value kind.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`1">
            <summary>
            Represents an intrinsic matcher that matches values.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`1.#ctor(ILGPU.IR.ValueKind)">
            <summary>
            Constructs a new abstract intrinsic value matcher.
            </summary>
            <param name="valueKind">The value kind.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`1.Implementation">
            <summary>
            Returns the associated implementation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`1.Register(`0)">
            <summary>
            Registers the given implementation.
            </summary>
            <param name="implementation">The implementation to register.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`2">
            <summary>
            Represents an intrinsic matcher that matches values.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
            <typeparam name="TValueKind">The type of the value kind.</typeparam>
        </member>
        <member name="F:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`2.entries">
            <summary>
            All value implementation entries.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`2.#ctor(ILGPU.IR.ValueKind)">
            <summary>
            Constructs a new abstract intrinsic value matcher.
            </summary>
            <param name="valueKind">The value kind.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`2.Item(System.Int32)">
            <summary>
            Returns a reference to the i-th element.
            </summary>
            <param name="index">The element index.</param>
            <returns>The resolved reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`2.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.TypedIntrinsicValueMatcher`2">
            <summary>
            Represents an intrinsic matcher that matches values.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
            <typeparam name="TValueKind">The type of the value kind.</typeparam>
        </member>
        <member name="F:ILGPU.IR.Intrinsics.TypedIntrinsicValueMatcher`2.entries">
            <summary>
            All value implementation entries.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.TypedIntrinsicValueMatcher`2.#ctor(ILGPU.IR.ValueKind)">
            <summary>
            Constructs a new abstract intrinsic value matcher.
            </summary>
            <param name="valueKind">The value kind.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.TypedIntrinsicValueMatcher`2.Item(System.Int32,ILGPU.BasicValueType)">
            <summary>
            Returns a reference to the i-th element.
            </summary>
            <param name="index">The element index.</param>
            <param name="basicValueType">The basic-value type.</param>
            <returns>The resolved reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.TypedIntrinsicValueMatcher`2.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.DebugMatcher`1">
            <summary>
            Matches Debug values.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.DebugMatcher`1.#ctor">
            <summary>
            Constructs a new matcher.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.DebugMatcher`1.Register(ILGPU.IR.Values.DebugKind,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.DebugMatcher`1.TryGetImplementation(ILGPU.IR.Values.DebugKind,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.DebugMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.BroadcastMatcher`1">
            <summary>
            Matches typed Broadcast values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BroadcastMatcher`1.Register(ILGPU.IR.Values.BroadcastKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BroadcastMatcher`1.TryGetImplementation(ILGPU.IR.Values.BroadcastKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BroadcastMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.PredicateBarrierMatcher`1">
            <summary>
            Matches typed PredicateBarrier values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.PredicateBarrierMatcher`1.Register(ILGPU.IR.Values.PredicateBarrierKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.PredicateBarrierMatcher`1.TryGetImplementation(ILGPU.IR.Values.PredicateBarrierKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.PredicateBarrierMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.WarpShuffleMatcher`1">
            <summary>
            Matches typed WarpShuffle values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.WarpShuffleMatcher`1.Register(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.WarpShuffleMatcher`1.TryGetImplementation(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.WarpShuffleMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.SubWarpShuffleMatcher`1">
            <summary>
            Matches typed SubWarpShuffle values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.SubWarpShuffleMatcher`1.Register(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.SubWarpShuffleMatcher`1.TryGetImplementation(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.SubWarpShuffleMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.UnaryArithmeticMatcher`1">
            <summary>
            Matches typed UnaryArithmetic values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.UnaryArithmeticMatcher`1.Register(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.UnaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.UnaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.BinaryArithmeticMatcher`1">
            <summary>
            Matches typed BinaryArithmetic values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BinaryArithmeticMatcher`1.Register(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BinaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BinaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.TernaryArithmeticMatcher`1">
            <summary>
            Matches typed TernaryArithmetic values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.TernaryArithmeticMatcher`1.Register(ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.TernaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.TernaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.GenericAtomicMatcher`1">
            <summary>
            Matches typed GenericAtomic values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.GenericAtomicMatcher`1.Register(ILGPU.IR.Values.AtomicKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.GenericAtomicMatcher`1.TryGetImplementation(ILGPU.IR.Values.AtomicKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.GenericAtomicMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.IRContext">
            <summary>
            Represents an IR context.
            </summary>
        </member>
        <member name="T:ILGPU.IR.IRContext.NoHandler">
            <summary>
            Represents no transformer handler.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.NoHandler.BeforeTransformation(ILGPU.IR.IRContext,ILGPU.IR.Transformations.Transformation)">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.NoHandler.AfterTransformation(ILGPU.IR.IRContext,ILGPU.IR.Transformations.Transformation)">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new IR context.
            </summary>
            <param name="context">The associated main context.</param>
        </member>
        <member name="P:ILGPU.IR.IRContext.Context">
            <summary>
            Returns the main ILGPU context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRContext.Verifier">
            <summary>
            Returns the current verifier instance.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRContext.TypeContext">
            <summary>
            Returns the associated type context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRContext.UndefinedValue">
            <summary>
            Returns an undefined value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRContext.Flags">
            <summary>
            Returns the associated flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRContext.UnsafeMethods">
            <summary>
            Internal (unsafe) access to all top-level functions.
            </summary>
            <remarks>
            The resulting collection is not thread safe in terms
            of parallel operations on this context.
            </remarks>
        </member>
        <member name="P:ILGPU.IR.IRContext.Methods">
            <summary>
            Returns all top-level functions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.HasFlags(ILGPU.ContextFlags)">
            <summary>
            Returns true if the current context has the given flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, if the current context has the given flags.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.GetUnsafeMethodCollection``1(``0)">
            <summary>
            Returns an unsafe (not thread-safe) function view.
            </summary>
            <typeparam name="TPredicate">The type of the predicate to apply.</typeparam>
            <param name="predicate">The predicate to apply.</param>
            <returns>The resolved function view.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.GetMethodCollection``1(``0)">
            <summary>
            Returns a thread-safe function view.
            </summary>
            <typeparam name="TPredicate">The type of the predicate to apply.</typeparam>
            <param name="predicate">The predicate to apply.</param>
            <returns>The resolved function view.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.TryGetMethodHandle(System.Reflection.MethodBase,ILGPU.IR.MethodHandle@)">
            <summary>
            Tries to resolve the given managed method to function reference.
            </summary>
            <param name="method">The method to resolve.</param>
            <param name="handle">The resolved function reference (if any).</param>
            <returns>True, if the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.TryGetMethod(ILGPU.IR.MethodHandle,ILGPU.IR.Method@)">
            <summary>
            Tries to resolve the given handle to a top-level function.
            </summary>
            <param name="handle">The function handle to resolve.</param>
            <param name="function">The resolved function (if any).</param>
            <returns>True, if the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.TryGetMethod(System.Reflection.MethodBase,ILGPU.IR.Method@)">
            <summary>
            Tries to resolve the given method to a top-level function.
            </summary>
            <param name="method">The method to resolve.</param>
            <param name="function">The resolved function (if any).</param>
            <returns>True, if the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.GetMethod(ILGPU.IR.MethodHandle)">
            <summary>
            Resolves the given method to a top-level function.
            </summary>
            <param name="method">The method to resolve.</param>
            <returns>The resolved function.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.Declare(System.Reflection.MethodBase,System.Boolean@)">
            <summary>
            Declares a method.
            </summary>
            <param name="methodBase">The method to declare.</param>
            <param name="created">True, if the method has been created.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.Declare(ILGPU.IR.MethodDeclaration@,System.Boolean@)">
            <summary>
            Declares a method.
            </summary>
            <param name="declaration">The method declaration.</param>
            <param name="created">True, if the method has been created.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.DeclareNewMethod_Sync(ILGPU.IR.MethodDeclaration,ILGPU.IR.MethodHandle@)">
            <summary>
            Declares a new method.
            </summary>
            <param name="declaration">The method declaration to use.</param>
            <param name="handle">The created handle.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.SealMethodWithoutImplementation(ILGPU.IR.Method)">
            <summary>
            Seals intrinsic or external methods.
            </summary>
            <param name="method">The method to seal.</param>
        </member>
        <member name="M:ILGPU.IR.IRContext.Import(ILGPU.IR.Method)">
            <summary>
            Imports the given method (and all dependencies) into this context.
            </summary>
            <param name="source">The method to import.</param>
            <returns>The imported method.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.ImportInternal(ILGPU.IR.Method)">
            <summary>
            Imports the given method (and all dependencies) into this context.
            </summary>
            <param name="source">The method to import.</param>
            <returns>The imported method.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.Optimize">
            <summary>
            Applies all default optimization transformations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.Transform(ILGPU.IR.Transformations.Transformer@)">
            <summary>
            Applies the given transformer to the current context.
            </summary>
            <param name="transformer">The target transformer.</param>
        </member>
        <member name="M:ILGPU.IR.IRContext.Transform``1(ILGPU.IR.Transformations.Transformer@,``0)">
            <summary>
            Applies the given transformer to the current context.
            </summary>
            <typeparam name="THandler">The handler type.</typeparam>
            <param name="transformer">The target transformer.</param>
            <param name="handler">The target handler.</param>
        </member>
        <member name="M:ILGPU.IR.IRContext.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the IR context to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.IRContext.GC">
            <summary>
            Rebuilds all nodes and clears up the IR.
            </summary>
            <remarks>
            This method must not be invoked in the context of other
            parallel operations using this context.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.IRContext.Clear">
            <summary>
            Clears cached IR nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears cached IR nodes.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.IR.IRContext.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="P:ILGPU.IR.IRContext.VoidType">
            <summary>
            Returns the void type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRContext.StringType">
            <summary>
            Returns the memory type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRContext.PaddingType">
            <summary>
            Returns the padding type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRContext.HandleType">
            <summary>
            Returns the runtime handle type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.GetPrimitiveType(ILGPU.BasicValueType)">
            <summary>
            Resolves the primitive type that corresponds to the given
            <see cref="T:ILGPU.BasicValueType"/>.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The created primitive type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.GetIndexType(System.Int32)">
            <summary>
            Creates an intrinsic index type.
            </summary>
            <param name="dimension">The dimension of the index type.</param>
            <returns>The created index type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreatePointerType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a pointer type.
            </summary>
            <param name="elementType">The pointer element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created pointer type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreateViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a view type.
            </summary>
            <param name="elementType">The view element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreateArrayType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new array type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="dimension">The array dimension.</param>
            <returns>The created array type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreateStructureType(System.Int32)">
            <summary>
            Creates a new structure type builder with the given capacity.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <returns>The created structure builder.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreateType(System.Type)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreateType(System.Type,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <param name="addressSpace">The address space for pointer types.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.SpecializeAddressSpaceType(ILGPU.IR.Types.AddressSpaceType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Specializes the address space of the given <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.
            </summary>
            <param name="addressSpaceType">The source type.</param>
            <param name="addressSpace">The new address space.</param>
            <returns>The created specialized <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.TrySpecializeAddressSpaceType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Types.TypeNode@)">
            <summary>
            Tries to specialize a view or a pointer address space.
            </summary>
            <param name="type">The pointer or view type.</param>
            <param name="addressSpace">The target address space.</param>
            <param name="specializedType">The specialized type.</param>
            <returns>True, if the type could be specialized.</returns>
        </member>
        <member name="T:ILGPU.IR.Location">
            <summary>
            An abstract source location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Location.Unknown">
            <summary>
            Represents an unknown location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Location.Nowhere">
            <summary>
            Represents no location.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Location.UnknownLocation">
            <summary>
            An unknown location implementation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Location.UnknownLocation.FormatErrorMessage(System.String)">
            <summary>
            Returns the original message.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Location.NoLocation">
            <summary>
            A no location implementation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Location.NoLocation.FormatErrorMessage(System.String)">
            <summary>
            Returns the original message.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Location.Merge(ILGPU.IR.Location,ILGPU.IR.Location)">
            <summary>
            Merges two locations into one.
            </summary>
            <param name="start">The start location.</param>
            <param name="end">The end location.</param>
            <returns>The merged location.</returns>
        </member>
        <member name="P:ILGPU.IR.Location.IsKnown">
            <summary>
            Returns true if this location is a known location.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Location.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific location information.
            </summary>
            <param name="message">The source error message.</param>
            <returns>The formatted error message.</returns>
        </member>
        <member name="T:ILGPU.IR.FileLocation">
            <summary>
            A location that is based on file information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.FileLocation.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new file location.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="startColumn">The start column.</param>
            <param name="endColumn">The end column.</param>
            <param name="startLine">The start line.</param>
            <param name="endLine">The end line.</param>
        </member>
        <member name="P:ILGPU.IR.FileLocation.FileName">
            <summary>
            Return the associated file name.
            </summary>
        </member>
        <member name="P:ILGPU.IR.FileLocation.StartColumn">
            <summary>
            Returns the start column.
            </summary>
        </member>
        <member name="P:ILGPU.IR.FileLocation.EndColumn">
            <summary>
            Returns the end column.
            </summary>
        </member>
        <member name="P:ILGPU.IR.FileLocation.StartLine">
            <summary>
            Returns the start line.
            </summary>
        </member>
        <member name="P:ILGPU.IR.FileLocation.EndLine">
            <summary>
            Returns the end line.
            </summary>
        </member>
        <member name="M:ILGPU.IR.FileLocation.FormatErrorMessage(System.String)">
            <summary>
            Formats the given message to include detailed file location information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.FileLocation.Merge(ILGPU.IR.FileLocation)">
            <summary>
            Merges this location with the other one.
            </summary>
            <param name="other">The other one to merge with.</param>
            <returns>The merged location.</returns>
        </member>
        <member name="M:ILGPU.IR.FileLocation.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current location.
            </summary>
            <param name="obj">The other location.</param>
            <returns>
            True, if the given object is equal to the current location.
            </returns>
        </member>
        <member name="M:ILGPU.IR.FileLocation.GetHashCode">
            <summary>
            Returns the hash code of this sequence point.
            </summary>
            <returns>The hash code of this sequence point.</returns>
        </member>
        <member name="M:ILGPU.IR.FileLocation.ToString">
            <summary>
            Returns the location information of this sequence point.
            </summary>
            <returns>
            The location information string that represents this sequence point.
            </returns>
        </member>
        <member name="T:ILGPU.IR.MethodFlags">
            <summary>
            Represents custom method flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodFlags.None">
            <summary>
            No flags (default).
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodFlags.Inline">
            <summary>
            This method should be inlined.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodFlags.External">
            <summary>
            An external method declaration (without an implementation).
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodFlags.Intrinsic">
            <summary>
            An intrinsic method that requires a backend-specific implementation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodFlags.EntryPoint">
            <summary>
            Marks entry-point methods.
            </summary>
        </member>
        <member name="T:ILGPU.IR.MethodTransformationFlags">
            <summary>
            Represents transformation flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodTransformationFlags.None">
            <summary>
            No flags (default).
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodTransformationFlags.Dirty">
            <summary>
            This method has been modified since the last GC.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodTransformationFlags.Transformed">
            <summary>
            This method has been transformed and does not require further
            transformation passes.
            </summary>
        </member>
        <member name="T:ILGPU.IR.IMethodCollectionPredicate">
            <summary>
            Represents a predicate on a function.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IMethodCollectionPredicate.Match(ILGPU.IR.Method)">
            <summary>
            Returns true if this predicate matches the given function.
            </summary>
            <param name="method">The function to test.</param>
            <returns>True, if this predicate matches the given function.</returns>
        </member>
        <member name="T:ILGPU.IR.IMethodCollection">
            <summary>
            Represents an abstract function view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IMethodCollection.Context">
            <summary>
            Returns the associated IR context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IMethodCollection.TotalNumMethods">
            <summary>
            Returns the total number of functions without applying the predicate.
            </summary>
        </member>
        <member name="T:ILGPU.IR.IMethodCollection`1">
            <summary>
            Represents an abstract function view using a predicate.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
        </member>
        <member name="P:ILGPU.IR.IMethodCollection`1.Predicate">
            <summary>
            Returns the associated predicate.
            </summary>
        </member>
        <member name="T:ILGPU.IR.MethodCollections">
            <summary>
            Represents useful extensions for function views.
            </summary>
        </member>
        <member name="T:ILGPU.IR.MethodCollections.AllMethods">
            <summary>
            Represents a function predicate that matches all functions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollections.AllMethods.Match(ILGPU.IR.Method)">
            <summary cref="M:ILGPU.IR.IMethodCollectionPredicate.Match(ILGPU.IR.Method)"/>
        </member>
        <member name="T:ILGPU.IR.MethodCollections.NotTransformed">
            <summary>
            Represents a function predicate that matches all functions that have not
            been transformed yet.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollections.NotTransformed.Match(ILGPU.IR.Method)">
            <summary cref="M:ILGPU.IR.IMethodCollectionPredicate.Match(ILGPU.IR.Method)"/>
        </member>
        <member name="T:ILGPU.IR.MethodCollections.Dirty">
            <summary>
            Represents a function predicate that matches all dirty functions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollections.Dirty.Match(ILGPU.IR.Method)">
            <summary cref="M:ILGPU.IR.IMethodCollectionPredicate.Match(ILGPU.IR.Method)"/>
        </member>
        <member name="T:ILGPU.IR.UnsafeMethodCollection`1">
            <summary>
            Represents an unsafe function view.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.UnsafeMethodCollection`1.Enumerator">
            <summary>
            The internal enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.UnsafeMethodCollection`1.Enumerator.#ctor(ILGPU.IR.MethodMapping{ILGPU.IR.Method}.ReadOnlyCollection,`0)">
            <summary>
            Constructs a new internal enumerator.
            </summary>
            <param name="collection">The parent collection.</param>
            <param name="currentPredicate">The view predicate.</param>
        </member>
        <member name="P:ILGPU.IR.UnsafeMethodCollection`1.Enumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.IR.UnsafeMethodCollection`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.UnsafeMethodCollection`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.UnsafeMethodCollection`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.UnsafeMethodCollection`1.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:ILGPU.IR.UnsafeMethodCollection`1.Context">
            <summary>
            Returns the associated IR context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.UnsafeMethodCollection`1.Collection">
            <summary>
            Returns the associated function collection.
            </summary>
        </member>
        <member name="P:ILGPU.IR.UnsafeMethodCollection`1.Predicate">
            <summary>
            Returns the associated predicate.
            </summary>
        </member>
        <member name="P:ILGPU.IR.UnsafeMethodCollection`1.TotalNumMethods">
            <summary>
            Returns the total number of functions without applying the predicate.
            </summary>
        </member>
        <member name="P:ILGPU.IR.UnsafeMethodCollection`1.System#Collections#Generic#IReadOnlyCollection{ILGPU#IR#Method}#Count">
            <summary cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count"/>
        </member>
        <member name="M:ILGPU.IR.UnsafeMethodCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all stored values.
            </summary>
            <returns>An enumerator that enumerates all stored values.</returns>
        </member>
        <member name="M:ILGPU.IR.UnsafeMethodCollection`1.System#Collections#Generic#IEnumerable{ILGPU#IR#Method}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.UnsafeMethodCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.MethodCollection`1">
            <summary>
            Represents a thread-safe function view.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.MethodCollection`1.Enumerator">
            <summary>
            The internal enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollection`1.Enumerator.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Method})">
            <summary>
            Constructs a new internal enumerator.
            </summary>
            <param name="collection">The parent collection.</param>
        </member>
        <member name="P:ILGPU.IR.MethodCollection`1.Enumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.IR.MethodCollection`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.MethodCollection`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.MethodCollection`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.MethodCollection`1.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:ILGPU.IR.MethodCollection`1.Context">
            <summary>
            Returns the associated IR context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodCollection`1.Collection">
            <summary>
            Returns the associated function collection.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodCollection`1.Predicate">
            <summary>
            Returns the associated predicate.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodCollection`1.TotalNumMethods">
            <summary>
            Returns the total number of functions without applying the predicate.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodCollection`1.System#Collections#Generic#IReadOnlyCollection{ILGPU#IR#Method}#Count">
            <summary cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count"/>
        </member>
        <member name="M:ILGPU.IR.MethodCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all stored values.
            </summary>
            <returns>An enumerator that enumerates all stored values.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodCollection`1.System#Collections#Generic#IEnumerable{ILGPU#IR#Method}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.MethodCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.MethodHandle">
            <summary>
            Represents a method handle to an <see cref="T:ILGPU.IR.Method"/>
            that is valid across transformations.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodHandle.Empty">
            <summary>
            An empty method handle.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.Deserialize(System.String)">
            <summary>
            Reconstructs a method handle from a serialization string.
            </summary>
            <param name="serializationString">The handle serialization string.</param>
            <returns>The deserialized method handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.Create(System.String)">
            <summary>
            Creates an empty named method handle.
            </summary>
            <param name="name">The name of the method reference.</param>
            <returns>The created method handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.#ctor(System.Int64,System.String)">
            <summary>
            Constructs a new method handle.
            </summary>
            <param name="id">The unique id of the reference.</param>
            <param name="name">The name of the method reference.</param>
        </member>
        <member name="P:ILGPU.IR.MethodHandle.Id">
            <summary>
            Returns the unique id.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodHandle.IsEmpty">
            <summary>
            Returns true if this handle is empty.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodHandle.Name">
            <summary>
            Returns the name of the referenced method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.Serialize">
            <summary>
            Returns a serialization string.
            </summary>
            <returns>The created serialization string.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.Equals(ILGPU.IR.MethodHandle)">
            <summary>
            Returns true if the given handle is equal to this handle.
            </summary>
            <param name="other">The other handle.</param>
            <returns>True, if the given handle is equal to this handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this handle.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to this handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.GetHashCode">
            <summary>
            Returns the hash code of this handle.
            </summary>
            <returns>The hash code of this handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.ToString">
            <summary>
            Returns the string representation of this handle.
            </summary>
            <returns>The string representation of this handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.op_Equality(ILGPU.IR.MethodHandle,ILGPU.IR.MethodHandle)">
            <summary>
            Returns true if the first and the second handle are the same.
            </summary>
            <param name="first">The first handle.</param>
            <param name="second">The second handle.</param>
            <returns>True, if the first and the second handle are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.op_Inequality(ILGPU.IR.MethodHandle,ILGPU.IR.MethodHandle)">
            <summary>
            Returns true if the first and the second handle are not the same.
            </summary>
            <param name="first">The first handle.</param>
            <param name="second">The second handle.</param>
            <returns>
            True, if the first and the second handle are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.IR.MethodDeclaration">
            <summary>
            Represents a method declaration of a <see cref="T:ILGPU.IR.Method"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(System.String,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new method declaration with an implicit handle.
            </summary>
            <param name="name">The method name.</param>
            <param name="returnType">The return type.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(System.String,ILGPU.IR.Types.TypeNode,ILGPU.IR.MethodFlags)">
            <summary>
            Constructs a new method declaration with an implicit handle.
            </summary>
            <param name="name">The method name.</param>
            <param name="returnType">The return type.</param>
            <param name="flags">Custom method flags.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(ILGPU.IR.MethodHandle,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new method declaration.
            </summary>
            <param name="handle">The method handle (may be an empty handle).</param>
            <param name="returnType">The return type.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(ILGPU.IR.MethodHandle,ILGPU.IR.Types.TypeNode,ILGPU.IR.MethodFlags)">
            <summary>
            Constructs a new method declaration.
            </summary>
            <param name="handle">The method handle (may be an empty handle).</param>
            <param name="returnType">The return type.</param>
            <param name="flags">Custom method flags.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(ILGPU.IR.MethodHandle,ILGPU.IR.Types.TypeNode,System.Reflection.MethodBase)">
            <summary>
            Constructs a new method declaration.
            </summary>
            <param name="handle">The method handle (may be an empty handle).</param>
            <param name="returnType">The return type.</param>
            <param name="source">The source method.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(ILGPU.IR.MethodHandle,ILGPU.IR.Types.TypeNode,System.Reflection.MethodBase,ILGPU.IR.MethodFlags)">
            <summary>
            Constructs a new method declaration.
            </summary>
            <param name="handle">The method handle (may be an empty handle).</param>
            <param name="returnType">The return type.</param>
            <param name="source">The source method.</param>
            <param name="flags">Custom method flags.</param>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.Flags">
            <summary>
            Returns the associated method flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.IsExternal">
            <summary>
            Returns true if this method is an external method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.HasHandle">
            <summary>
            Returns true if the associated handle is not empty.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.Handle">
            <summary>
            Returns the associated handle.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.ReturnType">
            <summary>
            Returns the return type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.HasSource">
            <summary>
            Returns true if the associated source method is not null.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.Source">
            <summary>
            Returns the managed source method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.Specialize(ILGPU.IR.MethodHandle)">
            <summary>
            Specializes the current method declaration by specializing an empty
            method handle.
            </summary>
            <param name="handle">The handle to specialize.</param>
            <returns>The specialized method declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.Specialize(ILGPU.IR.Types.TypeNode)">
            <summary>
            Specializes the current method declaration by specializing the return type.
            </summary>
            <param name="returnType">The return type to specialize.</param>
            <returns>The specialized method declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.HasFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Returns true if this declaration has the given method flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, if this declaration has the given method flags.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.AddFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Adds the given flags to this declaration.
            </summary>
            <param name="flags">The flags to add.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.RemoveFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Removes the given flags from this declaration.
            </summary>
            <param name="flags">The flags to remove.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.Equals(ILGPU.IR.MethodDeclaration)">
            <summary>
            Returns true if the given declaration is equal to this declaration.
            </summary>
            <param name="other">The other declaration.</param>
            <returns>
            True, if the given declaration is equal to this declaration.
            </returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this declaration.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to this declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.GetHashCode">
            <summary>
            Returns the hash code of this declaration.
            </summary>
            <returns>The hash code of this declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.ToString">
            <summary>
            Returns the string representation of this declaration.
            </summary>
            <returns>The string representation of this declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.op_Equality(ILGPU.IR.MethodDeclaration,ILGPU.IR.MethodDeclaration)">
            <summary>
            Returns true if the first and the second declaration are the same.
            </summary>
            <param name="first">The first declaration.</param>
            <param name="second">The second declaration.</param>
            <returns>
            True, if the first and the second declaration are the same.
            </returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.op_Inequality(ILGPU.IR.MethodDeclaration,ILGPU.IR.MethodDeclaration)">
            <summary>
            Returns true if the first and the second declaration are not the same.
            </summary>
            <param name="first">The first declaration.</param>
            <param name="second">The second declaration.</param>
            <returns>
            True, if the first and the second declaration are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.IR.IMethodMappingObject">
            <summary>
            Represents an object that can be managed in the scope of a
            <see cref="T:ILGPU.IR.MethodMapping`1"/>
            </summary>
        </member>
        <member name="P:ILGPU.IR.IMethodMappingObject.Handle">
            <summary>
            Returns the associated function handle.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IMethodMappingObject.Source">
            <summary>
            Returns the original source method (may be null).
            </summary>
        </member>
        <member name="T:ILGPU.IR.MethodMapping`1">
            <summary>
            Maps function handles and managed .Net methods to <see cref="T:ILGPU.IR.Method"/>
            objects.
            </summary>
            <typeparam name="T">The mapped type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.MethodMapping`1.Enumerator">
            <summary>
            The internal enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Enumerator.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="dataList">The data list.</param>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.Enumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:ILGPU.IR.MethodMapping`1.ReadOnlyCollection">
            <summary>
            Represents a readonly view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.Count">
            <summary>
            Returns the number of stored functions.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.Item(ILGPU.IR.MethodHandle)">
            <summary>
            Returns data that corresponds to the given handle.
            </summary>
            <param name="handle">The function handle.</param>
            <returns>The resolved data.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.TryGetHandle(System.Reflection.MethodBase,ILGPU.IR.MethodHandle@)">
            <summary>
            Tries to resolve the given managed method to function reference.
            </summary>
            <param name="method">The method to resolve.</param>
            <param name="handle">The resolved function handle (if any).</param>
            <returns>True, if the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.TryGetFunction(ILGPU.IR.MethodHandle,`0@)">
            <summary>
            Tries to resolve the given handle to a top-level function.
            </summary>
            <param name="handle">The function handle to resolve.</param>
            <param name="data">The resolved data (if any).</param>
            <returns>True, if the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all stored values.
            </summary>
            <returns>An enumerator that enumerates all stored values.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.Count">
            <summary>
            Returns the number of stored functions.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.Item(ILGPU.IR.MethodHandle)">
            <summary>
            Returns data that corresponds to the given handle.
            </summary>
            <param name="handle">The function handle.</param>
            <returns>The resolved data.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.AsReadOnly">
            <summary>
            Constructs a readonly object view.
            </summary>
            <returns>The created readonly object view.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.TryGetHandle(System.Reflection.MethodBase,ILGPU.IR.MethodHandle@)">
            <summary>
            Tries to resolve the given managed method to function reference.
            </summary>
            <param name="method">The method to resolve.</param>
            <param name="handle">The resolved function handle (if any).</param>
            <returns>True, if the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.TryGetData(ILGPU.IR.MethodHandle,`0@)">
            <summary>
            Tries to resolve the given method to a top-level function.
            </summary>
            <param name="method">The method to resolve.</param>
            <param name="data">The resolved data (if any).</param>
            <returns>True, if the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Register(ILGPU.IR.MethodHandle,`0)">
            <summary>
            Registers the handle with the given data object.
            </summary>
            <param name="handle">The function handle.</param>
            <param name="data">The data object to register.</param>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ToArray">
            <summary>
            Converts this mapping object into an array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ToImmutableArray">
            <summary>
            Converts this mapping object into an immutable array.
            </summary>
            <returns>The immutable array.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Clear">
            <summary>
            Clears all contained functions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all stored values.
            </summary>
            <returns>An enumerator that enumerates all stored values.</returns>
        </member>
        <member name="T:ILGPU.IR.INode">
            <summary>
            The base interface of all nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.INode.Id">
            <summary>
            Returns the unique node id.
            </summary>
        </member>
        <member name="P:ILGPU.IR.INode.Location">
            <summary>
            Returns the associated location.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Node">
            <summary>
            Represents a basic intermediate-representation node.
            It is the base class for all nodes in the scope of this IR.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Node.Comparison">
            <summary>
            Compares two nodes according to their id.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Node.#ctor(ILGPU.IR.Location)">
            <summary>
            Constructs a new node that is marked as replaceable.
            </summary>
            <param name="location">The current location.</param>
        </member>
        <member name="P:ILGPU.IR.Node.Location">
            <summary>
            Returns the associated location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Node.Id">
            <summary>
            Returns the unique node id.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Node.InferLocation``1(System.ReadOnlySpan{``0})">
            <summary>
            Infers the location (if required) of the current node.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="elements">Elements we can infer the location from.</param>
        </member>
        <member name="M:ILGPU.IR.Node.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific exception information.
            </summary>
            <param name="message">The source error message.</param>
            <returns>The formatted error message.</returns>
        </member>
        <member name="M:ILGPU.IR.Node.Dump(System.IO.TextWriter)">
            <summary>
            Dumps this method to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.Node.ToPrefixString">
            <summary>
            Returns the prefix string (operation name) of this node.
            </summary>
            <returns>The prefix string.</returns>
        </member>
        <member name="M:ILGPU.IR.Node.ToReferenceString">
            <summary>
            Returns the string representation of this node as reference.
            </summary>
            <returns>The string representation of this node as reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Node.ToString">
            <summary>
            Returns the string representation of this node.
            </summary>
            <returns>The string representation of this node.</returns>
        </member>
        <member name="T:ILGPU.IR.NodeId">
            <summary>
            Represents a node id.
            </summary>
        </member>
        <member name="F:ILGPU.IR.NodeId.Empty">
            <summary>
            Represents the empty node id.
            </summary>
        </member>
        <member name="F:ILGPU.IR.NodeId.idCounter">
            <summary>
            A shared static id counter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.NodeId.CreateNew">
            <summary>
            Creates a new unique node id.
            </summary>
            <returns>A new unique node id.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.#ctor(System.Int64)">
            <summary>
            Constructs a new node id.
            </summary>
            <param name="id">The raw id.</param>
        </member>
        <member name="P:ILGPU.IR.NodeId.Value">
            <summary>
            Returns the encapsulated value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.NodeId.Equals(ILGPU.IR.NodeId)">
            <summary>
            Returns true if the given id is equal to this id.
            </summary>
            <param name="other">The other id.</param>
            <returns>True, if the given id is equal to this id.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.CompareTo(ILGPU.IR.NodeId)">
            <summary>
            Compares this id to the given one.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this id.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to this id.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.GetHashCode">
            <summary>
            Returns the hash code of this id.
            </summary>
            <returns>The hash code of this id.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.ToString">
            <summary>
            Returns the string representation of this id.
            </summary>
            <returns>The string representation of this id.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_Implicit(ILGPU.IR.NodeId)~System.Int64">
            <summary>
            Converts the given node id into its underlying long value.
            </summary>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_Equality(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true if the first and the second id are the same.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, if the first and the second id are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_Inequality(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true if the first and the second id are not the same.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, if the first and the second id are not the same.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_LessThan(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true if the first id is smaller than the second one.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, if the first id is smaller than the second one.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_LessThanOrEqual(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true if the first id is smaller than or equal to the second one.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>
            True, if the first id is smaller than or equal to the second one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_GreaterThan(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true if the first id is greater than the second one.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, if the first id is greater than the second one.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_GreaterThanOrEqual(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true if the first id is greater than or equal to the second one.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>
            True, if the first id is greater than or equal to the second one.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.IRewriterContext">
            <summary>
            A rewriter context to process values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.IRewriterContext.Builder">
            <summary>
            Returns the associated builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.IRewriterContext.Block">
            <summary>
            Returns the associated block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.IRewriterContext.IsConverted(ILGPU.IR.Value)">
            <summary>
            Returns true if the given value has been converted.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True, if the given value has been converted.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.IRewriterContext.MarkConverted(ILGPU.IR.Value)">
            <summary>
            Marks the given value as converted.
            </summary>
            <param name="value">The value to mark.</param>
            <returns>True, if the element has been added to the set of value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.IRewriterContext.Replace``1(ILGPU.IR.Value,``0)">
            <summary>
            Replaces the given value with the new value.
            </summary>
            <typeparam name="TValue">The value type of the new value.</typeparam>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.IRewriterContext.ReplaceAndRemove``1(ILGPU.IR.Value,``0)">
            <summary>
            Replaces the given value with the new value and removes it from the block.
            </summary>
            <typeparam name="TValue">The value type of the new value.</typeparam>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.IRewriterContext.Remove(ILGPU.IR.Value)">
            <summary>
            Removes the given value from the block.
            </summary>
            <param name="value">The current value.</param>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewriterContextExtensions">
            <summary>
            Extension methods for rewriter contexts.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContextExtensions.Replace``1(``0,ILGPU.IR.Value,ILGPU.IR.Values.ValueReference)">
            <summary>
            Replaces the given value with the new value.
            </summary>
            <typeparam name="T">The context type.</typeparam>
            <param name="context">The context instance.</param>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContextExtensions.ReplaceAndRemove``1(``0,ILGPU.IR.Value,ILGPU.IR.Values.ValueReference)">
            <summary>
            Replaces the given value with the new value and removes it from the block.
            </summary>
            <typeparam name="T">The context type.</typeparam>
            <param name="context">The context instance.</param>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContextExtensions.GetMethod``1(``0)">
            <summary>
            Returns the parent method.
            </summary>
            <typeparam name="T">The context type.</typeparam>
            <param name="context">The context instance.</param>
            <returns>The parent method.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContextExtensions.GetMethodBuilder``1(``0)">
            <summary>
            Returns the parent method builder.
            </summary>
            <typeparam name="T">The context type.</typeparam>
            <param name="context">The context instance.</param>
            <returns>The parent method builder.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewritePredicate`2">
            <summary>
            A rewriter predicate.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="data">The current user context.</param>
            <param name="value">The value to test.</param>
            <returns>True, if the value can be rewritten.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewriteConverter`3">
            <summary>
            A rewriter converter that converts nodes.
            </summary>
            <typeparam name="TContext">The rewriter context type.</typeparam>
            <typeparam name="T">The data type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="context">The current rewriting context.</param>
            <param name="data">The user-defined data.</param>
            <param name="value">The value to rewrite.</param>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter`4">
            <summary>
            A rewriter class to rewrite IR nodes.
            </summary>
            <typeparam name="TContext">The rewriter context type.</typeparam>
            <typeparam name="TContextProvider">
            The provider type for new context providers.
            </typeparam>
            <typeparam name="TContextData">
            The context specific data to build new rewriter contexts.
            </typeparam>
            <typeparam name="T">The user-defined data type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter`4.Converter">
            <summary>
            An internal converter type.
            </summary>
            <param name="context">The current context.</param>
            <param name="data">The custom data context.</param>
            <param name="value">The value to convert.</param>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter`4.IProcessor">
            <summary>
            A processor that can be applied to every value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.IProcessor.Apply(ILGPU.IR.BasicBlock.Builder,System.Collections.Generic.HashSet{ILGPU.IR.Value},ILGPU.IR.Value)">
            <summary>
            Applies this processor to a particular value.
            </summary>
            <param name="blockBuilder">The current block builder.</param>
            <param name="converted">The set of converted values.</param>
            <param name="value">The current value.</param>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter`4.StaticProcessor">
            <summary>
            An adapter to use a static rewriter instance.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.StaticProcessor.#ctor(ILGPU.IR.Rewriting.Rewriter{`0,`1,`2,`3},`2,`3,System.Collections.Generic.HashSet{ILGPU.IR.Value})">
            <summary>
            Initializes a new static processor.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.StaticProcessor.Rewriter">
            <summary>
            Returns the underlying rewriter.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.StaticProcessor.ContextData">
            <summary>
            Returns the current context data.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.StaticProcessor.Data">
            <summary>
            Returns the current data instance.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.StaticProcessor.ToConvert">
            <summary>
            Returns the set of values to convert.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.StaticProcessor.Apply(ILGPU.IR.BasicBlock.Builder,System.Collections.Generic.HashSet{ILGPU.IR.Value},ILGPU.IR.Value)">
            <summary>
            Applies the current processing adapter.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter`4.DynamicProcessor">
            <summary>
            An adapter to use a dynamic rewriter instance.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.DynamicProcessor.#ctor(ILGPU.IR.Rewriting.Rewriter{`0,`1,`2,`3},`2,`3)">
            <summary>
            Initializes a new static processor.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.DynamicProcessor.Rewriter">
            <summary>
            Returns the underlying rewriter.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.DynamicProcessor.ContextData">
            <summary>
            Returns the current context data.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.DynamicProcessor.Data">
            <summary>
            Returns the current data instance.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.DynamicProcessor.Apply(ILGPU.IR.BasicBlock.Builder,System.Collections.Generic.HashSet{ILGPU.IR.Value},ILGPU.IR.Value)">
            <summary>
            Applies the current processing adapter.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess">
            <summary>
            Encapsulates a static rewriting step.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.#ctor(ILGPU.IR.Rewriting.Rewriter{`0,`1,`2,`3},ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder,`2,`3,System.Collections.Generic.HashSet{ILGPU.IR.Value})">
            <summary>
            Initializes a new rewriting.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.Rewriter">
            <summary>
            Returns the parent rewriter.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.Blocks">
            <summary>
            Returns the block collection.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.Builder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.ContextData">
            <summary>
            Returns the current context data.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.Data">
            <summary>
            Returns the current data instance.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.ToConvert">
            <summary>
            Returns the set of values to convert.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.Rewrite">
            <summary>
            Applies the current rewriting instance.
            </summary>
            <returns>True, if the rewriter could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.InitProcessing``1(ILGPU.IR.Method.Builder,``0,System.Collections.Generic.HashSet{ILGPU.IR.Value}@)">
            <summary>
            Initializes a processing phase by applying the processor to all parameters.
            </summary>
            <typeparam name="TProcessor">The processor type.</typeparam>
            <param name="builder">The parent method builder.</param>
            <param name="processor">The processor instance.</param>
            <param name="converted">The initializes set of converted values.</param>
            <returns>True, if the given processor could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.Process``1(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder,``0)">
            <summary>
            Processes the whole scope using the processor provided.
            </summary>
            <typeparam name="TProcessor">The processor type.</typeparam>
            <param name="blocks">All blocks to process.</param>
            <param name="builder">The parent method builder.</param>
            <param name="processor">The processor instance.</param>
            <returns>True, if the given processor could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.#ctor">
            <summary>
            Constructs a new rewriter instance.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.Add``1(ILGPU.IR.Rewriting.RewriteConverter{`0,`3,``0})">
            <summary>
            Adds a new rewriter converter.
            </summary>
            <typeparam name="TValue">The value kind.</typeparam>
            <param name="converter">The rewriter converter.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.Add``1(ILGPU.IR.Rewriting.RewritePredicate{`3,``0},ILGPU.IR.Rewriting.RewriteConverter{`0,`3,``0})">
            <summary>
            Adds a new rewriter converter with a specific predicate.
            </summary>
            <typeparam name="TValue">The value kind.</typeparam>
            <param name="predicate">The predicate to use prior to conversion.</param>
            <param name="converter">The rewriter converter.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.CanRewrite(`3,ILGPU.IR.Value)">
            <summary>
            Returns true if the given value can be rewritten.
            </summary>
            <param name="context">The current context.</param>
            <param name="value">The value to test.</param>
            <returns>True, if the given value can be rewritten.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.Apply(`0,`3,ILGPU.IR.Value)">
            <summary>
            Applies an internal converter.
            </summary>
            <param name="context">The rewriter context.</param>
            <param name="data">The custom data instance.</param>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.GatherNodesToConvert(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,`3)">
            <summary>
            Determines all nodes to convert.
            </summary>
            <param name="blocks">The block collection.</param>
            <param name="data">The user-defined context.</param>
            <returns>The set of all values to convert.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.TryBeginRewrite(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder,`2,`3,ILGPU.IR.Rewriting.Rewriter{`0,`1,`2,`3}.RewriterProcess@)">
            <summary>
            Tries to rewrite the given scope using the method builder provided.
            </summary>
            <param name="blocks">The block collection.</param>
            <param name="builder">The current builder.</param>
            <param name="contextData">The context data.</param>
            <param name="data">The user-defined data.</param>
            <param name="rewriting">The resolved rewriting functionality.</param>
            <returns>True, if some nodes to rewrite could have been determined.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.Rewrite(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder,`2,`3)">
            <summary>
            Rewrites the given scope on-the-fly using the method builder provided.
            </summary>
            <param name="blocks">The block collection.</param>
            <param name="builder">The current builder.</param>
            <param name="contextData">The context data.</param>
            <param name="data">The user-defined data.</param>
            <returns>True, if the rewriter could be applied.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewriteConverter`2">
            <summary>
            A rewriter converter that converts nodes.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="context">The current rewriting context.</param>
            <param name="data">The user-defined data.</param>
            <param name="value">The value to rewrite.</param>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter`1">
            <summary>
            A rewriter class that does not work on user-defined context instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`1.Add``1(ILGPU.IR.Rewriting.RewriteConverter{`0,``0})">
            <summary>
            Adds a new rewriter converter.
            </summary>
            <typeparam name="TValue">The value kind.</typeparam>
            <param name="converter">The rewriter converter.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`1.Add``1(ILGPU.IR.Rewriting.RewritePredicate{`0,``0},ILGPU.IR.Rewriting.RewriteConverter{`0,``0})">
            <summary>
            Adds a new rewriter converter with a specific predicate.
            </summary>
            <typeparam name="TValue">The value kind.</typeparam>
            <param name="predicate">The predicate to use prior to conversion.</param>
            <param name="converter">The rewriter converter.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`1.TryBeginRewrite(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder,`0,ILGPU.IR.Rewriting.Rewriter{ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Rewriting.RewriterContextProvider{System.Object},System.Object,`0}.RewriterProcess@)">
            <summary>
            Tries to rewrite the given scope using the method builder provided.
            </summary>
            <param name="blocks">The block collection.</param>
            <param name="builder">The current builder.</param>
            <param name="data">The user-defined data.</param>
            <param name="rewriting">The resolved rewriting functionality.</param>
            <returns>True, if some nodes to rewrite could have been determined.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`1.Rewrite(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder,`0)">
            <summary>
            Rewrites the given scope on-the-fly using the method builder provided.
            </summary>
            <param name="blocks">The block collection.</param>
            <param name="builder">The current builder.</param>
            <param name="data">The user-defined data.</param>
            <returns>True, if the rewriter could be applied.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewritePredicate`1">
            <summary>
            A rewriter predicate.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="value">The value to test.</param>
            <returns>True, if the value can be rewritten.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewriteConverter`1">
            <summary>
            A rewriter converter that converts nodes.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="context">The current rewriting context.</param>
            <param name="value">The value to rewrite.</param>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter">
            <summary>
            A rewriter class that does not work on user-defined context instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter.Add``1(ILGPU.IR.Rewriting.RewriteConverter{``0})">
            <summary>
            Adds a new rewriter converter.
            </summary>
            <typeparam name="TValue">The value kind.</typeparam>
            <param name="converter">The rewriter converter.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter.Add``1(ILGPU.IR.Rewriting.RewritePredicate{``0},ILGPU.IR.Rewriting.RewriteConverter{``0})">
            <summary>
            Adds a new rewriter converter with a specific predicate.
            </summary>
            <typeparam name="TValue">The value kind.</typeparam>
            <param name="predicate">The predicate to use prior to conversion.</param>
            <param name="converter">The rewriter converter.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter.TryBeginRewrite(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder,ILGPU.IR.Rewriting.Rewriter{ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Rewriting.RewriterContextProvider{System.Object},System.Object,System.Object}.RewriterProcess@)">
            <summary>
            Tries to rewrite the given scope using the method builder provided.
            </summary>
            <param name="blocks">The block collection.</param>
            <param name="builder">The current builder.</param>
            <param name="rewriting">The resolved rewriting functionality.</param>
            <returns>True, if some nodes to rewrite could have been determined.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter.Rewrite(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder)">
            <summary>
            Rewrites the given scope on-the-fly using the method builder provided.
            </summary>
            <param name="blocks">The block collection.</param>
            <param name="builder">The current builder.</param>
            <returns>True, if the rewriter could be applied.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewriterContext">
            <summary>
            Helper class to process value instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContext.#ctor(ILGPU.IR.BasicBlock.Builder,System.Collections.Generic.HashSet{ILGPU.IR.Value})">
            <summary>
            Constructs a new value processor.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="converted">The set of converted value.</param>
        </member>
        <member name="P:ILGPU.IR.Rewriting.RewriterContext.Builder">
            <summary>
            Returns the associated builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.RewriterContext.Block">
            <summary>
            Returns the associated block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.RewriterContext.Converted">
            <summary>
            The set of all converted nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContext.SpecializeBuilder(ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Specializes the build by setting a new block builder.
            </summary>
            <param name="newBuilder">The new builder to use.</param>
            <returns>The specialized rewriter context.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContext.IsConverted(ILGPU.IR.Value)">
            <summary>
            Returns true if the given value has been converted.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True, if the given value has been converted.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContext.MarkConverted(ILGPU.IR.Value)">
            <summary>
            Marks the given value as converted.
            </summary>
            <param name="value">The value to mark.</param>
            <returns>True, if the element has been added to the set of value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContext.Replace``1(ILGPU.IR.Value,``0)">
            <summary>
            Replaces the given value with the new value.
            </summary>
            <typeparam name="TValue">The value type of the new value.</typeparam>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContext.ReplaceAndRemove``1(ILGPU.IR.Value,``0)">
            <summary>
            Replaces the given value with the new value and removes it from the block.
            </summary>
            <typeparam name="TValue">The value type of the new value.</typeparam>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContext.Remove(ILGPU.IR.Value)">
            <summary>
            Removes the given value from the block.
            </summary>
            <param name="value">The current value.</param>
        </member>
        <member name="T:ILGPU.IR.Rewriting.IRewriterContextProvider`2">
            <summary>
            Provides rewriter context instances.
            </summary>
            <typeparam name="TContext">The context instance type.</typeparam>
            <typeparam name="T">The custom data type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Rewriting.IRewriterContextProvider`2.CreateContext(ILGPU.IR.BasicBlock.Builder,System.Collections.Generic.HashSet{ILGPU.IR.Value},`1)">
            <summary>
            Creates a new rewriter context.
            </summary>
            <param name="builder">The current block builder.</param>
            <param name="converted">The set of converted values.</param>
            <param name="data">The user defined data instance.</param>
            <returns>The created rewriter context.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewriterContextProvider`1">
            <summary>
            Provides <see cref="T:ILGPU.IR.Rewriting.RewriterContext"/> instances.
            </summary>
            <typeparam name="T">The custom data type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContextProvider`1.CreateContext(ILGPU.IR.BasicBlock.Builder,System.Collections.Generic.HashSet{ILGPU.IR.Value},`0)">
            <summary>
            Creates a new <see cref="T:ILGPU.IR.Rewriting.RewriterContext"/>.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Rewriting.SSARewriterContext`1">
            <summary>
            A processor that can be applied to every block.
            </summary>
            <typeparam name="TVariable">The SSA variable type.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Rewriting.SSARewriterContext`1.SSABuilder">
            <summary>
            Returns the current SSA builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.SSARewriterContext`1.Builder">
            <summary>
            Returns the associated builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.SSARewriterContext`1.Block">
            <summary>
            Returns the associated block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.SpecializeBuilder(ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Specializes the build by setting a new block builder.
            </summary>
            <param name="newBuilder">The new builder to use.</param>
            <returns>The specialized rewriter context.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.IsConverted(ILGPU.IR.Value)">
            <summary>
            Returns true if the given value has been converted.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True, if the given value has been converted.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.MarkConverted(ILGPU.IR.Value)">
            <summary>
            Marks the given value as converted.
            </summary>
            <param name="value">The value to mark.</param>
            <returns>True, if the element has been added to the set of value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.Replace``1(ILGPU.IR.Value,``0)">
            <summary>
            Replaces the given value with the new value.
            </summary>
            <typeparam name="TValue">The value type of the new value.</typeparam>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.ReplaceAndRemove``1(ILGPU.IR.Value,``0)">
            <summary>
            Replaces the given value with the new value and removes it from the block.
            </summary>
            <typeparam name="TValue">The value type of the new value.</typeparam>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.Remove(ILGPU.IR.Value)">
            <summary>
            Removes the given value from the block.
            </summary>
            <param name="value">The current value.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.SetValue(ILGPU.IR.BasicBlock,`0,ILGPU.IR.Value)">
            <summary>
            Sets the given variable to the given block.
            </summary>
            <param name="basicBlock">The target block.</param>
            <param name="var">The variable reference.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.GetValue(ILGPU.IR.BasicBlock,`0)">
            <summary>
            Returns the value of the given variable.
            </summary>
            <param name="basicBlock">The target block.</param>
            <param name="var">The variable reference.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.SSARewriterContextProvider`1">
            <summary>
            Provides <see cref="T:ILGPU.IR.Rewriting.SSARewriterContext`1"/> instances.
            </summary>
            <typeparam name="TVariable">The SSA variable type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContextProvider`1.CreateContext(ILGPU.IR.BasicBlock.Builder,System.Collections.Generic.HashSet{ILGPU.IR.Value},ILGPU.IR.Construction.SSABuilder{`0})">
            <summary>
            Creates a new <see cref="T:ILGPU.IR.Rewriting.SSARewriterContext`1"/>.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Rewriting.SSARewriter`2">
            <summary>
            A rewriter class to rewrite SSA builders.
            </summary>
            <typeparam name="TVariable">The SSA variable type.</typeparam>
            <typeparam name="T">The user-defined context type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Rewriting.SSARewriter`2.RewriterProcess">
            <summary>
            Encapsulates a static rewriting step.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriter`2.RewriterProcess.#ctor(ILGPU.IR.Rewriting.SSARewriter{`0,`1},ILGPU.IR.Construction.SSABuilder{`0},`1,System.Collections.Generic.HashSet{ILGPU.IR.Value})">
            <summary>
            Initializes a new rewriting.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.SSARewriter`2.RewriterProcess.Rewriter">
            <summary>
            Returns the parent rewriter.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.SSARewriter`2.RewriterProcess.SSABuilder">
            <summary>
            Returns the parent scope.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.SSARewriter`2.RewriterProcess.Data">
            <summary>
            Returns the current data.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.SSARewriter`2.RewriterProcess.ToConvert">
            <summary>
            Returns the set of values to convert.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriter`2.RewriterProcess.Rewrite">
            <summary>
            Applies the current rewriting instance.
            </summary>
            <returns>True, if the rewriter could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriter`2.ProcessSSA``1(ILGPU.IR.Construction.SSABuilder{`0},``0)">
            <summary>
            Processes the whole scope using the processor provided.
            </summary>
            <typeparam name="TProcessor">The processor type.</typeparam>
            <param name="ssaBuilder">The parent SSA builder..</param>
            <param name="processor">The processor instance.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriter`2.TryBeginRewrite(ILGPU.IR.Construction.SSABuilder{`0},`1,ILGPU.IR.Rewriting.SSARewriter{`0,`1}.RewriterProcess@)">
            <summary>
            Tries to rewrite the given SSA builder using the method builder provided.
            </summary>
            <param name="ssaBuilder">The parent SSA builder.</param>
            <param name="data">The user-defined data.</param>
            <param name="rewriting">The resolved rewriting functionality.</param>
            <returns>True, if some nodes to rewrite could have been determined.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriter`2.Rewrite(ILGPU.IR.Construction.SSABuilder{`0},`1)">
            <summary>
            Rewrites the given SSA builder on-the-fly using the method builder provided.
            </summary>
            <param name="ssaBuilder">The parent SSA builder.</param>
            <param name="data">The user-defined data.</param>
            <returns>True, if the rewriter could be applied.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.SSARewriter`1">
            <summary>
            A rewriter class to rewrite SSA builders.
            </summary>
            <typeparam name="TVariable">The SSA variable type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriter`1.TryBeginRewrite(ILGPU.IR.Construction.SSABuilder{`0},ILGPU.IR.Rewriting.SSARewriter{`0,System.Object}.RewriterProcess@)">
            <summary>
            Tries to rewrite the given SSA builder using the method builder provided.
            </summary>
            <param name="ssaBuilder">The parent SSA builder.</param>
            <param name="rewriting">The resolved rewriting functionality.</param>
            <returns>True, if some nodes to rewrite could have been determined.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriter`1.Rewrite(ILGPU.IR.Construction.SSABuilder{`0})">
            <summary>
            Rewrites the given SSA builder on-the-fly using the method builder provided.
            </summary>
            <param name="ssaBuilder">The parent SSA builder.</param>
            <returns>True, if the rewriter could be applied.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewriterStructureExtensions">
            <summary>
            Extension methods for generation and destruction of structure values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterStructureExtensions.AssembleStructure``2(``0,ILGPU.IR.Types.StructureType,``1,System.Func{``0,``1,ILGPU.IR.Values.FieldAccess,ILGPU.IR.Value})">
            <summary>
            Assembles a structure value using the lowering provided.
            </summary>
            <typeparam name="T">The rewriter context type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="context">The current rewriter context instance.</param>
            <param name="structureType">The structure type to use.</param>
            <param name="value">The source value.</param>
            <param name="lowering">The lowering functionality.</param>
            <returns>The assembled structure value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterStructureExtensions.DisassembleStructure``2(``0,ILGPU.IR.Types.StructureType,``1,System.Action{``0,``1,ILGPU.IR.Value,ILGPU.IR.Values.FieldAccess})">
            <summary>
            Disassembled a structure value using the lowering provided.
            </summary>
            <typeparam name="T">The rewriter context type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="context">The current rewriter context instance.</param>
            <param name="structureType">The structure type to use.</param>
            <param name="value">The source value.</param>
            <param name="lowering">The lowering functionality.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterStructureExtensions.LowerValue``2(``0,``1,ILGPU.IR.Value,System.Func{``0,``1,ILGPU.IR.Value,ILGPU.IR.Value})">
            <summary>
            Lowers the given value by applying the lowering provided to each field value.
            Primitive values will be lowered once.
            </summary>
            <typeparam name="T">The rewriter context type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="context">The current rewriter context instance.</param>
            <param name="source">The source value.</param>
            <param name="variable">The variable value.</param>
            <param name="lowering">The lowering functionality.</param>
            <returns>The assembled structure value holding the result value.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.AcceleratorSpecializer">
            <summary>
            Represents a device specializer that instantiates device-specific constants
            and updates device-specific functionality.
            </summary>
            <remarks>
            Note that this class does not perform recursive specialization operations.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.Specialize(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Value,System.Int32)">
            <summary>
            Specializes accelerator-specific values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.Specialize(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.AcceleratorSpecializer,ILGPU.IR.Values.AcceleratorTypeValue)">
            <summary>
            Specializes accelerator-type values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.Specialize(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.AcceleratorSpecializer,ILGPU.IR.Values.WarpSizeValue)">
            <summary>
            Specializes warp size values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.Specialize(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.AcceleratorSpecializer,ILGPU.IR.Values.IntAsPointerCast)">
            <summary>
            Specializes native pointer casts.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.AcceleratorSpecializer.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.#cctor">
            <summary>
            Registers all rewriting patterns.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.#ctor(ILGPU.Runtime.AcceleratorType,System.Nullable{System.Int32},ILGPU.IR.Types.PrimitiveType)">
            <summary>
            Constructs a new device specializer.
            </summary>
            <param name="acceleratorType">The accelerator type.</param>
            <param name="warpSize">The warp size (if any).</param>
            <param name="intPointerType">The native integer pointer type.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.AcceleratorType">
            <summary>
            Returns the current accelerator type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.WarpSize">
            <summary>
            Returns the current warp size (if any).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.IntPointerType">
            <summary>
            Returns the target platform.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies an accelerator-specialization transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.AddressSpaceSpecializer">
            <summary>
            Specializes address spaces of all methods. All methods marked with
            <see cref="F:ILGPU.IR.MethodFlags.EntryPoint"/> will be considered to receive pointers
            to the specified <see cref="T:ILGPU.IR.MemoryAddressSpace"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AddressSpaceSpecializer.SpecializeParameter(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Types.AddressSpaceType.AddressSpaceConverter,ILGPU.IR.Values.Parameter)">
            <summary>
            Specializes an address-space dependent parameter.
            </summary>
            <param name="methodBuilder">The target method builder.</param>
            <param name="builder">The entry block builder.</param>
            <param name="typeConverter">The type converter to use.</param>
            <param name="parameter">The source parameter.</param>
            <returns>True, if the given parameter was specialized.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.AddressSpaceSpecializer.#ctor(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new address space specialization transformation.
            </summary>
            <param name="kernelAddressSpace">
            The root address space of all kernel functions.
            </param>
        </member>
        <member name="P:ILGPU.IR.Transformations.AddressSpaceSpecializer.KernelAddressSpace">
            <summary>
            Returns the kernel address space.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AddressSpaceSpecializer.CreateIntermediate``1(ILGPU.IR.MethodCollection{``0}@)">
            <summary>
            Creates a new <see cref="T:ILGPU.IR.Analyses.PointerAddressSpaces"/> analysis based on the main
            entry0point method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AddressSpaceSpecializer.PerformTransformation(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.PointerAddressSpaces)">
            <summary>
            Applies the address space specialization transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AddressSpaceSpecializer.FinishProcessing(ILGPU.IR.Analyses.PointerAddressSpaces)">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.CleanupBlocks">
            <summary>
            Cleans up empty blocks.
            </summary>
            <remarks>
            TODO: this transformation should become much more aggressive by cloning values
            into predecessor blocks to reduce the number of branches.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Transformations.CleanupBlocks.Remapper">
            <summary>
            Remaps source to target blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CleanupBlocks.Remapper.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new remapper.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.CleanupBlocks.Remapper.Source">
            <summary>
            Returns the source block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.CleanupBlocks.Remapper.Target">
            <summary>
            Returns the new target block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CleanupBlocks.Remapper.CanRemap(System.ReadOnlySpan{ILGPU.IR.BasicBlock}@)">
            <summary>
            Returns true if the given block span contains the source block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CleanupBlocks.Remapper.Remap(ILGPU.IR.BasicBlock)">
            <summary>
            Remaps the source block to the new target block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CleanupBlocks.HasSameTargets(ILGPU.IR.Values.ConditionalBranch,ILGPU.IR.BasicBlock@)">
            <summary>
            Returns true if the conditional branch has identical branch targets in all
            cases.
            </summary>
            <param name="conditionalBranch">The conditional branch.</param>
            <param name="target">The main target.</param>
            <returns>True, if all targets are identical.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.CleanupBlocks.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the cleanup transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.DeadCodeElimination">
            <summary>
            Represents a DCE transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.DeadCodeElimination.#ctor">
            <summary>
            Constructs a new DCE transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.DeadCodeElimination.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies a DCE transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConversionFlags">
            <summary>
            Specific conversion flags for the <see cref="T:ILGPU.IR.Transformations.IfConversion"/> transformation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.IfConversionFlags.Default">
            <summary>
            Converts if branches.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.IfConversionFlags.Switches">
            <summary>
            Converts switch branches.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConversion">
            <summary>
            Converts nested if/switch branches into value conditionals.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper">
            <summary>
            Remaps if branch targets to new blocks in order to linearize all jump targets.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new if branch remapper.
            </summary>
            <param name="postDominator">The common post dominator.</param>
            <param name="newTarget">The new target block.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.PostDominator">
            <summary>
            Returns the common post dominator.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.NewTarget">
            <summary>
            Returns the new target block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.CanRemap(System.ReadOnlySpan{ILGPU.IR.BasicBlock}@)">
            <summary>
            Returns true if one of the block is equal to the
            <see cref="P:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.PostDominator"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.Remap(ILGPU.IR.BasicBlock)">
            <summary>
            Remaps the given block to the block <see cref="P:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.NewTarget"/> if the source
            block is equal to the <see cref="P:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.PostDominator"/>.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConversion.Regions">
            <summary>
            A wrapper structure to encapsulate several basic block regions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.Regions.#ctor(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Constructs a new regions wrapper.
            </summary>
            <param name="root">The root node.</param>
            <param name="numRegions">The number of attached regions.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.Regions.Root">
            <summary>
            Returns the associated root block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.Regions.Count">
            <summary>
            Returns the number of regions.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.Regions.Item(System.Int32)">
            <summary>
            Returns the i-th region.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.Regions.FindRegion(ILGPU.IR.BasicBlock)">
            <summary>
            Finds a particular case index via linear search.
            </summary>
            <param name="block">The phi-argument block.</param>
            <returns>The region index.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.Regions.AddRegion(System.Int32,System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock},System.Int32@)">
            <summary>
            Adds a new region.
            </summary>
            <param name="index">The region index.</param>
            <param name="region">The region contents.</param>
            <param name="regionSize">The region size to adapt.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer">
            <summary>
            An analyzer to detect compatible if/switch branch constructions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.VerifyPredecessors(ILGPU.IR.BasicBlock,System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock})">
            <summary>
            Verifies predecessors of all blocks.
            </summary>
            <param name="root">The current root node.</param>
            <param name="region">The current region.</param>
            <returns>True, if all predecessors can be safely converted.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.CanConvertPhis(System.Collections.Generic.HashSet{ILGPU.IR.Values.PhiValue},ILGPU.IR.Transformations.IfConversion.Regions)">
            <summary>
            Returns true if the given set of phi values can be converted.
            </summary>
            <param name="phiValues">The phi values to convert.</param>
            <param name="regions">The current regions.</param>
            <returns>True, if the given set of phi values can be converted.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.#ctor(ILGPU.IR.Transformations.IfConversionFlags,System.Int32,System.Int32,ILGPU.IR.Analyses.CFG{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Backwards})">
            <summary>
            Constructs a new conditional analyzer.
            </summary>
            <param name="flags">The current flags.</param>
            <param name="maxBlockSize">The maximum block size.</param>
            <param name="maxBlockDifference">
            The maximum block size difference.
            </param>
            <param name="cfg">The current backwards CFG.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.Flags">
            <summary>
            Returns the associated conversion flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.MaxBlockSize">
            <summary>
            Returns the maximum block size.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.MaxBlockDifference">
            <summary>
            Returns the maximum block difference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.PostDominators">
            <summary>
            Returns the parent post dominators.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.Gathered">
            <summary>
            Gets or sets the current set of gathered blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.CanConvert(ILGPU.IR.BasicBlock,ILGPU.IR.Transformations.IfConversion.ConditionalConverter@)">
            <summary>
            Returns true if the given block forms an if-statement that can be
            converted using the associated <see cref="T:ILGPU.IR.Transformations.IfConversion.ConditionalConverter"/>.
            </summary>
            <param name="block">The block to check.</param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.GatherNodes(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock,System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock},System.Int32@)">
            <summary>
            Gathers all nodes recursively that belong to a particular region.
            </summary>
            <param name="current">The current block.</param>
            <param name="postDominator">
            The common post dominator of all regions.
            </param>
            <param name="visited">The target set of visited nodes.</param>
            <param name="regionSize">The current region size.</param>
            <returns>True, if this region can be converted.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.GatherPhis(ILGPU.IR.Method)">
            <summary>
            Gathers all <see cref="T:ILGPU.IR.Values.PhiValue"/> nodes that reference values from the
            region that we want to convert.
            </summary>
            <param name="method">The parent method.</param>
            <returns>
            The set of all <see cref="T:ILGPU.IR.Values.PhiValue"/> that could be found.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConversion.ConditionalConverter">
            <summary>
            A conditional converter to perform the actual if/switch conversion into
            conditional value predicates.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.#ctor(ILGPU.IR.Values.ConditionalBranch,ILGPU.IR.BasicBlock,System.Collections.Generic.HashSet{ILGPU.IR.Values.PhiValue},ILGPU.IR.Transformations.IfConversion.Regions)">
            <summary>
            Constructs a new conditional converter.
            </summary>
            <param name="branch">The conditional branch node.</param>
            <param name="postDominator">The common post dominator.</param>
            <param name="phiValues">All phi values to convert.</param>
            <param name="regions"></param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.Branch">
            <summary>
            Returns the source branch.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.PostDominator">
            <summary>
            The post dominator block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.PhiValues">
            <summary>
            Returns the set of all phi values that will be converted.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.Regions">
            <summary>
            Returns all regions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.ConvertPhis(ILGPU.IR.Method.Builder)">
            <summary>
            Converts all phi nodes to their conditional value counterparts.
            </summary>
            <param name="methodBuilder">The current builder.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.ConvertBranches(ILGPU.IR.Method.Builder)">
            <summary>
            Converts all branches to a linear branch chain.
            </summary>
            <param name="methodBuilder">The current builder.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.ConvertRegionBranches(ILGPU.IR.Method.Builder,System.Int32,ILGPU.IR.BasicBlock)">
            <summary>
            Converts all branches inside the specified region.
            </summary>
            <param name="methodBuilder">The current builder.</param>
            <param name="regionIndex">The region index.</param>
            <param name="jumpTarget">The jump target.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.Convert(ILGPU.IR.Method.Builder)">
            <summary>
            Converts all phi nodes and branches.
            </summary>
            <param name="methodBuilder">The current builder.</param>
        </member>
        <member name="F:ILGPU.IR.Transformations.IfConversion.DefaultMaxBlockSize">
            <summary>
            The default maximum block size measured in instructions.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.IfConversion.DefaultMaxBlockDifference">
            <summary>
            The default maximum block difference between all branches measured in
            instructions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.#ctor(ILGPU.IR.Transformations.IfConversionFlags)">
            <summary>
            Constructs a new if/switch conversion transformation.
            </summary>
            <param name="flags">The conversion flags.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.#ctor(ILGPU.IR.Transformations.IfConversionFlags,System.Int32,System.Int32)">
            <summary>
            Constructs a new if/switch conversion transformation.
            </summary>
            <param name="flags">The conversion flags.</param>
            <param name="maxBlockSize">The maximum block size.</param>
            <param name="maxBlockDifference">The maximum block size difference.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.Flags">
            <summary>
            Returns the associated flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.MaxBlockSize">
            <summary>
            Returns the maximum block size.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.MaxBlockDifference">
            <summary>
            Returns the maximum block difference.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Folds conditionals into uniform control flow using selects.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.InferAddressSpaces">
            <summary>
            Infers address spaces by removing unnecessary address-space casts.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.IsRedundant(ILGPU.IR.Values.AddressSpaceCast)">
            <summary>
            Returns true if the given cast is redundant.
            </summary>
            <param name="cast">The cast to check.</param>
            <returns>True, if the given cast is redundant.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.IsRedundantRecursive(ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Value)">
            <summary>
            Returns true if the parent cast is redundant.
            </summary>
            <param name="targetSpace">The target address space.</param>
            <param name="value">The current value to check.</param>
            <returns>True, if the parent cast is redundant.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.InvalidateType``1(ILGPU.IR.Rewriting.RewriterContext,``0)">
            <summary>
            Invalidates the type of an affected value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.InferAddressSpaces.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.#cctor">
            <summary>
            Registers all conversion patterns.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.#ctor">
            <summary>
            Constructs a new address-space inference pass.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the address-space inference transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Inliner">
            <summary>
            Represents a function inliner.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.Inliner.MaxNumILInstructionsToInline">
            <summary>
            The maximum number of IL instructions to inline.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Inliner.InlineCalls(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock@)">
            <summary>
            Tries to inline method calls.
            </summary>
            <param name="builder">The current method builder.</param>
            <param name="currentBlock">The current block (may be modified).</param>
            <returns>True, in case of an inlined call.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Inliner.#ctor">
            <summary>
            Constructs a new inliner that inlines all methods marked with
            <see cref="F:ILGPU.IR.MethodFlags.Inline"/> flags.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Inliner.PerformTransformation(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.Landscape,ILGPU.IR.Analyses.Landscape{System.Object}.Entry)">
            <summary>
            Applies the inlining transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IntrinsicResolver`1">
            <summary>
            Resolved required intrinsic IR implementations.
            </summary>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicResolver`1.#ctor(ILGPU.IR.Intrinsics.IntrinsicImplementationProvider{`0})">
            <summary>
            Constructs a new intrinsic resolver.
            </summary>
            <param name="implementationProvider">
            The implementation provider to use.
            </param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicResolver`1.CreateIntermediate``1(ILGPU.IR.MethodCollection{``0}@)">
            <summary>
            Begins a new intrinsic specialization phase.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicResolver`1.FinishProcessing(ILGPU.IR.Intrinsics.IntrinsicImplementationProvider{`0}.IRSpecializationPhase)">
            <summary>
            Finishes an intrinsic specialization phase.
            </summary>
            <param name="intermediate"></param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicResolver`1.PerformTransformation(ILGPU.IR.Method.Builder,ILGPU.IR.Intrinsics.IntrinsicImplementationProvider{`0}.IRSpecializationPhase)">
            <summary>
            Applies an intrinsic implementation transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IntrinsicSpecializerFlags">
            <summary>
            Flags for the <see cref="T:ILGPU.IR.Transformations.IntrinsicSpecializer`1"/> transformation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.IntrinsicSpecializerFlags.None">
            <summary>
            Default lowering flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.IntrinsicSpecializerFlags.EnableAssertions">
            <summary>
            Enables assertions.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IntrinsicSpecializer`1">
            <summary>
            Represents an intrinsic implementation specializer.
            </summary>
            <remarks>
            Note that this class does not perform recursive specialization operations.
            </remarks>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicSpecializer`1.ImportDependencies(ILGPU.IR.IRContext,System.Collections.Generic.List{System.ValueTuple{ILGPU.IR.Value,ILGPU.IR.Method}})">
            <summary>
            Imports all detected dependencies into the current context.
            </summary>
            <param name="targetContext">The target context.</param>
            <param name="dependencies">The dependencies to import.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicSpecializer`1.#ctor(ILGPU.IR.Transformations.IntrinsicSpecializerFlags,ILGPU.IR.Intrinsics.IntrinsicImplementationProvider{`0})">
            <summary>
            Constructs a new intrinsic specializer.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IntrinsicSpecializer`1.Flags">
            <summary>
            Returns the current flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IntrinsicSpecializer`1.EnableAssertions">
            <summary>
            Returns true if assertions should be enabled.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicSpecializer`1.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies an intrinsic specialization.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicSpecializer`1.FindDependencies(ILGPU.IR.Method.Builder,System.Boolean@)">
            <summary>
            Analyzes the given scope while importing the required dependencies.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="applied">
            True, if the transformation transformed something.
            </param>
            <returns>The imported dependency functions.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.LoopUnrolling">
            <summary>
            Unrolls loops that rely on simple induction variables.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LoopUnrolling.DefaultMaxUnrollFactor">
            <summary>
            Represents the default maximum unroll factor.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper">
            <summary>
            Remaps loop-specific target blocks and phi-value arguments.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.Source">
            <summary>
            The loop entry.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.Target">
            <summary>
            The temporary predecessor branch.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.TargetValue">
            <summary>
            Returns the target value to map phi operands to (if any).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.CanRemap(System.ReadOnlySpan{ILGPU.IR.BasicBlock}@)">
            <summary>
            Returns true if the given span contains the loop entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.Remap(ILGPU.IR.BasicBlock)">
            <summary>
            Remaps the given block to the target block in the case of the source
            block. It returns the given block otherwise.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.TryRemap(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock@)">
            <summary>
            Returns always true and remaps the new block using
            <see cref="M:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.Remap(ILGPU.IR.BasicBlock)"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.RemapValue(ILGPU.IR.BasicBlock,ILGPU.IR.Value)">
            <summary>
            Remaps the given value to the target value (if defined).
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer">
            <summary>
            Specializes loop bodies.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.phiMapping">
            <summary>
            Maps original phi values to new target values that have to be used
            instead in the remainder of the program.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.blocks">
            <summary>
            All blocks in the scope of this loop in RPO.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.phiValues">
            <summary>
            All (potentially) patched phi values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.LinkPhisToPhis">
            <summary>
            Links all phi values to their instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.LinkPhisToInitValue">
            <summary>
            Links all phi values to their outside (init) operands.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.Builder">
            <summary>
            Returns the parent method builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.BlockBuilder">
            <summary>
            Returns the current block builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.Variable">
            <summary>
            Returns the associated variable.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.PhiVariable">
            <summary>
            Returns the associated phi value representing the induction variable.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.LoopBody">
            <summary>
            Returns the block that is reachable from the break condition.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.BackEdge">
            <summary>
            Returns the block containing the back-edge branch.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.VariableInitValue">
            <summary>
            Returns the init value to update the induction variable.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.SpecializeLoop(ILGPU.IR.BasicBlock,ILGPU.IR.Value)">
            <summary>
            Specializes a single loop iteration.
            </summary>
            <param name="exitBlock">The current exit block to jump to.</param>
            <param name="initValue">The current init value to use.</param>
            <returns>The new entry and exit blocks.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.RewirePhis(ILGPU.IR.BasicBlock)">
            <summary>
            Finishes the loop specialization phase by wiring all phi values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.ReplacePhis">
            <summary>
            Replace all loop-specific phi values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.UnrollLoop(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.LoopInfo{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards},ILGPU.IR.Analyses.InductionVariable,ILGPU.IR.Analyses.InductionVariableBounds@,System.Int32,System.Int32)">
            <summary>
            Unrolls the given loop based on the unroll and iteration factors.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.ComputeUnrollFactor(System.Int32,System.Int32)">
            <summary>
            Computes the unroll factor and the number of iterations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.#ctor">
            <summary>
            Constructs a new loop unrolling transformation using the default maximum
            unroll factor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.#ctor(System.Int32)">
            <summary>
            Constructs a new loop unrolling transformation.
            </summary>
            <param name="maxUnrollFactor">The maximum unroll factor.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.MaxUnrollFactor">
            <summary>
            Returns the maximum unrolling factor to use.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the loop unrolling transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerArrays">
            <summary>
            Lowers array values using memory operations or structure values.
            </summary>
            <remarks>
            This transformation converts array values into tuples of the following format:
            (StoragePtr, Dim1, Dim2, ..., DimN)
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerArrays.ArrayTypeLowering">
            <summary>
            Lowers array types.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.ArrayTypeLowering.GetNumFields(ILGPU.IR.Types.ArrayType)">
            <summary>
            Returns the number of fields per array type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.ArrayTypeLowering.ConvertType``1(``0,ILGPU.IR.Types.ArrayType)">
            <summary>
            Converts the given array type into a structure with two elements.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.ArrayTypeLowering.IsTypeDependent(ILGPU.IR.Types.TypeNode)">
            <summary cref="M:ILGPU.IR.Types.TypeLowering`1.IsTypeDependent(ILGPU.IR.Types.TypeNode)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ArrayType},ILGPU.IR.Values.ArrayValue)">
            <summary>
            Lowers new array values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ArrayType},ILGPU.IR.Values.GetArrayExtent)">
            <summary>
            Lowers array extent values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.GetLinearAddress(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value@)">
            <summary>
            Computes a linear address for the given array and index.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ArrayType},ILGPU.IR.Values.GetArrayElement)">
            <summary>
            Lowers get element values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ArrayType},ILGPU.IR.Values.SetArrayElement)">
            <summary>
            Lowers set element values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ArrayType},ILGPU.IR.Values.LoadElementAddress)">
            <summary>
            Lowers address-computation values.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LowerArrays.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.#cctor">
            <summary>
            Initializes all rewriter patterns.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.#ctor">
            <summary>
            Constructs a new array lowering transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.CreateLoweringConverter(ILGPU.IR.Method.Builder)">
            <summary>
            Creates a new <see cref="T:ILGPU.IR.Transformations.LowerArrays.ArrayTypeLowering"/> converter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the array lowering transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerStructureFlags">
            <summary>
            Flags for the <see cref="T:ILGPU.IR.Transformations.LowerStructures"/> transformation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LowerStructureFlags.None">
            <summary>
            Default lowering flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LowerStructureFlags.LowerLoadStores">
            <summary>
            Lowers <see cref="T:ILGPU.IR.Values.Load"/> and <see cref="T:ILGPU.IR.Values.Store"/> instructions.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerStructures">
            <summary>
            Converts structure values into separate values.
            </summary>
            <remarks>
            This transformation does not change function parameters and calls to other
            functions.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.AssembleStructure(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Types.StructureType,ILGPU.IR.Value)">
            <summary>
            Builds a new structure value during lowering of a source value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.DisassembleStructure(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Types.StructureType,ILGPU.IR.Value)">
            <summary>
            Registers all structure values in the current SSA builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.LowerThreadValue``2(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Types.StructureType,``0)">
            <summary>
            Lowers a thread value.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerStructures.LoweredPhi">
            <summary>
            A lowered phi that has to be sealed after all blocks have been processed.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LowerStructures.LoweredPhi.SourcePhi">
            <summary>
            Returns the source phi.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LowerStructures.LoweredPhi.FieldAccess">
            <summary>
            Returns the source access chain.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LowerStructures.LoweredPhi.PhiBuilder">
            <summary>
            Returns the new phi builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.LoweredPhi.Seal(ILGPU.IR.Construction.SSABuilder{ILGPU.IR.Values.FieldRef})">
            <summary>
            Seals this lowered phi.
            </summary>
            <param name="ssaBuilder">The parent SSA builder.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerStructures.LoweringData">
            <summary>
            Internal temporary data structure.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LowerStructures.LoweringData.LoweredPhis">
            <summary>
            The list of lowered phis.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.LoweringData.AddPhi(ILGPU.IR.Transformations.LowerStructures.LoweredPhi)">
            <summary>
            Adds the given phi to the list of lowered phis.
            </summary>
            <param name="loweredPhi">The lowered phi to add.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Keep(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.Load)">
            <summary>
            Keeps structure load operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.Load)">
            <summary>
            Lowers structure load operations into distinct loads for each field.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Keep(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.Store)">
            <summary>
            Keeps structure store operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.Store)">
            <summary>
            Lowers structure store operations into distinct stores for each field.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.NullValue)">
            <summary>
            Lowers null values into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.StructureValue)">
            <summary>
            Lowers structure values into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.GetField)">
            <summary>
            Lowers get field operations into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.SetField)">
            <summary>
            Lowers set field operations into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.PhiValue)">
            <summary>
            Lowers phi values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.MethodCall)">
            <summary>
            Lowers method calls involving structure types.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.Broadcast)">
            <summary>
            Lowers warp shuffles.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.WarpShuffle)">
            <summary>
            Lowers warp shuffles.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.SubWarpShuffle)">
            <summary>
            Lowers sub-warp shuffles.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.ReturnTerminator)">
            <summary>
            Lowers return terminators returning structure values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Keep(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Value)">
            <summary>
            Lowers generic values containing structure types that cannot be rewritten.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LowerStructures.Rewriter">
            <summary>
            The internal rewriter that keeps load/store values.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LowerStructures.LoadStoreRewriter">
            <summary>
            The internal rewriter that lowers load/store values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.AddRewriters(ILGPU.IR.Rewriting.SSARewriter{ILGPU.IR.Values.FieldRef,ILGPU.IR.Transformations.LowerStructures.LoweringData})">
            <summary>
            Adds the common rewriters to the given rewriter instance.
            </summary>
            <param name="rewriter">The rewriter to extend.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.#cctor">
            <summary>
            Initializes all rewriters.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.#ctor">
            <summary>
            Constructs a new structure conversion pass.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LowerStructures.Flags">
            <summary>
            Returns the current flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LowerStructures.LowerLoadStores">
            <summary>
            Returns true if load/store operations should be lowered.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the structure lowering transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerThreadIntrinsics">
            <summary>
            Lowers internal high-level thread intrinsics.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerThreadIntrinsics.ILoweringImplementation`1">
            <summary>
            Represents an abstract value lowering.
            </summary>
            <typeparam name="TValue">The thread value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.ILoweringImplementation`1.Lower(ILGPU.IR.BasicBlock.Builder,`0,ILGPU.IR.Value)">
            <summary>
            Lowers the given thread value.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="source">The source value.</param>
            <param name="newVariable">The new variable.</param>
            <returns>The created value.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerThreadIntrinsics.BroadcastLowering">
            <summary>
            Lowers broadcast operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.BroadcastLowering.Lower(ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.Broadcast,ILGPU.IR.Value)">
            <summary>
            Lowers a broadcast value by constructing a new one.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerThreadIntrinsics.WarpShuffleLowering">
            <summary>
            Lowers warp shuffle operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.WarpShuffleLowering.Lower(ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.WarpShuffle,ILGPU.IR.Value)">
            <summary>
            Lowers a warp shuffle value by constructing a new one.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerThreadIntrinsics.SubWarpShuffleLowering">
            <summary>
            Lowers sub warp shuffle operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.SubWarpShuffleLowering.Lower(ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.SubWarpShuffle,ILGPU.IR.Value)">
            <summary>
            Lowers a sub warp shuffle value by constructing a new one.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.LowerPrimitive``2(ILGPU.IR.Rewriting.RewriterContext,``0,ILGPU.IR.Value)">
            <summary>
            Lowers a primitive type.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <typeparam name="TLoweringImplementation">
            The implementation type.
            </typeparam>
            <param name="context">The current rewriter context.</param>
            <param name="sourceValue">The source value to get the values from.</param>
            <param name="variable">The source variable.</param>
            <returns>The lowered thread value.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.Lower``2(ILGPU.IR.Rewriting.RewriterContext@,``0)">
            <summary>
            Lowers a type.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <typeparam name="TLoweringImplementation">
            The implementation type.
            </typeparam>
            <param name="context">The current rewriter context.</param>
            <param name="value">The source value to get the values from.</param>
        </member>
        <member name="F:ILGPU.IR.Transformations.LowerThreadIntrinsics.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.#cctor">
            <summary>
            Registers all rewriting patterns.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the lowering of thread intrinsics transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerTypes`1">
            <summary>
            Converts structure values into distinct values.
            </summary>
            <remarks>
            This transformation does not change function parameters and calls to other
            functions.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.NullValue)">
            <summary>
            Lowers null values with nested types.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.StructureValue)">
            <summary>
            Lowers structure values with nested types.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.GetField)">
            <summary>
            Lowers set field operations into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.SetField)">
            <summary>
            Lowers set field operations into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.Alloca)">
            <summary>
            Lowers alloca values into their appropriate counter parts.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.PointerCast)">
            <summary>
            Lowers pointer cast values into their appropriate counter parts.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.LoadFieldAddress)">
            <summary>
            Lowers LFA operations into an adapted version.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.PhiValue)">
            <summary>
            Lowers Phi nodes into an adapted version.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Register``1(ILGPU.IR.Types.TypeLowering{`0},``0)">
            <summary>
            Registers a type-mapping entry and returns always true.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Register``1(ILGPU.IR.Types.TypeLowering{`0},``0,ILGPU.IR.Types.TypeNode)">
            <summary>
            Registers a type-mapping entry and returns always true.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.IsTypeDependent``1(ILGPU.IR.Types.TypeLowering{`0},``0)">
            <summary>
            Returns true if the type is type dependent and registers a type-mapping
            entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.IsTypeDependent``1(ILGPU.IR.Types.TypeLowering{`0},``0,ILGPU.IR.Types.TypeNode)">
            <summary>
            Returns true if the type is type dependent and registers a type-mapping
            entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.AddRewriters(ILGPU.IR.Rewriting.Rewriter{ILGPU.IR.Types.TypeLowering{`0}})">
            <summary>
            Adds all internal type rewriters to the given rewriter instance.
            </summary>
            <param name="rewriter">The rewriter to extent.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.#ctor">
            <summary>
            Constructs a new type conversion pass.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.CreateLoweringConverter(ILGPU.IR.Method.Builder)">
            <summary>
            Creates a new type lowering converter.
            </summary>
            <param name="builder">The current builder.</param>
            <returns>The created rewriter.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.PerformTransformation(ILGPU.IR.Method.Builder,ILGPU.IR.Rewriting.Rewriter{ILGPU.IR.Types.TypeLowering{`0}})">
            <summary>
            Performs a complete type lowering transformation.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="rewriter">The rewriter to use.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerViews">
            <summary>
            Lowers views (values and types) into platform specific instances.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerViews.ViewTypeLowering">
            <summary>
            An abstract view type converter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerViews.ViewTypeLowering.#ctor">
            <summary>
            Constructs a new type lowering without a parent type context.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerViews.ViewTypeLowering.#ctor(ILGPU.IR.Method.Builder)">
            <summary>
            Constructs a new type lowering.
            </summary>
            <param name="builder">The parent builder.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerViews.ViewTypeLowering.#ctor(ILGPU.IR.Construction.IRBuilder)">
            <summary>
            Constructs a new type lowering.
            </summary>
            <param name="builder">The parent builder.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerViews.ViewTypeLowering.#ctor(ILGPU.IR.Types.IRTypeContext)">
            <summary>
            Constructs a new type lowering.
            </summary>
            <param name="typeContext">The parent type context.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerViews.ViewTypeLowering.IsTypeDependent(ILGPU.IR.Types.TypeNode)">
            <summary cref="M:ILGPU.IR.Types.TypeLowering`1.IsTypeDependent(ILGPU.IR.Types.TypeNode)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerViews.AddRewriters(ILGPU.IR.Rewriting.Rewriter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType}},ILGPU.IR.Rewriting.RewriteConverter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.NewView},ILGPU.IR.Rewriting.RewriteConverter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.GetViewLength},ILGPU.IR.Rewriting.RewriteConverter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.SubViewValue},ILGPU.IR.Rewriting.RewriteConverter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.AddressSpaceCast},ILGPU.IR.Rewriting.RewriteConverter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.ViewCast},ILGPU.IR.Rewriting.RewriteConverter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.LoadElementAddress})">
            <summary>
            Adds a set of rewriters specialized for a general view-type lowering.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerViews.#ctor">
            <summary>
            Constructs a new view conversion pass.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.OptimizationLevel">
            <summary>
            Represent an optimization level.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.OptimizationLevel.Debug">
            <summary>
            Defaults to O0.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.OptimizationLevel.Release">
            <summary>
            Defaults to O1.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.OptimizationLevel.O0">
            <summary>
            Lightweight (required) transformations only.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.OptimizationLevel.O1">
            <summary>
            Default release mode transformations.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.OptimizationLevel.O2">
            <summary>
            Expensive transformations.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Optimizer">
            <summary>
            Realizes utility helpers to perform and initialize transformations
            based on an <see cref="T:ILGPU.IR.Transformations.OptimizationLevel"/>.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.Optimizer.NumOptimizationLevels">
            <summary>
            Returns the number of known optimization levels.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.Optimizer.OptimizationHandlers">
            <summary>
            Internal mapping from optimization levels to handlers.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddOptimizations(ILGPU.IR.Transformations.Transformer.Builder,ILGPU.ContextFlags,ILGPU.IR.Transformations.OptimizationLevel)">
            <summary>
            Populates the given transformation manager with the required
            optimization transformations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <param name="contextFlags">The context flags.</param>
            <param name="level">The desired optimization level.</param>
            <returns>The maximum number of iterations.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddBasicOptimizations(ILGPU.IR.Transformations.Transformer.Builder,ILGPU.ContextFlags)">
            <summary>
            Adds basic optimization transformations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <param name="contextFlags">The context flags.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddBackendOptimizations(ILGPU.IR.Transformations.Transformer.Builder,ILGPU.IR.Transformations.AcceleratorSpecializer,ILGPU.IR.Transformations.OptimizationLevel)">
            <summary>
            Adds general backend optimizations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <param name="acceleratorSpecializer">
            An instance of an <see cref="T:ILGPU.IR.Transformations.AcceleratorSpecializer"/> class.
            </param>
            <param name="level">The desired optimization level.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddO0Optimizations(ILGPU.IR.Transformations.Transformer.Builder,ILGPU.ContextFlags)">
            <summary>
            Populates the given transformation manager with O0 optimizations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <param name="contextFlags">The context flags.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddO1Optimizations(ILGPU.IR.Transformations.Transformer.Builder,ILGPU.ContextFlags)">
            <summary>
            Populates the given transformation manager with O1 optimizations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <param name="contextFlags">The context flags.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddO2Optimizations(ILGPU.IR.Transformations.Transformer.Builder,ILGPU.ContextFlags)">
            <summary>
            Populates the given transformation manager with O2 optimizations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <param name="contextFlags">The context flags.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.CreateTransformer(ILGPU.IR.Transformations.OptimizationLevel,ILGPU.IR.Transformations.TransformerConfiguration,ILGPU.ContextFlags)">
            <summary>
            Creates a transformer for the given optimization level.
            </summary>
            <param name="level">The level.</param>
            <param name="configuration">The transformer configuration.</param>
            <param name="contextFlags">The context flags.</param>
            <returns>The created transformer.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.SimplifyControlFlow">
            <summary>
            Merges multiple sequential branches (a call/branch chain) into a single block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SimplifyControlFlow.MergeChain(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlockSet@)">
            <summary>
            Tries to merge a sequence of jumps.
            </summary>
            <param name="builder">The current method builder.</param>
            <param name="root">The block where to start merging.</param>
            <param name="visited">The collection of visited nodes.</param>
            <returns>True, if something could be merged.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.SimplifyControlFlow.#ctor">
            <summary>
            Constructs a new transformation to merge sequential jump chains.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SimplifyControlFlow.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the control-flow simplification transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.SSAConstruction">
            <summary>
            Performs ah SSA construction transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.RequiresAddress(ILGPU.IR.Value)">
            <summary>
            Returns false if the given node cannot be transformed into an SSA value.
            </summary>
            <param name="node">The current node.</param>
            <returns>
            False, if the given node cannot be transformed into an SSA value.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.SSAConstruction.ConstructionData">
            <summary>
            Data that is using during SSA construction.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.ConstructionData.#ctor(System.Collections.Generic.HashSet{ILGPU.IR.Values.Alloca})">
            <summary>
            Initializes the data structure.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.SSAConstruction.ConstructionData.Allocas">
            <summary>
            The set of all allocas to be converted into SSA value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.SSAConstruction.ConstructionData.ConvertedValues">
            <summary>
            Maps converted values to their associated field references.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.ConstructionData.ContainsAlloca(ILGPU.IR.Values.Alloca)">
            <summary>
            Returns true if the given alloca should be converted.
            </summary>
            <param name="alloca">The alloca to check.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.ConstructionData.TryGetConverted(ILGPU.IR.Value,ILGPU.IR.Values.FieldRef@)">
            <summary>
            Tries to get a converted value entry.
            </summary>
            <param name="value">The value to lookup.</param>
            <param name="fieldRef">The resolved field reference (if any).</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.ConstructionData.AddConverted(ILGPU.IR.Value,ILGPU.IR.Values.FieldRef)">
            <summary>
            Adds the given value and the field reference to the mapping of
            converted values.
            </summary>
            <param name="value">The value to register.</param>
            <param name="fieldRef">The field reference.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.Convert(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Transformations.SSAConstruction.ConstructionData,ILGPU.IR.Values.Alloca)">
            <summary>
            Converts an alloca node to its initial SSA value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.Convert(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Transformations.SSAConstruction.ConstructionData,ILGPU.IR.Values.Load)">
            <summary>
            Converts a load node into an SSA value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.Convert(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Transformations.SSAConstruction.ConstructionData,ILGPU.IR.Values.Store)">
            <summary>
            Converts a store node into an SSA value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.Convert(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Transformations.SSAConstruction.ConstructionData,ILGPU.IR.Values.LoadFieldAddress)">
            <summary>
            Converts a field-address operation into an SSA binding.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.Convert(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Transformations.SSAConstruction.ConstructionData,ILGPU.IR.Values.AddressSpaceCast)">
            <summary>
            Converts an address-space cast into an SSA binding.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.SSAConstruction.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.#cctor">
            <summary>
            Registers all rewriting patterns.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.#ctor">
            <summary>
            Constructs a new SSA construction pass.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the SSA construction transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Transformation">
            <summary>
            Represents a generic transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Transformation.ITransformExecutor">
            <summary>
            Represents an abstract transform execution driver closure.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformation.ITransformExecutor.Execute(ILGPU.IR.Method.Builder)">
            <summary>
            Executes the current transformation.
            </summary>
            <param name="builder">The current method builder.</param>
            <returns>True, if the transformation could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformation.#ctor">
            <summary>
            Constructs a new transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformation.Transform``1(ILGPU.IR.MethodCollection{``0})">
            <summary>
            Transforms all method in the given context.
            </summary>
            <param name="methods">The methods to transform.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformation.ExecuteTransform``1(ILGPU.IR.Method.Builder,``0@)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="builder">The current method builder.</param>
            <param name="executor">The desired transform executor.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnorderedTransformation">
            <summary>
            Represents a generic transformation that can be applied in an unordered manner.
            </summary>
            <remarks>
            Note that this transformation is applied in parallel to all methods.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnorderedTransformation.Executor">
            <summary>
            Represents an unordered executor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation.Executor.#ctor(ILGPU.IR.Transformations.UnorderedTransformation)">
            <summary>
            Constructs a new executor.
            </summary>
            <param name="parent">The parent transformation.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.UnorderedTransformation.Executor.Parent">
            <summary>
            The associated parent transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation.Executor.Execute(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the parent transformation.
            </summary>
            <param name="builder">The current builder.</param>
            <returns>True, if the transformation could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation.#ctor">
            <summary>
            Constructs a new transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation.Transform``1(ILGPU.IR.MethodCollection{``0})">
            <summary>
            Transforms all methods in the given context.
            </summary>
            <param name="methods">The methods to transform.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="builder">The current method builder.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.SequentialUnorderedTransformation">
            <summary>
            Represents a generic transformation that can be applied in an unordered manner.
            </summary>
            <remarks>
            Note that this transformation is applied sequentially to all methods.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Transformations.SequentialUnorderedTransformation.Executor">
            <summary>
            Represents an unordered executor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SequentialUnorderedTransformation.Executor.#ctor(ILGPU.IR.Transformations.SequentialUnorderedTransformation)">
            <summary>
            Constructs a new executor.
            </summary>
            <param name="parent">The parent transformation.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.SequentialUnorderedTransformation.Executor.Parent">
            <summary>
            The associated parent transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SequentialUnorderedTransformation.Executor.Execute(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the parent transformation.
            </summary>
            <param name="builder">The current builder.</param>
            <returns>True, if the transformation could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.SequentialUnorderedTransformation.Transform``1(ILGPU.IR.MethodCollection{``0})">
            <summary>
            Transforms all methods in the given context.
            </summary>
            <param name="methods">The methods to transform.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.SequentialUnorderedTransformation.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="builder">The current method builder.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnorderedTransformation`1">
            <summary>
            Represents a generic transformation that can be applied in an unordered manner.
            </summary>
            <typeparam name="TIntermediate">The type of the intermediate values.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnorderedTransformation`1.Executor">
            <summary>
            Represents an unordered executor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.Executor.#ctor(ILGPU.IR.Transformations.UnorderedTransformation{`0},`0)">
            <summary>
            Constructs a new executor.
            </summary>
            <param name="parent">The parent transformation.</param>
            <param name="intermediate">The intermediate value.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.UnorderedTransformation`1.Executor.Parent">
            <summary>
            The associated parent transformation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.UnorderedTransformation`1.Executor.Intermediate">
            <summary>
            Returns the associated intermediate value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.Executor.Execute(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the parent transformation.
            </summary>
            <param name="builder">The current builder.</param>
            <returns>True, if the transformation could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.#ctor">
            <summary>
            Constructs a new transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.CreateIntermediate``1(ILGPU.IR.MethodCollection{``0}@)">
            <summary>
            Creates a new intermediate value.
            </summary>
            <returns>The resulting intermediate value.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.FinishProcessing(`0)">
            <summary>
            Is invoked after all methods have been transformed.
            </summary>
            <param name="intermediate">The current intermediate value.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.Transform``1(ILGPU.IR.MethodCollection{``0})">
            <summary>
            Transforms all methods in the given context.
            </summary>
            <param name="methods">The methods to transform.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.PerformTransformation(ILGPU.IR.Method.Builder,`0)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="builder">The current method builder.</param>
            <param name="intermediate">The intermediate value.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.OrderedTransformation">
            <summary>
            Represents a generic transformation that will be applied in the post order
            of the induced call graph.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.OrderedTransformation.Executor">
            <summary>
            Represents an ordered executor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation.Executor.#ctor(ILGPU.IR.Transformations.OrderedTransformation,ILGPU.IR.Analyses.Landscape,ILGPU.IR.Analyses.Landscape{System.Object}.Entry)">
            <summary>
            Constructs a new executor.
            </summary>
            <param name="parent">The parent transformation.</param>
            <param name="landscape">The current landscape.</param>
            <param name="entry">The current landscape entry.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.OrderedTransformation.Executor.Parent">
            <summary>
            The associated parent transformation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.OrderedTransformation.Executor.Landscape">
            <summary>
            Returns the current landscape.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.OrderedTransformation.Executor.Entry">
            <summary>
            Returns the current entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation.Executor.Execute(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the parent transformation.
            </summary>
            <param name="builder">The current builder.</param>
            <returns>True, if the transformation could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation.#ctor">
            <summary>
            Constructs a new transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation.Transform``1(ILGPU.IR.MethodCollection{``0})">
            <summary>
            Transforms all methods in the given context.
            </summary>
            <param name="methods">The methods to transform.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation.PerformTransformation(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.Landscape,ILGPU.IR.Analyses.Landscape{System.Object}.Entry)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="builder">The current method builder.</param>
            <param name="landscape">The global processing landscape.</param>
            <param name="current">The current landscape entry.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.ITransformerHandler">
            <summary>
            Represents a transformer callback.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.ITransformerHandler.BeforeTransformation(ILGPU.IR.IRContext,ILGPU.IR.Transformations.Transformation)">
            <summary>
            Will be invoked before a transformation is applied.
            </summary>
            <param name="context">The current context.</param>
            <param name="transformation">The transformation to apply.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.ITransformerHandler.AfterTransformation(ILGPU.IR.IRContext,ILGPU.IR.Transformations.Transformation)">
            <summary>
            Will be invoked after a transformation has been applied.
            </summary>
            <param name="context">The current context.</param>
            <param name="transformation">The applied transformation.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.TransformerConfiguration">
            <summary>
            Represents a transformer configuration.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.TransformerConfiguration.Empty">
            <summary>
            Represents an empty configuration that works on all functions without
            adding additional flags to them.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.TransformerConfiguration.Transformed">
            <summary>
            Represents a default configuration that works on all non-transformed
            functions and marks them as transformed.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.TransformerConfiguration.#ctor(ILGPU.IR.MethodTransformationFlags,System.Boolean)">
            <summary>
            Constructs a new transformer configuration.
            </summary>
            <param name="flags">The transformation flags.</param>
            <param name="finalGC">True, if a final GC run is required.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.TransformerConfiguration.#ctor(ILGPU.IR.MethodTransformationFlags,ILGPU.IR.MethodTransformationFlags,System.Boolean)">
            <summary>
            Constructs a new transformer configuration.
            </summary>
            <param name="requiredFlags">
            The transformation flags that should not be set.
            </param>
            <param name="flags">The transformation flags that will be set.</param>
            <param name="finalGC">True, if a final GC run is required.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.TransformerConfiguration.FinalGC">
            <summary>
            Returns true if a final GC run is required.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.TransformerConfiguration.RequiredFlags">
            <summary>
            Returns the transformation flags that will be checked
            on the functions to transform.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.TransformerConfiguration.TransformationFlags">
            <summary>
            Returns the transformation flags that will be stored on
            on the transformed functions.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.TransformerConfiguration.AddsFlags">
            <summary>
            Returns true if the current configuration manipulates transformation flags.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Transformer">
            <summary>
            Applies transformations to contexts.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Transformer.Builder">
            <summary>
            A transformer builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Builder.#ctor(ILGPU.IR.Transformations.TransformerConfiguration,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Transformations.Transformation}.Builder)">
            <summary>
            Constructs a new builder.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <param name="targetBuilder">The target builder.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.Transformer.Builder.Configuration">
            <summary>
            Returns the current transformer configuration.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Builder.Add(ILGPU.IR.Transformations.Transformation)">
            <summary>
            Adds the given transformation to the manager.
            </summary>
            <param name="transformation">The transformation to add.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Builder.ToTransformer">
            <summary>
            Converts this builder to an immutable array.
            </summary>
            <returns>The immutable transformation array.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.Transformer.MethodPredicate">
            <summary>
            Represents a function predicate for functions to transform.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.MethodPredicate.#ctor(ILGPU.IR.MethodTransformationFlags)">
            <summary>
            Constructs a new function predicate.
            </summary>
            <param name="flags">The desired flags that should not be set.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.Transformer.MethodPredicate.Flags">
            <summary>
            Returns the flags that should not be set on the target function.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.MethodPredicate.Match(ILGPU.IR.Method)">
            <summary cref="M:ILGPU.IR.IMethodCollectionPredicate.Match(ILGPU.IR.Method)"/>
        </member>
        <member name="F:ILGPU.IR.Transformations.Transformer.Empty">
            <summary>
            Represents an empty transformer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.CreateBuilder(ILGPU.IR.Transformations.TransformerConfiguration)">
            <summary>
            Creates a new transformer builder.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <returns>A new builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Create(ILGPU.IR.Transformations.TransformerConfiguration,ILGPU.IR.Transformations.Transformation)">
            <summary>
            Creates a transformer.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <param name="transform">The specification to use.</param>
            <returns>The created transformer.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Create(ILGPU.IR.Transformations.TransformerConfiguration,ILGPU.IR.Transformations.Transformation,ILGPU.IR.Transformations.Transformation[])">
            <summary>
            Creates a transformer.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <param name="transform">The first transformation.</param>
            <param name="transformations">The other transformations.</param>
            <returns>The created transformer.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Create(ILGPU.IR.Transformations.TransformerConfiguration,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Transformations.Transformation})">
            <summary>
            Creates a transformer.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <param name="transforms">The transformations.</param>
            <returns>The created transformer.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.#ctor(ILGPU.IR.Transformations.TransformerConfiguration,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Transformations.Transformation})">
            <summary>
            Constructs a new transformer.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <param name="transformations">The transformations.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.Transformer.Configuration">
            <summary>
            Returns the associated configuration.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.Transformer.Transformations">
            <summary>
            Returns the stored transformations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.Transformer.Length">
            <summary>
            Returns the number of stored transformations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Transform``1(ILGPU.IR.IRContext,``0,ILGPU.IR.Verifier)">
            <summary>
            Applies all transformations to the given context.
            </summary>
            <typeparam name="THandler">The handler type.</typeparam>
            <param name="context">The target IR context.</param>
            <param name="handler">The target handler.</param>
            <param name="verifier">The internal verifier instance.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnreachableCodeElimination">
            <summary>
            Represents an UCE transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper">
            <summary>
            An argument remapper for Phi values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper.#ctor(System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock}@)">
            <summary>
            Initializes a new scope.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper.Blocks">
            <summary>
            Returns the associated scope.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper.IsReachable(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given block is reachable.
            </summary>
            <param name="block">The block to test.</param>
            <returns>True, if the given block is reachable.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper.CanRemap(System.ReadOnlySpan{ILGPU.IR.BasicBlock}@)">
            <summary>
            Returns true if any of the given blocks is no longer in the current
            scope.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper.TryRemap(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock@)">
            <summary>
            Keeps the block mapping but returns false if this block has become
            unreachable.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper.RemapValue(ILGPU.IR.BasicBlock,ILGPU.IR.Value)">
            <summary>
            Returns the value of <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.Update(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper,ILGPU.IR.Values.PhiValue)">
            <summary>
            Updates reachable phi values that have references to unreachable parts.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.UnreachableCodeElimination.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.#cctor">
            <summary>
            Registers all rewriting patterns.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.#ctor">
            <summary>
            Constructs a new UCE transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the UCE transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.ArrayType">
            <summary>
            Represents an array type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Constructs a new array type.
            </summary>
            <param name="typeContext">The parent type context.</param>
            <param name="elementType">The element type.</param>
            <param name="dimensions">The number of dimensions.</param>
        </member>
        <member name="P:ILGPU.IR.Types.ArrayType.ElementType">
            <summary>
            Returns the element type of the array.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.ArrayType.Dimensions">
            <summary>
            Returns the number of dimension.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.ArrayType.AddressSpace">
            <summary>
            Returns the associated address space.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.GetManagedType">
            <summary>
            Creates a managed array type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.ToString">
            <summary cref="M:ILGPU.IR.Types.TypeNode.ToString"/>
        </member>
        <member name="T:ILGPU.IR.Types.HandleType">
            <summary>
            Represents a .Net runtime-specific handle type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.#ctor(ILGPU.IR.Types.IRTypeContext)">
            <summary>
            Constructs a new .Net runtime-specific handle type.
            </summary>
            <param name="typeContext">The parent type context.</param>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.GetManagedType">
            <summary>
            Creates an object type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.IIRTypeContext">
            <summary>
            Represents an abstract type context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IIRTypeContext.VoidType">
            <summary>
            Returns the void type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IIRTypeContext.StringType">
            <summary>
            Returns the memory type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.GetPrimitiveType(ILGPU.BasicValueType)">
            <summary>
            Resolves the primitive type that corresponds to the given
            <see cref="T:ILGPU.BasicValueType"/>.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The created primitive type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.GetIndexType(System.Int32)">
            <summary>
            Creates an intrinsic index type.
            </summary>
            <param name="dimension">The dimension of the index type.</param>
            <returns>The created index type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreatePointerType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a pointer type.
            </summary>
            <param name="elementType">The pointer element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created pointer type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a view type.
            </summary>
            <param name="elementType">The view element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateArrayType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new array type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="dimensions">The array dimensions.</param>
            <returns>The created array dimensions.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateStructureType(System.Int32)">
            <summary>
            Creates a new structure type builder with the given capacity.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <returns>The created structure builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateType(System.Type)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateType(System.Type,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <param name="addressSpace">The address space for pointer types.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.SpecializeAddressSpaceType(ILGPU.IR.Types.AddressSpaceType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Specializes the address space of the given <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.
            </summary>
            <param name="addressSpaceType">The source type.</param>
            <param name="addressSpace">The new address space.</param>
            <returns>The created specialized <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.TrySpecializeAddressSpaceType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Types.TypeNode@)">
            <summary>
            Tries to specialize a view or a pointer address space.
            </summary>
            <param name="type">The pointer or view type.</param>
            <param name="addressSpace">The target address space.</param>
            <param name="specializedType">The specialized type.</param>
            <returns>True, if the type could be specialized.</returns>
        </member>
        <member name="T:ILGPU.IR.Types.IRTypeContextExtensions">
            <summary>
            Extension methods for <see cref="T:ILGPU.IR.Types.IIRTypeContext"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContextExtensions.CreateEmptyStructureType``1(``0)">
            <summary>
            Creates an empty structure type.
            </summary>
            <typeparam name="TTypeContext">the parent type context.</typeparam>
            <param name="typeContext">The type context.</param>
            <returns>The type representing an empty structure.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContextExtensions.CreateStructureType``1(``0)">
            <summary>
            Creates a new structure type builder with an initial capacity.
            </summary>
            <typeparam name="TTypeContext">the parent type context.</typeparam>
            <param name="typeContext">The type context.</param>
            <returns>The created structure builder.</returns>
        </member>
        <member name="T:ILGPU.IR.Types.IRTypeContext">
            <summary>
            Represents a context that manages IR types.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.IRTypeContext.BasicValueTypes">
            <summary>
            Contains all basic value types.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.IRTypeContext.IndexTypes">
            <summary>
            All intrinsic index types.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.IsViewIndexType(ILGPU.BasicValueType)">
            <summary>
            Returns true if the given basic value type can be used in combination with
            a view type.
            </summary>
            <param name="basicValueType"></param>
            <returns>
            True if the given value type is a compatible view index type.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new IR type context.
            </summary>
            <param name="context">The associated main context.</param>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.VoidType">
            <summary>
            Returns the void type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.StringType">
            <summary>
            Returns the memory type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.HandleType">
            <summary>
            Returns the managed handle type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.RootType">
            <summary>
            Returns the root structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.PaddingType">
            <summary>
            Returns a custom padding type that is used to pad structure values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.GetPrimitiveType(ILGPU.BasicValueType)">
            <summary>
            Resolves the primitive type that corresponds to the given
            <see cref="T:ILGPU.BasicValueType"/>.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The created primitive type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.GetIndexType(System.Int32)">
            <summary>
            Creates an intrinsic index type.
            </summary>
            <param name="dimension">The dimension of the index type.</param>
            <returns>The created index type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreatePointerType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a pointer type.
            </summary>
            <param name="elementType">The pointer element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created pointer type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a view type.
            </summary>
            <param name="elementType">The view element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateStructureType(System.Int32)">
            <summary>
            Creates a new structure type builder with the given capacity.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <returns>The created structure builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.FinishStructureType(ILGPU.IR.Types.StructureType.Builder@)">
            <summary>
            Creates a new structure type.
            </summary>
            <param name="builder">The current builder.</param>
            <returns>The created type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateArrayType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new array type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="dimension">The array dimension.</param>
            <returns>The created array type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateType(System.Type)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateType(System.Type,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <param name="addressSpace">The address space for pointer types.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.Map``1(System.Type,ILGPU.IR.MemoryAddressSpace,``0)">
            <summary>
            Maps the given type and address space to the type node provided.
            </summary>
            <typeparam name="T">The node type.</typeparam>
            <param name="type">The managed type.</param>
            <param name="addressSpace">The address space.</param>
            <param name="typeNode">The type node to map to.</param>
            <returns>The given type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateTypeInternal(System.Type,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <param name="addressSpace">The address space for pointer types.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.SpecializeAddressSpaceType(ILGPU.IR.Types.AddressSpaceType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Specializes the address space of the given <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.
            </summary>
            <param name="addressSpaceType">The source type.</param>
            <param name="addressSpace">The new address space.</param>
            <returns>The created specialized <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.TrySpecializeAddressSpaceType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Types.TypeNode@)">
            <summary>
            Tries to specialize a view or a pointer address space.
            </summary>
            <param name="type">The pointer or view type.</param>
            <param name="addressSpace">The target address space.</param>
            <param name="specializedType">The specialized type.</param>
            <returns>True, if the type could be specialized.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.UnifyType``1(``0)">
            <summary>
            Creates a type.
            </summary>
            <typeparam name="T">The type of the  type.</typeparam>
            <param name="type">The type to create.</param>
            <returns>The created type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.PopulateTypeMapping">
            <summary>
            Populates the internal type mapping.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.IR.Types.ObjectType">
            <summary>
            Represents an abstract object value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ObjectType.#ctor(ILGPU.IR.Types.IRTypeContext)">
            <summary>
            Constructs a new object type.
            </summary>
            <param name="typeContext">The parent type context.</param>
        </member>
        <member name="T:ILGPU.IR.Types.PaddingType">
            <summary>
            Represents a padding type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PaddingType.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.IR.Types.PrimitiveType)">
            <summary>
            Constructs a new padding type.
            </summary>
            <param name="typeContext">The parent type context.</param>
            <param name="primitiveType">The primitive type to use for padding.</param>
        </member>
        <member name="P:ILGPU.IR.Types.PaddingType.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.PaddingType.PrimitiveType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PaddingType.GetManagedType">
            <summary>
            Returns the corresponding managed basic value type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PaddingType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.PaddingType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.PaddingType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.IAddressSpaceType">
            <summary>
            An abstract type that has an element type and an address space.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IAddressSpaceType.ElementType">
            <summary>
            Returns the underlying element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IAddressSpaceType.AddressSpace">
            <summary>
            Returns the associated address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.AddressSpaceType">
            <summary>
            Represents an abstract type that relies on addresses.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.AddressSpaceType.AddressSpaceConverter">
            <summary>
            Converts the address space of <see cref="T:ILGPU.IR.Types.AddressSpaceType"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.AddressSpaceConverter.#ctor(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new address space converter.
            </summary>
            <param name="addressSpace">The target address space.</param>
        </member>
        <member name="P:ILGPU.IR.Types.AddressSpaceType.AddressSpaceConverter.AddressSpace">
            <summary>
            Returns the target address space to specialize.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.AddressSpaceConverter.GetNumFields(ILGPU.IR.Types.AddressSpaceType)">
            <summary>
            Returns one field per address space type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.AddressSpaceConverter.ConvertType``1(``0,ILGPU.IR.Types.AddressSpaceType)">
            <summary>
            Converts a single <see cref="T:ILGPU.IR.Types.AddressSpaceType"/> into a specialized
            version using the target <see cref="P:ILGPU.IR.Types.AddressSpaceType.AddressSpaceConverter.AddressSpace"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new address type.
            </summary>
            <param name="typeContext">The parent type context.</param>
            <param name="elementType">The element type.</param>
            <param name="addressSpace">The associated address space.</param>
        </member>
        <member name="P:ILGPU.IR.Types.AddressSpaceType.ElementType">
            <summary>
            Returns the underlying element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.AddressSpaceType.AddressSpace">
            <summary>
            Returns the associated address space.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.ToString">
            <summary cref="M:ILGPU.IR.Types.TypeNode.ToString"/>
        </member>
        <member name="T:ILGPU.IR.Types.PointerType">
            <summary>
            Represents the type of a generic pointer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new pointer type.
            </summary>
            <param name="typeContext">The parent type context.</param>
            <param name="elementType">The element type.</param>
            <param name="addressSpace">The associated address space.</param>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.GetManagedType">
            <summary>
            Creates a managed pointer type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.ViewType">
            <summary>
            Represents the type of a generic view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new view type.
            </summary>
            <param name="typeContext">The parent type context.</param>
            <param name="elementType">The element type.</param>
            <param name="addressSpace">The associated address space.</param>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.GetManagedType">
            <summary>
            Creates a managed view type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.PrimitiveType">
            <summary>
            Represents a primitive type.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.PrimitiveType.BasicTypeInformation">
            <summary>
            Contains default size information about built-in types.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.PrimitiveType.BasicSizeInformation">
            <summary>
            Maps integer-based type size values to <see cref="P:ILGPU.IR.Types.PrimitiveType.BasicValueType"/> entries.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.GetBasicValueTypeBySize(System.Int32)">
            <summary>
            Determines the <see cref="P:ILGPU.IR.Types.PrimitiveType.BasicValueType"/> that corresponds to the given
            type size in bytes (if any).
            </summary>
            <param name="size">The size in bytes.</param>
            <returns>The basic value type (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.BasicValueType)">
            <summary>
            Constructs a new primitive type.
            </summary>
            <param name="typeContext">The parent type context.</param>
            <param name="basicValueType">The basic value type.</param>
        </member>
        <member name="P:ILGPU.IR.Types.PrimitiveType.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.PrimitiveType.IsBool">
            <summary>
            Returns true if this type represents a bool type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.PrimitiveType.Is32Bit">
            <summary>
            Returns true if this type represents a 32 bit type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.PrimitiveType.Is64Bit">
            <summary>
            Returns true if this type represents a 64 bit type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.GetManagedType">
            <summary>
            Returns the corresponding managed basic value type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.StringType">
            <summary>
            Represents a string type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.#ctor(ILGPU.IR.Types.IRTypeContext)">
            <summary>
            Constructs a new string type.
            </summary>
            <param name="typeContext">The parent type context.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.GetManagedType">
            <summary>
            Returns the corresponding managed basic value type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType">
            <summary>
            Represents a structure type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.Builder">
            <summary>
            A structure type builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Builder.#ctor(ILGPU.IR.Types.IRTypeContext,System.Int32,System.Int32)">
            <summary>
            Creates a new type builder with the given capacity.
            </summary>
            <param name="typeContext">The current type context.</param>
            <param name="capacity">The initial capacity.</param>
            <param name="size">The custom size in bytes (if any).</param>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.TypeContext">
            <summary>
            Returns the parent type context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.ExplicitSize">
            <summary>
            Returns the explicit size in bytes (if any).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.Count">
            <summary>
            Returns the number of all fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.Offset">
            <summary>
            The current offset in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.Alignment">
            <summary>
            The current alignment for the underlying type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.Size">
            <summary>
            The current size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.AlignedSize">
            <summary>
            Returns the aligned size based on the current offset and the alignment.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.Item(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns the field type that corresponds to the given field access.
            </summary>
            <param name="access">The field access.</param>
            <returns>The resolved field type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Builder.Add(ILGPU.IR.Types.TypeNode)">
            <summary>
            Adds the given type node to the structure builder.
            </summary>
            <param name="type">The type node to add.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Builder.AddInternal(ILGPU.IR.Types.TypeNode,System.Int32,System.Int32)">
            <summary>
            Adds the given primitive type node.
            </summary>
            <param name="type">The type node to add.</param>
            <param name="offset">The custom relative offset.</param>
            <param name="alignment">The custom alignment.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Builder.Seal">
            <summary>
            Seals this builder and returns a type that corresponds to the type
            represented by this builder.
            </summary>
            <returns>The create type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Builder.Seal(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode}@,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode}@,System.Collections.Immutable.ImmutableArray{System.Int32}@,System.Collections.Immutable.ImmutableArray{System.Int32}@)">
            <summary>
            Moves the underlying builders to immutable arrays.
            </summary>
            <param name="types">Direct field types.</param>
            <param name="allTypes">All field types.</param>
            <param name="offsets">All field offsets.</param>
            <param name="remappedFields">Renumbered field indices.</param>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.Enumerator">
            <summary>
            An enumerator to enumerate all nested fields in the structure type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Enumerator.#ctor(ILGPU.IR.Types.StructureType)">
            <summary>
            Constructs a new use enumerator.
            </summary>
            <param name="type">The structure type.</param>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Enumerator.Type">
            <summary>
            Returns the parent structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Enumerator.Current">
            <summary>
            Returns the current use.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.OffsetCollection">
            <summary>
            A readonly collection of all field offsets and paddings.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator">
            <summary>
            An enumerator to enumerate all offsets in the structure type.
            </summary>
            <remarks>
            The tuple contains field access, byte offset and byte padding info.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator.#ctor(ILGPU.IR.Types.StructureType)">
            <summary>
            Constructs a new use enumerator.
            </summary>
            <param name="type">The structure type.</param>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator.Type">
            <summary>
            Returns the parent structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator.Current">
            <summary>
            Returns the current use.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.#ctor(ILGPU.IR.Types.StructureType)">
            <summary>
            Constructs a new offset collection.
            </summary>
            <param name="parent">The parent structure type.</param>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.OffsetCollection.Parent">
            <summary>
            Returns the parent structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.OffsetCollection.Count">
            <summary>
            Returns the number of offsets.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all offsets in the parent type.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.System#Collections#Generic#IEnumerable{(ILGPU#IR#Values#FieldAccess,System#Int32,System#Int32)}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all offsets in the parent type.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all offsets in the parent type.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.VectorizableFieldCollection">
            <summary>
            Contains all vectorizable field ranges in the scope of its parent type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry">
            <summary>
            Represents a vectorizable sub range in the scope of a structure type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.#ctor(ILGPU.IR.Types.TypeNode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new entry.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.Type">
            <summary>
            Returns the associated type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.Index">
            <summary>
            Returns the start index within the parent structure.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.Count">
            <summary>
            Returns the number of fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.Offset">
            <summary>
            Returns the base offset in bytes from the beginning of the field.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.RequiredAlignment">
            <summary>
            Returns the required alignment in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.Split(ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry@,ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry@)">
            <summary>
            Splits the current entry into two parts.
            </summary>
            <param name="first">The first part.</param>
            <param name="second">The second part.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.AddField">
            <summary>
            Adds a field to this entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.IsAligned(System.Int32)">
            <summary>
            Checks whether the base offset is properly alignment with respect to
            the given alignment in bytes.
            </summary>
            <param name="alignment">The underlying alignment in bytes.</param>
            <returns>True, if the range is properly aligned.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.CanBeAligned(ILGPU.IR.Types.StructureType)">
            <summary>
            Returns true if this entry can be properly aligned.
            </summary>
            <param name="parentType">The parent structure type.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.#ctor(ILGPU.IR.Types.StructureType)">
            <summary>
            Constructs a new field collection.
            </summary>
            <param name="structureType">The parent structure type.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.RegisterRange(ILGPU.IR.Types.StructureType,ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry@)">
            <summary>
            Registers the given range entry.
            </summary>
            <param name="structureType">The parent structure type.</param>
            <param name="entry">The entry to register.</param>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Count">
            <summary>
            Returns the number of entries.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Item(System.Int32)">
            <summary>
            Returns the i-th entry.
            </summary>
            <param name="index">The entry index.</param>
            <returns>The i-th vector range entry.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.GetNumFields(ILGPU.IR.Types.TypeNode)">
            <summary>
            Gets the number of fields of the given type.
            </summary>
            <param name="typeNode">The type.</param>
            <returns>The number of nested fields (or 1).</returns>
        </member>
        <member name="F:ILGPU.IR.Types.StructureType.hashCode">
            <summary>
            Caches the internal hash code of all child nodes.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.StructureType.offsets">
            <summary>
            All underlying byte offsets.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.StructureType.remappedFields">
            <summary>
            Maps the original field index to the index of the rebuilt field.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.IR.Types.StructureType.Builder@)">
            <summary>
            Constructs a new object type.
            </summary>
            <param name="typeContext">The parent type context.</param>
            <param name="builder">The current structure builder.</param>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.DirectFields">
            <summary>
            Returns the high-level fields stored in this structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Fields">
            <summary>
            Returns all associated fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Offsets">
            <summary>
            Returns a readonly collection of all field offsets.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFields">
            <summary>
            Returns a readonly collection of all vectorized field configurations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.NumFields">
            <summary>
            Returns the number of associated fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Item(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns the field type that corresponds to the given field access.
            </summary>
            <param name="fieldAccess">The field access.</param>
            <returns>The resolved field type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.GetOffset(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Gets a specific field offset in bytes from the beginning of the structure.
            </summary>
            <param name="fieldAccess">The field reference.</param>
            <returns>The field offset in bytes.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.RemapFieldIndex(System.Int32)">
            <summary>
            Gets the remapped field index corresponding to the original structure.
            </summary>
            <param name="fieldIndex">The field index.</param>
            <returns>The adjusted field index.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Get``1(``0,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Gets a nested type that corresponds to the given span.
            </summary>
            <typeparam name="TTypeContext">the parent type context.</typeparam>
            <param name="typeContext">The type context.</param>
            <param name="span">The span to slice.</param>
            <returns>The nested type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.ConvertFieldTypes``2(``0,``1)">
            <summary>
            Converts all field types using the type converter provided.
            </summary>
            <typeparam name="TTypeContext">The type context to use.</typeparam>
            <typeparam name="TTypeConverter">The type converter to use.</typeparam>
            <param name="typeContext">The type context instance to use.</param>
            <param name="typeConverter">The type converter instance to use.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Slice``1(``0,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Slices a structure type out of this type.
            </summary>
            <typeparam name="TTypeContext">the parent type context.</typeparam>
            <param name="typeContext">The type context.</param>
            <param name="span">The span to slice.</param>
            <returns>The sliced structure type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.SliceRecursive(ILGPU.IR.Types.StructureType.Builder@,System.Int32@,ILGPU.IR.Values.FieldSpan@)">
            <summary>
            Slices a subset of fields recursively.
            </summary>
            <param name="builder">The target builder to append to.</param>
            <param name="index">The current index.</param>
            <param name="span">The source span to slice.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.GetManagedType">
            <summary>
            Creates a managed type that corresponds to this structure type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all fields in this type.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.System#Collections#Generic#IEnumerable{(ILGPU#IR#Types#TypeNode,ILGPU#IR#Values#FieldAccess)}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all fields in this type.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all fields in this type.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.ToString">
            <summary cref="M:ILGPU.IR.Types.TypeNode.ToString"/>
        </member>
        <member name="T:ILGPU.IR.Types.ITypeConverter`1">
            <summary>
            An abstract type converter to convert specific types.
            </summary>
            <typeparam name="TType">The type to convert.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Types.ITypeConverter`1.ConvertType``1(``0,`0)">
            <summary>
            Converts the given type node.
            </summary>
            <typeparam name="TTypeContext">The type converter to use.</typeparam>
            <param name="typeContext">The type converter instance to use.</param>
            <param name="type">The type to convert.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.ITypeConverter`1.GetNumFields(`0)">
            <summary>
            Resolves the number of element fields per type instance.
            </summary>
            <param name="type">The parent type.</param>
        </member>
        <member name="T:ILGPU.IR.Types.TypeConverter`1">
            <summary>
            A converter adapter to convert nested types within structures.
            </summary>
            <typeparam name="TType">The node type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Types.TypeConverter`1.#ctor">
            <summary>
            Constructs a new type converter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeConverter`1.ConvertType``1(``0,`0)">
            <summary>
            Converts the given type node.
            </summary>
            <typeparam name="TTypeContext">The type context to use.</typeparam>
            <param name="typeContext">The type context instance to use.</param>
            <param name="type">The type to convert.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeConverter`1.GetNumFields(`0)">
            <summary>
            Resolves the number of element fields per type instance.
            </summary>
            <param name="type">The parent type.</param>
        </member>
        <member name="M:ILGPU.IR.Types.TypeConverter`1.ConvertType``1(``0,ILGPU.IR.Types.TypeNode)">
            <summary>
            Converts the given type node.
            </summary>
            <typeparam name="TTypeContext">The type context to use.</typeparam>
            <param name="typeContext">The type context instance to use.</param>
            <param name="type">The type to convert.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeConverter`1.GetNumFields(ILGPU.IR.Types.TypeNode)">
            <summary>
            Resolves the number of element fields per type instance.
            </summary>
            <param name="type">The parent type.</param>
        </member>
        <member name="T:ILGPU.IR.Types.TypeLowering`1">
            <summary>
            The type converter used during lowering phases.
            </summary>
            <typeparam name="TType">The source type to lower.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.#ctor">
            <summary>
            Constructs a new type lowering without a parent type context.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.#ctor(ILGPU.IR.Method.Builder)">
            <summary>
            Constructs a new type lowering.
            </summary>
            <param name="builder">The parent builder.</param>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.#ctor(ILGPU.IR.Construction.IRBuilder)">
            <summary>
            Constructs a new type lowering.
            </summary>
            <param name="builder">The parent builder.</param>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.#ctor(ILGPU.IR.Types.IRTypeContext)">
            <summary>
            Constructs a new type lowering.
            </summary>
            <param name="typeContext">The parent type context.</param>
        </member>
        <member name="P:ILGPU.IR.Types.TypeLowering`1.TypeContext">
            <summary>
            Returns the associated type context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeLowering`1.Item(ILGPU.IR.Value)">
            <summary>
            Maps the given new value to its original type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.ConvertType(ILGPU.IR.Value)">
            <summary>
            Converts the given value type.
            </summary>
            <param name="value">The value to convert the type.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.ConvertType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Converts the given type node.
            </summary>
            <param name="type">The type to convert.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.ComputeSpan(ILGPU.IR.Value,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Computes a new field span while taking all structure field changes into
            account.
            </summary>
            <param name="value">The source value.</param>
            <param name="fieldSpan">The source span.</param>
            <returns>The target field span.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.IsTypeDependent(ILGPU.IR.Types.TypeNode)">
            <summary>
            Returns true if the given type has a type dependency.
            </summary>
            <param name="type">The type to test.</param>
            <returns>True, if the given type has a type dependency.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.Register(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode)">
            <summary>
            Registers the given value-type mapping.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The mapped type.</param>
            <returns>True.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.TryRegister(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode)">
            <summary>
            Tries to register the given value-type mapping.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The mapped type.</param>
            <returns>True, if the given type is type dependent.</returns>
        </member>
        <member name="T:ILGPU.IR.Types.TypeInformationManager">
            <summary>
            Represents a context that manages type information.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.TypeInformationManager.TypeInformation">
            <summary>
            Represents a type information about a managed type.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.TypeInformation.#ctor(ILGPU.IR.Types.TypeInformationManager,System.Type,System.Int32,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo},System.Collections.Immutable.ImmutableArray{System.Int32},System.Collections.Immutable.ImmutableArray{System.Type},System.Int32,System.Boolean)">
            <summary>
            Constructs a new type information.
            </summary>
            <param name="parent">The parent type manager.</param>
            <param name="type">The .Net type.</param>
            <param name="size">The size in bytes (if any).</param>
            <param name="fields">All managed fields.</param>
            <param name="fieldOffsets">All field offsets.</param>
            <param name="fieldTypes">All managed field types.</param>
            <param name="numFlattenedFields">The number of flattened fields.</param>
            <param name="isBlittable">True, if this type is blittable.</param>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.Parent">
            <summary>
            Returns the parent information manager.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.ManagedType">
            <summary>
            Returns the .Net type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.Size">
            <summary>
            Returns the type size in bytes (if any).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.NumFields">
            <summary>
            Returns the number of fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.Fields">
            <summary>
            Returns all fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.FieldTypes">
            <summary>
            Returns all field types.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.FieldOffsets">
            <summary>
            Returns all field offsets.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.IsBlittable">
            <summary>
            Returns true if the associated .Net type is blittable.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.NumFlattendedFields">
            <summary>
            Returns the number of flattened fields.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.TypeInformation.GetFieldTypeInfo(System.Int32)">
            <summary>
            Gets nested field type information.
            </summary>
            <param name="index">The field index.</param>
            <returns>The resulting type information.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.TypeInformation.TryResolveField(System.Int32,System.Reflection.FieldInfo@)">
            <summary>
            Tries to resolve the field of the given field.
            </summary>
            <param name="index">The target index.</param>
            <param name="field">The resolved field.</param>
            <returns>True, if the field could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.TypeInformation.GetAbsoluteIndex(System.Reflection.FieldInfo)">
            <summary>
            Gets the absolute index of the given field.
            </summary>
            <param name="info">The field to get.</param>
            <returns>The absolute field index.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.TypeInformation.ToString">
            <summary>
            Returns the string representation of this type.
            </summary>
            <returns>The string representation of this type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.#ctor">
            <summary>
            Constructs a new type context.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.InitIntrinsicTypeInformation">
            <summary>
            Initializes intrinsic type information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.GetTypeInfo(System.Type)">
            <summary>
            Resolves type information for the given type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>The resolved type information.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.GetTypeInfoInternal(System.Type)">
            <summary>
            Resolves type information for the given type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>The resolved type information.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.AddTypeInfo(System.Type,System.Boolean)">
            <summary>
            Adds primitive type information.
            </summary>
            <param name="type">The type to add.</param>
            <param name="isBlittable">True, if this type is blittable.</param>
            <returns>The created type information instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.CreateTypeInfo(System.Type)">
            <summary>
            Creates new type information and registers the created object
            in the internal cache.
            </summary>
            <param name="type">The base .Net type.</param>
            <returns>The created type information object.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.CreateCompoundTypeInfo(System.Type)">
            <summary>
            Creates new type information for compound types.
            </summary>
            <param name="type">The base .Net type.</param>
            <returns>The created type information object.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.IR.Types.TypeFlags">
            <summary>
            Special type flags that provide additional information about the
            current type and all nested elements.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.TypeFlags.None">
            <summary>
            No special flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.TypeFlags.PointerDependent">
            <summary>
            The type is either a pointer or contains a pointer.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.TypeFlags.ViewDependent">
            <summary>
            The type is either a view or contains a view.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.TypeFlags.ArrayDependent">
            <summary>
            The type is either an array or contains an array.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.TypeFlags.AddressSpaceDependent">
            <summary>
            The type depends on an address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.ITypeNode">
            <summary>
            An abstract type node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.ITypeNode.ManagedType">
            <summary>
            The type representation in the managed world.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.TypeNode">
            <summary>
            Represents a type in the scope of the ILGPU IR.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.Align(System.Int64,System.Int32)">
            <summary>
            Computes a properly aligned offset in bytes for the given field size.
            </summary>
            <param name="offset">The current.</param>
            <param name="fieldAlignment">The field size in bytes.</param>
            <returns>The aligned field offset.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.Align(System.Int32,System.Int32)">
            <summary>
            Computes a properly aligned offset in bytes for the given field size.
            </summary>
            <param name="offset">The current.</param>
            <param name="fieldAlignment">The field size in bytes.</param>
            <returns>The aligned field offset.</returns>
        </member>
        <member name="F:ILGPU.IR.Types.TypeNode.managedType">
            <summary>
            The managed type representation of this IR type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.#ctor(ILGPU.IR.Types.IRTypeContext)">
            <summary>
            Constructs a new type.
            </summary>
            <param name="typeContext">The parent type context.</param>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.Context">
            <summary>
            Returns the parent ILGPU context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.TypeContext">
            <summary>
            Returns the parent type context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.Size">
            <summary>
            The size of the type in bytes (if the type is in its lowered representation).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.Alignment">
            <summary>
            The type alignment in bytes (if the type is in its lowered representation).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsVoidType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.VoidType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsStringType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.StringType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsPrimitiveType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.PrimitiveType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsViewOrPointerType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.PointerType"/>
            or a <see cref="T:ILGPU.IR.Types.ViewType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsPointerType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.PointerType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsViewType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.ViewType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsObjectType">
            <summary>
            Returns true if the current type is an <see cref="T:ILGPU.IR.Types.ObjectType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsStructureType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.StructureType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsArrayType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.ArrayType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsPaddingType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.PaddingType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsRootType">
            <summary>
            Returns true if this type is a root object type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.BasicValueType">
            <summary>
            Returns the basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.Flags">
            <summary>
            Returns all type flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsLowered">
            <summary>
            Returns true if this type corresponds to its lowered representation.
            </summary>
            <remarks>
            Lowered in this scope means that this type does not contains nested arrays
            and views. In this case the size and alignment information can be used
            immediately for interop purposes.
            </remarks>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.ManagedType">
            <summary>
            The type representation in the managed world.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.HasFlags(ILGPU.IR.Types.TypeFlags)">
            <summary>
            Returns true if the given flags are set.
            </summary>
            <param name="typeFlags">The flags to test.</param>
            <returns>True, if the given flags are set.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.AddFlags(ILGPU.IR.Types.TypeFlags)">
            <summary>
            Adds the given flags to the current type.
            </summary>
            <param name="typeFlags">The flags to add.</param>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.GetManagedType">
            <summary>
            Creates a managed type that corresponds to this IR type.
            </summary>
            <returns>The created managed type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.As``1(ILGPU.IR.ILocation)">
            <summary>
            Converts the current type to the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type node.</typeparam>
            <param name="location">The location to use for assertions.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include the current debug information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.GetHashCode">
            <summary>
            Returns the hash code of this type node.
            </summary>
            <returns>The hash code of this type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current type.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.ToString">
            <summary>
            Returns the string representation of this node.
            </summary>
            <returns>The string representation of this node.</returns>
        </member>
        <member name="T:ILGPU.IR.Types.VoidType">
            <summary>
            Represents a void type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.#ctor(ILGPU.IR.Types.IRTypeContext)">
            <summary>
            Constructs a new void type.
            </summary>
            <param name="typeContext">The parent type context.</param>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.GetManagedType">
            <summary>
            Returns the void type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.IValueBuilder">
            <summary>
            An abstract value builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValueBuilder.IRBuilder">
            <summary>
            Returns the parent IR builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValueBuilder.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValueBuilder.Count">
            <summary>
            The number of field values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValueBuilder.Item(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns the value that corresponds to the given field access.
            </summary>
            <param name="access">The field access.</param>
            <returns>The resolved field type.</returns>
        </member>
        <member name="M:ILGPU.IR.IValueBuilder.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given value to the instance builder.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.IValueBuilder.Seal">
            <summary>
            Constructs a new value that represents the current value builder.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="T:ILGPU.IR.ValueBuilder">
            <summary>
            Extensions for <see cref="T:ILGPU.IR.IValueBuilder"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueBuilder.ToValueBuilder``1(``0)">
            <summary>
            Constructs a new <see cref="T:ILGPU.IR.ValueBuilder`1"/> wrapper.
            </summary>
            <typeparam name="TBuilder">The builder type.</typeparam>
            <param name="valueBuilder">The value builder instance.</param>
            <returns>The created wrapper class.</returns>
        </member>
        <member name="T:ILGPU.IR.ValueBuilder`1">
            <summary>
            A wrapped <see cref="T:ILGPU.IR.IValueBuilder"/> that wraps value-based builder structures.
            </summary>
            <typeparam name="TBuilder">The structure-based builder type.</typeparam>
        </member>
        <member name="F:ILGPU.IR.ValueBuilder`1.nestedBuilder">
            <summary>
            The nested builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueBuilder`1.#ctor(`0)">
            <summary>
            Constructs a new value builder.
            </summary>
            <param name="builder">The underlying builder structure.</param>
        </member>
        <member name="P:ILGPU.IR.ValueBuilder`1.IRBuilder">
            <summary>
            Returns the parent IR builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.ValueBuilder`1.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.ValueBuilder`1.Count">
            <summary>
            The number of field values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.ValueBuilder`1.Item(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns the value that corresponds to the given field access.
            </summary>
            <param name="access">The field access.</param>
            <returns>The resolved field type.</returns>
        </member>
        <member name="P:ILGPU.IR.ValueBuilder`1.Builder">
            <summary>
            Returns a reference to the nested builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueBuilder`1.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given value to the instance builder.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.ValueBuilder`1.Seal">
            <summary>
            Constructs a new value that represents the current value builder.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.ValueBuilder`1.SealAs``1">
            <summary>
            Constructs a new value that represents the current value builder and returns
            
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.ArithmeticFlags">
            <summary>
            Represents flags of an arithmetic operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ArithmeticFlags.None">
            <summary>
            No special flags (default).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ArithmeticFlags.Overflow">
            <summary>
            The operation has overflow semantics.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ArithmeticFlags.Unsigned">
            <summary>
            The operation has unsigned semantics.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ArithmeticFlags.OverflowUnsigned">
            <summary>
            The operation has overflow semantics and the
            overflow check is based on unsigned semantics.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.ArithmeticValue">
            <summary>
            Represents an abstract arithmetic value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ArithmeticValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Constructs a new arithmetic value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.PrimitiveType">
            <summary>
            Returns the associated type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.Flags">
            <summary>
            Returns the operation flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.ArithmeticBasicValueType">
            <summary>
            Returns the associated arithmetic basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.CanOverflow">
            <summary>
            Returns true if the operation has enabled overflow semantics.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.IsUnsigned">
            <summary>
            Returns true if the operation has enabled unsigned semantics.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.IsIntOperation">
            <summary>
            Returns true if the operation works on integers.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.IsFloatOperation">
            <summary>
            Returns true if the operation works on floats.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.UnaryArithmeticValue">
            <summary>
            Represents a unary arithmetic operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Constructs a new unary arithmetic operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UnaryArithmeticValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.UnaryArithmeticValue.Kind">
            <summary>
            Returns the operation kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UnaryArithmeticValue.Value">
            <summary>
            Returns the operand.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BinaryArithmeticValue">
            <summary>
            Represents a binary arithmetic operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.InvertLogical(ILGPU.IR.Values.BinaryArithmeticKind)">
            <summary>
            Inverts the given binary arithmetic kind.
            </summary>
            <param name="kind">The kind to invert.</param>
            <returns>The inverted operation (if inverted).</returns>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.TryInvertLogical(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.IR.Values.BinaryArithmeticKind@)">
            <summary>
            Tries to invert the given binary arithmetic kind.
            </summary>
            <param name="kind">The kind to invert.</param>
            <param name="inverted">The inverted operation (if any).</param>
            <returns>True, if the given kind could be inverted.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Constructs a new binary arithmetic value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.BinaryArithmeticValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.BinaryArithmeticValue.Kind">
            <summary>
            Returns the operation kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BinaryArithmeticValue.Left">
            <summary>
            Returns the left operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BinaryArithmeticValue.Right">
            <summary>
            Returns the right operand.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.TernaryArithmeticValue">
            <summary>
            Represents a binary arithmetic operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.GetLeftBinaryKind(ILGPU.IR.Values.TernaryArithmeticKind)">
            <summary>
            Returns the left hand binary operation of a fused ternary operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <returns>The resolved binary operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.GetRightBinaryKind(ILGPU.IR.Values.TernaryArithmeticKind)">
            <summary>
            Returns the right hand binary operation of a fused ternary operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <returns>The resolved binary operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Constructs a new ternary arithmetic value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <param name="third">The third operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.TernaryArithmeticValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.TernaryArithmeticValue.Kind">
            <summary>
            Returns the operation kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.TernaryArithmeticValue.First">
            <summary>
            Returns the first operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.TernaryArithmeticValue.Second">
            <summary>
            Returns the second operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.TernaryArithmeticValue.Third">
            <summary>
            Returns the third operand.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ArrayValue">
            <summary>
            Represents an array value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.ArrayType,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new array value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="arrayType">The associated array type.</param>
            <param name="extent">The array length.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ArrayValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.ArrayValue.ArrayType">
            <summary>
            Returns the array type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArrayValue.Dimensions">
            <summary>
            Returns the number of array dimensions.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArrayValue.Extent">
            <summary>
            Returns the number of elements.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.ArrayValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ArrayOperationValue">
            <summary>
            Represents an operation on structure values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayOperationValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new abstract structure operation.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ArrayOperationValue.ArrayType">
            <summary>
            Returns the array type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArrayOperationValue.ElementType">
            <summary>
            Returns the associated element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArrayOperationValue.Index">
            <summary>
            Returns the array index.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayOperationValue.TryResolveConstantIndex(System.Int32@)">
            <summary>
            Tries to resolve the operation index to a constant value.
            </summary>
            <param name="index">The resolved constant index (if any).</param>
            <returns>True, if a constant index could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayOperationValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GetArrayExtent">
            <summary>
            Represents an operation to extract the extent from an array value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayExtent.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new element load.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="arrayValue">The array value.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GetArrayExtent.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayExtent.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayExtent.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayExtent.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayExtent.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayExtent.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GetArrayElement">
            <summary>
            Represents an operation to load a single element from an array.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayElement.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new element load.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="arrayValue">The array value.</param>
            <param name="arrayIndex">The array index.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GetArrayElement.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayElement.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayElement.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayElement.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayElement.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.SetArrayElement">
            <summary>
            Represents an operation to store a single value into an array.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SetArrayElement.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new element store.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="arrayValue">The array value.</param>
            <param name="arrayIndex">The array index.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SetArrayElement.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.SetArrayElement.Value">
            <summary>
            Returns the value to store.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SetArrayElement.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SetArrayElement.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SetArrayElement.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.SetArrayElement.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.SetArrayElement.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.AtomicFlags">
            <summary>
            Represents flags of an atomic operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicFlags.None">
            <summary>
            No special flags (default).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicFlags.Unsigned">
            <summary>
            The operation has unsigned semantics.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.AtomicValue">
            <summary>
            Represents a general atomic value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.AtomicFlags)">
            <summary>
            Constructs a new abstract atomic value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.Target">
            <summary>
            Returns the target view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.Value">
            <summary>
            Returns the target value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.Flags">
            <summary>
            Returns the operation flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.ArithmeticBasicValueType">
            <summary>
            Returns the associated arithmetic basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.IsUnsigned">
            <summary>
            Returns true if the operation has enabled unsigned semantics.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="T:ILGPU.IR.Values.AtomicKind">
            <summary>
            Represents the kind of an atomic operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Exchange">
            <summary>
            An XCHG operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Add">
            <summary>
            An add operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.And">
            <summary>
            An and operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Or">
            <summary>
            An or operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Xor">
            <summary>
            An xor operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Max">
            <summary>
            A max operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Min">
            <summary>
            A min operation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.GenericAtomic">
            <summary>
            Represents a generic atomic operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GenericAtomic.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.AtomicKind,ILGPU.IR.Values.AtomicFlags)">
            <summary>
            Constructs a new generic atomic operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="target">The target.</param>
            <param name="value">The value to store.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GenericAtomic.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.GenericAtomic.Kind">
            <summary>
            The operation kind.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GenericAtomic.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GenericAtomic.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GenericAtomic.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.GenericAtomic.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.AtomicCAS">
            <summary>
            Represents an atomic compare-and-swap operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicCAS.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.AtomicFlags)">
            <summary>
            Constructs a new atomic compare-and-swap operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="target">The target.</param>
            <param name="value">The value to store.</param>
            <param name="compareValue">The comparison value.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicCAS.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicCAS.CompareValue">
            <summary>
            Returns the comparison value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicCAS.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicCAS.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicCAS.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicCAS.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.CastValue">
            <summary>
            Represents an abstract cast operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.CastValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The value to convert.</param>
        </member>
        <member name="P:ILGPU.IR.Values.CastValue.Value">
            <summary>
            Returns the operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CastValue.SourceType">
            <summary>
            Returns the source type to convert the value from.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CastValue.TargetType">
            <summary>
            Returns the target type to convert the value to.
            </summary>
            <remarks>This is equivalent to asking for the type.</remarks>
        </member>
        <member name="T:ILGPU.IR.Values.IntAsPointerCast">
            <summary>
            Casts from an integer to a raw pointer value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsPointerCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The view to cast.</param>
        </member>
        <member name="P:ILGPU.IR.Values.IntAsPointerCast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsPointerCast.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsPointerCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsPointerCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsPointerCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BaseAddressSpaceCast">
            <summary>
            Represents an abstract cast operation that works on address spaces.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BaseAddressSpaceCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The value to convert.</param>
        </member>
        <member name="P:ILGPU.IR.Values.BaseAddressSpaceCast.Type">
            <summary>
            Returns the associated type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.PointerCast">
            <summary>
            Casts the type of a pointer to a different type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new convert value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The value to convert.</param>
            <param name="targetElementType">The target element type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PointerCast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.PointerCast.SourceElementType">
            <summary>
            Returns the source element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PointerCast.TargetElementType">
            <summary>
            Returns the target element type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.AddressSpaceCast">
            <summary>
            Cast a pointer from one address space to another.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new convert value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The value to convert.</param>
            <param name="targetAddressSpace">The target address space.</param>
        </member>
        <member name="P:ILGPU.IR.Values.AddressSpaceCast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.AddressSpaceCast.TargetAddressSpace">
            <summary>
            Returns the target address space.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AddressSpaceCast.IsViewCast">
            <summary>
            Returns true if the current access works on a view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AddressSpaceCast.IsPointerCast">
            <summary>
            Returns true if the current access works on a pointer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ViewCast">
            <summary>
            Casts a view from one element type to another.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="sourceView">The view to cast.</param>
            <param name="targetElementType">The target element type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ViewCast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.ViewCast.SourceElementType">
            <summary>
            Returns the source element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ViewCast.TargetElementType">
            <summary>
            Returns the target element type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BitCast">
            <summary>
            Casts from one value type to another while reinterpreting
            the value as another type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BitCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.PrimitiveType)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The view to cast.</param>
            <param name="targetType">The primitive target type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.BitCast.TargetPrimitiveType">
            <summary>
            Returns the target type to convert the value to.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BitCast.Is32Bit">
            <summary>
            Returns true if this type represents a 32 bit type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BitCast.Is64Bit">
            <summary>
            Returns true if this type represents a 64 bit type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BitCast.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BitCast.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.FloatAsIntCast">
            <summary>
            Casts from a float to an int while preserving bits.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FloatAsIntCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.PrimitiveType)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The view to cast.</param>
            <param name="targetType">The primitive target type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.FloatAsIntCast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.FloatAsIntCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.FloatAsIntCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.FloatAsIntCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.IntAsFloatCast">
            <summary>
            Casts from an int to a float while preserving bits.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsFloatCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.PrimitiveType)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The view to cast.</param>
            <param name="targetType">The primitive target type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.IntAsFloatCast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsFloatCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsFloatCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsFloatCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ClassValue">
            <summary>
            An abstract class value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ClassValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new abstract class value.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="T:ILGPU.IR.Values.ClassOperationValue">
            <summary>
            Represents an operation on object values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ClassOperationValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new abstract object operation.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ClassOperationValue.ObjectValue">
            <summary>
            Returns the object value to load from.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ClassOperationValue.ObjectType">
            <summary>
            Returns the object type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.CompareKind">
            <summary>
            Represents the kind of a compare node.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.Equal">
            <summary>
            An equal comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.NotEqual">
            <summary>
            A not-equal comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.LessThan">
            <summary>
            A less-than comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.LessEqual">
            <summary>
            A less-equal comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.GreaterThan">
            <summary>
            A greater-than comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.GreaterEqual">
            <summary>
            A greater-equal comparison.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.CompareFlags">
            <summary>
            Represents special flags of a comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareFlags.None">
            <summary>
            No special flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareFlags.UnsignedOrUnordered">
            <summary>
            Specifies an unsigned (int) or an unordered
            (float) comparison.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.CompareValue">
            <summary>
            Represents a comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareValue.Inverted">
            <summary>
            A mapping to inverted compare kinds.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareValue.StringOperations">
            <summary>
            A mapping to string representations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.Invert(ILGPU.IR.Values.CompareKind)">
            <summary>
            Inverts the given compare kind.
            </summary>
            <param name="kind">The compare kind to invert.</param>
            <returns>The inverted compare kind.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.IsCommutative(ILGPU.IR.Values.CompareKind)">
            <summary>
            Returns true if the given kind is commutative.
            </summary>
            <param name="kind">The compare kind.</param>
            <returns>True, if the given kind is commutative.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.InvertIfNonCommutative(ILGPU.IR.Values.CompareKind)">
            <summary>
            Inverts the given compare kind if it is not commutative.
            </summary>
            <param name="kind">The compare kind to invert.</param>
            <returns>The inverted compare kind.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.CompareKind,ILGPU.IR.Values.CompareFlags)">
            <summary>
            Constructs a new compare value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.Left">
            <summary>
            Returns the left operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.Right">
            <summary>
            Returns the right operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.Kind">
            <summary>
            Returns the kind of this compare node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.Flags">
            <summary>
            Returns the associated flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.IsUnsignedOrUnordered">
            <summary>
            Returns true if the operation has enabled unsigned or unordered semantics.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.CompareType">
            <summary>
            Returns the comparison type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Conditional">
            <summary>
            Represents a conditional predicate.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Conditional.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new predicate node.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Conditional.Condition">
            <summary>
            Returns the associated predicate value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Conditional.GetArgument(System.Int32)">
            <summary>
            Returns the i-th argument.
            </summary>
            <param name="index">The argument index.</param>
            <returns>The i-th argument value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Conditional.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="T:ILGPU.IR.Values.IfPredicate">
            <summary>
            Represents a single if predicate.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IfPredicate.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new predicate.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="condition">The condition.</param>
            <param name="trueValue">The true value.</param>
            <param name="falseValue">The false value.</param>
        </member>
        <member name="P:ILGPU.IR.Values.IfPredicate.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.IfPredicate.TrueValue">
            <summary>
            Returns the true value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.IfPredicate.FalseValue">
            <summary>
            Returns the false value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IfPredicate.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IfPredicate.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.IfPredicate.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.IfPredicate.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.SwitchPredicate">
            <summary>
            Represents a single switch predicate.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.SwitchPredicate.Builder">
            <summary>
            An instance builder for switch branches.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchPredicate.Builder.#ctor(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,ILGPU.IR.Value,System.Int32)">
            <summary>
            Initializes a new call builder.
            </summary>
            <param name="irBuilder">The current IR builder.</param>
            <param name="location">The current location.</param>
            <param name="condition">The switch condition value.</param>
            <param name="capacity">The initial builder capacity.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchPredicate.Builder.IRBuilder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchPredicate.Builder.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchPredicate.Builder.Count">
            <summary>
            The number of switch values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchPredicate.Builder.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given value to the switch builder.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchPredicate.Builder.Seal">
            <summary>
            Constructs a new value that represents the current predicate.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchPredicate.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Constructs a new switch predicate.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="values">The selection values and the condition.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchPredicate.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchPredicate.Values">
            <summary>
            Returns all selection values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchPredicate.DefaultValue">
            <summary>
            Returns the default value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchPredicate.NumCasesWithoutDefault">
            <summary>
            Returns the number of actual switch cases without the default case.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchPredicate.GetCaseValue(System.Int32)">
            <summary>
            Returns the case value for the i-th case.
            </summary>
            <param name="i">The index of the i-th value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchPredicate.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchPredicate.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.SwitchPredicate.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchPredicate.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ConstantNode">
            <summary>
            Represents a constant value that will be instantiated.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConstantNode.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new constant value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="constantType">The type of the constant node.</param>
        </member>
        <member name="T:ILGPU.IR.Values.NullValue">
            <summary>
            Represents an immutable null value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.NullValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new object value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="type">The object type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.NullValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.NullValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.NullValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.NullValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.NullValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.PrimitiveValue">
            <summary>
            Represents a primitive value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.BasicValueType,System.Int64)">
            <summary>
            Constructs a new primitive constant.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="value">The raw value.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.BasicValueType">
            <summary>
            Returns the associated basic type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.PrimitiveType">
            <summary>
            Returns the associated primitive type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Int1Value">
            <summary>
            Returns the value as i1.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Int8Value">
            <summary>
            Returns the value as si8.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Int16Value">
            <summary>
            Returns the value as si16.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Int32Value">
            <summary>
            Returns the value as si32.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Int64Value">
            <summary>
            Returns the value as si64.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.UInt8Value">
            <summary>
            Returns the value as u8.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.UInt16Value">
            <summary>
            Returns the value as u16.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.UInt32Value">
            <summary>
            Returns the value as u32.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.UInt64Value">
            <summary>
            Returns the value as u64.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Float16Value">
            <summary>
            Returns the value as f16.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Float32Value">
            <summary>
            Returns the value as f32.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Float64Value">
            <summary>
            Returns the value as f64.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.IsInt">
            <summary>
            Returns true if the value is an integer.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.IsFloat">
            <summary>
            Returns true if the value is a float.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.RawValue">
            <summary>
            Returns the underlying raw value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.ToValueString">
            <summary>
            Returns the encapsulated value as string.
            </summary>
            <returns>The string representation of the encapsulated value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.StringValue">
            <summary>
            Represents an immutable string value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StringValue.#ctor(ILGPU.IR.ValueInitializer@,System.String)">
            <summary>
            Constructs a new string constant.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The string value.</param>
        </member>
        <member name="P:ILGPU.IR.Values.StringValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.StringValue.StringType">
            <summary>
            Returns the associated type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StringValue.String">
            <summary>
            Returns the associated string constant.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StringValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.StringValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.StringValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.StringValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ConvertFlags">
            <summary>
            Flags of a convert operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ConvertFlags.None">
            <summary>
            No flags (default).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ConvertFlags.Overflow">
            <summary>
            The convert operation has overflow semantics.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ConvertFlags.SourceUnsigned">
            <summary>
            The convert operation treats the input value as unsigned.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ConvertFlags.OverflowSourceUnsigned">
            <summary>
            The convert operation has overflow semantics and the
            overflow check is based on unsigned semantics.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ConvertFlags.TargetUnsigned">
            <summary>
            The convert operation results in an unsigned value.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.ConvertFlagsExtensions">
            <summary>
            Internal conversion flags extensions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertFlagsExtensions.ToSourceUnsignedFlags(ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Converts the given flags into source unsigned flags.
            </summary>
            <param name="flags">The flags to convert.</param>
            <returns>The converted flags.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.ConvertValue">
            <summary>
            Converts a node into a target type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Constructs a new convert value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The value to convert.</param>
            <param name="targetType">The target type to convert the value to.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.Value">
            <summary>
            Returns the operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.Flags">
            <summary>
            Returns the associated flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.SourceType">
            <summary>
            Returns the source type to convert the value from.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.TargetType">
            <summary>
            Returns the target type to convert the value to.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.CanOverflow">
            <summary>
            Returns true if the operation has enabled overflow semantics.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.IsSourceUnsigned">
            <summary>
            Returns true if the operation has enabled unsigned semantics.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.IsResultUnsigned">
            <summary>
            Returns true if the operation has enabled unsigned semantics.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.DebugKind">
            <summary>
            Represents the kind of a debug operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.DebugKind.AssertFailed">
            <summary>
            A failed assertion.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.DebugKind.Trace">
            <summary>
            A trace operation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.DebugOperation">
            <summary>
            Represents a generic debug operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DebugOperation.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.DebugKind,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new debug operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="kind">The operation kind.</param>
            <param name="message">The debug message.</param>
        </member>
        <member name="P:ILGPU.IR.Values.DebugOperation.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.DebugOperation.Kind">
            <summary>
            The debug operation kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.DebugOperation.Message">
            <summary>
            Returns the message.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DebugOperation.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.DebugOperation.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.DebugOperation.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.DebugOperation.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.DebugOperation.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.DeviceConstantValue">
            <summary>
            Represents a device constant inside a kernel.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DeviceConstantValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="constantType">The constant type node.</param>
        </member>
        <member name="T:ILGPU.IR.Values.AcceleratorTypeValue">
            <summary>
            Represents the <see cref="P:ILGPU.Runtime.Accelerator.AcceleratorType"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AcceleratorTypeValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.AcceleratorTypeValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.AcceleratorTypeValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AcceleratorTypeValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.AcceleratorTypeValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.DeviceConstantDimension3D">
            <summary>
            Represents a dimension of a 3D device constant.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.DeviceConstantDimension3D.X">
            <summary>
            The X dimension.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.DeviceConstantDimension3D.Y">
            <summary>
            The Y dimension.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.DeviceConstantDimension3D.Z">
            <summary>
            The Z dimension.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.DeviceConstantDimensionValue">
            <summary>
            Represents a device constant inside a kernel.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DeviceConstantDimensionValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="dimension">The device constant dimension.</param>
        </member>
        <member name="P:ILGPU.IR.Values.DeviceConstantDimensionValue.Dimension">
            <summary>
            Returns the constant dimension.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DeviceConstantDimensionValue.ToArgString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GridIndexValue">
            <summary>
            Represents the <see cref="P:ILGPU.Grid.Index"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GridIndexValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="dimension">The constant dimension.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GridIndexValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.GridIndexValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GridIndexValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GridIndexValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GroupIndexValue">
            <summary>
            Represents the <see cref="P:ILGPU.Group.Index"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GroupIndexValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="dimension">The constant dimension.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GroupIndexValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.GroupIndexValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GroupIndexValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GroupIndexValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GridDimensionValue">
            <summary>
            Represents the <see cref="P:ILGPU.Grid.Dimension"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GridDimensionValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="dimension">The constant dimension.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GridDimensionValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.GridDimensionValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GridDimensionValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GridDimensionValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GroupDimensionValue">
            <summary>
            Represents the <see cref="P:ILGPU.Group.Dimension"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GroupDimensionValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="dimension">The constant dimension.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GroupDimensionValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.GroupDimensionValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GroupDimensionValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GroupDimensionValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.WarpSizeValue">
            <summary>
            Represents the <see cref="P:ILGPU.Warp.WarpSize"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.WarpSizeValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.WarpSizeValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.WarpSizeValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.WarpSizeValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.WarpSizeValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.LaneIdxValue">
            <summary>
            Represents the <see cref="P:ILGPU.Warp.LaneIdx"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LaneIdxValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.LaneIdxValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.LaneIdxValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LaneIdxValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.LaneIdxValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.HandleValue">
            <summary>
            Represents an internal .Net runtime handle value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.#ctor(ILGPU.IR.ValueInitializer@,System.Object)">
            <summary>
            Constructs a new internal .Net runtime handle value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="handle">The managed handle.</param>
        </member>
        <member name="P:ILGPU.IR.Values.HandleValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.HandleValue.Handle">
            <summary>
            Returns the underlying managed handle.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.GetHandle``1">
            <summary>
            Returns the underlying handle as type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The converted handle.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.IValueVisitor">
            <summary>
            A generic interface to visit values in the IR.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.MethodCall)">
            <summary>
            Visits the node.
            </summary>
            <param name="methodCall">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PhiValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="phiValue">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Parameter)">
            <summary>
            Visits the node.
            </summary>
            <param name="parameter">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UnaryArithmeticValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.BinaryArithmeticValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.TernaryArithmeticValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.CompareValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ConvertValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IntAsPointerCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PointerCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AddressSpaceCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ViewCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.FloatAsIntCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IntAsFloatCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IfPredicate)">
            <summary>
            Visits the node.
            </summary>
            <param name="predicate">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SwitchPredicate)">
            <summary>
            Visits the node.
            </summary>
            <param name="predicate">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GenericAtomic)">
            <summary>
            Visits the node.
            </summary>
            <param name="atomic">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AtomicCAS)">
            <summary>
            Visits the node.
            </summary>
            <param name="atomicCAS">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Alloca)">
            <summary>
            Visits the node.
            </summary>
            <param name="alloca">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.MemoryBarrier)">
            <summary>
            Visits the node.
            </summary>
            <param name="barrier">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Load)">
            <summary>
            Visits the node.
            </summary>
            <param name="load">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Store)">
            <summary>
            Visits the node.
            </summary>
            <param name="store">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SubViewValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadElementAddress)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadFieldAddress)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NewView)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetViewLength)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PrimitiveValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.StringValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NullValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.StructureValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetField)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SetField)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ArrayValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetArrayExtent)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetArrayElement)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SetArrayElement)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AcceleratorTypeValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GridIndexValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GroupIndexValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GridDimensionValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GroupDimensionValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WarpSizeValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LaneIdxValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PredicateBarrier)">
            <summary>
            Visits the node.
            </summary>
            <param name="barrier">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Barrier)">
            <summary>
            Visits the node.
            </summary>
            <param name="barrier">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Broadcast)">
            <summary>
            Visits the node.
            </summary>
            <param name="broadcast">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WarpShuffle)">
            <summary>
            Visits the node.
            </summary>
            <param name="shuffle">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SubWarpShuffle)">
            <summary>
            Visits the node.
            </summary>
            <param name="shuffle">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UndefinedValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="undefined">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.HandleValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="handle">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.DebugOperation)">
            <summary>
            Visits the node.
            </summary>
            <param name="debug">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ReturnTerminator)">
            <summary>
            Visits the node.
            </summary>
            <param name="returnTerminator">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UnconditionalBranch)">
            <summary>
            Visits the node.
            </summary>
            <param name="branch">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IfBranch)">
            <summary>
            Visits the node.
            </summary>
            <param name="branch">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SwitchBranch)">
            <summary>
            Visits the node.
            </summary>
            <param name="branch">The node.</param>
        </member>
        <member name="T:ILGPU.IR.Values.MemoryValue">
            <summary>
            Represents an abstract value with side effects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new memory value.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="T:ILGPU.IR.Values.Alloca">
            <summary>
            Represents an allocation operation on the stack.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new alloca node.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="arrayLength">The array length to allocate.</param>
            <param name="allocaType">The allocation type.</param>
            <param name="addressSpace">The target address space.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.AllocaType">
            <summary>
            Returns the allocation type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.AddressSpace">
            <summary>
            Returns the address space of this allocation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.ArrayLength">
            <summary>
            Returns the array length.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.IsSimpleAllocation">
            <summary>
            Returns true if this allocation is a simple allocation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.IsArrayAllocation(ILGPU.IR.Values.PrimitiveValue@)">
            <summary>
            Returns true if this allocation is an array allocation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.MemoryBarrierKind">
            <summary>
            Represents the kind of a memory-barrier operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.MemoryBarrierKind.GroupLevel">
            <summary>
            The barrier works on the group level.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.MemoryBarrierKind.DeviceLevel">
            <summary>
            The barrier works on the device level.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.MemoryBarrierKind.SystemLevel">
            <summary>
            The barrier works on the system level.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.MemoryBarrier">
            <summary>
            Represents a memory barrier that hinders reordering of memory operations
            with side effects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.MemoryBarrierKind)">
            <summary>
            Constructs a new memory barrier.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="kind">The barrier kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.MemoryBarrier.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.MemoryBarrier.Kind">
            <summary>
            Returns the kind of the barrier.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Load">
            <summary>
            Represents a load operation with side effects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Load.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new load operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The source view.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Load.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.Load.Source">
            <summary>
            Returns the source view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Load.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Load.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Load.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Load.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Load.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Store">
            <summary>
            Represents a store operation with side effects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Store.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new store operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="target">The target view.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Store.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.Store.Target">
            <summary>
            Returns the target view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Store.Value">
            <summary>
            Returns the value to store.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Store.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Store.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Store.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Store.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Store.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.MethodCall">
            <summary>
            Represents a single function call of the form
            x = f(a0, ..., an-1) or f(a0, ..., an-1)
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.MethodCall.Builder">
            <summary>
            An instance builder for method calls.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.Builder.#ctor(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,ILGPU.IR.Method)">
            <summary>
            Initializes a new call builder.
            </summary>
            <param name="irBuilder">The current IR builder.</param>
            <param name="location">The current location.</param>
            <param name="target">The target method to call.</param>
        </member>
        <member name="P:ILGPU.IR.Values.MethodCall.Builder.IRBuilder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.MethodCall.Builder.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.MethodCall.Builder.Target">
            <summary>
            Returns the call target.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.MethodCall.Builder.Count">
            <summary>
            The number of arguments.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.Builder.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given value to the call builder.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.Builder.Seal">
            <summary>
            Constructs a new value that represents the current method call.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Method,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Constructs a new call.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="target">The jump target.</param>
            <param name="arguments">The arguments of the jump target.</param>
        </member>
        <member name="P:ILGPU.IR.Values.MethodCall.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.MethodCall.Target">
            <summary>
            Returns the call target.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Parameter">
            <summary>
            Represents a function parameter.
            </summary>
            <remarks>Note that parameters have not associated basic block.</remarks>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode,System.String)">
            <summary>
            Constructs a new parameter.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="type">The parameter type.</param>
            <param name="name">The parameter name (for debugging purposes).</param>
        </member>
        <member name="P:ILGPU.IR.Values.Parameter.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.Parameter.ParameterType">
            <summary>
            Returns the actual parameter type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Parameter.Name">
            <summary>
            Returns the parameter name (for debugging purposes).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Parameter.Index">
            <summary>
            Returns the parameter index.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.UpdateType``2(``0,``1)">
            <summary>
            Updates the current parameter type.
            </summary>
            <typeparam name="TTypeContext">The type context.</typeparam>
            <typeparam name="TTypeConverter">The type converter.</typeparam>
            <param name="typeContext">The type context instance.</param>
            <param name="typeConverter">The type converter instance.</param>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.ToParameterString">
            <summary>
            Return the parameter string.
            </summary>
            <returns>The parameter string.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.PhiValue">
            <summary>
            Represents a single control-flow dependent phi node.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.PhiValue.IArgumentRemapper">
            <summary>
            Remaps phi argument blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.IArgumentRemapper.TryRemap(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock@)">
            <summary>
            Tries to remap the given block to a new one.
            </summary>
            <param name="block">The old block to remap.</param>
            <param name="newBlock">The (possible) remapped new block.</param>
            <returns>True, if the block could be remapped.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.IArgumentRemapper.RemapValue(ILGPU.IR.BasicBlock,ILGPU.IR.Value)">
            <summary>
            Remaps the given value.
            </summary>
            <param name="updatedBlock">The updated source information.</param>
            <param name="value">The original source value passed to the phi.</param>
            <returns>The new value to use instead.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.PhiValue.BlockRemapper">
            <summary>
            A simple remapper that allows to map an old block to a new block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.BlockRemapper.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new block remapper.
            </summary>
            <param name="oldBlock">The old block.</param>
            <param name="newBlock">The new block.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.BlockRemapper.OldBlock">
            <summary>
            Returns the old block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.BlockRemapper.NewBlock">
            <summary>
            Returns the new block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.BlockRemapper.CanRemap(System.ReadOnlySpan{ILGPU.IR.BasicBlock}@)">
            <summary>
            Returns true if the given blocks contain the old block.
            </summary>
            <param name="blocks">The blocks to check.</param>
            <returns>True, if the given blocks contain the old block.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.BlockRemapper.TryRemap(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock@)">
            <summary>
            Tries to remap the old block to the new block.
            </summary>
            <returns>Returns always true.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.BlockRemapper.RemapValue(ILGPU.IR.BasicBlock,ILGPU.IR.Value)">
            <summary>
            Returns the value of <paramref name="value"/>.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.PhiValue.Builder">
            <summary>
            A phi builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Builder.#ctor(ILGPU.IR.Values.PhiValue,System.Int32)">
            <summary>
            Constructs a new phi builder.
            </summary>
            <param name="phiValue">The phi value.</param>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Builder.PhiValue">
            <summary>
            Returns the associated phi value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Builder.Type">
            <summary>
            Returns the node type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Builder.Count">
            <summary>
            Returns the number of attached arguments.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Builder.Item(System.Int32)">
            <summary>
            Returns the i-th argument.
            </summary>
            <param name="index">The argument index.</param>
            <returns>The resolved argument.</returns>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Builder.BasicBlock">
            <summary>
            Returns the parent basic block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Builder.AddArgument(ILGPU.IR.BasicBlock,ILGPU.IR.Value)">
            <summary>
            Adds the given argument.
            </summary>
            <param name="predecessor">
            The input block associated with the argument value.
            </param>
            <param name="value">The argument value to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Builder.Seal">
            <summary>
            Seals this phi node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Builder.GetEnumerator">
            <summary>
            Returns a new enumerator.
            </summary>
            <returns>The created enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.TryRemoveTrivialPhi(ILGPU.IR.Method.Builder,ILGPU.IR.Values.PhiValue)">
            <summary>
            Tries to remove a trivial phi value.
            </summary>
            <param name="methodBuilder">The current method builder.</param>
            <param name="phiValue">The phi value to check.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new phi node.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="type">The phi type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.PhiType">
            <summary>
            Returns the basic phi type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Sources">
            <summary>
            Returns all associated blocks from which the values have to be resolved
            from.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.GetValue(ILGPU.IR.BasicBlock)">
            <summary>
            Gets the value for the given source block.
            </summary>
            <param name="source">The source block.</param>
            <returns>The value for the given source block (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.UpdateType``2(``0,``1)">
            <summary>
            Updates the current phi type.
            </summary>
            <typeparam name="TTypeContext">The type context.</typeparam>
            <typeparam name="TTypeConverter">The type converter.</typeparam>
            <param name="typeContext">The type context instance.</param>
            <param name="typeConverter">The type converter instance.</param>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.RemapArguments``1(ILGPU.IR.BasicBlock.Builder,``0@)">
            <summary>
            Remaps the current phi arguments.
            </summary>
            <typeparam name="TArgumentRemaper">The argument remapper type.</typeparam>
            <param name="blockBuilder">The current block builder.</param>
            <param name="remapper">The remapper instance.</param>
            <returns>The remapped phi value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.SealPhiArguments(ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Seals the given phi arguments.
            </summary>
            <param name="sources">The associated block sources.</param>
            <param name="arguments">The phi arguments.</param>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.TryRemoveTrivialPhi(ILGPU.IR.Method.Builder)">
            <summary>
            Tries to remove a trivial phi value.
            </summary>
            <param name="methodBuilder">The current method builder.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.PointerValue">
            <summary>
            Represents an abstract pointer value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PointerValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new pointer value.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PointerValue.Source">
            <summary>
            Returns the source address.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PointerValue.Offset">
            <summary>
            Returns the associated element index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PointerValue.Is32BitAccess">
            <summary>
            Returns true if this is a 32bit element access.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PointerValue.Is64bitAccess">
            <summary>
            Returns true if this is a 64bit element access.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.SubViewValue">
            <summary>
            Represents a value to compute a sub-view value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new sub-view computation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The source view.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SubViewValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.SubViewValue.Length">
            <summary>
            Returns the length of the sub view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.LoadElementAddress">
            <summary>
            Loads an element address of a view or a pointer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new address value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="sourceView">The source address.</param>
            <param name="elementIndex">The address of the referenced element.</param>
        </member>
        <member name="P:ILGPU.IR.Values.LoadElementAddress.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.LoadElementAddress.IsArrayAccesss">
            <summary>
            Returns true if the current access works on an array.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadElementAddress.IsViewAccess">
            <summary>
            Returns true if the current access works on a view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadElementAddress.IsPointerAccess">
            <summary>
            Returns true if the current access works on a pointer.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadElementAddress.AccessesFirstElement">
            <summary>
            Returns true if this access targets the first element.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.LoadFieldAddress">
            <summary>
            Loads a field address of an object pointer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Constructs a new address value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The source address.</param>
            <param name="fieldSpan">The structure field span.</param>
        </member>
        <member name="P:ILGPU.IR.Values.LoadFieldAddress.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.LoadFieldAddress.Source">
            <summary>
            Returns the source address.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadFieldAddress.StructureType">
            <summary>
            Returns the structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadFieldAddress.FieldType">
            <summary>
            Returns the managed field information.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadFieldAddress.FieldSpan">
            <summary>
            Returns the field span.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.FieldAccess">
            <summary>
            An index into to a scalar structure field.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.#ctor(System.Int32)">
            <summary>
            Constructs a new field access.
            </summary>
            <param name="fieldIndex">The field access.</param>
        </member>
        <member name="P:ILGPU.IR.Values.FieldAccess.Index">
            <summary>
            Returns the field index.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.Add(System.Int32)">
            <summary>
            Adds the given field offset to the current index.
            </summary>
            <param name="offset">The offset to add.</param>
            <returns>The adapted field access.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.Subtract(System.Int32)">
            <summary>
            Subtracts the given field offset from the current index.
            </summary>
            <param name="offset">The offset to subtract.</param>
            <returns>The adapted field access.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.Equals(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns true if the given field access is equal to the current one.
            </summary>
            <param name="other">The other field reference.</param>
            <returns>
            True, if the given field access is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given field access is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.GetHashCode">
            <summary>
            Returns the hash code of this field access.
            </summary>
            <returns>The hash code of this field access.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.ToString">
            <summary>
            Returns the string representation of this field access.
            </summary>
            <returns>The string representation of this field access.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.op_Implicit(System.Int32)~ILGPU.IR.Values.FieldAccess">
            <summary>
            Converts a field index into a field access instance.
            </summary>
            <param name="fieldIndex">The field index to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.op_Explicit(ILGPU.IR.Values.FieldAccess)~System.Int32">
            <summary>
            Converts a field index access into its underlying field index.
            </summary>
            <param name="access">The field access to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.op_Equality(ILGPU.IR.Values.FieldAccess,ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns true if the first and second field access are the same.
            </summary>
            <param name="first">The first field access.</param>
            <param name="second">The second field access.</param>
            <returns>
            True, if the first and second field access are the same.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.op_Inequality(ILGPU.IR.Values.FieldAccess,ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns true if the first and second field access are not the same.
            </summary>
            <param name="first">The first field access.</param>
            <param name="second">The second field access.</param>
            <returns>
            True, if the first and second field access are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Values.FieldSpan">
            <summary>
            An index into to a scalar structure field that can span multiple fields.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.#ctor(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Constructs a new field span.
            </summary>
            <param name="fieldIndex">The field access.</param>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.#ctor(ILGPU.IR.Values.FieldAccess,System.Int32)">
            <summary>
            Constructs a new field reference.
            </summary>
            <param name="fieldIndex">The field access.</param>
            <param name="span">The number of fields to span.</param>
        </member>
        <member name="P:ILGPU.IR.Values.FieldSpan.Access">
            <summary>
            Returns the field index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldSpan.Index">
            <summary>
            Returns the field index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldSpan.Span">
            <summary>
            The number of fields to span.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldSpan.HasSpan">
            <summary>
            Returns true if this instance spans over multiple fields.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.GetLastAccess">
            <summary>
            Returns the last inclusive field access.
            </summary>
            <returns>The last inclusive field access.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.Contains(ILGPU.IR.Values.FieldSpan)">
            <summary>
            Returns true if the given field span is contained in this span.
            </summary>
            <param name="fieldSpan">The field span.</param>
            <returns>True, if the given field span is contained in this span.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.Distinct(ILGPU.IR.Values.FieldSpan)">
            <summary>
            Checks whether the current field span is distinct from the given one.
            </summary>
            <param name="fieldSpan">The other field span.</param>
            <returns>
            True, if the given field span is distinct from the given one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.Overlaps(ILGPU.IR.Values.FieldSpan)">
            <summary>
            Checks whether the current field span overlaps with the given one.
            </summary>
            <param name="fieldSpan">The other field span.</param>
            <returns>True, if the given field span overlaps with the given one.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.Narrow(ILGPU.IR.Values.FieldSpan)">
            <summary>
            Narrows the current span by accessing a nested span.
            </summary>
            <param name="fieldSpan">The nested span.</param>
            <returns>A new nested span that has an adjusted field index.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.Equals(ILGPU.IR.Values.FieldSpan)">
            <summary>
            Returns true if the given field access is equal to the current one.
            </summary>
            <param name="other">The other field reference.</param>
            <returns>
            True, if the given field access is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given field access is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.GetHashCode">
            <summary>
            Returns the hash code of this field access.
            </summary>
            <returns>The hash code of this field access.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.ToString">
            <summary>
            Returns the string representation of this field access.
            </summary>
            <returns>The string representation of this field access.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.op_Implicit(ILGPU.IR.Values.FieldAccess)~ILGPU.IR.Values.FieldSpan">
            <summary>
            Converts a field access into a field span.
            </summary>
            <param name="access">The access to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.op_Equality(ILGPU.IR.Values.FieldSpan,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Returns true if the first and second field access are the same.
            </summary>
            <param name="first">The first field access.</param>
            <param name="second">The second field access.</param>
            <returns>
            True, if the first and second field access are the same.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.op_Inequality(ILGPU.IR.Values.FieldSpan,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Returns true if the first and second field access are not the same.
            </summary>
            <param name="first">The first field access.</param>
            <param name="second">The second field access.</param>
            <returns>
            True, if the first and second field access are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Values.FieldAccessChain">
            <summary>
            Represents a chain of field indices that is used to point to a particular
            structure field.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.FieldAccessChain.Empty">
            <summary>
            An empty access chain.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.FieldAccessChain.hashCode">
            <summary>
            The cached hash code.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.#ctor(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Constructs a new access chain using the given index.
            </summary>
            <param name="index">The index of this reference.</param>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.FieldAccess})">
            <summary>
            Constructs a new access chain using the given indices.
            </summary>
            <param name="accessChain">The indices of this reference.</param>
        </member>
        <member name="P:ILGPU.IR.Values.FieldAccessChain.Item(System.Int32)">
            <summary>
            Returns the access chain element for the given index.
            </summary>
            <param name="index">The access chain index.</param>
            <returns>The resolved chain element.</returns>
        </member>
        <member name="P:ILGPU.IR.Values.FieldAccessChain.Length">
            <summary>
            Returns the number of chain elements.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldAccessChain.AccessChain">
            <summary>
            Returns the list of index elements.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldAccessChain.IsEmpty">
            <summary>
            Returns true if this chain is empty.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.IsSubChainOf(ILGPU.IR.Values.FieldAccessChain)">
            <summary>
            Returns true if this access chain is a subchain of the given one.
            </summary>
            <param name="other">The other subchain.</param>
            <returns>
            True if this access chain is a subchain of the given one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.GetEnumerator">
            <summary>
            Returns an enumerate to iterate over all chain elements.
            </summary>
            <returns>An enumerate to iterate over all chain elements.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.Append(ILGPU.IR.Values.FieldAccessChain)">
            <summary>
            Realizes an additional access operation to the given field indices.
            </summary>
            <param name="accessChain">The next access chain.</param>
            <returns>The extended field reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.Append(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Realizes an additional access operation to the given field index.
            </summary>
            <param name="fieldAccess">The next field access.</param>
            <returns>The extended field reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.Equals(ILGPU.IR.Values.FieldAccessChain)">
            <summary>
            Returns true if the given field ref is equal to the current one.
            </summary>
            <param name="other">The other field reference.</param>
            <returns>
            True, if the given field ref is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given field ref is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.GetHashCode">
            <summary>
            Returns the hash code of this field reference.
            </summary>
            <returns>The hash code of this field reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.ToString">
            <summary>
            Returns the string representation of this field reference.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.op_Equality(ILGPU.IR.Values.FieldAccessChain,ILGPU.IR.Values.FieldAccessChain)">
            <summary>
            Returns true if the first and second field ref are the same.
            </summary>
            <param name="first">The first field ref.</param>
            <param name="second">The second field ref.</param>
            <returns>
            True, if the first and second field ref are the same.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.op_Inequality(ILGPU.IR.Values.FieldAccessChain,ILGPU.IR.Values.FieldAccessChain)">
            <summary>
            Returns true if the first and second field ref are not the same.
            </summary>
            <param name="first">The first field ref.</param>
            <param name="second">The second field ref.</param>
            <returns>
            True, if the first and second field ref are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Values.FieldRef">
            <summary>
            A reference to a scalar structure field.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.#ctor(ILGPU.IR.Value)">
            <summary>
            Constructs a new direct reference to the given node.
            </summary>
            <param name="source">The main source.</param>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.#ctor(ILGPU.IR.Value,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Constructs a new direct reference to the given node.
            </summary>
            <param name="source">The main source.</param>
            <param name="fieldSpan">The field span.</param>
        </member>
        <member name="P:ILGPU.IR.Values.FieldRef.IsValid">
            <summary>
            Returns true if this field reference points to a valid field.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldRef.Source">
            <summary>
            Returns the source node (the main structure value).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldRef.FieldSpan">
            <summary>
            Returns the field span.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldRef.IsDirect">
            <summary>
            Returns true if this instances references the whole source object.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.Access(ILGPU.IR.Values.FieldSpan)">
            <summary>
            Accesses the given field span.
            </summary>
            <param name="fieldSpan">The field span.</param>
            <returns>The new field reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.Equals(ILGPU.IR.Values.FieldRef)">
            <summary>
            Returns true if the given field ref is equal to the current one.
            </summary>
            <param name="other">The other field reference.</param>
            <returns>
            True, if the given field ref is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given field ref is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.GetHashCode">
            <summary>
            Returns the hash code of this field reference.
            </summary>
            <returns>The hash code of this field reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.ToString">
            <summary>
            Returns the string representation of this field reference.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.op_Equality(ILGPU.IR.Values.FieldRef,ILGPU.IR.Values.FieldRef)">
            <summary>
            Returns true if the first and second field ref are the same.
            </summary>
            <param name="first">The first field ref.</param>
            <param name="second">The second field ref.</param>
            <returns>True, if the first and second field ref are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.op_Inequality(ILGPU.IR.Values.FieldRef,ILGPU.IR.Values.FieldRef)">
            <summary>
            Returns true if the first and second field ref are not the same.
            </summary>
            <param name="first">The first field ref.</param>
            <param name="second">The second field ref.</param>
            <returns>True, if the first and second field ref are not the same.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.StructureValue">
            <summary>
            Represents an immutable structure value.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.StructureValue.IBuilder">
            <summary>
            An abstract structure value builder.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.StructureValue.IInternalBuilder">
            <summary>
            An internal instance builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.IInternalBuilder.Seal(ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Moves the underlying array builder to a target list and outputs an
            assembled structure type.
            </summary>
            <param name="values">The resulting array of value references.</param>
            <returns>The resulting structure type.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.StructureValue.Builder">
            <summary>
            An instance builder for structure instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.Builder.#ctor(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,ILGPU.IR.Types.StructureType)">
            <summary>
            Initializes a new instance builder.
            </summary>
            <param name="irBuilder">The current IR builder.</param>
            <param name="location">The current location.</param>
            <param name="parent">The parent type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.Builder.IRBuilder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.Builder.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.Builder.Parent">
            <summary>
            Returns the corresponding parent type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.Builder.Count">
            <summary>
            The number of field values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.Builder.Item(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns the value that corresponds to the given field access.
            </summary>
            <param name="access">The field access.</param>
            <returns>The resolved field type.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.Builder.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given value to the instance builder.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.Builder.Seal">
            <summary>
            Constructs a new value that represents the current value builder.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.Builder.ILGPU#IR#Values#StructureValue#IInternalBuilder#Seal(ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Moves the underlying array builder to a target list and outputs an
            assembled structure type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.StructureValue.DynamicBuilder">
            <summary>
            An instance builder for dynamically typed structure instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.DynamicBuilder.#ctor(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,System.Int32)">
            <summary>
            Initializes a new instance builder.
            </summary>
            <param name="irBuilder">The current IR builder.</param>
            <param name="location">The current location.</param>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.DynamicBuilder.#ctor(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Initializes a new instance builder.
            </summary>
            <param name="irBuilder">The current IR builder.</param>
            <param name="location">The current location.</param>
            <param name="values">The initial capacity.</param>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.DynamicBuilder.IRBuilder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.DynamicBuilder.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.DynamicBuilder.Count">
            <summary>
            The number of field values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.DynamicBuilder.Item(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns the value that corresponds to the given field access.
            </summary>
            <param name="access">The field access.</param>
            <returns>The resolved field type.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.DynamicBuilder.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given value to the instance builder.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.DynamicBuilder.Seal">
            <summary>
            Constructs a new value that represents the current value builder.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.DynamicBuilder.ILGPU#IR#Values#StructureValue#IInternalBuilder#Seal(ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Moves the underlying array builder to a target list and outputs an
            assembled structure type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.StructureType,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Constructs a new structure value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="structureType">The associated structure type.</param>
            <param name="fieldValues">The field values.</param>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.StructureType">
            <summary>
            Returns the structure type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.Get(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Gets a new nested structure value.
            </summary>
            <param name="builder">The parent builder.</param>
            <param name="location">The current location.</param>
            <param name="fieldSpan">The field span.</param>
            <returns>The resolved structure value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.StructureOperationValue">
            <summary>
            Represents an operation on structure values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureOperationValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Constructs a new abstract structure operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="fieldSpan">The field span.</param>
        </member>
        <member name="P:ILGPU.IR.Values.StructureOperationValue.ObjectValue">
            <summary>
            Returns the object value to load from.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureOperationValue.StructureType">
            <summary>
            Returns the structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureOperationValue.FieldSpan">
            <summary>(
            Returns the field span.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureOperationValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GetField">
            <summary>
            Represents an operation to load a single field from an object.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GetField.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Constructs a new field load.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="structValue">The structure value.</param>
            <param name="fieldSpan">The field span.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GetField.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetField.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetField.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetField.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GetField.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.SetField">
            <summary>
            Represents an operation to store a single field of an object.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.FieldSpan,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new field store.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="structValue">The structure value.</param>
            <param name="fieldSpan">The field access.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SetField.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.SetField.Value">
            <summary>
            Returns the value to store.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.SetField.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.TerminatorValue">
            <summary>
            Represents a single terminator value.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.TerminatorValue.IBlockRemapper">
            <summary>
            Remaps basic blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.IBlockRemapper.CanRemap(System.ReadOnlySpan{ILGPU.IR.BasicBlock}@)">
            <summary>
            Returns true if the given blocks contain a block to remap.
            </summary>
            <param name="blocks">The blocks to check.</param>
            <returns>True, if the given blocks contain the old block.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.TerminatorValue.IDirectTargetRemapper">
            <summary>
            An abstract target remapper.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.IDirectTargetRemapper.Remap(ILGPU.IR.BasicBlock)">
            <summary>
            Remaps the given block to a new one.
            </summary>
            <param name="block">The old block to remap.</param>
            <returns>The remapped block.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.TerminatorValue.ITargetRemapper">
            <summary>
            An abstract target remapper.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.TerminatorValue.IdentityRemapper">
            <summary>
            An identity remapper that does not remap any targets.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.IdentityRemapper.CanRemap(System.ReadOnlySpan{ILGPU.IR.BasicBlock}@)">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.IdentityRemapper.Remap(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the same block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new terminator value that is marked.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.TerminatorValue.Targets">
            <summary>
            Returns the associated targets.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.TerminatorValue.NumTargets">
            <summary>
            Returns the number of attached targets.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.SealTargets(ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Seals all internal branch targets (if any).
            </summary>
            <param name="targets">The associated targets.</param>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.RemapTargets``1(ILGPU.IR.Method.Builder,``0)">
            <summary>
            Remaps the current block targets.
            </summary>
            <typeparam name="TTargetRemapper">The target remapper type.</typeparam>
            <param name="methodBuilder">The current method builder.</param>
            <param name="remapper">The remapper instance.</param>
            <returns>The remapped terminator value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.RemapTargets``1(ILGPU.IR.BasicBlock.Builder,``0)">
            <summary>
            Remaps the current block targets.
            </summary>
            <typeparam name="TTargetRemapper">The target remapper type.</typeparam>
            <param name="blockBuilder">The current block builder.</param>
            <param name="remapper">The remapper instance.</param>
            <returns>The remapped terminator value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.RemapTargets(ILGPU.IR.BasicBlock.Builder,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Remaps the current targets to the given target list.
            </summary>
            <param name="builder">The builder to use.</param>
            <param name="targets">The new targets.</param>
            <returns>The new terminator value.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.ReturnTerminator">
            <summary>
            Represents a simple return terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new return terminator.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="returnValue">The current return value.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ReturnTerminator.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.ReturnTerminator.IsVoidReturn">
            <summary>
            Returns true if the current return terminator is a void return.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ReturnTerminator.ReturnValue">
            <summary>
            Returns the associated return value.
            In case of a void return value the result is a <see cref="T:ILGPU.IR.Values.NullValue"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.RemapTargets(ILGPU.IR.BasicBlock.Builder,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Branch">
            <summary>
            Represents a branch-based terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Branch.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new branch terminator.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="M:ILGPU.IR.Values.Branch.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="T:ILGPU.IR.Values.UnconditionalBranch">
            <summary>
            Represents an unconditional branch terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new branch terminator.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="target">The jump target.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UnconditionalBranch.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.UnconditionalBranch.Target">
            <summary>
            Returns the unconditional jump target.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.RemapTargets(ILGPU.IR.BasicBlock.Builder,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Creates a new branch using the given targets.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ConditionalBranch">
            <summary>
            Represents a conditional branch terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConditionalBranch.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new conditional branch terminator.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ConditionalBranch.Condition">
            <summary>
            Returns the associated branch condition.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConditionalBranch.CanFold">
            <summary>
            Returns true if this conditional branch can be folded.
            </summary>
            <remarks>
            A branch can be folded if its condition evaluates to a constant value.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Values.ConditionalBranch.TryGetOtherBranchTarget(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock@)">
            <summary>
            Returns true if this branch offers two branch targets and one of the
            targets is the one provided.
            </summary>
            <param name="block">The branch target to exclude.</param>
            <param name="otherBlock">The other branch target (if any).</param>
        </member>
        <member name="M:ILGPU.IR.Values.ConditionalBranch.Fold(ILGPU.IR.Construction.IRBuilder)">
            <summary>
            Folds this branch into another branch that might be unconditional.
            </summary>
            <param name="builder">The builder to use.</param>
            <returns>The folded branch.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ConditionalBranch.FoldBranch(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.PrimitiveValue)">
            <summary>
            Folds this conditional branch into an unconditional branch.
            </summary>
            <param name="builder">The builder to use.</param>
            <param name="condition">The constant condition value.</param>
            <returns>The folded branch.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.IfBranch">
            <summary>
            Represents an if branch terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IfBranch.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new conditional branch terminator.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="condition">The jump condition.</param>
            <param name="falseTarget">The false jump target.</param>
            <param name="trueTarget">The true jump target.</param>
        </member>
        <member name="P:ILGPU.IR.Values.IfBranch.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.IfBranch.TrueTarget">
            <summary>
            Returns the true jump target.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.IfBranch.FalseTarget">
            <summary>
            Returns the false jump target.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IfBranch.FoldBranch(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.PrimitiveValue)">
            <summary cref="M:ILGPU.IR.Values.ConditionalBranch.FoldBranch(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.PrimitiveValue)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IfBranch.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IfBranch.RemapTargets(ILGPU.IR.BasicBlock.Builder,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Creates a new if branch using the given targets.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IfBranch.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IfBranch.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.IfBranch.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.SwitchBranch">
            <summary>
            Represents a single switch terminator.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.SwitchBranch.Builder">
            <summary>
            An instance builder for switch branches.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.Builder.#ctor(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,ILGPU.IR.Value,System.Int32)">
            <summary>
            Initializes a new call builder.
            </summary>
            <param name="irBuilder">The current IR builder.</param>
            <param name="location">The current location.</param>
            <param name="condition">The switch condition value.</param>
            <param name="capacity">The initial builder capacity.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.Builder.IRBuilder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.Builder.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.Builder.Condition">
            <summary>
            Returns the current switch condition.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.Builder.Count">
            <summary>
            The number of arguments.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.Builder.Add(ILGPU.IR.BasicBlock)">
            <summary>
            Adds the given value to the switch builder.
            </summary>
            <param name="target">The target to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.Builder.Seal">
            <summary>
            Constructs a new value that represents the current branch.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Constructs a new switch terminator.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The value to switch over.</param>
            <param name="targets">The jump targets.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.DefaultBlock">
            <summary>
            Returns the default block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.NumCasesWithoutDefault">
            <summary>
            Returns the number of actual switch cases without the default case.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.GetCaseTarget(System.Int32)">
            <summary>
            Returns the case target for the i-th case.
            </summary>
            <param name="i">The index of the i-th case.</param>
            <returns>The resulting jump target.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.FoldBranch(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.PrimitiveValue)">
            <summary cref="M:ILGPU.IR.Values.ConditionalBranch.FoldBranch(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.PrimitiveValue)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.RemapTargets(ILGPU.IR.BasicBlock.Builder,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Creates a new switch branch using the given targets.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BuilderTerminator">
            <summary>
            Represents a temporary builder terminator.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.BuilderTerminator.Builder">
            <summary>
            An instance builder for temporary branches.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.Builder.#ctor(ILGPU.IR.Construction.IRBuilder,System.Int32)">
            <summary>
            Initializes a new call builder.
            </summary>
            <param name="irBuilder">The current IR builder.</param>
            <param name="capacity">The initial builder capacity.</param>
        </member>
        <member name="P:ILGPU.IR.Values.BuilderTerminator.Builder.IRBuilder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BuilderTerminator.Builder.Count">
            <summary>
            The number of arguments.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.Builder.Add(ILGPU.IR.BasicBlock)">
            <summary>
            Adds the given value to the custom terminator builder.
            </summary>
            <param name="target">The target to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.Builder.Seal">
            <summary>
            Constructs a new value that represents the current branch.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Constructs a temporary builder terminator.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="targets">The jump targets.</param>
        </member>
        <member name="P:ILGPU.IR.Values.BuilderTerminator.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.RemapTargets(ILGPU.IR.BasicBlock.Builder,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BarrierOperation">
            <summary>
            Represents a generic barrier operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BarrierOperation.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new generic barrier operation.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="M:ILGPU.IR.Values.BarrierOperation.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.PredicateBarrierKind">
            <summary>
            Represents a predicate-barrier kind.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.PredicateBarrierKind.PopCount">
            <summary>
            Returns the number of threads in the group
            for which the predicate evaluates to true.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.PredicateBarrierKind.And">
            <summary>
            Returns the logical and result of the predicate
            of all threads in the group.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.PredicateBarrierKind.Or">
            <summary>
            Returns the logical or result of the predicate
            of all threads in the group.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.PredicateBarrier">
            <summary>
            Represents a predicated synchronization barrier.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.PredicateBarrierKind)">
            <summary>
            Constructs a new predicate barrier.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="predicate">The predicate value.</param>
            <param name="kind">The operation kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PredicateBarrier.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.PredicateBarrier.Predicate">
            <summary>
            Returns the barrier predicate.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PredicateBarrier.Kind">
            <summary>
            Returns the kind of the barrier operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BarrierKind">
            <summary>
            Represents a barrier kind.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BarrierKind.WarpLevel">
            <summary>
            A barrier that operates on warp level.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BarrierKind.GroupLevel">
            <summary>
            A barrier that operates on group level.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.Barrier">
            <summary>
            Represents a synchronization barrier.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Barrier.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.BarrierKind)">
            <summary>
            Constructs a new barrier.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="barrierKind">The barrier kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Barrier.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.Barrier.Kind">
            <summary>
            Return the associated barrier kind.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Barrier.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Barrier.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Barrier.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="T:ILGPU.IR.Values.BroadcastKind">
            <summary>
            Represents the kind of a broadcast operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BroadcastKind.WarpLevel">
            <summary>
            A broadcast operation that operates on warp level.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BroadcastKind.GroupLevel">
            <summary>
            A broadcast operation that operates on group level.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.ThreadValue">
            <summary>
            Represents a value that is used for communicating values across all threads.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ThreadValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new communication operation.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ThreadValue.Variable">
            <summary>
            Returns the variable reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ThreadValue.IsBuiltIn">
            <summary>
            Returns true if this communication operation works on intrinsic primitive
            types.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ThreadValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="T:ILGPU.IR.Values.Broadcast">
            <summary>
            Represents a broadcast operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.BroadcastKind)">
            <summary>
            Constructs a new broadcast operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The value to broadcast.</param>
            <param name="origin">
            The source thread index within the group or warp.
            </param>
            <param name="broadcastKind">The operation kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Broadcast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.Broadcast.Origin">
            <summary>
            Returns the thread index origin (group or lane index).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Broadcast.Kind">
            <summary>
            Returns the kind of the broadcast operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ShuffleKind">
            <summary>
            Represents the kind of a shuffle operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ShuffleKind.Generic">
            <summary>
            A generic shuffle operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ShuffleKind.Down">
            <summary>
            A down-shuffle operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ShuffleKind.Up">
            <summary>
            An up-shuffle operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ShuffleKind.Xor">
            <summary>
            A xor-shuffle operation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.ShuffleOperation">
            <summary>
            Represents a shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ShuffleOperation.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Constructs a new shuffle operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="shuffleKind">The operation kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ShuffleOperation.Origin">
            <summary>
            Returns the shuffle origin (depends on the operation).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ShuffleOperation.Kind">
            <summary>
            Returns the kind of the shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ShuffleOperation.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.WarpShuffle">
            <summary>
            Represents a shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.WarpShuffle.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Constructs a new shuffle operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="variable">The source variable value.</param>
            <param name="origin">The shuffle origin.</param>
            <param name="kind">The operation kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.WarpShuffle.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.WarpShuffle.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.WarpShuffle.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.WarpShuffle.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.SubWarpShuffle">
            <summary>
            Represents an sub-warp shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SubWarpShuffle.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Constructs a new shuffle operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="variable">The source variable value.</param>
            <param name="origin">The shuffle origin.</param>
            <param name="width">The sub-warp width.</param>
            <param name="kind">The operation kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SubWarpShuffle.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.SubWarpShuffle.Width">
            <summary>
            Returns the intra-warp width.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SubWarpShuffle.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SubWarpShuffle.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.SubWarpShuffle.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.UndefinedValue">
            <summary>
            Represents an undefined value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a undefined value.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UndefinedValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Use">
            <summary>
            Represents the use of a single node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Use.#ctor(ILGPU.IR.Value,System.Int32)">
            <summary>
            Constructs a new use.
            </summary>
            <param name="target">The target reference.</param>
            <param name="index">The argument index.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Use.Target">
            <summary>
            Returns the target reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Use.Index">
            <summary>
            Returns the argument index.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Use.Refresh">
            <summary>
            Refreshes the use with up-to-date replacement information.
            </summary>
            <returns>The refreshed use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.Resolve">
            <summary>
            Resolves the actual node with respect to replacement information.
            </summary>
            <returns>The actual node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.ResolveAs``1">
            <summary>
            Resolves the actual value with respect to replacement information.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The actual value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.Equals(ILGPU.IR.Values.Use)">
            <summary>
            Returns true if the given use is equal to this use.
            </summary>
            <param name="other">The other use.</param>
            <returns>True, if the given id is equal to this use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this use.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to this use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.GetHashCode">
            <summary>
            Returns the hash code of this use.
            </summary>
            <returns>The hash code of this use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.ToString">
            <summary>
            Returns the string representation of this use.
            </summary>
            <returns>The string representation of this use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.op_Implicit(ILGPU.IR.Values.Use)~ILGPU.IR.Values.ValueReference">
            <summary>
            Implicitly converts the given use to the associated node reference.
            </summary>
            <param name="use">The use to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.Use.op_Implicit(ILGPU.IR.Values.Use)~ILGPU.IR.Value">
            <summary>
            Implicitly converts the given use to the associated node.
            </summary>
            <param name="use">The use to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.Use.op_Equality(ILGPU.IR.Values.Use,ILGPU.IR.Values.Use)">
            <summary>
            Returns true if the first and the second use are the same.
            </summary>
            <param name="first">The first use.</param>
            <param name="second">The second use.</param>
            <returns>True, if the first and the second use are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.op_Inequality(ILGPU.IR.Values.Use,ILGPU.IR.Values.Use)">
            <summary>
            Returns true if the first and the second use are not the same.
            </summary>
            <param name="first">The first use.</param>
            <param name="second">The second use.</param>
            <returns>True, if the first and the second use are not the same.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.UseCollection">
            <summary>
            Represents an enumerable of uses that point to non-replaced nodes.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.UseCollection.Enumerator">
            <summary>
            Returns an enumerator to enumerate all uses in the context
            of the parent scope.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.Enumerator.#ctor(ILGPU.IR.Value,System.ReadOnlySpan{ILGPU.IR.Values.Use}@)">
            <summary>
            Constructs a new use enumerator.
            </summary>
            <param name="node">The node.</param>
            <param name="uses">The list of all uses.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.Enumerator.Node">
            <summary>
            Returns the node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.Enumerator.Current">
            <summary>
            Returns the current use.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.#ctor(ILGPU.IR.Value,System.ReadOnlySpan{ILGPU.IR.Values.Use}@)">
            <summary>
            Constructs a new uses collection.
            </summary>
            <param name="node">The associated node.</param>
            <param name="uses">The set of associated uses.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.Node">
            <summary>
            Returns the associated node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.Uses">
            <summary>
            Returns all associated uses.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.HasAny">
            <summary>
            Returns true, if the collection contains at least one use.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.HasExactlyOne">
            <summary>
            Returns true, if the collection contains exactly one use.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.TryGetSingleUse(ILGPU.IR.Values.Use@)">
            <summary>
            Tries to resolve a single use.
            </summary>
            <param name="use">The resolved use reference.</param>
            <returns>True, if the collection contains exactly one use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.Clone">
            <summary>
            Clones this use collection into a new one.
            </summary>
            <returns>The cloned use collection.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all uses in the context
            of the parent scope.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.UseDistribution">
            <summary>
            An analysis class to resolve information about the global use-relation
            within a given context.
            </summary>
            <remarks>
            This class is typically used for internal debugging and tracking of memory
            allocations.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Values.UseDistribution.#ctor(ILGPU.IR.IRContext)">
            <summary>
            Constructs a new use distribution.
            </summary>
            <param name="context">The target context.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UseDistribution.Uses">
            <summary>
            Returns the use distribution of all global nodes.
            </summary>
            <remarks>Tuple layout: (number of uses, number of nodes).</remarks>
        </member>
        <member name="P:ILGPU.IR.Values.UseDistribution.UsesPerType">
            <summary>
            Returns the use distribution of all node types.
            </summary>
            <remarks>
            Tuple layout: (max number of uses, type, number of nodes with this type).
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Values.ValueReference">
            <summary>
            Represents a reference to a node that can be resolved
            automatically to the latest node information by following
            the replacement relation on nodes.
            </summary>
            <remarks>
            Use the <see cref="P:ILGPU.IR.Values.ValueReference.DirectTarget"/> property to resolve the
            directly associated node.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Values.ValueReference.ToReferenceFormatter">
            <summary>
            A value reference formatter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.ToReferenceFormatter.ILGPU#Util#InlineList#IFormatter{ILGPU#IR#Value}#Format(ILGPU.IR.Value)">
            <summary>
            Formats a value by returning its reference string.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.ToReferenceFormatter.ILGPU#Util#InlineList#IFormatter{ILGPU#IR#Values#ValueReference}#Format(ILGPU.IR.Values.ValueReference)">
            <summary>
            Formats a value reference by returning its reference string.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.#ctor(ILGPU.IR.Value)">
            <summary>
            Constructs a new node reference.
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.ValueKind">
            <summary>
            Returns the current value kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.DirectTarget">
            <summary>
            Returns the node that is directly stored in the reference structure
            without using any replacement information.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.IsValid">
            <summary>
            Returns true if the reference points to a valid node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.IsReplaced">
            <summary>
            Returns true if the direct target has been replaced.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.BasicBlock">
            <summary>
            Returns the parent basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.Id">
            <summary>
            Returns the unique node id of the latest node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.Location">
            <summary>
            Returns the associated location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.Nodes">
            <summary>
            Returns all child nodes of the latest node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.Uses">
            <summary>
            Returns all uses of the latest node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.Type">
            <summary>
            Returns the associated type of the latest node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Refresh">
            <summary>
            Refreshes the current reference and returns the new one.
            </summary>
            <returns>The refreshed reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all child nodes.
            </summary>
            <returns>An enumerator to enumerate all child nodes.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Accept``1(``0)">
            <summary>
            Accepts a node visitor.
            </summary>
            <typeparam name="T">The type of the visitor.</typeparam>
            <param name="visitor">The visitor.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Replace(ILGPU.IR.Value)">
            <summary>
            Replaces this node with the given node.
            </summary>
            <param name="other">The other node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Resolve">
            <summary>
            Resolves the actual node with respect to
            replacement information.
            </summary>
            <returns>The actual node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.ResolveAs``1">
            <summary>
            Resolves the actual node with respect to replacement information.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The actual node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Dump(System.IO.TextWriter)">
            <summary>
            Dumps this node to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.ILGPU#IR#ILocation#FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific location information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Equals(ILGPU.IR.Values.ValueReference)">
            <summary>
            Returns true if the given node reference points to the
            same node.
            </summary>
            <param name="other">The other reference.</param>
            <returns>True, if the given reference points to the same node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Equals(System.Object)">
            <summary>
            Returns true if the given object is a node reference that
            points to the same node.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object points to the same node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.GetHashCode">
            <summary>
            Returns the hash code of the directly associated node.
            </summary>
            <returns>The hash code of the directly associated node</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.ToString">
            <summary>
            Returns the string representation of this reference.
            </summary>
            <returns>The string representation of this reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.op_Implicit(ILGPU.IR.Value)~ILGPU.IR.Values.ValueReference">
            <summary>
            Converts the given node implicitly to a node reference.
            </summary>
            <param name="node">The node to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.op_Implicit(ILGPU.IR.Values.ValueReference)~ILGPU.IR.Value">
            <summary>
            Converts the given reference to the latest node information.
            </summary>
            <param name="reference">The reference to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.op_Equality(ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Returns true if the both node references point to the
            same node.
            </summary>
            <param name="first">The first reference.</param>
            <param name="second">The first reference.</param>
            <returns>True, if both node references point to the same node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.op_Inequality(ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Returns true if the both node references point to different nodes.
            </summary>
            <param name="first">The first reference.</param>
            <param name="second">The first reference.</param>
            <returns>True, if both node references point to different nodes.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.NewView">
            <summary>
            Represents a new view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a view.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="pointer">The underlying pointer.</param>
            <param name="length">The number of elements.</param>
        </member>
        <member name="P:ILGPU.IR.Values.NewView.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.NewView.Pointer">
            <summary>
            Returns the underlying pointer.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.NewView.ViewElementType">
            <summary>
            Returns the view's element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.NewView.ViewAddressSpace">
            <summary>
            Returns the view's address space.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.NewView.Length">
            <summary>
            Returns the length of the view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.NewView.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ViewPropertyValue">
            <summary>
            Represents a generic property of an <see cref="T:ILGPU.ArrayView`1"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ViewPropertyValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a view property.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="view">The underlying view.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ViewPropertyValue.View">
            <summary>
            Returns the underlying view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ViewPropertyValue.Is32BitProperty">
            <summary>
            Returns true if this is a 32bit element access.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ViewPropertyValue.Is64BitProperty">
            <summary>
            Returns true if this is a 64bit element access.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ViewPropertyValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GetViewLength">
            <summary>
            Represents the <see cref="P:ILGPU.ArrayView`1.Length"/> property
            inside the IR.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.BasicValueType)">
            <summary>
            Constructs a new view length property.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="view">The underlying view.</param>
            <param name="lengthType">The underlying length type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GetViewLength.LengthType">
            <summary>
            Returns the associated length type to return.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.GetViewLength.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.UnaryArithmeticKind">
            <summary>
            Represents the kind of an unary operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Neg">
            <summary>
            The neg operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Not">
            <summary>
            The logical not operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Abs">
            <summary>
            The abs operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.RcpF">
            <summary>
            The reciprocal operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.IsNaNF">
            <summary>
            The is-not-a-number operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.IsInfF">
            <summary>
            The is-infinity operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.SqrtF">
            <summary>
            Computes sqrt(value).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.RsqrtF">
            <summary>
            Computes 1/sqrt(value).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.AsinF">
            <summary>
            Computes asin(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.SinF">
            <summary>
            Computes sin(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.SinhF">
            <summary>
            Computes sinh(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.AcosF">
            <summary>
            Computes acos(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.CosF">
            <summary>
            Computes cos(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.CoshF">
            <summary>
            Computes cosh(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.TanF">
            <summary>
            Computes tan(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.TanhF">
            <summary>
            Computes tanh(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.AtanF">
            <summary>
            Computes atan(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.ExpF">
            <summary>
            Computes exp(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Exp2F">
            <summary>
            Computes 2^x.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.FloorF">
            <summary>
            Computes floor(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.CeilingF">
            <summary>
            Computes ceil(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.LogF">
            <summary>
            Computes log(x) to base e.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Log2F">
            <summary>
            Computes log(x) to base 2.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Log10F">
            <summary>
            Computes log(x) to base 10.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.BinaryArithmeticKind">
            <summary>
            Represents the kind of a binary operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Add">
            <summary>
            The + operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Sub">
            <summary>
            The - operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Mul">
            <summary>
            The * operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Div">
            <summary>
            The / operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Rem">
            <summary>
            The % operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.And">
            <summary>
            The logical and operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Or">
            <summary>
            The logical or operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Xor">
            <summary>
            The logical xor operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Shl">
            <summary>
            The shift left operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Shr">
            <summary>
            The shift right operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Min">
            <summary>
            The min operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Max">
            <summary>
            The max operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Atan2F">
            <summary>
            The atan2 operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.PowF">
            <summary>
            The pow operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.BinaryLogF">
            <summary>
            The binary log operation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.TernaryArithmeticKind">
            <summary>
            Represents the kind of a ternary operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.TernaryArithmeticKind.MultiplyAdd">
            <summary>
            The FMA operation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.IValue">
            <summary>
            The base interface of all values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.ValueKind">
            <summary>
            Returns the current value kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.Type">
            <summary>
            Returns the associated type information.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.BasicBlock">
            <summary>
            Returns the parent basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.Nodes">
            <summary>
            Returns all associated nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.Uses">
            <summary>
            Returns all associated uses.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IValue.Resolve">
            <summary>
            Resolves the actual value with respect to
            replacement information.
            </summary>
            <returns>The actual value.</returns>
        </member>
        <member name="M:ILGPU.IR.IValue.ResolveAs``1">
            <summary>
            Resolves the actual value with respect to replacement information.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The actual value.</returns>
        </member>
        <member name="M:ILGPU.IR.IValue.Accept``1(``0)">
            <summary>
            Accepts a value visitor.
            </summary>
            <typeparam name="T">The type of the visitor.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.IValue.Replace(ILGPU.IR.Value)">
            <summary>
            Replaces this value with the given value.
            </summary>
            <param name="other">The other value.</param>
        </member>
        <member name="T:ILGPU.IR.ValueExtensions">
            <summary>
            Contains extension methods for values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueExtensions.IsPrimitive``1(``0)">
            <summary>
            Returns true if the given value is a primitive value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value to test.</param>
            <returns>True, if the given value is a primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.ValueExtensions.IsPrimitive``1(``0,System.Int64)">
            <summary>
            Returns true if the given value is a primitive value with the specified raw
            value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value to test.</param>
            <param name="rawValue">The expected raw value.</param>
            <returns>
            True, if the given value is a primitive value with the specified raw value.
            </returns>
        </member>
        <member name="M:ILGPU.IR.ValueExtensions.IsInstantiatedConstant``1(``0)">
            <summary>
            Returns true if the given value is an instantiated constant value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value to test.</param>
            <returns>
            True, if the given value is an instantiated constant value.
            </returns>
        </member>
        <member name="M:ILGPU.IR.ValueExtensions.IsDeviceConstant``1(``0)">
            <summary>
            Returns true if the given value is a device constant value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value to test.</param>
            <returns>True, if the given value is a device constant value.</returns>
        </member>
        <member name="T:ILGPU.IR.ValueFlags">
            <summary>
            Flags that can be associated with every value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueFlags.None">
            <summary>
            The default flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueFlags.NotReplacable">
            <summary>
            The value cannot be replaced.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueFlags.NoUses">
            <summary>
            The value cannot have uses.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueFlags.StaticType">
            <summary>
            Static type
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueFlags.IsSealed">
            <summary>
            The value has been sealed.
            </summary>
        </member>
        <member name="T:ILGPU.IR.ValueInitializer">
            <summary>
            A general value initializer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueInitializer.#ctor(ILGPU.IR.IRContext,ILGPU.IR.ValueParent,ILGPU.IR.Location)">
            <summary>
            Constructs a new value initializer.
            </summary>
            <param name="context">The parent context.</param>
            <param name="parent">The associated parent.</param>
            <param name="location">The current location.</param>
        </member>
        <member name="P:ILGPU.IR.ValueInitializer.Context">
            <summary>
            Returns the parent context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.ValueInitializer.Parent">
            <summary>
            Returns the associated parent.
            </summary>
        </member>
        <member name="P:ILGPU.IR.ValueInitializer.Location">
            <summary>
            Returns the associated location.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueInitializer.HasFlags(ILGPU.ContextFlags)">
            <summary>
            Returns true if the current context has the given flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, if the current context has the given flags.</returns>
        </member>
        <member name="M:ILGPU.IR.ValueInitializer.ILGPU#IR#ILocation#FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific location information.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Value">
            <summary>
            Represents a basic intermediate-representation value.
            It is the base class for all values in the scope of this IR.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Value.DefaultFlags">
            <summary>
            The default value flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Value.parent">
            <summary>
            The current parent container.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Value.type">
            <summary>
            The current node type.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Value.values">
            <summary>
            The list of all values.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Value.uses">
            <summary>
            The collection of all uses.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new value that is marked as replaceable.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="M:ILGPU.IR.Value.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new value that is marked as replaceable.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="staticType">The static type.</param>
        </member>
        <member name="M:ILGPU.IR.Value.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.ValueFlags)">
            <summary>
            Constructs a new value that is marked as replaceable.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="valueFlags">The value flags.</param>
        </member>
        <member name="M:ILGPU.IR.Value.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.ValueFlags,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new value that is marked as replaceable.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="valueFlags">The value flags.</param>
            <param name="staticType">The static type (if any).</param>
        </member>
        <member name="P:ILGPU.IR.Value.ValueKind">
            <summary>
            Returns the current value kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.BasicBlock">
            <summary>
            Returns the parent basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Type">
            <summary>
            Returns the associated type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.ValueFlags">
            <summary>
            Returns the associated value flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.CanBeReplaced">
            <summary>
            Returns true if the current value can be replaced.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.CanHaveUses">
            <summary>
            Returns true if the current value can have uses.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.HasStaticType">
            <summary>
            Returns true if the current value has a static type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.IsSealed">
            <summary>
            Returns true if the current value has been sealed.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Replacement">
            <summary>
            Returns the replacement of this value (if any).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.IsReplaced">
            <summary>
            Returns true if the current value has been replaced.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Nodes">
            <summary>
            Returns all child values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Count">
            <summary>
            Returns the number of child values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.AllNumUses">
            <summary>
            Returns the total number of all associated uses.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Uses">
            <summary>
            Returns all current uses (to non-replaced values).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Item(System.Int32)">
            <summary>
            Accesses the child value with the given index.
            </summary>
            <param name="index">The child-value index.</param>
            <returns>The resolved child value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.GC">
            <summary>
            Performs a GC run on this value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.GetFirstUse">
            <summary>
            Resolves the first use.
            </summary>
            <returns>The first use.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.GetFirstUseNode">
            <summary>
            Resolves the first use as value.
            </summary>
            <returns>The first use as value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.AddUse(ILGPU.IR.Value,System.Int32)">
            <summary>
            Adds the given use to the use set.
            </summary>
            <param name="target">The target value.</param>
            <param name="useIndex">The use index.</param>
        </member>
        <member name="M:ILGPU.IR.Value.InvalidateType">
            <summary>
            Invalidates the current type and enforces a re-computation of the current
            type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary>
            Computes the current type.
            </summary>
            <param name="initializer">The value initializer.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.Accept``1(``0)">
            <summary>
            Accepts a value visitor.
            </summary>
            <typeparam name="T">The type of the visitor.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary>
            Rebuilds the current value in the scope of the given rebuilder.
            </summary>
            <param name="builder">The builder to use.</param>
            <param name="rebuilder">The rebuilder to use.</param>
            <returns>The rebuilt value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.VerifyNotSealed">
            <summary>
            Verifies that the this value is not sealed.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.Seal">
            <summary>
            Seals this value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.Seal(ILGPU.IR.Values.ValueReference)">
            <summary>
            Seals this value.
            </summary>
            <param name="value1">The first child node.</param>
        </member>
        <member name="M:ILGPU.IR.Value.Seal(ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Seals this value.
            </summary>
            <param name="value1">The first child node.</param>
            <param name="value2">The second child node.</param>
        </member>
        <member name="M:ILGPU.IR.Value.Seal(ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Seals this value.
            </summary>
            <param name="value1">The first child node.</param>
            <param name="value2">The second child node.</param>
            <param name="value3">The third child node.</param>
        </member>
        <member name="M:ILGPU.IR.Value.Seal(ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Seals this value.
            </summary>
            <param name="valueList">The nested child nodes.</param>
        </member>
        <member name="M:ILGPU.IR.Value.Replace(ILGPU.IR.Value)">
            <summary>
            Replaces this value with the given value.
            </summary>
            <param name="other">The other value.</param>
        </member>
        <member name="M:ILGPU.IR.Value.OnReplacedNode">
            <summary>
            Invoked when an attached node is replaced.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.Resolve">
            <summary>
            Resolves the actual value with respect to replacement information.
            </summary>
            <returns>The actual value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.ResolveAs``1">
            <summary>
            Resolves the actual value with respect to replacement information.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The actual value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.Equals(ILGPU.IR.Value)">
            <summary>
            Returns true if the given value is the same value.
            </summary>
            <param name="other">The other value.</param>
            <returns>True, if the given value is the same value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all child values.
            </summary>
            <returns>An enumerator to enumerate all child values.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.ToArgString">
            <summary>
            Returns the argument string (operation arguments) of this node.
            </summary>
            <returns>The argument string.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.ToString">
            <summary>
            Returns the string representation of this node.
            </summary>
            <returns>The string representation of this node.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current value.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.GetHashCode">
            <summary>
            Returns the hash code of this value.
            </summary>
            <returns>The hash code of this value.</returns>
        </member>
        <member name="T:ILGPU.IR.ValueParent">
            <summary>
            A parent value container that holds and manages values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueParent.#ctor(ILGPU.IR.Location)">
            <summary>
            Constructs a new value parent.
            </summary>
            <param name="location">The current location.</param>
        </member>
        <member name="P:ILGPU.IR.ValueParent.IsBasicBlock">
            <summary>
            Returns true if this parent container is a block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.ValueParent.IsMethod">
            <summary>
            Returns true if this container is method.
            </summary>
        </member>
        <member name="T:ILGPU.IR.ValueKind">
            <summary>
            Represents the kind of a single IR value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.UnaryArithmetic">
            <summary>
            An <see cref="T:ILGPU.IR.Values.UnaryArithmeticValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.BinaryArithmetic">
            <summary>
            A <see cref="T:ILGPU.IR.Values.BinaryArithmeticValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.TernaryArithmetic">
            <summary>
            A <see cref="T:ILGPU.IR.Values.TernaryArithmeticValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Compare">
            <summary>
            A <see cref="T:ILGPU.IR.Values.CompareValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Convert">
            <summary>
            A <see cref="T:ILGPU.IR.Values.ConvertValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.IfPredicate">
            <summary>
            A <see cref="T:ILGPU.IR.Values.IfPredicate"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SwitchPredicate">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SwitchPredicate"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.PointerCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.PointerCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.AddressSpaceCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.AddressSpaceCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.ViewCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.ViewCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.IntAsPointerCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.IntAsPointerCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.FloatAsIntCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.FloatAsIntCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.IntAsFloatCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.IntAsFloatCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Null">
            <summary>
            A <see cref="T:ILGPU.IR.Values.NullValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Primitive">
            <summary>
            A <see cref="T:ILGPU.IR.Values.PrimitiveValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.String">
            <summary>
            A <see cref="T:ILGPU.IR.Values.StringValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.AcceleratorType">
            <summary>
            A <see cref="T:ILGPU.IR.Values.AcceleratorTypeValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GridIndex">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GridIndexValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GroupIndex">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GroupIndexValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GridDimension">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GridDimensionValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GroupDimension">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GroupDimensionValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.WarpSize">
            <summary>
            A <see cref="T:ILGPU.IR.Values.WarpSizeValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.LaneIdx">
            <summary>
            A <see cref="T:ILGPU.IR.Values.LaneIdxValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Alloca">
            <summary>
            An <see cref="T:ILGPU.IR.Values.Alloca"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.MemoryBarrier">
            <summary>
            A <see cref="T:ILGPU.IR.Values.MemoryBarrier"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Load">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Load"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Store">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Store"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Phi">
            <summary>
            A <see cref="T:ILGPU.IR.Values.PhiValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Parameter">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Parameter"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.MethodCall">
            <summary>
            A <see cref="T:ILGPU.IR.Values.MethodCall"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Structure">
            <summary>
            A <see cref="T:ILGPU.IR.Values.StructureValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GetField">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GetField"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SetField">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SetField"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Array">
            <summary>
            A <see cref="T:ILGPU.IR.Values.ArrayValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GetArrayExtent">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GetArrayExtent"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GetArrayElement">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GetArrayElement"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SetArrayElement">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SetArrayElement"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.NewView">
            <summary>
            A <see cref="T:ILGPU.IR.Values.NewView"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GetViewLength">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GetViewLength"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SubView">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SubViewValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.LoadElementAddress">
            <summary>
            A <see cref="T:ILGPU.IR.Values.LoadElementAddress"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.LoadFieldAddress">
            <summary>
            A <see cref="T:ILGPU.IR.Values.LoadFieldAddress"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Return">
            <summary>
            A <see cref="T:ILGPU.IR.Values.ReturnTerminator"/> terminator value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.UnconditionalBranch">
            <summary>
            An <see cref="T:ILGPU.IR.Values.UnconditionalBranch"/> terminator value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.IfBranch">
            <summary>
            A <see cref="T:ILGPU.IR.Values.IfBranch"/> terminator value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SwitchBranch">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SwitchBranch"/> terminator value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GenericAtomic">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GenericAtomic"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.AtomicCAS">
            <summary>
            A <see cref="T:ILGPU.IR.Values.AtomicCAS"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.PredicateBarrier">
            <summary>
            A <see cref="T:ILGPU.IR.Values.PredicateBarrier"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Barrier">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Barrier"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Broadcast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Broadcast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.WarpShuffle">
            <summary>
            A <see cref="T:ILGPU.IR.Values.WarpShuffle"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SubWarpShuffle">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SubWarpShuffle"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Debug">
            <summary>
            A <see cref="T:ILGPU.IR.Values.DebugOperation"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Undefined">
            <summary>
            An <see cref="T:ILGPU.IR.Values.UndefinedValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.BuilderTerminator">
            <summary>
            A <see cref="T:ILGPU.IR.Values.BuilderTerminator"/> terminator value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Handle">
            <summary>
            A <see cref="T:ILGPU.IR.Values.HandleValue"/> managed handle value.
            </summary>
        </member>
        <member name="T:ILGPU.IR.ValueKindAttribute">
            <summary>
            Marks value classes with specific value kinds.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueKindAttribute.#ctor(ILGPU.IR.ValueKind)">
            <summary>
            Constructs a new value kind attribute.
            </summary>
            <param name="kind">The value kind.</param>
        </member>
        <member name="P:ILGPU.IR.ValueKindAttribute.Kind">
            <summary>
            Returns the value kind.
            </summary>
        </member>
        <member name="T:ILGPU.IR.ValueKinds">
            <summary>
            Utility methods for <see cref="T:ILGPU.IR.ValueKind"/> enumeration values.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKinds.NumValueKinds">
            <summary>
            The number of different value kinds.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueKinds.GetValueKind``1">
            <summary>
            Gets the value kind of the value type specified.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <returns>The determined value kind.</returns>
        </member>
        <member name="M:ILGPU.IR.ValueKinds.GetValueKind(System.Type)">
            <summary>
            Gets the value kind of the type specified.
            </summary>
            <returns>The determined value kind.</returns>
        </member>
        <member name="T:ILGPU.IR.VerificationResult">
            <summary>
            An IR verification result.
            </summary>
        </member>
        <member name="F:ILGPU.IR.VerificationResult.errors">
            <summary>
            The internal mapping of error messages.
            </summary>
        </member>
        <member name="P:ILGPU.IR.VerificationResult.Count">
            <summary>
            Returns the number of collected errors.
            </summary>
        </member>
        <member name="P:ILGPU.IR.VerificationResult.HasErrors">
            <summary>
            Returns true if there are any errors.
            </summary>
        </member>
        <member name="M:ILGPU.IR.VerificationResult.Dump(System.IO.TextWriter)">
            <summary>
            Dumps all errors to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.VerificationResult.ReportError(ILGPU.IR.Node,System.Type,System.String)">
            <summary>
            Reports a new error.
            </summary>
            <param name="node">The associated node the message belongs to.</param>
            <param name="verifier">The verifier class.</param>
            <param name="stage">The verification stage.</param>
        </member>
        <member name="M:ILGPU.IR.VerificationResult.ToString">
            <summary>
            Returns a string representation of all errors.
            </summary>
            <returns>The string representation of all errors.</returns>
        </member>
        <member name="T:ILGPU.IR.Verifier">
            <summary>
            A verifier to verify the structure of an IR method.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Verifier.VerifierBase">
            <summary>
            An abstract verifier.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.VerifierBase.#ctor(ILGPU.IR.Method,ILGPU.IR.VerificationResult)">
            <summary>
            Constructs a new verifier base.
            </summary>
            <param name="method">The method to verify.</param>
            <param name="result">The verification result.</param>
        </member>
        <member name="P:ILGPU.IR.Verifier.VerifierBase.Method">
            <summary>
            Returns the method to verify.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Verifier.VerifierBase.Result">
            <summary>
            The verification result.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.VerifierBase.Error(ILGPU.IR.Node,System.String)">
            <summary>
            Reports a new error.
            </summary>
            <param name="node">The target node.</param>
            <param name="stage">The verification stage.</param>
        </member>
        <member name="M:ILGPU.IR.Verifier.VerifierBase.Verify">
            <summary>
            Performs the verification step.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Verifier.ControlFlowVerifier">
            <summary>
            Verifiers the general structure of the control flow.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.#ctor(ILGPU.IR.Method,ILGPU.IR.VerificationResult)">
            <summary>
            Constructs a new control-flow verifier.
            </summary>
            <param name="method">The method to verify.</param>
            <param name="result">The verification result.</param>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.CreateLinkSets(ILGPU.IR.BasicBlock)">
            <summary>
            Creates new predecessor and successor ink sets.
            </summary>
            <param name="block">The current block.</param>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.AddSuccessor(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Adds a <paramref name="successor"/> to the given
            <paramref name="block"/>.
            </summary>
            <param name="block">The current block.</param>
            <param name="successor">The successor to add.</param>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.ComputePostOrder(ILGPU.IR.BasicBlock)">
            <summary>
            Computes the post order of the given block recursively.
            </summary>
            <param name="block">The current block.</param>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.VerifyBlocks">
            <summary>
            Verifies the existence and the order of all blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.VerifyLinks">
            <summary>
            Verifies all links.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.VerifyExitBlock">
            <summary>
            Verifies all exit blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.Verify">
            <summary>
            Performs the control-flow verification step.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Verifier.ValueVerifier">
            <summary>
            Verifiers the general SSA value properties of the program.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ValueVerifier.#ctor(ILGPU.IR.Method,ILGPU.IR.VerificationResult)">
            <summary>
            Constructs a new value verifier.
            </summary>
            <param name="method">The method to verify.</param>
            <param name="result">The verification result.</param>
        </member>
        <member name="M:ILGPU.IR.Verifier.ValueVerifier.VerifyValues">
            <summary>
            Verifies all value operands for defined an unbound values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ValueVerifier.VerifyValueBlockAssociations">
            <summary>
            Verifies all value-block associations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ValueVerifier.FindValueRecursive(System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock},ILGPU.IR.BasicBlock,ILGPU.IR.Value)">
            <summary>
            Tries to find a value recursively in all predecessors.
            </summary>
            <param name="visited">The set of visited nodes.</param>
            <param name="currentBlock">The current block.</param>
            <param name="toFind">The value to find.</param>
            <returns>True, if the value could be found.</returns>
        </member>
        <member name="M:ILGPU.IR.Verifier.ValueVerifier.VerifyPhis">
            <summary>
            Verifies all phi node references.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ValueVerifier.Verify">
            <summary>
            Performs the SSA-value verification step.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Verifier.NoVerifier">
            <summary>
            A verifier that does not perform any verification steps.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.NoVerifier.Verify(ILGPU.IR.Method)">
            <summary>
            Performs no verification step.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.NoVerifier.VerifyToResult(ILGPU.IR.Method)">
            <summary>
            Returns an empty verification result.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.NoVerifier.Verify``1(ILGPU.IR.MethodCollection{``0})">
            <summary>
            Performs a verification step for all methods that should be verified.
            </summary>
            <typeparam name="TPredicate">The collection predicate.</typeparam>
            <param name="methods">The methods to verify.</param>
        </member>
        <member name="F:ILGPU.IR.Verifier.Instance">
            <summary>
            Returns a verifier instance that verifies all IR methods.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Verifier.Empty">
            <summary>
            Returns an empty verifier that does not perform any verification steps.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ApplyVerification(ILGPU.IR.Method)">
            <summary>
            Verifies the given IR method.
            </summary>
            <param name="method">The method to verify.</param>
            <returns>The created verification result object.</returns>
        </member>
        <member name="M:ILGPU.IR.Verifier.#ctor">
            <summary>
            Constructs a verifier instance.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.Verify(ILGPU.IR.Method)">
            <summary>
            Verifies the given IR method and throws an
            <see cref="T:System.InvalidOperationException"/> in case of an error.
            </summary>
            <param name="method">The method to verify.</param>
        </member>
        <member name="M:ILGPU.IR.Verifier.VerifyToResult(ILGPU.IR.Method)">
            <summary>
            Verifies the given IR method.
            </summary>
            <param name="method">The method to verify.</param>
            <returns>The created verification result object.</returns>
        </member>
        <member name="M:ILGPU.IR.Verifier.Verify``1(ILGPU.IR.MethodCollection{``0})">
            <summary>
            Performs a verification step for all methods that should be verified.
            </summary>
            <typeparam name="TPredicate">The collection predicate.</typeparam>
            <param name="methods">The methods to verify.</param>
        </member>
        <member name="T:ILGPU.KernelConfig">
            <summary>
            A single kernel configuration for an explicitly grouped kernel.
            </summary>
        </member>
        <member name="F:ILGPU.KernelConfig.ImplicitlyGroupedKernelConstructor">
            <summary>
            Represents a kernel constructor for implicitly grouped kernels.
            </summary>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Constructs a new kernel configuration that does not use any dynamically
            specified shared memory.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index1,ILGPU.Index1,ILGPU.SharedMemoryConfig)">
            <summary>
            Constructs a new kernel configuration.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
            <param name="sharedMemoryConfig">
            The dynamic shared memory configuration.
            </param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Constructs a new kernel configuration that does not use any dynamically
            specified shared memory.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index2,ILGPU.Index2,ILGPU.SharedMemoryConfig)">
            <summary>
            Constructs a new kernel configuration.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
            <param name="sharedMemoryConfig">
            The dynamic shared memory configuration.
            </param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Constructs a new kernel configuration that does not use any dynamically
            specified shared memory.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new kernel configuration that does not use any dynamically
            specified shared memory.
            </summary>
            <param name="gridDimX">The grid dimension in X dimension.</param>
            <param name="gridDimY">The grid dimension in Y dimension.</param>
            <param name="gridDimZ">The grid dimension in Z dimension.</param>
            <param name="groupDimX">The group dimension in X dimension.</param>
            <param name="groupDimY">The group dimension in Y dimension.</param>
            <param name="groupDimZ">The group dimension in Z dimension.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index3,ILGPU.Index3,ILGPU.SharedMemoryConfig)">
            <summary>
            Constructs a new kernel configuration.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
            <param name="sharedMemoryConfig">
            The dynamic shared memory configuration.
            </param>
        </member>
        <member name="P:ILGPU.KernelConfig.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.GridDim">
            <summary>
            Returns the global grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.GroupDim">
            <summary>
            Returns the global group dimension of each group.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.SharedMemoryConfig">
            <summary>
            Returns the associated dynamic memory configuration.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.UsesDynamicSharedMemory">
            <summary>
            Returns true if the current configuration uses dynamic shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.IsValid">
            <summary>
            Returns true if this configuration is a valid launch configuration.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.Size">
            <summary>
            Returns the total launch size.
            </summary>
        </member>
        <member name="M:ILGPU.KernelConfig.ToDimensions">
            <summary>
            Converts the current instance into a dimension tuple.
            </summary>
            <returns>A dimension tuple representing this kernel configuration.</returns>
        </member>
        <member name="M:ILGPU.KernelConfig.ToValueTuple">
            <summary>
            Converts the current instance into a value tuple.
            </summary>
            <returns>A value tuple representing this kernel configuration.</returns>
        </member>
        <member name="M:ILGPU.KernelConfig.Deconstruct(ILGPU.Index3@,ILGPU.Index3@)">
            <summary>
            Deconstructs the current instance into a dimension tuple.
            </summary>
            <param name="gridDim">The grid dimension.</param>
            <param name="groupDim">The group dimension.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.Deconstruct(ILGPU.Index3@,ILGPU.Index3@,ILGPU.SharedMemoryConfig@)">
            <summary>
            Deconstructs the current instance into a value tuple.
            </summary>
            <param name="gridDim">The grid dimension.</param>
            <param name="groupDim">The group dimension.</param>
            <param name="sharedMemoryConfig">The shared memory configuration.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index1,ILGPU.Index1})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index3,ILGPU.Index1})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index3,ILGPU.Index2})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index2,ILGPU.Index2})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index3,ILGPU.Index3})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index1,ILGPU.Index1,ILGPU.SharedMemoryConfig})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index3,ILGPU.Index3,ILGPU.SharedMemoryConfig})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(ILGPU.KernelConfig)~System.ValueTuple{ILGPU.Index3,ILGPU.Index3}">
            <summary>
            Converts the given kernel configuration into an equivalent dimension tuple.
            </summary>
            <param name="config">The kernel configuration to convert.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(ILGPU.KernelConfig)~System.ValueTuple{ILGPU.Index3,ILGPU.Index3,ILGPU.SharedMemoryConfig}">
            <summary>
            Converts the given kernel configuration into an equivalent value tuple.
            </summary>
            <param name="config">The kernel configuration to convert.</param>
        </member>
        <member name="T:ILGPU.SharedMemoryConfig">
            <summary>
            Represents a dynamic shared memory configuration for kernels.
            </summary>
        </member>
        <member name="F:ILGPU.SharedMemoryConfig.Empty">
            <summary>
            An empty shared memory configuration.
            </summary>
            <remarks>
            This configuration does not use dynamic shared memory.
            </remarks>
        </member>
        <member name="M:ILGPU.SharedMemoryConfig.RequestDynamic``1(System.Int32)">
            <summary>
            Requests a <see cref="T:ILGPU.SharedMemoryConfig"/>
            </summary>
            <typeparam name="T">The element type to use.</typeparam>
            <param name="numElements">The number of elements to request.</param>
            <returns>A shared memory configuration that uses shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemoryConfig.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new shared memory configuration.
            </summary>
            <param name="numElements">The number of elements to allocate.</param>
            <param name="elementSize">The element size to allocate.</param>
        </member>
        <member name="P:ILGPU.SharedMemoryConfig.NumElements">
            <summary>
            Returns the number of elements.
            </summary>
        </member>
        <member name="P:ILGPU.SharedMemoryConfig.ElementSize">
            <summary>
            Returns the element size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.SharedMemoryConfig.ArraySize">
            <summary>
            Returns the array size in bytes of the dynamically allocated shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.SharedMemoryConfig.UsesDynamicSharedMemory">
            <summary>
            Returns true if this configuration uses dynamic shared memory.
            </summary>
        </member>
        <member name="T:ILGPU.RuntimeSharedMemoryConfig">
            <summary>
            A shared memory configuration that stores both static and dynamic information
            about shared memory.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSharedMemoryConfig.#ctor(ILGPU.Backends.EntryPoints.SharedMemorySpecification,ILGPU.SharedMemoryConfig)">
            <summary>
            Constructs a new shared memory configuration.
            </summary>
            <param name="specification">The general specification.</param>
            <param name="dynamicConfig">The dynamic configuration.</param>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.Specification">
            <summary>
            Returns the static specification.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.DynamicConfig">
            <summary>
            Returns the dynamic configuration.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.NumDynamicElements">
            <summary>
            Returns the number of dynamic shared memory elements.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.DynamicArraySize">
            <summary>
            Returns the array size in bytes of the dynamically allocated shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.HasSharedMemory">
            <summary>
            Returns true if the current specification.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.StaticSize">
            <summary>
            Returns the amount of shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.HasStaticMemory">
            <summary>
            Returns true if the current config requires static shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.HasDynamicMemory">
            <summary>
            Returns true if the current config requires dynamic shared memory.
            </summary>
        </member>
        <member name="T:ILGPU.RuntimeKernelConfig">
            <summary>
            Represents a runtime kernel configuration that is used internally to specify
            launch dimensions and shared memory settings.
            </summary>
        </member>
        <member name="F:ILGPU.RuntimeKernelConfig.Constructor">
            <summary>
            Represents the associated constructor.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeKernelConfig.#ctor(ILGPU.KernelConfig,ILGPU.Backends.EntryPoints.SharedMemorySpecification)">
            <summary>
            Constructs a new runtime kernel configuration.
            </summary>
            <param name="kernelConfig">The kernel configuration to use.</param>
            <param name="specification">The shared memory specification to use.</param>
        </member>
        <member name="P:ILGPU.RuntimeKernelConfig.GridDim">
            <summary>
            Returns the global grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeKernelConfig.GroupDim">
            <summary>
            Returns the global group dimension of each group.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeKernelConfig.SharedMemoryConfig">
            <summary>
            Returns the current shared memory configuration.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeKernelConfig.IsValid">
            <summary>
            Returns true if this configuration is a valid launch configuration.
            </summary>
        </member>
        <member name="T:ILGPU.MemoryFence">
            <summary>
            Contains memory-fence functions.
            </summary>
        </member>
        <member name="M:ILGPU.MemoryFence.GroupLevel">
            <summary>
            A memory fence at the group level.
            </summary>
        </member>
        <member name="M:ILGPU.MemoryFence.DeviceLevel">
            <summary>
            A memory fence at the device level.
            </summary>
        </member>
        <member name="M:ILGPU.MemoryFence.SystemLevel">
            <summary>
            A memory fence at the system level.
            </summary>
        </member>
        <member name="T:ILGPU.Resources.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.AssemblyVersionNotCompatible">
            <summary>
              Looks up a localized string similar to The assembly version &apos;{0}&apos; is not compatible with the current version &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CannotDeserializeDuplicateNodeId">
            <summary>
              Looks up a localized string similar to Duplicate node id &apos;{0}&apos; detected.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CannotFindFieldOfType">
            <summary>
              Looks up a localized string similar to Cannot find the field &apos;{0}&apos; of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.ContextFlagsAreNotCompatible">
            <summary>
              Looks up a localized string similar to The context flags &apos;{0}&apos; of the deserialized context are not compatible with the current flags &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CouldNotDeserializeMethod">
            <summary>
              Looks up a localized string similar to Could not load method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CouldNotDeserializeType">
            <summary>
              Looks up a localized string similar to Could not load type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CouldNotFindCorrespondingIRMethod">
            <summary>
              Looks up a localized string similar to Could not find IR method that corresponds to the method handle &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CouldNotLoadType">
            <summary>
              Looks up a localized string similar to {0}. Ensure type is publicly visible, or internally visible and define &apos;[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(&quot;{1}&quot;)]&apos;..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CustomExceptionSemantics">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; has custom exception semantics..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InternalCompilerError">
            <summary>
              Looks up a localized string similar to An internal compiler error has been detected.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InternalCompilerErrorNull">
            <summary>
              Looks up a localized string similar to Invalid null value.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.IntrinsicAcceleratorsBroken">
            <summary>
              Looks up a localized string similar to Intrinsic accelerators broken (contact developers).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidDynamicSharedMemoryConfiguration">
            <summary>
              Looks up a localized string similar to Dynamic shared memory elements specified but the kernel does not support dynamic shared memory bindings.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointIndexParameter">
            <summary>
              Looks up a localized string similar to An entry point must receive at least one index parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointIndexParameterOfWrongType">
            <summary>
              Looks up a localized string similar to An entry point must receive a compatible index type as first parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointInstanceKernelMethod">
            <summary>
              Looks up a localized string similar to Only static methods and non-capturing lambdas are supported at the moment.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointParameter">
            <summary>
              Looks up a localized string similar to Not supported by-ref kernel parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointWithoutDotNetMethod">
            <summary>
              Looks up a localized string similar to Not supported entry point without a valid .Net runtime entry.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidILCode">
            <summary>
              Looks up a localized string similar to Invalid IL Code.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidKernelOperation">
            <summary>
              Looks up a localized string similar to This operation can only be called from an ILGPU kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.LocationFileMessage">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; in file &apos;{1}&apos; lines {2} - {3}.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.LocationMethodMessage">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; in method {1} declared in type {2}.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.LocationTypeMessage">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; related to type {1} (managed type &apos;{2}&apos;).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NativeMethodNotSupported">
            <summary>
              Looks up a localized string similar to Native method &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NativePlatformInvocationRequired">
            <summary>
              Looks up a localized string similar to This operation is only permitted in native-OS-platform mode. The current runtime is &apos;{0}&apos; but the native OS platform is &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedActivatorOperation">
            <summary>
              Looks up a localized string similar to The operation &apos;{0}&apos; on the .Net activator is not supported..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedArithmeticArgumentType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not supported in the scope of this arithmetic operation.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedArithmeticOperandTypes">
            <summary>
              Looks up a localized string similar to Not supported arithmetic operands &apos;{0}&apos; &amp; &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedArrayCreation">
            <summary>
              Looks up a localized string similar to Cannot create a dynamically sized array on an accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedArrayDimension">
            <summary>
              Looks up a localized string similar to The array dimension &apos;{0}&apos; is multidimensional. Currently only liner arrays are supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedByRefKernelParameters">
            <summary>
              Looks up a localized string similar to Not supported by-ref kernel parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedClassType">
            <summary>
              Looks up a localized string similar to Class type &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedCompareArgumentType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not supported in the scope of this compare operation.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedCompareOrArithmeticValue">
            <summary>
              Looks up a localized string similar to Not supported compare or arithmetic value of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedConversion">
            <summary>
              Looks up a localized string similar to Cannot convert from &apos;{0}&apos; to type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedDynamicAllocation">
            <summary>
              Looks up a localized string similar to The allocation size of type &apos;{0}&apos; must be statically known and not a dynamic value &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedDynamicSharedMemoryAllocations">
            <summary>
              Looks up a localized string similar to Dynamic shared memory allocations are not supported by this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedFloatIntCast">
            <summary>
              Looks up a localized string similar to Cannot cast type &apos;{0}&apos; to float/int.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedILInstruction">
            <summary>
              Looks up a localized string similar to Not supported IL instruction of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedILInstructionPossibleLambda">
            <summary>
              Looks up a localized string similar to Not supported IL instruction in method &apos;{0}&apos;. Are you using a lambda closure?.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIndirectMethodCall">
            <summary>
              Looks up a localized string similar to Not supported indirect call to a method with the signature &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedInstruction">
            <summary>
              Looks up a localized string similar to Not supported instruction &apos;{0}&apos; in method &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedInterfaceType">
            <summary>
              Looks up a localized string similar to Interface type &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedInteropIntrinsic">
            <summary>
              Looks up a localized string similar to The interop intrinsic &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntOperand">
            <summary>
              Looks up a localized string similar to Not supported int operand of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntrinsic">
            <summary>
              Looks up a localized string similar to Not supported intrinsic type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntrinsicImplementation0">
            <summary>
              Looks up a localized string similar to A function does not have an intrinsic implementation for this backend. &apos;EnableAlgorithms&apos; from the Algorithms library not invoked?.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntrinsicImplementation1">
            <summary>
              Looks up a localized string similar to The function &apos;{0}&apos; does not have an intrinsic implementation for this backend. &apos;EnableAlgorithms&apos; from the Algorithms library not invoked?.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIsInstance">
            <summary>
              Looks up a localized string similar to IsInstance is currently not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedKernelParameterType">
            <summary>
              Looks up a localized string similar to Not supported kernel-parameter type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedLoadOfStaticField">
            <summary>
              Looks up a localized string similar to Cannot load from the static field &apos;{0}&apos; since it is not read only.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedMathIntrinsic">
            <summary>
              Looks up a localized string similar to The math intrinsic with {0} arguments is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedMethodJump">
            <summary>
              Looks up a localized string similar to Not supported jump to method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedPlatform">
            <summary>
              Looks up a localized string similar to Not supported platform &apos;{0}&apos; ({1} required).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedRecursiveProgram">
            <summary>
              Looks up a localized string similar to Not supported recursive program.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedRuntimeMethod">
            <summary>
              Looks up a localized string similar to Not supported runtime method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedSharedMemoryIntrinsic">
            <summary>
              Looks up a localized string similar to The shared memory intrinsic &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedSizeOf">
            <summary>
              Looks up a localized string similar to Could not resolve the native size of the type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedStoreToStaticField">
            <summary>
              Looks up a localized string similar to Cannot store a value to the static field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedStructureLayout">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; has an unsupported structure layout.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedType">
            <summary>
              Looks up a localized string similar to Not supported type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedViewIntrinsic">
            <summary>
              Looks up a localized string similar to The view intrinsic &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedVirtualMethodCall">
            <summary>
              Looks up a localized string similar to Not supported virtual call to method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedVirtualMethodCallToObject">
            <summary>
              Looks up a localized string similar to Not supported virtual call to method &apos;{0}&apos; defined in type &apos;{1}&apos; that was called on &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedVirtualMethodCallToUnconstrainedInstance">
            <summary>
              Looks up a localized string similar to Calling the virtual method &apos;{0}&apos; of unconstrained instance is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedWarpIntrinsic">
            <summary>
              Looks up a localized string similar to The warp intrinsic &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NoUses">
            <summary>
              Looks up a localized string similar to There are no uses to resolve.
            </summary>
        </member>
        <member name="T:ILGPU.Resources.RuntimeErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.CannotEnablePeerAccessToOtherAccelerator">
            <summary>
              Looks up a localized string similar to Cannot enable peer access to an accelerator of a different kind.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.CannotResolveErrorString">
            <summary>
              Looks up a localized string similar to Error-description string could not be resolved.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.CLNotSupported">
            <summary>
              Looks up a localized string similar to OpenCL is not supported on this platform.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.CudaNotSupported">
            <summary>
              Looks up a localized string similar to Cuda is not supported on this platform.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidCodeGenerationOperation0">
            <summary>
              Looks up a localized string similar to Invalid code generation operation.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidCodeGenerationOperation1">
            <summary>
              Looks up a localized string similar to Invalid code generation operation:\n{0}.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidCustomGroupSize">
            <summary>
              Looks up a localized string similar to Invalid custom group size &gt; 0 in a grouped-index scenario.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidGridDimension">
            <summary>
              Looks up a localized string similar to Invalid grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidGroupDimension">
            <summary>
              Looks up a localized string similar to Invalid group dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidKernelSpecializationGroupSize">
            <summary>
              Looks up a localized string similar to The given kernel specialization is not compatible with the defined group size..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidNumberOfUniformArgs">
            <summary>
              Looks up a localized string similar to The number of provided arguments does not match the required length.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidSharedMemorySize">
            <summary>
              Looks up a localized string similar to Shared-memory size cannot be &lt; 0.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedDriverVersion">
            <summary>
              Looks up a localized string similar to Not supported driver version &apos;{0}&apos; (&gt;= {1} required).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedExplicitlyGroupedKernel">
            <summary>
              Looks up a localized string similar to Not supported explicitly-grouped kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedIndexType">
            <summary>
              Looks up a localized string similar to Not supported index type.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedKernel">
            <summary>
              Looks up a localized string similar to Not supported kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedKernelSpecialization">
            <summary>
              Looks up a localized string similar to The given kernel specialization is not compatible with the current accelerator..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedNonBlittableType">
            <summary>
              Looks up a localized string similar to Type type &apos;{0}&apos; is not blittable.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedOpenCLCVersion">
            <summary>
              Looks up a localized string similar to Not supported OpenCL C version (&gt;= {0} required).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedPTXArchitecture">
            <summary>
              Looks up a localized string similar to Not supported PTX architecture.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedPTXInstructionSet">
            <summary>
              Looks up a localized string similar to Not supported PTX instruction set.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedTargetAccelerator">
            <summary>
              Looks up a localized string similar to Not supported target accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedTotalGroupSize">
            <summary>
              Looks up a localized string similar to Not supported total group size. The total group size must be &lt;= the number of available threads ({0}).
            </summary>
        </member>
        <member name="T:ILGPU.RuntimeSystem">
            <summary>
            Represents the dynamic ILGPU assembly runtime system.
            </summary>
        </member>
        <member name="F:ILGPU.RuntimeSystem.AssemblyName">
            <summary>
            The name of the dynamic runtime assembly.
            </summary>
        </member>
        <member name="F:ILGPU.RuntimeSystem.CustomTypeName">
            <summary>
            A custom runtime type name.
            </summary>
        </member>
        <member name="F:ILGPU.RuntimeSystem.LauncherMethodName">
            <summary>
            A default launcher name.
            </summary>
        </member>
        <member name="T:ILGPU.RuntimeSystem.MethodEmitter">
            <summary>
            Represents a method builder in the .Net world.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.MethodEmitter.#ctor(System.Reflection.Emit.DynamicMethod)">
            <summary>
            Constructs a new method emitter.
            </summary>
            <param name="method">The desired internal method.</param>
        </member>
        <member name="P:ILGPU.RuntimeSystem.MethodEmitter.Method">
            <summary>
            Returns the associated method builder.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSystem.MethodEmitter.ILGenerator">
            <summary>
            Returns the internal IL generator.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.MethodEmitter.Finish">
            <summary>
            Finishes the building process.
            </summary>
            <returns>The emitted method.</returns>
        </member>
        <member name="T:ILGPU.RuntimeSystem.ImportMethod">
            <summary>
            Represents a dynamically imported runtime method.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.ImportMethod.#ctor(System.Reflection.MethodInfo,ILGPU.DynamicImportAttribute)">
            <summary>
            Constructs a new import method.
            </summary>
            <param name="method">The source method to implement.</param>
            <param name="attribute">The defined dynamic import attribute.</param>
        </member>
        <member name="P:ILGPU.RuntimeSystem.ImportMethod.Method">
            <summary>
            Returns the abstract source method to implement.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSystem.ImportMethod.Attribute">
            <summary>
            Returns the associated dynamic import attribute.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSystem.ImportMethod.ReturnType">
            <summary>
            Returns the return type of the source method.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.ImportMethod.GetParameters">
            <summary>
            Returns all parameters of the source method.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.ImportMethod.GetParameterTypes">
            <summary>
            Returns all parameter types of the source method.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.ImportMethod.DefineImplementationMethod(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Defines a new runtime implementation using the given type builder.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <returns>The created method builder.</returns>
        </member>
        <member name="F:ILGPU.RuntimeSystem.ImplAttributesToClear">
            <summary>
            All method attributes to clear when implementing a wrapper method.
            </summary>
        </member>
        <member name="F:ILGPU.RuntimeSystem.NotSupportedExceptionConstructor">
            <summary>
            The constructor of the class <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="F:ILGPU.RuntimeSystem.SuppressCodeSecurityConstructor">
            <summary>
            The constructor of the class
            <see cref="T:System.Security.SuppressUnmanagedCodeSecurityAttribute"/>.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.ImplementNotSupported(System.Reflection.Emit.TypeBuilder,ILGPU.RuntimeSystem.ImportMethod[],System.String)">
            <summary>
            Implements all given abstract methods by throwing
            <see cref="T:System.NotSupportedException"/>s.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="methods">The methods to implement.</param>
            <param name="errorMessage">
            The error message to use for all exceptions.
            </param>
        </member>
        <member name="M:ILGPU.RuntimeSystem.ImplementImports(System.Reflection.Emit.TypeBuilder,System.String,ILGPU.RuntimeSystem.ImportMethod[])">
            <summary>
            Implements all given abstract methods by using their p-invoke targets.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="libraryName">The native library name.</param>
            <param name="methods">The methods to implement.</param>
        </member>
        <member name="M:ILGPU.RuntimeSystem.ImplementIsSupported``1(System.Reflection.Emit.TypeBuilder,System.Boolean)">
            <summary>
            Implements the <see cref="P:ILGPU.RuntimeAPI.IsSupported"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.DefineWrapperParameters(System.Reflection.Emit.MethodBuilder,System.Reflection.ParameterInfo[])">
            <summary>
            Defines parameters of managed wrapper methods.
            </summary>
            <param name="methodBuilder">The parent method builder.</param>
            <param name="parameters">The source parameters.</param>
        </member>
        <member name="M:ILGPU.RuntimeSystem.DefineMarshalParameters(System.Reflection.Emit.MethodBuilder,System.Reflection.ParameterInfo[])">
            <summary>
            Defines parameters of p-invoke entry-point methods.
            </summary>
            <param name="methodBuilder">The parent method builder.</param>
            <param name="parameters">The source parameters.</param>
        </member>
        <member name="P:ILGPU.RuntimeSystem.Instance">
            <summary>
            Returns the static runtime-system instance.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.#ctor">
            <summary>
            Constructs a new runtime system.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.ReloadAssemblyBuilder">
            <summary>
            Reloads the assembly builder.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.DefineRuntimeType(System.Reflection.TypeAttributes,System.Type)">
            <summary>
            Defines a new runtime type.
            </summary>
            <param name="attributes">The custom type attributes.</param>
            <param name="baseClass">The base class.</param>
            <returns>A new runtime type builder.</returns>
        </member>
        <member name="M:ILGPU.RuntimeSystem.DefineRuntimeClass(System.Type)">
            <summary>
            Defines a new runtime class.
            </summary>
            <returns>A new runtime type builder.</returns>
        </member>
        <member name="M:ILGPU.RuntimeSystem.DefineRuntimeStruct">
            <summary>
            Defines a new runtime structure.
            </summary>
            <returns>A new runtime type builder.</returns>
        </member>
        <member name="M:ILGPU.RuntimeSystem.DefineRuntimeStruct(System.Boolean)">
            <summary>
            Defines a new runtime structure.
            </summary>
            <param name="explicitLayout">
            True, if the individual fields have an explicit structure layout.
            </param>
            <returns>A new runtime type builder.</returns>
        </member>
        <member name="M:ILGPU.RuntimeSystem.DefineRuntimeMethod(System.Type,System.Type[])">
            <summary>
            Defines a new runtime method.
            </summary>
            <param name="returnType">The return type.</param>
            <param name="parameterTypes">All parameter types.</param>
            <returns>The defined method.</returns>
        </member>
        <member name="M:ILGPU.RuntimeSystem.CreateDllWrapper``1(System.Action{System.Reflection.Emit.TypeBuilder,ILGPU.RuntimeSystem.ImportMethod[]})">
            <summary>
            Creates a new DLL-interop proxy type instance.
            </summary>
            <typeparam name="T">The abstract API type.</typeparam>
            <param name="callback">
            The custom callback instance that constructs the internals of the wrapper
            type implementation.
            </param>
            <returns>The created proxy-type instance.</returns>
        </member>
        <member name="M:ILGPU.RuntimeSystem.CreateDllWrapper``1(System.String)">
            <summary>
            Creates a new DLL-interop proxy type instance.
            </summary>
            <typeparam name="T">The abstract API type.</typeparam>
            <returns>The created proxy-type instance.</returns>
        </member>
        <member name="M:ILGPU.RuntimeSystem.CreateNotSupportedDllWrapper``1(System.String)">
            <summary>
            Creates a new DLL-interop proxy type instance that throw
            <see cref="T:System.NotSupportedException"/> exceptions.
            </summary>
            <typeparam name="T">The abstract API type.</typeparam>
            <param name="errorMessage"></param>
            <returns>The created proxy-type instance.</returns>
        </member>
        <member name="M:ILGPU.RuntimeSystem.CreateDllWrapper``1(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a platform-compatible DLL-interop wrapper type.
            </summary>
            <typeparam name="T">The abstract API type.</typeparam>
            <param name="windows">The native library name on Windows.</param>
            <param name="linux">The native library name on Linux.</param>
            <param name="macos">The native library name on MacOS.</param>
            <param name="errorMessage">
            The custom error message for not-supported platforms.
            </param>
            <returns>The created wrapper type.</returns>
            <remarks>
            If the current platform is not compatible with the native OS platform, the
            associated native library could not be loaded or the interop wrapper could
            not be initialized, this function returns a "not-supported wrapper"
            implementation. This instance implements all entry points by throwing
            instances of type <see cref="T:System.NotSupportedException"/>
            </remarks>
        </member>
        <member name="M:ILGPU.RuntimeSystem.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">Not used.</param>
        </member>
        <member name="T:ILGPU.RuntimeAPI">
            <summary>
            An abstract runtime API that can be used in combination with the dynamic DLL
            loader functionality of the class <see cref="T:ILGPU.RuntimeSystem"/>.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeAPI.LoadRuntimeAPI``5">
            <summary>
            Loads a runtime API that is implemented via compile-time known classes.
            </summary>
            <typeparam name="T">The abstract class type to implement.</typeparam>
            <typeparam name="TWindows">The Windows implementation.</typeparam>
            <typeparam name="TLinux">The Linux implementation.</typeparam>
            <typeparam name="TMacOS">The MacOS implementation.</typeparam>
            <typeparam name="TNotSupported">The not-supported implementation.</typeparam>
            <returns>The loaded runtime API.</returns>
        </member>
        <member name="P:ILGPU.RuntimeAPI.IsSupported">
            <summary>
            Returns true if the runtime API instance is supported on this platform.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeAPI.Init">
            <summary>
            Initializes the runtime API implementation.
            </summary>
            <returns>
            True, if the API instance could be initialized successfully.
            </returns>
        </member>
        <member name="T:ILGPU.DynamicImportAttribute">
            <summary>
            Marks dynamic DLL-import functions that are compatible with the
            <see cref="M:ILGPU.RuntimeSystem.CreateDllWrapper``1(System.String,System.String,System.String,System.String)"/>
            function.
            </summary>
        </member>
        <member name="F:ILGPU.DynamicImportAttribute.DllImportType">
            <summary>
            Represents the managed attribute <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/>.
            </summary>
        </member>
        <member name="F:ILGPU.DynamicImportAttribute.DllImportConstructor">
            <summary>
            The default constructor of the class <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/>.
            </summary>
        </member>
        <member name="F:ILGPU.DynamicImportAttribute.DllImportFields">
            <summary>
            All supported fields of the class <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/>.
            </summary>
        </member>
        <member name="M:ILGPU.DynamicImportAttribute.#ctor">
            <summary>
            Constructs a new dynamic import attribute.
            </summary>
        </member>
        <member name="M:ILGPU.DynamicImportAttribute.#ctor(System.String)">
            <summary>
            Constructs a new dynamic import attribute.
            </summary>
            <param name="entryPoint">The entry point.</param>
        </member>
        <member name="P:ILGPU.DynamicImportAttribute.EntryPoint">
            <summary>
            Returns the associated native entry point.
            </summary>
        </member>
        <member name="P:ILGPU.DynamicImportAttribute.CharSet">
            <summary>
            Defines the associated character set to use.
            </summary>
        </member>
        <member name="P:ILGPU.DynamicImportAttribute.CallingConvention">
            <summary>
            Defines the calling convention.
            </summary>
        </member>
        <member name="P:ILGPU.DynamicImportAttribute.BestFitMapping">
            <summary>
            Enables or disabled best-fit mapping when mapping ANSI characters.
            </summary>
        </member>
        <member name="P:ILGPU.DynamicImportAttribute.ThrowOnUnmappableChar">
            <summary>
            If true, it throws an exception in the case of an unmappable character.
            </summary>
        </member>
        <member name="M:ILGPU.DynamicImportAttribute.GetEntryPoint(System.Reflection.MethodInfo)">
            <summary>
            Returns the name of the native entry point to use.
            </summary>
            <param name="method">The associated method.</param>
            <returns>The resolved native entry-point name.</returns>
        </member>
        <member name="M:ILGPU.DynamicImportAttribute.ToImportAttributeBuilder(System.String,System.Reflection.MethodInfo)">
            <summary>
            Converts this attribute instance into a custom attribute builder assembling
            an instance of type <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/>.
            </summary>
            <param name="libraryName">The library name.</param>
            <param name="method">The associated method.</param>
            <returns>The created attribute builder.</returns>
        </member>
        <member name="T:ILGPU.SharedMemory">
            <summary>
            Contains methods to allocate and managed shared memory.
            </summary>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate``1">
            <summary>
            Allocates a single element in shared memory.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <returns>An allocated element in shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate``1(System.Int32)">
            <summary>
            Allocates a chunk of shared memory with the specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate``2(``1)">
            <summary>
            Allocates a chunk of shared memory with the specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate``1(ILGPU.Index1)">
            <summary>
            Allocates a 1D chunk of shared memory with the specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="length">The number of elements to allocate.</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate2D``1(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Allocates a 2D chunk of shared memory with the specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="width">The width of the 2D buffer.</param>
            <param name="height">The height of the 2D buffer.</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate2D``1(ILGPU.Index2)">
            <summary>
            Allocates a 2D chunk of shared memory with the specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate3D``1(ILGPU.Index1,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Allocates a 3D chunk of shared memory with the specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="width">The width of the 3D buffer.</param>
            <param name="height">The height of the 3D buffer.</param>
            <param name="depth">The depth of the 3D buffer.</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate3D``1(ILGPU.Index3)">
            <summary>
            Allocates a 3D chunk of shared memory with the specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.GetDynamic``1">
            <summary>
            Gets a chunk of dynamically allocated shared memory as typed memory view
            with the element type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <returns>A view to a dynamically allocated region of shared memory.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`2">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.#ctor(`0,`1)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.#ctor(System.ValueTuple{`0,`1})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`2.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`2.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.Equals(ILGPU.Util.DataBlock{`0,`1})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.op_Implicit(ILGPU.Util.DataBlock{`0,`1})~System.ValueTuple{`0,`1}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.op_Implicit(System.ValueTuple{`0,`1})~ILGPU.Util.DataBlock{`0,`1}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.op_Equality(ILGPU.Util.DataBlock{`0,`1},ILGPU.Util.DataBlock{`0,`1})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.op_Inequality(ILGPU.Util.DataBlock{`0,`1},ILGPU.Util.DataBlock{`0,`1})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`3">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.#ctor(`0,`1,`2)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.#ctor(System.ValueTuple{`0,`1,`2})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`3.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`3.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`3.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.Equals(ILGPU.Util.DataBlock{`0,`1,`2})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2})~System.ValueTuple{`0,`1,`2}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.op_Implicit(System.ValueTuple{`0,`1,`2})~ILGPU.Util.DataBlock{`0,`1,`2}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2},ILGPU.Util.DataBlock{`0,`1,`2})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2},ILGPU.Util.DataBlock{`0,`1,`2})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`4">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.#ctor(System.ValueTuple{`0,`1,`2,`3})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`4.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`4.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`4.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`4.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3})~System.ValueTuple{`0,`1,`2,`3}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.op_Implicit(System.ValueTuple{`0,`1,`2,`3})~ILGPU.Util.DataBlock{`0,`1,`2,`3}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3},ILGPU.Util.DataBlock{`0,`1,`2,`3})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3},ILGPU.Util.DataBlock{`0,`1,`2,`3})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`5">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`5.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.#ctor(System.ValueTuple{`0,`1,`2,`3,`4})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`5.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`5.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`5.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`5.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`5.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4})~System.ValueTuple{`0,`1,`2,`3,`4}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`6">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`6.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5})~System.ValueTuple{`0,`1,`2,`3,`4,`5}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`7">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`7.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`8">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`8.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`9">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`9.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`10">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`10.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`11">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
            <typeparam name="T11">The element type of the 11-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`11.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item11">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`12">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
            <typeparam name="T11">The element type of the 11-th element.</typeparam>
            <typeparam name="T12">The element type of the 12-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`12.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item11">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item12">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`13">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
            <typeparam name="T11">The element type of the 11-th element.</typeparam>
            <typeparam name="T12">The element type of the 12-th element.</typeparam>
            <typeparam name="T13">The element type of the 13-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`13.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item11">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item12">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item13">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`14">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
            <typeparam name="T11">The element type of the 11-th element.</typeparam>
            <typeparam name="T12">The element type of the 12-th element.</typeparam>
            <typeparam name="T13">The element type of the 13-th element.</typeparam>
            <typeparam name="T14">The element type of the 14-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`14.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item11">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item12">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item13">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item14">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`15">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
            <typeparam name="T11">The element type of the 11-th element.</typeparam>
            <typeparam name="T12">The element type of the 12-th element.</typeparam>
            <typeparam name="T13">The element type of the 13-th element.</typeparam>
            <typeparam name="T14">The element type of the 14-th element.</typeparam>
            <typeparam name="T15">The element type of the 15-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`15.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13,System.ValueTuple{`14}}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item11">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item12">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item13">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item14">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item15">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13,System.ValueTuple{`14}}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13,System.ValueTuple{`14}}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DisposeBase">
            <summary>
            Utility base class for correct implementations of IDisposable
            </summary>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.Dispose">
            <summary>
            Triggers the 'dispose' functionality of this object.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.Finalize">
            <summary>
            The custom finalizer for dispose-base objects.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.DisposeDriver(System.Boolean)">
            <summary>
            Thread-safe wrapper for the actual dispose functionality.
            </summary>
            <param name="disposing">
            True, if the method is not called by the finalizer.
            </param>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)">
            <summary>
            Frees allocated resources.
            </summary>
            <param name="disposing">
            True, if the method is not called by the finalizer.
            </param>
        </member>
        <member name="T:ILGPU.Util.Extension">
            <summary>
            An abstract runtime-object extension instance.
            </summary>
        </member>
        <member name="T:ILGPU.Util.CachedExtension">
            <summary>
            An abstract runtime-object extension instance.
            </summary>
        </member>
        <member name="M:ILGPU.Util.CachedExtension.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="T:ILGPU.Util.IExtensionObject`1">
            <summary>
            An abstract extension object.
            </summary>
            <typeparam name="TExtension">The underlying extension type.</typeparam>
        </member>
        <member name="M:ILGPU.Util.IExtensionObject`1.RegisterExtension``1(``0)">
            <summary>
            Registers a new backend extensions.
            </summary>
            <typeparam name="T">The extension type.</typeparam>
            <param name="extension">The extension instance to register.</param>
        </member>
        <member name="M:ILGPU.Util.IExtensionObject`1.GetExtension``1">
            <summary>
            Retrieves a backend extension of the given type.
            </summary>
            <typeparam name="T">The extension type.</typeparam>
            <returns>The extension instance.</returns>
        </member>
        <member name="M:ILGPU.Util.IExtensionObject`1.TryGetExtension``1(``0@)">
            <summary>
            Tries to retrieve a backend extension of the given type.
            </summary>
            <typeparam name="T">The extension type.</typeparam>
            <param name="extension">The extension instance.</param>
            <returns>True, if the extension could be retrieved.</returns>
        </member>
        <member name="M:ILGPU.Util.IExtensionObject`1.ForEachExtension(System.Action{`0})">
            <summary>
            Executes the given action for each registered extension.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="T:ILGPU.Util.ExtensionBase`1">
            <summary>
            An extension base object that provides a default implementation of an
            <see cref="T:ILGPU.Util.IExtensionObject`1"/>.
            </summary>
            <typeparam name="TExtension">The underlying extension type.</typeparam>
        </member>
        <member name="F:ILGPU.Util.ExtensionBase`1.extensions">
            <summary>
            The associated backend extensions.
            </summary>
        </member>
        <member name="M:ILGPU.Util.ExtensionBase`1.RegisterExtension``1(``0)">
            <summary>
            Registers a new extensions.
            </summary>
            <typeparam name="T">The extension type.</typeparam>
            <param name="extension">The extension instance to register.</param>
            <remarks>This method is not thread-safe.</remarks>
        </member>
        <member name="M:ILGPU.Util.ExtensionBase`1.GetExtension``1">
            <summary>
            Retrieves a extension of the given type.
            </summary>
            <typeparam name="T">The extension type name.</typeparam>
            <returns>The extension instance.</returns>
        </member>
        <member name="M:ILGPU.Util.ExtensionBase`1.TryGetExtension``1(``0@)">
            <summary>
            Tries to retrieve a backend extension of the given type.
            </summary>
            <typeparam name="T">The extension type.</typeparam>
            <param name="extension">The extension instance.</param>
            <returns>True, if the extension could be retrieved.</returns>
        </member>
        <member name="M:ILGPU.Util.ExtensionBase`1.ForEachExtension(System.Action{`0})">
            <summary>
            Executes the given action for each registered extension.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:ILGPU.Util.ExtensionBase`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Util.CachedExtensionBase`1">
            <summary>
            An extension base object that provides a default implementation of an
            <see cref="T:ILGPU.Util.IExtensionObject`1"/> including caches.
            </summary>
            <typeparam name="TExtension">The underlying extension type.</typeparam>
        </member>
        <member name="M:ILGPU.Util.CachedExtensionBase`1.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>This method is not thread-safe.</remarks>
        </member>
        <member name="T:ILGPU.Util.InlineList`1">
            <summary>
            An inline array list that has to be passed by reference to avoid unnecessary
            heap allocations.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:ILGPU.Util.InlineList`1.Empty">
            <summary>
            An empty inline list.
            </summary>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Create(System.Int32)">
            <summary>
            Creates a new inline list with the given capacity and storage capacity.
            </summary>
            <param name="capacity">The capacity.</param>
            <returns>The new inline list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Create(`0)">
            <summary>
            Creates a new inline list with the given item.
            </summary>
            <param name="item">The first item.</param>
            <returns>The created inline list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Create(`0,`0)">
            <summary>
            Creates a new inline list with the given items.
            </summary>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
            <returns>The created inline list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Create``1(``0)">
            <summary>
            Creates a new inline list from the given list.
            </summary>
            <typeparam name="TList">The list type.</typeparam>
            <param name="list">The source list.</param>
            <returns>The new inline list.</returns>
        </member>
        <member name="P:ILGPU.Util.InlineList`1.Count">
            <summary>
            Returns the number of items.
            </summary>
        </member>
        <member name="P:ILGPU.Util.InlineList`1.Capacity">
            <summary>
            The total capacity.
            </summary>
        </member>
        <member name="P:ILGPU.Util.InlineList`1.Item(System.Int32)">
            <summary>
            Returns a reference to the i-th item.
            </summary>
            <param name="index">The item index.</param>
            <returns>The item reference.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.EnsureCapacity">
            <summary>
            Ensures that at least a single item can be stored.
            </summary>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Reserve(System.Int32)">
            <summary>
            Ensures that this list as at least the given capacity.
            </summary>
            <param name="capacity">The capacity to ensure.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Add(`0)">
            <summary>
            Adds the given item to this list.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.AddRange``1(``0)">
            <summary>
            Adds the given items to this list.
            </summary>
            <typeparam name="TList">The list type.</typeparam>
            <param name="list">The source list.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.AddRange(System.ReadOnlySpan{`0}@)">
            <summary>
            Adds the given items to this list.
            </summary>
            <param name="span">The source span.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Clear">
            <summary>
            Clears all items.
            </summary>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Resize(System.Int32)">
            <summary>
            Resizes the current list to have a sufficient capacity for all items while
            settings the number of elements to <paramref name="count"/>.
            </summary>
            <param name="count">The desired number of elements.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Contains``1(`0,``0)">
            <summary>
            Returns true if the given item is contained in this list.
            </summary>
            <param name="item">The item to look for.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>True, if the given item contained in this list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the internally stored items to the given array.
            </summary>
            <param name="array">The target array to copy to.</param>
            <param name="arrayIndex">The base index.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Insert(`0,System.Int32)">
            <summary>
            Inserts the given item at the specified index.
            </summary>
            <param name="item">The item to insert.</param>
            <param name="index">The target index.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.IndexOf``1(`0,``0)">
            <summary>
            Returns the index of the given item.
            </summary>
            <param name="item">The item to look for.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>The index of the item or -1.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Remove``1(`0,``0)">
            <summary>
            Removes the given item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>True, if the item could be removed from the list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.RemoveAll``1(`0,``0)">
            <summary>
            Removes all items that match from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="comparer">The comparer to use.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item with the specified index.
            </summary>
            <param name="index">The item index.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Reverse">
            <summary>
            Reverses all items in this list.
            </summary>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.MoveTo(ILGPU.Util.InlineList{`0}@)">
            <summary>
            Moves the current items to the given target list.
            </summary>
            <param name="list">The target list to move to.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.CopyTo(ILGPU.Util.InlineList{`0}@)">
            <summary>
            Copies all items to the given target list.
            </summary>
            <param name="list">The target list.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Clone">
            <summary>
            Clones this inline list.
            </summary>
            <returns>A clone of the current inline list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Slice(System.Int32,System.Int32)">
            <summary>
            Slices a sub inline list out of this one.
            </summary>
            <param name="startIndex">The start index to begin slicing.</param>
            <param name="count">The number of elements to slice.</param>
            <returns>The new inline list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.SliceTo(System.Int32,System.Int32,ILGPU.Util.InlineList{`0}@)">
            <summary>
            Slices a sub inline list out of this one into the given one.
            </summary>
            <param name="startIndex">The start index to begin slicing.</param>
            <param name="count">The number of elements to slice.</param>
            <param name="list">The target list.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Equals``1(ILGPU.Util.InlineList{`0},``0)">
            <summary>
            Returns true if the given list is equal to the current list.
            </summary>
            <param name="other">The other list.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>True, if the given list is equal to the current list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.AsSpan">
            <summary>
            Converts this inline list into a span.
            </summary>
            <returns>The span.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.AsReadOnlySpan">
            <summary>
            Converts this inline list into a read-only span.
            </summary>
            <returns>The read-only span.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all items in this list.
            </summary>
            <returns>The enumerator.</returns>
            <remarks>
            CAUTION: iterating over this list can be dangerous, as the underlying inline
            list might change and this instance is a structure value.
            </remarks>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.ToString``1(``0)">
            <summary>
            Returns the string representation of this list.
            </summary>
            <returns>The string representation of this list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.ToString">
            <summary>
            Returns the string representation of this list.
            </summary>
            <returns>The string representation of this list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.op_Explicit(ILGPU.Util.InlineList{`0})~System.Span{`0}">
            <summary>
            Converts the given list into a span.
            </summary>
            <param name="list">The list to convert.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.op_Implicit(ILGPU.Util.InlineList{`0})~System.ReadOnlySpan{`0}">
            <summary>
            Converts the given list into a read-only span.
            </summary>
            <param name="list">The list to convert.</param>
        </member>
        <member name="T:ILGPU.Util.InlineList">
            <summary>
            Inline list utility methods.
            </summary>
        </member>
        <member name="T:ILGPU.Util.InlineList.IFormatter`1">
            <summary>
            An abstract value formatter for inline lists.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Util.InlineList.IFormatter`1.Format(`0)">
            <summary>
            Formats the given item.
            </summary>
            <param name="item">The item to format.</param>
            <returns>The formatted string representation.</returns>
        </member>
        <member name="T:ILGPU.Util.InlineList.DefaultFormatter`1">
            <summary>
            The default formatter that calls the <see cref="M:System.Object.ToString"/> method.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Util.InlineList.DefaultFormatter`1.Format(`0)">
            <summary>
            Formats the given item using <see cref="M:System.Object.ToString"/>.
            </summary>
            <param name="item">The item to format.</param>
            <returns>The default string representation.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList.ExceptAll``2(System.ReadOnlySpan{``0},``0,``1)">
            <summary>
            Returns a new span that does not contain the given element.
            </summary>
            <param name="span">The span that might contain the given item.</param>
            <param name="element">The item to exclude for.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>A span that does not contain the given element.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList.Contains``2(System.ReadOnlySpan{``0},``0,``1)">
            <summary>
            Returns true if the given item is contained in this span.
            </summary>
            <param name="span">The span that might contain the given item.</param>
            <param name="element">The item to look for.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>True, if the given item contained in this list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList.ToInlineList``1(System.ReadOnlySpan{``0})">
            <summary>
            Creates a new inline list from the given span.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="span">The span instance.</param>
            <returns>The created inline list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList.CopyTo``1(System.ReadOnlySpan{``0},ILGPU.Util.InlineList{``0}@)">
            <summary>
            Copies the items from the given span to the inline list.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="span">The span instance.</param>
            <param name="list">A reference to the inline list.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList.ToString``2(System.ReadOnlySpan{``0},``1)">
            <summary>
            Returns the string representation of the given span.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TFormatter">The formatter type.</typeparam>
            <param name="span">The span instance.</param>
            <param name="formatter">The custom formatter.</param>
            <returns>The string representation of this list.</returns>
        </member>
        <member name="T:ILGPU.Util.MethodExtensions">
            <summary>
            Extensions for methods.
            </summary>
        </member>
        <member name="M:ILGPU.Util.MethodExtensions.GetParameterOffset(System.Reflection.MethodBase)">
            <summary>
            Returns a parameter offset of 1 for instance methods and 0 for static
            methods.
            </summary>
            <param name="method">The method to compute the parameter offset for.</param>
            <returns>
            A parameter offset of 1 for instance methods and 0 for static methods.
            </returns>
        </member>
        <member name="M:ILGPU.Util.MethodExtensions.IsNotCapturingLambda(System.Reflection.MethodBase)">
            <summary>
            Returns true if the method can be considered a non-capturing lambda.
            </summary>
            <param name="method">The method to check.</param>
            <returns>True, if the method is a non-capturing lambda.</returns>
        </member>
        <member name="T:ILGPU.Util.Short2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short2.#ctor(System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short2.#ctor(System.Int16,System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short2.#ctor(ILGPU.Util.DataBlock{System.Int16,System.Int16})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.Equals(ILGPU.Util.Short2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Short2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Multiply(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Division(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Subtraction(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Addition(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Implicit(System.Int16)~ILGPU.Util.Short2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Implicit(ILGPU.Util.Short2)~System.ValueTuple{System.Int16,System.Int16}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Implicit(ILGPU.Util.Short2)~ILGPU.Util.DataBlock{System.Int16,System.Int16}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Equality(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Inequality(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Short3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short3.#ctor(System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short3.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short3.#ctor(ILGPU.Util.DataBlock{System.Int16,System.Int16,System.Int16})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.Equals(ILGPU.Util.Short3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Short3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Multiply(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Division(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Subtraction(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Addition(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Implicit(System.Int16)~ILGPU.Util.Short3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Implicit(ILGPU.Util.Short3)~System.ValueTuple{System.Int16,System.Int16,System.Int16}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Implicit(ILGPU.Util.Short3)~ILGPU.Util.DataBlock{System.Int16,System.Int16,System.Int16}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Equality(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Inequality(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Short4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short4.#ctor(System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short4.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short4.#ctor(ILGPU.Util.DataBlock{System.Int16,System.Int16,System.Int16,System.Int16})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.Equals(ILGPU.Util.Short4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Short4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Multiply(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Division(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Subtraction(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Addition(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Implicit(System.Int16)~ILGPU.Util.Short4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Implicit(ILGPU.Util.Short4)~System.ValueTuple{System.Int16,System.Int16,System.Int16,System.Int16}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Implicit(ILGPU.Util.Short4)~ILGPU.Util.DataBlock{System.Int16,System.Int16,System.Int16,System.Int16}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Equality(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Inequality(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Int2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int2.#ctor(System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int2.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int2.#ctor(ILGPU.Util.DataBlock{System.Int32,System.Int32})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.Equals(ILGPU.Util.Int2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Int2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Multiply(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Division(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Subtraction(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Addition(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Implicit(System.Int32)~ILGPU.Util.Int2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Implicit(ILGPU.Util.Int2)~System.ValueTuple{System.Int32,System.Int32}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Implicit(ILGPU.Util.Int2)~ILGPU.Util.DataBlock{System.Int32,System.Int32}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Equality(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Inequality(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Int3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int3.#ctor(System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int3.#ctor(ILGPU.Util.DataBlock{System.Int32,System.Int32,System.Int32})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.Equals(ILGPU.Util.Int3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Int3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Multiply(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Division(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Subtraction(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Addition(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Implicit(System.Int32)~ILGPU.Util.Int3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Implicit(ILGPU.Util.Int3)~System.ValueTuple{System.Int32,System.Int32,System.Int32}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Implicit(ILGPU.Util.Int3)~ILGPU.Util.DataBlock{System.Int32,System.Int32,System.Int32}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Equality(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Inequality(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Int4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int4.#ctor(System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int4.#ctor(ILGPU.Util.DataBlock{System.Int32,System.Int32,System.Int32,System.Int32})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.Equals(ILGPU.Util.Int4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Int4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Multiply(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Division(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Subtraction(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Addition(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Implicit(System.Int32)~ILGPU.Util.Int4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Implicit(ILGPU.Util.Int4)~System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Implicit(ILGPU.Util.Int4)~ILGPU.Util.DataBlock{System.Int32,System.Int32,System.Int32,System.Int32}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Equality(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Inequality(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Long2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long2.#ctor(System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long2.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long2.#ctor(ILGPU.Util.DataBlock{System.Int64,System.Int64})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.Equals(ILGPU.Util.Long2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Long2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Multiply(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Division(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Subtraction(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Addition(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Implicit(System.Int64)~ILGPU.Util.Long2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Implicit(ILGPU.Util.Long2)~System.ValueTuple{System.Int64,System.Int64}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Implicit(ILGPU.Util.Long2)~ILGPU.Util.DataBlock{System.Int64,System.Int64}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Equality(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Inequality(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Long3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long3.#ctor(System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long3.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long3.#ctor(ILGPU.Util.DataBlock{System.Int64,System.Int64,System.Int64})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.Equals(ILGPU.Util.Long3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Long3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Multiply(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Division(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Subtraction(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Addition(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Implicit(System.Int64)~ILGPU.Util.Long3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Implicit(ILGPU.Util.Long3)~System.ValueTuple{System.Int64,System.Int64,System.Int64}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Implicit(ILGPU.Util.Long3)~ILGPU.Util.DataBlock{System.Int64,System.Int64,System.Int64}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Equality(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Inequality(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Long4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long4.#ctor(System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long4.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long4.#ctor(ILGPU.Util.DataBlock{System.Int64,System.Int64,System.Int64,System.Int64})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.Equals(ILGPU.Util.Long4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Long4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Multiply(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Division(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Subtraction(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Addition(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Implicit(System.Int64)~ILGPU.Util.Long4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Implicit(ILGPU.Util.Long4)~System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Implicit(ILGPU.Util.Long4)~ILGPU.Util.DataBlock{System.Int64,System.Int64,System.Int64,System.Int64}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Equality(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Inequality(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Half2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Half2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Half2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half2.#ctor(ILGPU.Half)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half2.#ctor(ILGPU.Half,ILGPU.Half)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half2.#ctor(ILGPU.Util.DataBlock{ILGPU.Half,ILGPU.Half})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.Equals(ILGPU.Util.Half2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Half2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Multiply(ILGPU.Util.Half2,ILGPU.Util.Half2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Division(ILGPU.Util.Half2,ILGPU.Util.Half2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Subtraction(ILGPU.Util.Half2,ILGPU.Util.Half2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Addition(ILGPU.Util.Half2,ILGPU.Util.Half2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Implicit(ILGPU.Half)~ILGPU.Util.Half2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Implicit(ILGPU.Util.Half2)~System.ValueTuple{ILGPU.Half,ILGPU.Half}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Implicit(ILGPU.Util.Half2)~ILGPU.Util.DataBlock{ILGPU.Half,ILGPU.Half}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Equality(ILGPU.Util.Half2,ILGPU.Util.Half2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Inequality(ILGPU.Util.Half2,ILGPU.Util.Half2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Half3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Half3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Half3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half3.#ctor(ILGPU.Half)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half3.#ctor(ILGPU.Half,ILGPU.Half,ILGPU.Half)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half3.#ctor(ILGPU.Util.DataBlock{ILGPU.Half,ILGPU.Half,ILGPU.Half})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.Equals(ILGPU.Util.Half3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Half3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Multiply(ILGPU.Util.Half3,ILGPU.Util.Half3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Division(ILGPU.Util.Half3,ILGPU.Util.Half3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Subtraction(ILGPU.Util.Half3,ILGPU.Util.Half3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Addition(ILGPU.Util.Half3,ILGPU.Util.Half3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Implicit(ILGPU.Half)~ILGPU.Util.Half3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Implicit(ILGPU.Util.Half3)~System.ValueTuple{ILGPU.Half,ILGPU.Half,ILGPU.Half}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Implicit(ILGPU.Util.Half3)~ILGPU.Util.DataBlock{ILGPU.Half,ILGPU.Half,ILGPU.Half}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Equality(ILGPU.Util.Half3,ILGPU.Util.Half3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Inequality(ILGPU.Util.Half3,ILGPU.Util.Half3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Half4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Half4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Half4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half4.#ctor(ILGPU.Half)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half4.#ctor(ILGPU.Half,ILGPU.Half,ILGPU.Half,ILGPU.Half)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half4.#ctor(ILGPU.Util.DataBlock{ILGPU.Half,ILGPU.Half,ILGPU.Half,ILGPU.Half})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.Equals(ILGPU.Util.Half4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Half4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Multiply(ILGPU.Util.Half4,ILGPU.Util.Half4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Division(ILGPU.Util.Half4,ILGPU.Util.Half4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Subtraction(ILGPU.Util.Half4,ILGPU.Util.Half4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Addition(ILGPU.Util.Half4,ILGPU.Util.Half4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Implicit(ILGPU.Half)~ILGPU.Util.Half4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Implicit(ILGPU.Util.Half4)~System.ValueTuple{ILGPU.Half,ILGPU.Half,ILGPU.Half,ILGPU.Half}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Implicit(ILGPU.Util.Half4)~ILGPU.Util.DataBlock{ILGPU.Half,ILGPU.Half,ILGPU.Half,ILGPU.Half}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Equality(ILGPU.Util.Half4,ILGPU.Util.Half4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Inequality(ILGPU.Util.Half4,ILGPU.Util.Half4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Float2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float2.#ctor(System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float2.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float2.#ctor(ILGPU.Util.DataBlock{System.Single,System.Single})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.Equals(ILGPU.Util.Float2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Float2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Multiply(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Division(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Subtraction(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Addition(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Implicit(System.Single)~ILGPU.Util.Float2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Implicit(ILGPU.Util.Float2)~System.ValueTuple{System.Single,System.Single}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Implicit(ILGPU.Util.Float2)~ILGPU.Util.DataBlock{System.Single,System.Single}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Equality(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Inequality(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Float3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float3.#ctor(System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float3.#ctor(ILGPU.Util.DataBlock{System.Single,System.Single,System.Single})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.Equals(ILGPU.Util.Float3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Float3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Multiply(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Division(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Subtraction(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Addition(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Implicit(System.Single)~ILGPU.Util.Float3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Implicit(ILGPU.Util.Float3)~System.ValueTuple{System.Single,System.Single,System.Single}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Implicit(ILGPU.Util.Float3)~ILGPU.Util.DataBlock{System.Single,System.Single,System.Single}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Equality(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Inequality(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Float4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float4.#ctor(System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float4.#ctor(ILGPU.Util.DataBlock{System.Single,System.Single,System.Single,System.Single})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.Equals(ILGPU.Util.Float4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Float4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Multiply(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Division(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Subtraction(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Addition(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Implicit(System.Single)~ILGPU.Util.Float4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Implicit(ILGPU.Util.Float4)~System.ValueTuple{System.Single,System.Single,System.Single,System.Single}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Implicit(ILGPU.Util.Float4)~ILGPU.Util.DataBlock{System.Single,System.Single,System.Single,System.Single}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Equality(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Inequality(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Double2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double2.#ctor(System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double2.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double2.#ctor(ILGPU.Util.DataBlock{System.Double,System.Double})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.Equals(ILGPU.Util.Double2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Double2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Multiply(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Division(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Subtraction(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Addition(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Implicit(System.Double)~ILGPU.Util.Double2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Implicit(ILGPU.Util.Double2)~System.ValueTuple{System.Double,System.Double}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Implicit(ILGPU.Util.Double2)~ILGPU.Util.DataBlock{System.Double,System.Double}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Equality(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Inequality(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Double3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double3.#ctor(System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double3.#ctor(ILGPU.Util.DataBlock{System.Double,System.Double,System.Double})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.Equals(ILGPU.Util.Double3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Double3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Multiply(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Division(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Subtraction(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Addition(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Implicit(System.Double)~ILGPU.Util.Double3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Implicit(ILGPU.Util.Double3)~System.ValueTuple{System.Double,System.Double,System.Double}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Implicit(ILGPU.Util.Double3)~ILGPU.Util.DataBlock{System.Double,System.Double,System.Double}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Equality(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Inequality(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Double4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double4.#ctor(System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double4.#ctor(ILGPU.Util.DataBlock{System.Double,System.Double,System.Double,System.Double})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.Equals(ILGPU.Util.Double4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Double4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Multiply(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Division(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Subtraction(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Addition(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Implicit(System.Double)~ILGPU.Util.Double4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Implicit(ILGPU.Util.Double4)~System.ValueTuple{System.Double,System.Double,System.Double,System.Double}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Implicit(ILGPU.Util.Double4)~ILGPU.Util.DataBlock{System.Double,System.Double,System.Double,System.Double}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Equality(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Inequality(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.TypeExtensions">
            <summary>
            Represents general type extensions.
            </summary>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsArrayViewType(System.Type,System.Type@)">
            <summary>
            Checks whether the given type is an array view type.
            </summary>
            <param name="type">The source type.</param>
            <param name="elementType">
            The resolved element type in case of an array view.
            </param>
            <returns>True, in case of an array view.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsSpecializedType(System.Type,System.Type@)">
            <summary>
            Checks whether the given type is a specialized type.
            </summary>
            <param name="type">The source type.</param>
            <param name="nestedType">
            The resolved element type in case of an array view.
            </param>
            <returns>True, in case of an array view.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.HasSupportedBaseClass(System.Type)">
            <summary>
            Returns true if the given type has a supported base class.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type has a supported base class.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsDelegate(System.Type)">
            <summary>
            Returns true if the given type is a delegate type.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type is a delegate type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetDelegateInvokeMethod(System.Type)">
            <summary>
            Resolves the delegate invocation method of the given type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved delegate invocation method.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetReturnType(System.Reflection.MethodBase)">
            <summary>
            Resolves the return type of the given method.
            </summary>
            <param name="method">The method base.</param>
            <returns>The resolved return type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsVoidPtr(System.Type)">
            <summary>
            Returns true if the given type is a void pointer.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type is a void pointer.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsPassedViaPtr(System.Type)">
            <summary>
            Returns true if the given type is passed via reference.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type is passed via reference.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsTreatedAsPtr(System.Type)">
            <summary>
            Returns true if the given type is treated as a pointer type.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type is treated as a pointer type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsSignedInt(System.Type)">
            <summary>
            Returns true if the given type represents a signed int.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type represents a signed int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsUnsignedInt(System.Type)">
            <summary>
            Returns true if the given type represents an unsigned int.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type represents an unsigned int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsILGPUPrimitiveType(System.Type)">
            <summary>
            Returns true if the given type is an ILGPU intrinsic primitive type.
            </summary>
            <param name="type">The source type.</param>
            <returns>
            True, if the given type is an ILGPU intrinsic primitive type.
            </returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetManagedType(ILGPU.BasicValueType)">
            <summary>
            Resolves the managed type for the given basic-value type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved managed type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetBasicValueType(System.Type)">
            <summary>
            Resolves the basic-value type for the given managed type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetArithmeticBasicValueType(System.Type)">
            <summary>
            Resolves the basic-value type for the given managed type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetBasicValueType(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves the basic-value type for the given type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetArithmeticBasicValueType(ILGPU.BasicValueType,System.Boolean)">
            <summary>
            Resolves the basic-value type for the given type.
            </summary>
            <param name="type">The source type.</param>
            <param name="isUnsigned">
            True, if the basic value type should be interpreted as unsigned.
            </param>
            <returns>The resolved basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsInt(System.Type)">
            <summary>
            Returns true if the given type represents an int.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type represents an int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsInt(ILGPU.BasicValueType)">
            <summary>
            Returns true if the given basic-value type represents an int.
            </summary>
            <param name="value">The basic-value type.</param>
            <returns>True, if the given basic-value type represents an int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsFloat(System.Type)">
            <summary>
            Returns true if the given type represents a float.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type represents a float.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsFloat(ILGPU.BasicValueType)">
            <summary>
            Returns true if the given basic-value type represents a float.
            </summary>
            <param name="value">The basic-value type.</param>
            <returns>True, if the given basic-value type represents a float.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsFloat(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Returns true if the given arithmetic basic value type represents a float.
            </summary>
            <param name="value">The arithmetic basic value type.</param>
            <returns>
            True, if the given arithmetic basic value represents a float.
            </returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.ToTargetUnsignedFlags(System.Type)">
            <summary>
            Converts the given type into conversion target flags.
            </summary>
            <param name="type">The type to convert.</param>
            <returns>The required conversion flags.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetStringRepresentation(System.Type)">
            <summary>
            Returns the string representation of the given type.
            </summary>
            <param name="type">The type to convert to a string.</param>
            <returns>The string representation of the given type.</returns>
        </member>
        <member name="T:ILGPU.Util.Utilities">
            <summary>
            General utility methods.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Utilities.Swap``1(``0@,``0@)">
            <summary>
            Swaps the given values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="first">The first value to swap with the second one.</param>
            <param name="second">The second value to swap with the first one.</param>
        </member>
        <member name="M:ILGPU.Util.Utilities.Swap``1(System.Boolean,``0@,``0@)">
            <summary>
            Swaps the given values if swap is true.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="performSwap">True, if the values should be swapped.</param>
            <param name="first">The first value to swap with the second one.</param>
            <param name="second">The second value to swap with the first one.</param>
            <returns>True, if the values were swapped.</returns>
        </member>
        <member name="M:ILGPU.Util.Utilities.Select``1(System.Boolean,``0,``0)">
            <summary>
            Selects between the two given values.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="takeFirst">
            True, if the
            <paramref name="first"/> value should be taken.</param>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>The selected value.</returns>
            <remarks>
            Note that this function will be mapped to the ILGPU IR.
            </remarks>
        </member>
        <member name="M:ILGPU.Util.Utilities.IsPowerOf2(System.Int64)">
            <summary>
            Returns true if the given integer is a power of two.
            </summary>
            <param name="value">The integer value.</param>
            <returns>True, if the given integer is a power of two.</returns>
        </member>
        <member name="M:ILGPU.Util.Utilities.IsPowerOf2(System.UInt64)">
            <summary>
            Returns true if the given integer is a power of two.
            </summary>
            <param name="value">The integer value.</param>
            <returns>True, if the given integer is a power of two.</returns>
        </member>
        <member name="M:ILGPU.Util.Utilities.GCD(System.Int64,System.Int64)">
            <summary>
            Computes the greatest common divisor using the Euclidean algorithm.
            </summary>
            <param name="a">The first number.</param>
            <param name="b">The second number.</param>
            <returns>The GCD of both numbers.</returns>
        </member>
        <member name="M:ILGPU.Util.Utilities.LCM(System.Int64,System.Int64)">
            <summary>
            Computes the least common multiple.
            </summary>
            <param name="a">The first number.</param>
            <param name="b">The second number.</param>
            <returns>The LCM of both numbers.</returns>
        </member>
        <member name="T:ILGPU.VariableView`1">
            <summary>
            Represents a general view to a variable.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
        </member>
        <member name="F:ILGPU.VariableView`1.VariableSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.VariableView`1.#ctor(ILGPU.ArrayView{`0})">
            <summary>
            Constructs a new variable view.
            </summary>
            <param name="baseView">The base view.</param>
        </member>
        <member name="P:ILGPU.VariableView`1.BaseView">
            <summary>
            Returns the base view.
            </summary>
        </member>
        <member name="P:ILGPU.VariableView`1.IsValid">
            <summary>
            Returns true if this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.VariableView`1.Value">
            <summary>
            Accesses the stored value.
            </summary>
        </member>
        <member name="M:ILGPU.VariableView`1.CopyTo(ILGPU.VariableView{`0})">
            <summary>
            Copies the current value to the memory location of the given view.
            </summary>
            <param name="targetView">The target view.</param>
            <remarks>
            The target view must be accessible from the this view (e.g. same accelerator).
            </remarks>
        </member>
        <member name="M:ILGPU.VariableView`1.CopyFrom(ILGPU.VariableView{`0})">
            <summary>
            Copies the value from the memory location of the given view.
            </summary>
            <param name="sourceView">The source view.</param>
            <remarks>
            The source view must be accessible from the this view (e.g. same accelerator).
            </remarks>
        </member>
        <member name="M:ILGPU.VariableView`1.GetSubView``1(System.Int32)">
            <summary>
            Creates a sub view into this view.
            </summary>
            <param name="offsetInBytes"></param>
        </member>
        <member name="M:ILGPU.VariableView`1.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="T:ILGPU.Warp">
            <summary>
            Contains warp-wide functions.
            </summary>
        </member>
        <member name="P:ILGPU.Warp.WarpSize">
            <summary>
            Returns the warp size.
            </summary>
        </member>
        <member name="P:ILGPU.Warp.LaneIdx">
            <summary>
            Returns the current lane index [0, WarpSize - 1].
            </summary>
        </member>
        <member name="P:ILGPU.Warp.IsFirstLane">
            <summary>
            Returns true if the current lane is the first lane.
            </summary>
        </member>
        <member name="P:ILGPU.Warp.IsLastLane">
            <summary>
            Returns true if the current lane is the last lane.
            </summary>
        </member>
        <member name="P:ILGPU.Warp.WarpIdx">
            <summary>
            Returns the current warp index in the range [0, NumUsedWarps - 1].
            </summary>
            <returns>The current warp index in the range [0, NumUsedWarps - 1].</returns>
        </member>
        <member name="M:ILGPU.Warp.ComputeWarpIdx(ILGPU.Index1)">
            <summary>
            Computes the current warp index in the range [0, NumUsedWarps - 1].
            </summary>
            <param name="groupThreadIdx">
            The current thread index within the current group.
            </param>
            <returns>
            The current warp index in the range [0, NumUsedWarps - 1].
            </returns>
        </member>
        <member name="M:ILGPU.Warp.ComputeWarpThreadIdx(ILGPU.Index1)">
            <summary>
            Computes the current thread within a warp in the range [0, WarpSize - 1].
            </summary>
            <param name="groupThreadIdx">
            The current thread index within the current group.
            </param>
            <returns>
            The current warp thread index in the range [0, WarpSize - 1].
            </returns>
        </member>
        <member name="M:ILGPU.Warp.Barrier">
            <summary>
            Executes a thread barrier in the scope of a warp.
            </summary>
        </member>
        <member name="M:ILGPU.Warp.Shuffle``1(``0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the specified source lane.
            The width of the shuffle operation is the warp size.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="sourceLane">The source lane.</param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.Shuffle``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the specified source lane.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="sourceLane">The source lane.</param>
            <param name="width">
            The width of the shuffle operation. Width must be a power of 2.
            </param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleDown``1(``0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane + delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to add to the current lane.</param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleDown``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane + delta.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to add to the current lane.</param>
            <param name="width">
            The width of the shuffle operation. Width must be a power of 2.
            </param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleUp``1(``0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane - delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to subtract to the current lane.</param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleUp``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane - delta.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to subtract to the current lane.</param>
            <param name="width">
            The width of the shuffle operation. Width must be a power of 2.
            </param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleXor``1(``0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane xor mask.
            The width of the shuffle operation is the warp size.
            </summary>
            <typeparam name="T">The type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="mask">The mask to xor to the current lane.</param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleXor``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane xor mask.
            </summary>
            <typeparam name="T">The type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="mask">The mask to xor to the current lane.</param>
            <param name="width">
            The width of the shuffle operation. Width must be a power of 2.
            </param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.Broadcast``1(``0,System.Int32)">
            <summary>
            Performs a broadcast operation that broadcasts the given value
            from the specified thread to all other threads in the warp.
            </summary>
            <typeparam name="T">The type to broadcast.</typeparam>
            <param name="value">The value to broadcast.</param>
            <param name="laneIndex">The source thread index within the warp.</param>
            <remarks>
            Note that the group index must be the same for all threads in the warp.
            </remarks>
        </member>
    </members>
</doc>
