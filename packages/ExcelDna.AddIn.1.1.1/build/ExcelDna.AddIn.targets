<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ExcelDnaToolsPath Condition="$(ExcelDnaToolsPath) == '' Or $(ExcelDnaToolsPath) == '*Undefined*'">$(MSBuildThisFileDirectory)..\tools\</ExcelDnaToolsPath>
  </PropertyGroup>

  <UsingTask TaskName="ExcelDna.AddIn.Tasks.SetDebuggerOptions" AssemblyFile="$(ExcelDnaToolsPath)ExcelDna.AddIn.Tasks.dll" />
  <UsingTask TaskName="ExcelDna.AddIn.Tasks.CleanExcelAddIn" AssemblyFile="$(ExcelDnaToolsPath)ExcelDna.AddIn.Tasks.dll" />
  <UsingTask TaskName="ExcelDna.AddIn.Tasks.CreateExcelAddIn" AssemblyFile="$(ExcelDnaToolsPath)ExcelDna.AddIn.Tasks.dll" />

  <!--
    Extend the Clean target to call our ExcelDnaClean target
  -->
  <PropertyGroup>
    <CleanDependsOn>
      $(CleanDependsOn);
      ExcelDnaClean;
    </CleanDependsOn>
  </PropertyGroup>

  <!--
    Extend the Build target to call our ExcelDnaDebugger, ExcelDnaBuild, and ExcelDnaPack targets
  -->
  <PropertyGroup>
    <BuildDependsOn>
      ExcelDnaSetDebuggerOptions;
      $(BuildDependsOn);
      ExcelDnaBuild;
      ExcelDnaPack;
    </BuildDependsOn>
  </PropertyGroup>

  <!--
    Load configuration properties file for the project, if exist
  -->
  <PropertyGroup>
    <ExcelDnaProjectPath Condition="'$(ExcelDnaProjectPath)' == ''">$(MSBuildProjectDirectory)\</ExcelDnaProjectPath>
    <ExcelDnaPropsFilePath Condition="'$(ExcelDnaPropsFilePath)' == ''">$(ExcelDnaProjectPath)\Properties\ExcelDna.Build.props</ExcelDnaPropsFilePath>
  </PropertyGroup>
  <Import Project="$(ExcelDnaPropsFilePath)" Condition="Exists('$(ExcelDnaPropsFilePath)')" />

  <!--
    Default values for configuration properties - in case they were not set in via .props file or command-line
  -->
  <PropertyGroup>
    <RunExcelDnaSetDebuggerOptions Condition="'$(RunExcelDnaSetDebuggerOptions)' == ''">true</RunExcelDnaSetDebuggerOptions>
    <RunExcelDnaClean Condition="'$(RunExcelDnaClean)' == ''">true</RunExcelDnaClean>
    <RunExcelDnaBuild Condition="'$(RunExcelDnaBuild)' == ''">true</RunExcelDnaBuild>
    <RunExcelDnaPack Condition="'$(RunExcelDnaPack)' == ''">true</RunExcelDnaPack>

    <ExcelDnaCreate32BitAddIn Condition="'$(ExcelDnaCreate32BitAddIn)' == ''">true</ExcelDnaCreate32BitAddIn>
    <ExcelDnaCreate64BitAddIn Condition="'$(ExcelDnaCreate64BitAddIn)' == ''">true</ExcelDnaCreate64BitAddIn>

    <ExcelDna32BitAddInSuffix Condition="'$(ExcelDna32BitAddInSuffix)' == ''"></ExcelDna32BitAddInSuffix>
    <ExcelDna64BitAddInSuffix Condition="'$(ExcelDna64BitAddInSuffix)' == ''">64</ExcelDna64BitAddInSuffix>

    <ExcelDnaAllowPackageReferenceProjectStyle Condition="'$(ExcelDnaAllowPackageReferenceProjectStyle)' == ''">false</ExcelDnaAllowPackageReferenceProjectStyle>

    <ExcelDnaPackExePath Condition="'$(ExcelDnaPackExePath)' == ''">$(ExcelDnaToolsPath)ExcelDnaPack.exe</ExcelDnaPackExePath>
    <ExcelDnaPackXllSuffix Condition="'$(ExcelDnaPackXllSuffix)' == ''">-packed</ExcelDnaPackXllSuffix>
    <ExcelDnaPackCompressResources Condition="'$(ExcelDnaPackCompressResources)' == ''">true</ExcelDnaPackCompressResources>
    <ExcelDnaPackRunMultithreaded Condition="'$(ExcelDnaPackRunMultithreaded)' == ''">true</ExcelDnaPackRunMultithreaded>
  </PropertyGroup>

  <!--
    Target that checks if the project is not compatible with Excel-DNA
  -->
  <Target Name="ExcelDnaCheckPackageProjectStyle" BeforeTargets="CoreCompile">
    <Error Code="DNA1546"
           Text="Excel-DNA is not compatible with projects that use NuGet `PackageReference`. Make sure you create a .NET Framework (Class Library) project and configure Visual Studio to use `packages.config`"
           Condition=" '$(ExcelDnaAllowPackageReferenceProjectStyle)' != 'true' AND ('$(PackageReferenceCompatibleProjectStyle)' == 'true' OR '$(RestoreProjectStyle)' == 'ProjectJson' OR '$(NuGetProjectStyle)' == 'PackageReference') " />
  </Target>

  <!--
    Target that ensures ExcelDna.Integration.dll is not copied to the output folder
    https://github.com/Excel-DNA/ExcelDna/issues/188
  -->
  <Target Name="ExcelDnaPreventIntegrationCopyLocal" AfterTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)"
                               Condition="'%(ReferenceCopyLocalPaths.Filename)%(ReferenceCopyLocalPaths.Extension)' == 'ExcelDna.Integration.dll'" />
    </ItemGroup>
  </Target>

  <!--
    Configure debugger options (Path for EXCEL.EXE, add-in to open, etc).
  -->
  <Target Name="ExcelDnaSetDebuggerOptions"
          BeforeTargets="PreBuildEvent"
          Condition="'$(RunExcelDnaSetDebuggerOptions)'== 'true' AND '$(BuildingInsideVisualStudio)' == 'true' AND '$(BuildingByReSharper)' != 'true'">
    <Message Text="---" Importance="High" />

    <Error Text="ExcelDna32BitAddInSuffix and ExcelDna64BitAddInSuffix cannot be identical. Fix your ExcelDna.Build.props file"
           Condition="'$(ExcelDna32BitAddInSuffix)' == '$(ExcelDna64BitAddInSuffix)'" />

    <ItemGroup>
      <ExcelDnaSetDebuggerOptionsFilesInProject Include="@(None)" />
      <ExcelDnaSetDebuggerOptionsFilesInProject Include="@(Content)" />
    </ItemGroup>

    <SetDebuggerOptions
      ProjectName="$(MSBuildProjectName)"
      ExcelExePath="$(ExcelDnaExcelExePath)"
      AddInForDebugging="$(ExcelDnaAddInForDebugging)"
      FilesInProject="@(ExcelDnaSetDebuggerOptionsFilesInProject)"
      OutDirectory="$(OutDir)"
      FileSuffix32Bit="$(ExcelDna32BitAddInSuffix)"
      FileSuffix64Bit="$(ExcelDna64BitAddInSuffix)">
    </SetDebuggerOptions>
  </Target>

  <!--
    Target that removes .dna, .xll, and .xll.config from the build output folder
  -->
  <Target Name="ExcelDnaClean"
          Condition="'$(RunExcelDnaClean)' == 'true'">
    <Message Text="---" Importance="High" />

    <Error Text="ExcelDna32BitAddInSuffix and ExcelDna64BitAddInSuffix cannot be identical. Fix your ExcelDna.Build.props file"
              Condition="'$(ExcelDna32BitAddInSuffix)' == '$(ExcelDna64BitAddInSuffix)'" />

    <ItemGroup>
      <ExcelDnaCleanFilesInProject Include="@(None)" />
      <ExcelDnaCleanFilesInProject Include="@(Content)" />
    </ItemGroup>

    <CleanExcelAddIn
      FilesInProject="@(ExcelDnaCleanFilesInProject)"
      OutDirectory="$(OutDir)"
      Xll32FilePath="$(ExcelDnaToolsPath)ExcelDna.xll"
      Xll64FilePath="$(ExcelDnaToolsPath)ExcelDna64.xll"
      FileSuffix32Bit="$(ExcelDna32BitAddInSuffix)"
      FileSuffix64Bit="$(ExcelDna64BitAddInSuffix)"
      PackIsEnabled="$(RunExcelDnaPack)"
      PackedFileSuffix="$(ExcelDnaPackXllSuffix)">
    </CleanExcelAddIn>
  </Target>

  <!--
    Target that copies .dna, .xll, and .xll.config to the build output folder, for each platform
  -->
  <Target Name="ExcelDnaBuild" BeforeTargets="PostBuildEvent" Condition="'$(RunExcelDnaBuild)' == 'true'">
    <Message Text="---" Importance="High" />

    <Error Text="ExcelDna32BitAddInSuffix and ExcelDna64BitAddInSuffix cannot be identical. Fix your ExcelDna.Build.props file"
              Condition="'$(ExcelDna32BitAddInSuffix)' == '$(ExcelDna64BitAddInSuffix)'" />

    <Warning Text="ExcelDnaCreate32BitAddIn and ExcelDnaCreate64BitAddIn are both 'false'. Nothing to do"
             Condition="('$(ExcelDnaCreate32BitAddIn)' == 'false') AND ('$(ExcelDnaCreate64BitAddIn)' == 'false')" />

    <ItemGroup>
      <ExcelDnaBuildFilesInProject Include="@(None)" />
      <ExcelDnaBuildFilesInProject Include="@(Content)" />
    </ItemGroup>

    <CreateExcelAddIn
      FilesInProject="@(ExcelDnaBuildFilesInProject)"
      OutDirectory="$(OutDir)"
      Xll32FilePath="$(ExcelDnaToolsPath)ExcelDna.xll"
      Xll64FilePath="$(ExcelDnaToolsPath)ExcelDna64.xll"
      Create32BitAddIn="$(ExcelDnaCreate32BitAddIn)"
      Create64BitAddIn="$(ExcelDnaCreate64BitAddIn)"
      FileSuffix32Bit="$(ExcelDna32BitAddInSuffix)"
      FileSuffix64Bit="$(ExcelDna64BitAddInSuffix)"
      PackIsEnabled="$(RunExcelDnaPack)"
      PackedFileSuffix="$(ExcelDnaPackXllSuffix)">
      <Output TaskParameter="DnaFilesToPack" ItemName="ExcelDnaFilesToPack" />
    </CreateExcelAddIn>

    <Message Text="---" Condition="'$(RunExcelDnaPack)' == 'true'" Importance="High" />
  </Target>

  <!--
    Target that runs ExcelDnaPack.exe for each .dna copied to the build output folder
  -->
  <Target Name="ExcelDnaPack" DependsOnTargets="ExcelDnaBuild" BeforeTargets="PostBuildEvent" Condition="('$(RunExcelDnaPack)' == 'true') AND ('@(ExcelDnaFilesToPack->Count())' &gt; 0)" Outputs="%(ExcelDnaFilesToPack.Identity)">
    <Error Text="ExcelDnaPack: ExcelDnaPack.exe not found: $(ExcelDnaPackExePath)" Condition="!Exists('$(ExcelDnaPackExePath)')" />

    <!-- Run ExcelDnaPack.exe -->
    <Message Text="ExcelDnaPack: %(ExcelDnaFilesToPack.OutputDnaFileName) -> %(ExcelDnaFilesToPack.OutputPackedXllFileName)" Importance="High" />

    <PropertyGroup>
      <ExcelDnaPackExtraArgs Condition="!$(ExcelDnaPackCompressResources)">/NoCompression</ExcelDnaPackExtraArgs>
      <ExcelDnaPackExtraArgs Condition="!$(ExcelDnaPackRunMultithreaded)">$(ExcelDnaPackExtraArgs) /NoMultiThreading</ExcelDnaPackExtraArgs>
    </PropertyGroup>

    <Exec Command="&quot;$(ExcelDnaPackExePath)&quot; &quot;%(ExcelDnaFilesToPack.OutputDnaFileName)&quot; /Y $(ExcelDnaPackExtraArgs) /O &quot;%(ExcelDnaFilesToPack.OutputPackedXllFileName)&quot;"
          IgnoreExitCode="false"
          ContinueOnError="false" />

    <!-- Copy .xll.config file to -packed.xll.config (if .xll.config exists) -->
    <Message Text="ExcelDnaPack: %(ExcelDnaFilesToPack.OutputXllConfigFileName) -> %(ExcelDnaFilesToPack.OutputPackedXllFileName).config" Importance="High"
             Condition="Exists('%(ExcelDnaFilesToPack.OutputXllConfigFileName)')" />

    <Copy SourceFiles="%(ExcelDnaFilesToPack.OutputXllConfigFileName)"
          DestinationFiles="%(ExcelDnaFilesToPack.OutputPackedXllFileName).config"
          Condition="Exists('%(ExcelDnaFilesToPack.OutputXllConfigFileName)')"
          ContinueOnError="false"
          OverwriteReadOnlyFiles="true"
          SkipUnchangedFiles="true" />
  </Target>
</Project>
