<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cephei.Cell</name>
    </assembly>
    <members>
        <member name="T:Cephei.Cell.CellEvent">
            <summary>
            Events sent from mutating cells to their dependants OnChange event handlers
            </summary>
        </member>
        <member name="F:Cephei.Cell.CellEvent.Create">
            <summary>
            default is that it was simply created
            </summary>
        </member>
        <member name="F:Cephei.Cell.CellEvent.Invalidate">
            <summary>
            Invalidate message is sent by threaded calculations to invalidate objects
            without causing a cascade of blocked threads.  Invalidate results in the cell
            becoming <i>Dirty</i>
            </summary>
        </member>
        <member name="F:Cephei.Cell.CellEvent.Calculate">
            <summary>
            do the calculation if needed. Recipients of this message send invalidate
            messages to their listeners
            </summary>
        </member>
        <member name="F:Cephei.Cell.CellEvent.Error">
            <summary>
            an error occurred in the calculation.. all dependant changes should be
            abandoned
            </summary>
        </member>
        <member name="F:Cephei.Cell.CellEvent.Link">
            <summary>
            when the value of a cell changes in the model, force Calculators to switch
            references
            </summary>
        </member>
        <member name="F:Cephei.Cell.CellEvent.Delete">
            <summary>
            The item has been removed from a model, and any casual observes should unlink.
            This will only happen for dynamic models that allow the calculations to be
            changed at runtime
            </summary>
        </member>
        <member name="F:Cephei.Cell.CellEvent.JoinSession">
            <summary>
            Join a calculation session.  This event is passed to all dependant cells so
            they can determine whether a session value should be used instead of the spot
            value
            </summary>
        </member>
        <member name="T:Cephei.Cell.CellState">
            <summary>
            The State vector of the cell
            </summary>
        </member>
        <member name="F:Cephei.Cell.CellState.Clean">
            <summary>
            Clean state is set whenever a value is assigned to the Cell, or a Calculation
            has completed
            </summary>
        </member>
        <member name="F:Cephei.Cell.CellState.Error">
            <summary>
            Error state is entered whenever a calculation fails.
            An Error event is raised to dependants
            </summary>
        </member>
        <member name="F:Cephei.Cell.CellState.Dirty">
            <summary>
            Dirty is the state
            <ul>
            	<li>On creation with a function
            Calculate is called on a Task thread</li>
            	<li>Whenever an Invalidate Event is fired</li>
            </ul>
            </summary>
        </member>
        <member name="F:Cephei.Cell.CellState.Calculating">
            <summary>
            Calculating state is set when a thread starts calculating a value, either
            triggered by Calculate Event or a value is require but the enqued task has not
            yet been dispatched
            </summary>
        </member>
        <member name="F:Cephei.Cell.CellState.Blocking">
            <summary>
            Blocking State is entered whenever a value is required, but another thread is
            already in the process of calculating a value or a task needs to calculate a
            value for a session
            </summary>
        </member>
        <member name="T:Cephei.Cell.Generic.Cell`1">
            <summary>
            Cell is a generic holder (<i>like lazy</i>), but the value is dependant on the
            functional relationship to the values that it is derived from. Irrespective of
            the current value of the referenced cells, this cell's value will always
            reflect the value of its underling values.
            For <i>x = f (y)</i> the formula <i>f </i>is treated as a relationship of the
            set of values of <i>x</i> that are related to the set of values of <i>y</i> by
            the relationship <i>f</i>
            
            The paradigm  is that of a spreadsheet that automatically recalculates, but
            with the addition that the calculation is performed asynchronously in parallel
            for large models.
            
            cells are best used when the function captures compute intensive calculations
            (like an PV function for a derivative contract.
            
            If the model contains a thousand different possible values for an interest rate,
            the model can define 1000 NPV functions and a cell that with the average
            exposure and the 95% confidence value of potential exposure.  When valued most
            calculations will be performed in parallel.
            </summary>
        </member>
        <member name="F:Cephei.Cell.Generic.Cell`1._func">
            <summary>
            reference to the function to evaluate
            </summary>
        </member>
        <member name="F:Cephei.Cell.Generic.Cell`1._spinLock">
            <summary>
            A spin lock is used to control access to the state pointer.  The protocol is
            that the spin lock is only held while reading or writing state - calculations
            release the spin lock before eval, and re-acquire when changing value.  With
            this protocol spinlock is efficient even in highly contentious scenarios
            </summary>
        </member>
        <member name="F:Cephei.Cell.Generic.Cell`1._event">
            <summary>
            Event is fired from every transition for Blocking State
            </summary>
        </member>
        <member name="F:Cephei.Cell.Generic.Cell`1._state">
            <summary>
            reference to the state.  It is held as an integer to allow cache bypass read
            and write
            </summary>
        </member>
        <member name="F:Cephei.Cell.Generic.Cell`1._value">
            <summary>
            cached value of the last calculation
            </summary>
        </member>
        <member name="F:Cephei.Cell.Generic.Cell`1._lastException">
            <summary>
            Because calculation is performed in parallel, any exceptions are saved for
            throw when the value is used
            </summary>
        </member>
        <member name="F:Cephei.Cell.Generic.Cell`1._epoch">
            <summary>
            The timestamp of the last calculation  Used to prevent Cells spot being updated 
            by earlier events that have been scheduled later than more recent evens
            </summary>
        </member>
        <member name="F:Cephei.Cell.Generic.Cell`1._link">
            <summary>
            if it has not been linked then need to gather dependencies.  True when
            calculation cells are first created, and reset if on of the boolean values it
            is dependant on changes
            </summary>
        </member>
        <member name="F:Cephei.Cell.Generic.Cell`1._isBool">
            <summary>
            if true then trigger re-link to capture other dependencies.  It is presumed
            that boolean cells are used to allow for re-profiling when a value changes
            </summary>
        </member>
        <member name="F:Cephei.Cell.Generic.Cell`1._pending">
            <summary>
            number of pending calculations for sessions, to allow parallel overlapped
            calculation
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Cephei.Cell.Generic.Cell`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0})" -->
        <member name="M:Cephei.Cell.Generic.Cell`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0},System.String)">
            <summary>
            Create a cell with a mnemonic reference
            </summary>
            <param name="func"></param>
            <param name="mnemonic"></param>
        </member>
        <member name="M:Cephei.Cell.Generic.Cell`1.#ctor(`0)">
            <summary>
            Cretate a cell with a a mutable value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Cephei.Cell.Generic.Cell`1.#ctor(`0,System.String)">
            <summary>
            Create a Cell with a value and a memonic reference
            </summary>
            <param name="value"></param>
            <param name="mnemonic"></param>
        </member>
        <member name="M:Cephei.Cell.Generic.Cell`1.LinkReturn(`0)">
            <summary>
            Link return allows for dependent cells visited during a calculation to be
            referenced for change notification.
            The protocol is that Cells that are being profiled are pushed onto the stack,
            so any cell visited during evaluation <u>must</u> be a dependency.
            
            Normally there will be no values on the stack because profiling only occurs
            when a cell is first evaluated, or notified of a change of logic
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Cephei.Cell.Generic.Cell`1.Calculate(System.DateTime,System.Int32,Cephei.Cell.ISession)">
            <summary>
            Internal calculation function, that is triggered either by:
            <ol>
            	<li>Creation of a cell with a formula (executed asynchronously</li>
            	<li>the Request of a value when the state is dirty</li>
            	<li>when triggered by the change of a cell that it si dependant on</li>
            </ol>
            </summary>
            <param name="epoch"></param>
            <param name="recurse"></param>
            <param name="session"></param>
        </member>
        <member name="M:Cephei.Cell.Generic.Cell`1.GetValue(System.Int32)">
            <summary>
            Internal function used by Value property to get the current value of a Cell.
            This is a function to allow for lock contention and to retry if the state has
            changed whilst waiting.
            If the cell is dirty when a value is required, the caculate function is called
            </summary>
            <param name="recurse"></param>
        </member>
        <member name="P:Cephei.Cell.Generic.Cell`1.HasFunction">
            <see cref="P:Cephei.Cell.ICell.HasFunction"/>
        </member>
        <member name="P:Cephei.Cell.Generic.Cell`1.HasValue">
            <see cref="P:Cephei.Cell.ICell.HasValue"/>
        </member>
        <member name="P:Cephei.Cell.Generic.Cell`1.Box">
            <see cref="P:Cephei.Cell.ICell.Box"/>
        </member>
        <member name="T:Cephei.Cell.Generic.CellEmpty`1">
            <summary>
            Holder class for forward reference of cells before definition
            </summary>
            <typeparam name="T">type</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Cephei.Cell.Generic.CellFast`1" -->
        <member name="P:Cephei.Cell.Generic.CellFast`1.HasFunction">
            <see cref="P:Cephei.Cell.ICell.HasFunction"/>
        </member>
        <member name="P:Cephei.Cell.Generic.CellFast`1.HasValue">
            <see cref="P:Cephei.Cell.ICell.HasValue"/>
        </member>
        <member name="P:Cephei.Cell.Generic.CellFast`1.Box">
            <see cref="P:Cephei.Cell.ICell.Box"/>
        </member>
        <member name="T:Cephei.Cell.Generic.CellTrivial`1">
            <summary>
            CellInline is a variant of Cell that performs calculation inline like a 
            normal function but with Cell samntics
            </summary>
        </member>
        <member name="F:Cephei.Cell.Generic.CellTrivial`1._func">
            <summary>
            reference to the function to evaluate
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Cephei.Cell.Generic.CellTrivial`1.Mnemonic" -->
        <!-- Badly formed XML comment ignored for member "M:Cephei.Cell.Generic.CellTrivial`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0})" -->
        <member name="M:Cephei.Cell.Generic.CellTrivial`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,`0},System.String)">
            <summary>
            Create a cell with a mnemonic reference
            </summary>
            <param name="func"></param>
            <param name="mnemonic"></param>
        </member>
        <member name="P:Cephei.Cell.Generic.CellTrivial`1.HasFunction">
            <see cref="P:Cephei.Cell.ICell.HasFunction"/>
        </member>
        <member name="P:Cephei.Cell.Generic.CellTrivial`1.HasValue">
            <see cref="P:Cephei.Cell.ICell.HasValue"/>
        </member>
        <member name="P:Cephei.Cell.Generic.CellTrivial`1.Box">
            <see cref="P:Cephei.Cell.ICell.Box"/>
        </member>
        <member name="T:Cephei.Cell.Generic.CellSpot`1">
            <summary>
            CellSpot is a further specialization of Cell from CellFast for cells where the
            Spot value is only ever used and not referenced within a session.
            Spot cells nevery enlist in  session and never use session values for
            calculations
            </summary>
        </member>
        <member name="P:Cephei.Cell.Generic.CellSpot`1.HasFunction">
            <see cref="P:Cephei.Cell.ICell.HasFunction"/>
        </member>
        <member name="P:Cephei.Cell.Generic.CellSpot`1.HasValue">
            <see cref="P:Cephei.Cell.ICell.HasValue"/>
        </member>
        <member name="P:Cephei.Cell.Generic.CellSpot`1.Box">
            <see cref="P:Cephei.Cell.ICell.Box"/>
        </member>
        <member name="T:Cephei.Cell.Generic.ICell`1">
            <summary>
            Cells have a single interface, but multiple implementations depending on the
            session semantics and/or optimized construction
            </summary>
        </member>
        <member name="P:Cephei.Cell.Generic.ICell`1.Value">
            <summary>
            Either the Value of the Cell, or the appropriate value for the current session
            </summary>
        </member>
        <member name="T:Cephei.Cell.Generic.Model`1">
            <summary>
            Specialisation of Model for recipes models that add cell functions to an oject
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Cephei.Cell.CellChange">
            <summary>
            Notification that a cell has changed
            </summary>
            <param name="eventType">type of event passed</param>
            <param name="sender">the cell that triggered this change</param>
            <param name="epoch">the time epoch of the original source change.. used for throttling</param>
            <param name="transaction">optionaly the transaction that is completing</param>
        </member>
        <member name="T:Cephei.Cell.ICell">
            <summary>
            ICell provides a base interface with the common behavior of all Cells
            </summary>
        </member>
        <member name="P:Cephei.Cell.ICell.Parent">
            <summary>
            Reference to the parent of this cell - usually the model the cell is defined in.
            
            Parents get notifications for all changes to their childen
            </summary>
        </member>
        <member name="P:Cephei.Cell.ICell.Dependants">
            <summary>
            Enumerated list of the Target vale of all event delegates.
            This is used to ensure that multiple references do not result in events being
            fired multiple times <i>x = f (y,y) </i>has a single dependancy
            </summary>
        </member>
        <member name="P:Cephei.Cell.ICell.Mnemonic">
            <summary>
            refeence Mnemonic that provides context for multiple subscriptions and model
            references
            </summary>
        </member>
        <member name="E:Cephei.Cell.ICell.Change">
            <summary>
            Event handle that a dependant cell uses to subscribe to changes.
            e.g. if <i>x = f (y)</i> then <i>x</i> will attach its OnChange to <i>y</i>
            Event to subscribe to changes<i> </i>
            </summary>
        </member>
        <member name="M:Cephei.Cell.ICell.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICell,System.DateTime,Cephei.Cell.ISession)">
            <summary>
            OnChange is the event sink that receives notification of changes to dependant
            cells
            </summary>
            <param name="eventType">The event be raised</param>
            <param name="root">The cell that sent this event,</param>
            <param name="epoch">timestamp of the change.  This is used to ensure that
            latest values are not overwirtten by calculations dispatched out of
            order</param>
            <param name="session">reference to the session that the eventi was originally
            source in</param>
        </member>
        <member name="P:Cephei.Cell.ICell.HasFunction">
            <summary>
            Does the cell havee a function that can be subscribed to 
            </summary>
        </member>
        <member name="P:Cephei.Cell.ICell.HasValue">
            <summary>
            Does the cell havee a function that can be subscribed to 
            </summary>
        </member>
        <member name="P:Cephei.Cell.ICell.Box">
            <summary>
            Support assignement from boxed values
            </summary>
        </member>
        <member name="T:Cephei.Cell.Cell">
            <summary>
            Cell provides a  module functions of the Cell framework and a thread static
            stack of cells being evaluated.
            </summary>
        </member>
        <member name="F:Cephei.Cell.Cell.Parellel">
            <summary>
            flag to indicate whether parallel calculation should be used to evaluate the
            cells
            </summary>
        </member>
        <member name="F:Cephei.Cell.Cell.Lazy">
            <summary>
            flag to whether cells to evaluate on creation or wait for reference 
            cells
            </summary>
        </member>
        <member name="F:Cephei.Cell.Cell.Trivial">
            <summary>
            flag that the next set of cells are trivial and should run inline
            </summary>
        </member>
        <member name="F:Cephei.Cell.Cell.Current">
            <summary>
            The current stack of cell being profiled. normally this stack will be empty.
            including a null item for safe peek
            </summary>
        </member>
        <member name="M:Cephei.Cell.Cell.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
            <summary>
            Crreate a cell with an F# function like
            let cell = Cell.Create (fun i -> other_cell.Value.NPV(tenor.Value)
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Cephei.Cell.Cell.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)">
            <summary>
            Crreate a cell with an F# function and name like
            let cell = Cell.Create (fun i -> other_cell.Value.NPV(tenor.Value) "other_cell
            NPV"
            </summary>
            <param name="func"></param>
            <param name="mnemonic"></param>
        </member>
        <member name="M:Cephei.Cell.Cell.CreateTrivial``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
            <summary>
            Crreate a trivial cell with an F# function and name like
            let cell = Cell.CreateTrivial (fun i -> other_cell :> expected) "other_cell
            NPV"
            </summary>
            <param name="func"></param>
            <param name="mnemonic"></param>
        </member>
        <member name="M:Cephei.Cell.Cell.CreateValue``1(``0)">
            <summary>
            Create a cell with a mutable value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Cephei.Cell.Cell.CreateValue``1(``0,System.String)">
            <summary>
            Create a cell with a mutable value and mnemonic
            </summary>
            <param name="value"></param>
            <param name="mnemonic"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Cephei.Cell.Cell.CreateFast``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})" -->
        <member name="M:Cephei.Cell.Cell.CreateFast``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)">
            <summary>
            Create a fast cell with a mnemonic
            </summary>
            <param name="func"></param>
            <param name="mnemonic"></param>
        </member>
        <member name="M:Cephei.Cell.Cell.CreateFastValue``1(``0)">
            <summary>
            Create a cell value where it is known at define-time that all the dependants
            will use fast cells for evaluation.
            This creates a cell that does not check for dependants needing profiling
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Cephei.Cell.Cell.CreateFastValue``1(``0,System.String)">
            <summary>
            Create a cell value with a mnemonic where it is known at define-time that all
            the dependants will use fast cells for evaluation.
            This creates a cell that does not check for dependants needing profiling
            </summary>
            <param name="value"></param>
            <param name="mnemonic"></param>
        </member>
        <member name="M:Cephei.Cell.Cell.CreateSpot``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
            <summary>
            Create a Fast Cell that does not participate in sessions.  All calls to Value
            will use the latest spot value of the cell
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Cephei.Cell.Cell.CreateSpot``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.String)">
            <summary>
            Create a Fast Cell with an mnemonic that does not participate in sessions.  All
            calls to Value will use the latest spot value of the cell
            </summary>
            <param name="func"></param>
            <param name="mnemonic"></param>
        </member>
        <member name="M:Cephei.Cell.Cell.CreateSpotValue``1(``0)">
            <summary>
            Create a cell value where it is known at define-time that all the dependants
            will use fast cells for evaluation and will not participate in sessions
            This creates a cell that does not check for dependants needing profiling or
            current sessions
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Cephei.Cell.Cell.CreateSpotValue``1(``0,System.String)">
            <summary>
            Create a cell value with mnemonic where it is known at define-time that all the
            dependants will use fast cells for evaluation and will not participate in
            sessions
            This creates a cell that does not check for dependants needing profiling or
            current sessions
            </summary>
            <param name="value"></param>
            <param name="mnemonic"></param>
        </member>
        <member name="M:Cephei.Cell.Cell.Profile``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
            <summary>
            profile the closure to extract a list of the cells referenced
            </summary>
            <param name="func"></param>
        </member>
        <member name="T:Cephei.Cell.SessionState">
            <summary>
            Session state is used to record the lifecycle of a session
            </summary>
        </member>
        <member name="F:Cephei.Cell.SessionState.Open">
            <summary>
            The session has been created and is open to accept values with delayed event
            fire
            </summary>
        </member>
        <member name="F:Cephei.Cell.SessionState.Calculating">
            <summary>
            The session has been disposed (the use context has finished), the session will
            continue to be available while referenced by cells undertaking calculation (or
            notifying Session Observers.
            </summary>
        </member>
        <member name="F:Cephei.Cell.SessionState.Complete">
            <summary>
            The session has completed and is available for Garbage Collection
            </summary>
        </member>
        <member name="T:Cephei.Cell.SessionComplete">
            <summary>
            Notification that a session has completed 
            </summary>
            <param name="session"></param>
        </member>
        <member name="T:Cephei.Cell.ISession">
            <summary>
            ISession is a common interface for Data Sessions and for "Null Session".  It is
            an interface because ThreadLocal store always requires a value even when
            there
            is no active session.
            
            ISession provides a mechanism to
            <ul>
            	<li>delay publication of change events while related values are changed (e.g.
            spot-rate changes will cascade perturbations along a yield curve</li>
            </ul>
            <ul>
            	<li>provide a bubbling mechanism that does not force real-time price chang to
            wait for the completion of complex calculations to avoid corruption</li>
            </ul>
            </summary>
        </member>
        <member name="P:Cephei.Cell.ISession.State">
            <summary>
            Reference to the state vector, used the trigger change events when  the state
            changes
            </summary>
        </member>
        <member name="P:Cephei.Cell.ISession.Mnemonic">
            <summary>
            Mnemonic provides a name to allow subscribers to correlate results with the
            source of data
            </summary>
        </member>
        <member name="P:Cephei.Cell.ISession.Epoch">
            <summary>
            timestamp to prevent older sessions whose calculations may have been scheduled
            later to update a more recent spot value
            </summary>
        </member>
        <member name="M:Cephei.Cell.ISession.Join(Cephei.Cell.ICell)">
            <summary>
            Join is triggered by the JoinSession event, and includes all the Cells that are
            impacted by a change to a value associated with the session
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Cephei.Cell.ISession.Leave(Cephei.Cell.ICell)">
            <summary>
            Leave is called once a calculation is complete for a Cell that had joined the
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Cephei.Cell.ISession.GetValue``1(Cephei.Cell.ICell,``0@)">
            <summary>
            Get a value from the session.  Session values are written by pool-calculations,
            
            and a referenced from values in the session.  A Cell responding to streamed
            updates may have a different current-value to the value calculated for the
            session
            </summary>
            <param name="cell"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cephei.Cell.ISession.SetValue``1(Cephei.Cell.ICell,``0)">
            <summary>
            Set the value for this cell in the session cache, and ensure that all
            dependant
            calculations for this session use this value
            </summary>
            <param name="cell"></param>
            <param name="value"></param>
        </member>
        <member name="P:Cephei.Cell.ISession.Size">
            <summary>
            Size of the session is the number of cells that are referenced by the session
            </summary>
        </member>
        <member name="P:Cephei.Cell.ISession.PercentComplete">
            <summary>
            PercentComplete is the ratio of the number of values to the number of cells within the session
            </summary>
        </member>
        <member name="M:Cephei.Cell.ISession.Calculate">
            <summary>
            Trigger the Calculation phase of the Session (as an alternative to using IDisposable.Dispose in a using block)
            </summary>
        </member>
        <member name="E:Cephei.Cell.ISession.Complete">
            <summary>
            Notification that the calculation has completed
            </summary>
        </member>
        <member name="P:Cephei.Cell.List`1.HasFunction">
            <see cref="P:Cephei.Cell.ICell.HasFunction"/>
        </member>
        <member name="P:Cephei.Cell.List`1.HasValue">
            <see cref="P:Cephei.Cell.ICell.HasValue"/>
        </member>
        <member name="P:Cephei.Cell.List`1.Box">
            <see cref="P:Cephei.Cell.ICell.Box"/>
        </member>
        <member name="M:Cephei.Cell.List`1.GetEnumerator">
            <summary>
            before eunumerating, add this list the dependants insetad of the content of the list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cephei.Cell.Model.As``1(System.String)">
            <summary>
            Get the value of this[key] with a typecast
            </summary>
            <typeparam name="T">type expected</typeparam>
            <param name="key">mnemonic</param>
            <returns></returns>
        </member>
        <member name="P:Cephei.Cell.Model.HasFunction">
            <see cref="P:Cephei.Cell.ICell.HasFunction"/>
        </member>
        <member name="P:Cephei.Cell.Model.HasValue">
            <see cref="P:Cephei.Cell.ICell.HasValue"/>
        </member>
        <member name="P:Cephei.Cell.Model.Box">
            <see cref="P:Cephei.Cell.ICell.Box"/>
        </member>
        <member name="T:Cephei.Cell.Session">
            <summary>
            This is the only implementation of ISession, but is a separate class to allow
            different session semantics to be provided
            </summary>
            <example>
            use session = new Session()     // when the block completes
            </example>
        </member>
        <member name="F:Cephei.Cell.Session._scope">
            <summary>
            Cells that have joined the session in response to "JoinSession" event and Join
            () call
            </summary>
        </member>
        <member name="F:Cephei.Cell.Session._values">
            <summary>
            Cache of boxed values for cells associated with the cell.  Boxing is used
            because:
            <ul>
            	<li>it is cheaper than providing separate dictionaries for each value type
            The cache is automatically collected when the session goes out of scope..</li>
            	<li>which would not be the case if history was retained with the cell</li>
            </ul>
            </summary>
        </member>
        <member name="F:Cephei.Cell.Session.Current">
            <summary>
            Thread local reference to the current session to allow Cells to join the
            session without explicit coding
            </summary>
        </member>
        <member name="T:Cephei.Cell.SessionStream">
            <summary>
            SessionStream is designed for overlapping sessions, where a new session is started whenever the cureent session completes
            Usefull for real-time risk where the end of a compute intensive calculation triggers the begining of a new one
            </summary>
        </member>
    </members>
</doc>
