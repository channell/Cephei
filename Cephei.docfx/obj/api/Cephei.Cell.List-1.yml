### YamlMime:ManagedReference
items:
- uid: Cephei.Cell.List`1
  commentId: T:Cephei.Cell.List`1
  id: List`1
  parent: Cephei.Cell
  children:
  - Cephei.Cell.List`1.#ctor
  - Cephei.Cell.List`1.#ctor(IEnumerable{Cephei.Cell.Generic.ICell{`0}})
  - Cephei.Cell.List`1.#ctor(IList{Cephei.Cell.Generic.ICell{`0}})
  - Cephei.Cell.List`1.#ctor(System.Int32)
  - Cephei.Cell.List`1.Add(Cephei.Cell.Generic.ICell{`0})
  - Cephei.Cell.List`1.Box
  - Cephei.Cell.List`1.Cephei#Cell#Generic#ICell{T}#Value
  - Cephei.Cell.List`1.Change
  - Cephei.Cell.List`1.Clear
  - Cephei.Cell.List`1.Contains(Cephei.Cell.Generic.ICell{`0})
  - Cephei.Cell.List`1.CopyTo(Cephei.Cell.Generic.ICell{`0}[],System.Int32)
  - Cephei.Cell.List`1.Count
  - Cephei.Cell.List`1.Dependants
  - Cephei.Cell.List`1.Dispose
  - Cephei.Cell.List`1.GetEnumerator
  - Cephei.Cell.List`1.HasFunction
  - Cephei.Cell.List`1.HasValue
  - Cephei.Cell.List`1.IndexOf(Cephei.Cell.Generic.ICell{`0})
  - Cephei.Cell.List`1.Insert(System.Int32,Cephei.Cell.Generic.ICell{`0})
  - Cephei.Cell.List`1.IsReadOnly
  - Cephei.Cell.List`1.Item(System.Int32)
  - Cephei.Cell.List`1.Mnemonic
  - Cephei.Cell.List`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
  - Cephei.Cell.List`1.OnCompleted
  - Cephei.Cell.List`1.OnError(Exception)
  - Cephei.Cell.List`1.OnNext(`0)
  - Cephei.Cell.List`1.Parent
  - Cephei.Cell.List`1.Remove(Cephei.Cell.Generic.ICell{`0})
  - Cephei.Cell.List`1.RemoveAt(System.Int32)
  - Cephei.Cell.List`1.Subscribe(IObserver{`0})
  - Cephei.Cell.List`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
  - Cephei.Cell.List`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
  - Cephei.Cell.List`1.Value
  langs:
  - csharp
  - vb
  name: List<T>
  nameWithType: List<T>
  fullName: Cephei.Cell.List<T>
  type: Class
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: List
    path: ../Cephei.Cell/List.cs
    startLine: 11
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: 'public class List<T> : IList<ICell<T>>, ICell<T>, ICell, ICellEvent, IObservable<T>, IObservable<KeyValuePair<ISession, KeyValuePair<string, T>>>, IObservable<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>, IObserver<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class List(Of T)
          Inherits IList(Of ICell(Of T))
          Implements ICell(Of T), ICell, ICellEvent, IObservable(Of T), IObservable(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))), IObservable(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)), IObserver(Of T)
  inheritance:
  - System.Object
  implements:
  - Cephei.Cell.Generic.ICell{{T}}
  - Cephei.Cell.ICell
  - Cephei.Cell.ICellEvent
  - IObservable{{T}}
  - IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
  - IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
  - IObserver{{T}}
  nameWithType.vb: List(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Cephei.Cell.List(Of T)
  name.vb: List(Of T)
- uid: Cephei.Cell.List`1.#ctor
  commentId: M:Cephei.Cell.List`1.#ctor
  id: '#ctor'
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: List()
  nameWithType: List<T>.List()
  fullName: Cephei.Cell.List<T>.List()
  type: Constructor
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: .ctor
    path: ../Cephei.Cell/List.cs
    startLine: 14
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public List()
    content.vb: Public Sub New
  overload: Cephei.Cell.List`1.#ctor*
  nameWithType.vb: List(Of T).List()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).List()
- uid: Cephei.Cell.List`1.#ctor(IList{Cephei.Cell.Generic.ICell{`0}})
  commentId: M:Cephei.Cell.List`1.#ctor(IList{Cephei.Cell.Generic.ICell{`0}})
  id: '#ctor(IList{Cephei.Cell.Generic.ICell{`0}})'
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: List(IList<ICell<T>>)
  nameWithType: List<T>.List(IList<ICell<T>>)
  fullName: Cephei.Cell.List<T>.List(IList<Cephei.Cell.Generic.ICell<T>>)
  type: Constructor
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: .ctor
    path: ../Cephei.Cell/List.cs
    startLine: 22
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public List(IList<ICell<T>> list)
    parameters:
    - id: list
      type: IList{Cephei.Cell.Generic.ICell{{T}}}
    content.vb: Public Sub New(list As IList(Of ICell(Of T)))
  overload: Cephei.Cell.List`1.#ctor*
  nameWithType.vb: List(Of T).List(IList(Of ICell(Of T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).List(IList(Of Cephei.Cell.Generic.ICell(Of T)))
  name.vb: List(IList(Of ICell(Of T)))
- uid: Cephei.Cell.List`1.#ctor(IEnumerable{Cephei.Cell.Generic.ICell{`0}})
  commentId: M:Cephei.Cell.List`1.#ctor(IEnumerable{Cephei.Cell.Generic.ICell{`0}})
  id: '#ctor(IEnumerable{Cephei.Cell.Generic.ICell{`0}})'
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: List(IEnumerable<ICell<T>>)
  nameWithType: List<T>.List(IEnumerable<ICell<T>>)
  fullName: Cephei.Cell.List<T>.List(IEnumerable<Cephei.Cell.Generic.ICell<T>>)
  type: Constructor
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: .ctor
    path: ../Cephei.Cell/List.cs
    startLine: 39
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public List(IEnumerable<ICell<T>> collection)
    parameters:
    - id: collection
      type: IEnumerable{Cephei.Cell.Generic.ICell{{T}}}
    content.vb: Public Sub New(collection As IEnumerable(Of ICell(Of T)))
  overload: Cephei.Cell.List`1.#ctor*
  nameWithType.vb: List(Of T).List(IEnumerable(Of ICell(Of T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).List(IEnumerable(Of Cephei.Cell.Generic.ICell(Of T)))
  name.vb: List(IEnumerable(Of ICell(Of T)))
- uid: Cephei.Cell.List`1.#ctor(System.Int32)
  commentId: M:Cephei.Cell.List`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: List(Int32)
  nameWithType: List<T>.List(Int32)
  fullName: Cephei.Cell.List<T>.List(System.Int32)
  type: Constructor
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: .ctor
    path: ../Cephei.Cell/List.cs
    startLine: 57
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public List(int capacity)
    parameters:
    - id: capacity
      type: System.Int32
    content.vb: Public Sub New(capacity As Integer)
  overload: Cephei.Cell.List`1.#ctor*
  nameWithType.vb: List(Of T).List(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).List(System.Int32)
- uid: Cephei.Cell.List`1.Value
  commentId: P:Cephei.Cell.List`1.Value
  id: Value
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: List<T>.Value
  fullName: Cephei.Cell.List<T>.Value
  type: Property
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Value
    path: ../Cephei.Cell/List.cs
    startLine: 63
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public IList<ICell<T>> Value { get; set; }
    parameters: []
    return:
      type: IList{Cephei.Cell.Generic.ICell{{T}}}
    content.vb: Public Property Value As IList(Of ICell(Of T))
  overload: Cephei.Cell.List`1.Value*
  nameWithType.vb: List(Of T).Value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).Value
- uid: Cephei.Cell.List`1.Parent
  commentId: P:Cephei.Cell.List`1.Parent
  id: Parent
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: List<T>.Parent
  fullName: Cephei.Cell.List<T>.Parent
  type: Property
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Parent
    path: ../Cephei.Cell/List.cs
    startLine: 75
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public ICell Parent { get; set; }
    parameters: []
    return:
      type: Cephei.Cell.ICell
    content.vb: Public Property Parent As ICell
  overload: Cephei.Cell.List`1.Parent*
  implements:
  - Cephei.Cell.ICell.Parent
  nameWithType.vb: List(Of T).Parent
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).Parent
- uid: Cephei.Cell.List`1.Dependants
  commentId: P:Cephei.Cell.List`1.Dependants
  id: Dependants
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Dependants
  nameWithType: List<T>.Dependants
  fullName: Cephei.Cell.List<T>.Dependants
  type: Property
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Dependants
    path: ../Cephei.Cell/List.cs
    startLine: 77
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public IEnumerable<ICellEvent> Dependants { get; }
    parameters: []
    return:
      type: IEnumerable{Cephei.Cell.ICellEvent}
    content.vb: Public ReadOnly Property Dependants As IEnumerable(Of ICellEvent)
  overload: Cephei.Cell.List`1.Dependants*
  implements:
  - Cephei.Cell.ICell.Dependants
  nameWithType.vb: List(Of T).Dependants
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cephei.Cell.List(Of T).Dependants
- uid: Cephei.Cell.List`1.Mnemonic
  commentId: P:Cephei.Cell.List`1.Mnemonic
  id: Mnemonic
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Mnemonic
  nameWithType: List<T>.Mnemonic
  fullName: Cephei.Cell.List<T>.Mnemonic
  type: Property
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Mnemonic
    path: ../Cephei.Cell/List.cs
    startLine: 91
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public string Mnemonic { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Mnemonic As String
  overload: Cephei.Cell.List`1.Mnemonic*
  implements:
  - Cephei.Cell.ICell.Mnemonic
  nameWithType.vb: List(Of T).Mnemonic
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).Mnemonic
- uid: Cephei.Cell.List`1.Cephei#Cell#Generic#ICell{T}#Value
  commentId: P:Cephei.Cell.List`1.Cephei#Cell#Generic#ICell{T}#Value
  id: Cephei#Cell#Generic#ICell{T}#Value
  isEii: true
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: ICell<T>.Value
  nameWithType: List<T>.ICell<T>.Value
  fullName: Cephei.Cell.List<T>.Cephei.Cell.Generic.ICell<T>.Value
  type: Property
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Cephei.Cell.Generic.ICell<T>.Value
    path: ../Cephei.Cell/List.cs
    startLine: 92
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: T ICell<T>.Value { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: ReadOnly WriteOnly Property Cephei.Cell.Generic.ICell<T>.Value As T Implements ICell(Of T).Value
  overload: Cephei.Cell.List`1.Cephei#Cell#Generic#ICell{T}#Value*
  implements:
  - Cephei.Cell.Generic.ICell{{T}}.Value
  nameWithType.vb: List(Of T).Cephei.Cell.Generic.ICell<T>.Value
  modifiers.csharp:
  - get
  - set
  fullName.vb: Cephei.Cell.List(Of T).Cephei.Cell.Generic.ICell<T>.Value
  name.vb: Cephei.Cell.Generic.ICell<T>.Value
- uid: Cephei.Cell.List`1.Count
  commentId: P:Cephei.Cell.List`1.Count
  id: Count
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: List<T>.Count
  fullName: Cephei.Cell.List<T>.Count
  type: Property
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Count
    path: ../Cephei.Cell/List.cs
    startLine: 94
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Cephei.Cell.List`1.Count*
  nameWithType.vb: List(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cephei.Cell.List(Of T).Count
- uid: Cephei.Cell.List`1.IsReadOnly
  commentId: P:Cephei.Cell.List`1.IsReadOnly
  id: IsReadOnly
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: List<T>.IsReadOnly
  fullName: Cephei.Cell.List<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: IsReadOnly
    path: ../Cephei.Cell/List.cs
    startLine: 96
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: Cephei.Cell.List`1.IsReadOnly*
  nameWithType.vb: List(Of T).IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cephei.Cell.List(Of T).IsReadOnly
- uid: Cephei.Cell.List`1.Item(System.Int32)
  commentId: P:Cephei.Cell.List`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: List<T>.Item[Int32]
  fullName: Cephei.Cell.List<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: this[]
    path: ../Cephei.Cell/List.cs
    startLine: 98
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public ICell<T> this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: Cephei.Cell.Generic.ICell{{T}}
    content.vb: Public Property Item(index As Integer) As ICell(Of T)
  overload: Cephei.Cell.List`1.Item*
  nameWithType.vb: List(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: Cephei.Cell.List`1.Change
  commentId: E:Cephei.Cell.List`1.Change
  id: Change
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Change
  nameWithType: List<T>.Change
  fullName: Cephei.Cell.List<T>.Change
  type: Event
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Change
    path: ../Cephei.Cell/List.cs
    startLine: 123
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public event CellChange Change
    return:
      type: Cephei.Cell.CellChange
    content.vb: Public Event Change As CellChange
  implements:
  - Cephei.Cell.ICell.Change
  nameWithType.vb: List(Of T).Change
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).Change
- uid: Cephei.Cell.List`1.Dispose
  commentId: M:Cephei.Cell.List`1.Dispose
  id: Dispose
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: List<T>.Dispose()
  fullName: Cephei.Cell.List<T>.Dispose()
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Dispose
    path: ../Cephei.Cell/List.cs
    startLine: 125
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Cephei.Cell.List`1.Dispose*
  nameWithType.vb: List(Of T).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).Dispose()
- uid: Cephei.Cell.List`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
  commentId: M:Cephei.Cell.List`1.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
  id: OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: OnChange(CellEvent, ICellEvent, DateTime, ISession)
  nameWithType: List<T>.OnChange(CellEvent, ICellEvent, DateTime, ISession)
  fullName: Cephei.Cell.List<T>.OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: OnChange
    path: ../Cephei.Cell/List.cs
    startLine: 139
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public void OnChange(CellEvent eventType, ICellEvent root, DateTime epoch, ISession session)
    parameters:
    - id: eventType
      type: Cephei.Cell.CellEvent
    - id: root
      type: Cephei.Cell.ICellEvent
    - id: epoch
      type: DateTime
    - id: session
      type: Cephei.Cell.ISession
    content.vb: Public Sub OnChange(eventType As CellEvent, root As ICellEvent, epoch As DateTime, session As ISession)
  overload: Cephei.Cell.List`1.OnChange*
  implements:
  - Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
  nameWithType.vb: List(Of T).OnChange(CellEvent, ICellEvent, DateTime, ISession)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
- uid: Cephei.Cell.List`1.Subscribe(IObserver{`0})
  commentId: M:Cephei.Cell.List`1.Subscribe(IObserver{`0})
  id: Subscribe(IObserver{`0})
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Subscribe(IObserver<T>)
  nameWithType: List<T>.Subscribe(IObserver<T>)
  fullName: Cephei.Cell.List<T>.Subscribe(IObserver<T>)
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Subscribe
    path: ../Cephei.Cell/List.cs
    startLine: 144
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public IDisposable Subscribe(IObserver<T> observer)
    parameters:
    - id: observer
      type: IObserver{{T}}
    return:
      type: IDisposable
    content.vb: Public Function Subscribe(observer As IObserver(Of T)) As IDisposable
  overload: Cephei.Cell.List`1.Subscribe*
  nameWithType.vb: List(Of T).Subscribe(IObserver(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).Subscribe(IObserver(Of T))
  name.vb: Subscribe(IObserver(Of T))
- uid: Cephei.Cell.List`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
  commentId: M:Cephei.Cell.List`1.Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
  id: Subscribe(IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}})
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>)
  nameWithType: List<T>.Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>)
  fullName: Cephei.Cell.List<T>.Subscribe(IObserver<KeyValuePair<Cephei.Cell.ISession, KeyValuePair<System.String, T>>>)
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Subscribe
    path: ../Cephei.Cell/List.cs
    startLine: 149
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public IDisposable Subscribe(IObserver<KeyValuePair<ISession, KeyValuePair<string, T>>> observer)
    parameters:
    - id: observer
      type: IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
    return:
      type: IDisposable
    content.vb: Public Function Subscribe(observer As IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T)))) As IDisposable
  overload: Cephei.Cell.List`1.Subscribe*
  nameWithType.vb: List(Of T).Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).Subscribe(IObserver(Of KeyValuePair(Of Cephei.Cell.ISession, KeyValuePair(Of System.String, T))))
  name.vb: Subscribe(IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T))))
- uid: Cephei.Cell.List`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
  commentId: M:Cephei.Cell.List`1.Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
  id: Subscribe(IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}})
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>)
  nameWithType: List<T>.Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>)
  fullName: Cephei.Cell.List<T>.Subscribe(IObserver<Tuple<Cephei.Cell.ISession, Cephei.Cell.Generic.ICell<T>, Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime>>)
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Subscribe
    path: ../Cephei.Cell/List.cs
    startLine: 154
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public IDisposable Subscribe(IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>> observer)
    parameters:
    - id: observer
      type: IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
    return:
      type: IDisposable
    content.vb: Public Function Subscribe(observer As IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime))) As IDisposable
  overload: Cephei.Cell.List`1.Subscribe*
  nameWithType.vb: List(Of T).Subscribe(IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).Subscribe(IObserver(Of Tuple(Of Cephei.Cell.ISession, Cephei.Cell.Generic.ICell(Of T), Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime)))
  name.vb: Subscribe(IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime)))
- uid: Cephei.Cell.List`1.HasFunction
  commentId: P:Cephei.Cell.List`1.HasFunction
  id: HasFunction
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: HasFunction
  nameWithType: List<T>.HasFunction
  fullName: Cephei.Cell.List<T>.HasFunction
  type: Property
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: HasFunction
    path: ../Cephei.Cell/List.cs
    startLine: 161
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  example: []
  syntax:
    content: public bool HasFunction { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasFunction As Boolean
  overload: Cephei.Cell.List`1.HasFunction*
  see:
  - linkId: Cephei.Cell.ICell.HasFunction
    commentId: P:Cephei.Cell.ICell.HasFunction
  implements:
  - Cephei.Cell.ICell.HasFunction
  nameWithType.vb: List(Of T).HasFunction
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cephei.Cell.List(Of T).HasFunction
- uid: Cephei.Cell.List`1.HasValue
  commentId: P:Cephei.Cell.List`1.HasValue
  id: HasValue
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: HasValue
  nameWithType: List<T>.HasValue
  fullName: Cephei.Cell.List<T>.HasValue
  type: Property
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: HasValue
    path: ../Cephei.Cell/List.cs
    startLine: 163
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  example: []
  syntax:
    content: public bool HasValue { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasValue As Boolean
  overload: Cephei.Cell.List`1.HasValue*
  see:
  - linkId: Cephei.Cell.ICell.HasValue
    commentId: P:Cephei.Cell.ICell.HasValue
  implements:
  - Cephei.Cell.ICell.HasValue
  nameWithType.vb: List(Of T).HasValue
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Cephei.Cell.List(Of T).HasValue
- uid: Cephei.Cell.List`1.Box
  commentId: P:Cephei.Cell.List`1.Box
  id: Box
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Box
  nameWithType: List<T>.Box
  fullName: Cephei.Cell.List<T>.Box
  type: Property
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Box
    path: ../Cephei.Cell/List.cs
    startLine: 166
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  example: []
  syntax:
    content: public object Box { get; set; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public Property Box As Object
  overload: Cephei.Cell.List`1.Box*
  see:
  - linkId: Cephei.Cell.ICell.Box
    commentId: P:Cephei.Cell.ICell.Box
  implements:
  - Cephei.Cell.ICell.Box
  nameWithType.vb: List(Of T).Box
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).Box
- uid: Cephei.Cell.List`1.OnCompleted
  commentId: M:Cephei.Cell.List`1.OnCompleted
  id: OnCompleted
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: OnCompleted()
  nameWithType: List<T>.OnCompleted()
  fullName: Cephei.Cell.List<T>.OnCompleted()
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: OnCompleted
    path: ../Cephei.Cell/List.cs
    startLine: 185
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public void OnCompleted()
    content.vb: Public Sub OnCompleted
  overload: Cephei.Cell.List`1.OnCompleted*
  nameWithType.vb: List(Of T).OnCompleted()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).OnCompleted()
- uid: Cephei.Cell.List`1.OnError(Exception)
  commentId: M:Cephei.Cell.List`1.OnError(Exception)
  id: OnError(Exception)
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: OnError(Exception)
  nameWithType: List<T>.OnError(Exception)
  fullName: Cephei.Cell.List<T>.OnError(Exception)
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: OnError
    path: ../Cephei.Cell/List.cs
    startLine: 189
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public void OnError(Exception error)
    parameters:
    - id: error
      type: Exception
    content.vb: Public Sub OnError(error As Exception)
  overload: Cephei.Cell.List`1.OnError*
  nameWithType.vb: List(Of T).OnError(Exception)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).OnError(Exception)
- uid: Cephei.Cell.List`1.OnNext(`0)
  commentId: M:Cephei.Cell.List`1.OnNext(`0)
  id: OnNext(`0)
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: OnNext(T)
  nameWithType: List<T>.OnNext(T)
  fullName: Cephei.Cell.List<T>.OnNext(T)
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: OnNext
    path: ../Cephei.Cell/List.cs
    startLine: 193
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public void OnNext(T value)
    parameters:
    - id: value
      type: '{T}'
    content.vb: Public Sub OnNext(value As T)
  overload: Cephei.Cell.List`1.OnNext*
  nameWithType.vb: List(Of T).OnNext(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).OnNext(T)
- uid: Cephei.Cell.List`1.IndexOf(Cephei.Cell.Generic.ICell{`0})
  commentId: M:Cephei.Cell.List`1.IndexOf(Cephei.Cell.Generic.ICell{`0})
  id: IndexOf(Cephei.Cell.Generic.ICell{`0})
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: IndexOf(ICell<T>)
  nameWithType: List<T>.IndexOf(ICell<T>)
  fullName: Cephei.Cell.List<T>.IndexOf(Cephei.Cell.Generic.ICell<T>)
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: IndexOf
    path: ../Cephei.Cell/List.cs
    startLine: 200
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public int IndexOf(ICell<T> item)
    parameters:
    - id: item
      type: Cephei.Cell.Generic.ICell{{T}}
    return:
      type: System.Int32
    content.vb: Public Function IndexOf(item As ICell(Of T)) As Integer
  overload: Cephei.Cell.List`1.IndexOf*
  nameWithType.vb: List(Of T).IndexOf(ICell(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).IndexOf(Cephei.Cell.Generic.ICell(Of T))
  name.vb: IndexOf(ICell(Of T))
- uid: Cephei.Cell.List`1.Insert(System.Int32,Cephei.Cell.Generic.ICell{`0})
  commentId: M:Cephei.Cell.List`1.Insert(System.Int32,Cephei.Cell.Generic.ICell{`0})
  id: Insert(System.Int32,Cephei.Cell.Generic.ICell{`0})
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Insert(Int32, ICell<T>)
  nameWithType: List<T>.Insert(Int32, ICell<T>)
  fullName: Cephei.Cell.List<T>.Insert(System.Int32, Cephei.Cell.Generic.ICell<T>)
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Insert
    path: ../Cephei.Cell/List.cs
    startLine: 205
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public void Insert(int index, ICell<T> item)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: Cephei.Cell.Generic.ICell{{T}}
    content.vb: Public Sub Insert(index As Integer, item As ICell(Of T))
  overload: Cephei.Cell.List`1.Insert*
  nameWithType.vb: List(Of T).Insert(Int32, ICell(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).Insert(System.Int32, Cephei.Cell.Generic.ICell(Of T))
  name.vb: Insert(Int32, ICell(Of T))
- uid: Cephei.Cell.List`1.RemoveAt(System.Int32)
  commentId: M:Cephei.Cell.List`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: List<T>.RemoveAt(Int32)
  fullName: Cephei.Cell.List<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: RemoveAt
    path: ../Cephei.Cell/List.cs
    startLine: 212
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: Cephei.Cell.List`1.RemoveAt*
  nameWithType.vb: List(Of T).RemoveAt(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).RemoveAt(System.Int32)
- uid: Cephei.Cell.List`1.Add(Cephei.Cell.Generic.ICell{`0})
  commentId: M:Cephei.Cell.List`1.Add(Cephei.Cell.Generic.ICell{`0})
  id: Add(Cephei.Cell.Generic.ICell{`0})
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Add(ICell<T>)
  nameWithType: List<T>.Add(ICell<T>)
  fullName: Cephei.Cell.List<T>.Add(Cephei.Cell.Generic.ICell<T>)
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Add
    path: ../Cephei.Cell/List.cs
    startLine: 222
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public void Add(ICell<T> item)
    parameters:
    - id: item
      type: Cephei.Cell.Generic.ICell{{T}}
    content.vb: Public Sub Add(item As ICell(Of T))
  overload: Cephei.Cell.List`1.Add*
  nameWithType.vb: List(Of T).Add(ICell(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).Add(Cephei.Cell.Generic.ICell(Of T))
  name.vb: Add(ICell(Of T))
- uid: Cephei.Cell.List`1.Clear
  commentId: M:Cephei.Cell.List`1.Clear
  id: Clear
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: List<T>.Clear()
  fullName: Cephei.Cell.List<T>.Clear()
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Clear
    path: ../Cephei.Cell/List.cs
    startLine: 229
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Cephei.Cell.List`1.Clear*
  nameWithType.vb: List(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).Clear()
- uid: Cephei.Cell.List`1.Contains(Cephei.Cell.Generic.ICell{`0})
  commentId: M:Cephei.Cell.List`1.Contains(Cephei.Cell.Generic.ICell{`0})
  id: Contains(Cephei.Cell.Generic.ICell{`0})
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Contains(ICell<T>)
  nameWithType: List<T>.Contains(ICell<T>)
  fullName: Cephei.Cell.List<T>.Contains(Cephei.Cell.Generic.ICell<T>)
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Contains
    path: ../Cephei.Cell/List.cs
    startLine: 235
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public bool Contains(ICell<T> item)
    parameters:
    - id: item
      type: Cephei.Cell.Generic.ICell{{T}}
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As ICell(Of T)) As Boolean
  overload: Cephei.Cell.List`1.Contains*
  nameWithType.vb: List(Of T).Contains(ICell(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).Contains(Cephei.Cell.Generic.ICell(Of T))
  name.vb: Contains(ICell(Of T))
- uid: Cephei.Cell.List`1.CopyTo(Cephei.Cell.Generic.ICell{`0}[],System.Int32)
  commentId: M:Cephei.Cell.List`1.CopyTo(Cephei.Cell.Generic.ICell{`0}[],System.Int32)
  id: CopyTo(Cephei.Cell.Generic.ICell{`0}[],System.Int32)
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: CopyTo(ICell<T>[], Int32)
  nameWithType: List<T>.CopyTo(ICell<T>[], Int32)
  fullName: Cephei.Cell.List<T>.CopyTo(Cephei.Cell.Generic.ICell<T>[], System.Int32)
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: CopyTo
    path: ../Cephei.Cell/List.cs
    startLine: 240
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public void CopyTo(ICell<T>[] array, int arrayIndex)
    parameters:
    - id: array
      type: Cephei.Cell.Generic.ICell{{T}}[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As ICell(Of T)(), arrayIndex As Integer)
  overload: Cephei.Cell.List`1.CopyTo*
  nameWithType.vb: List(Of T).CopyTo(ICell(Of T)(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).CopyTo(Cephei.Cell.Generic.ICell(Of T)(), System.Int32)
  name.vb: CopyTo(ICell(Of T)(), Int32)
- uid: Cephei.Cell.List`1.Remove(Cephei.Cell.Generic.ICell{`0})
  commentId: M:Cephei.Cell.List`1.Remove(Cephei.Cell.Generic.ICell{`0})
  id: Remove(Cephei.Cell.Generic.ICell{`0})
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: Remove(ICell<T>)
  nameWithType: List<T>.Remove(ICell<T>)
  fullName: Cephei.Cell.List<T>.Remove(Cephei.Cell.Generic.ICell<T>)
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Remove
    path: ../Cephei.Cell/List.cs
    startLine: 245
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  syntax:
    content: public bool Remove(ICell<T> item)
    parameters:
    - id: item
      type: Cephei.Cell.Generic.ICell{{T}}
    return:
      type: System.Boolean
    content.vb: Public Function Remove(item As ICell(Of T)) As Boolean
  overload: Cephei.Cell.List`1.Remove*
  nameWithType.vb: List(Of T).Remove(ICell(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).Remove(Cephei.Cell.Generic.ICell(Of T))
  name.vb: Remove(ICell(Of T))
- uid: Cephei.Cell.List`1.GetEnumerator
  commentId: M:Cephei.Cell.List`1.GetEnumerator
  id: GetEnumerator
  parent: Cephei.Cell.List`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: List<T>.GetEnumerator()
  fullName: Cephei.Cell.List<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Cephei.Cell/List.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: GetEnumerator
    path: ../Cephei.Cell/List.cs
    startLine: 257
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  summary: "\nbefore eunumerating, add this list the dependants insetad of the content of the list\n"
  example: []
  syntax:
    content: public IEnumerator<ICell<T>> GetEnumerator()
    return:
      type: IEnumerator{Cephei.Cell.Generic.ICell{{T}}}
      description: ''
    content.vb: Public Function GetEnumerator As IEnumerator(Of ICell(Of T))
  overload: Cephei.Cell.List`1.GetEnumerator*
  nameWithType.vb: List(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Cephei.Cell.List(Of T).GetEnumerator()
references:
- uid: Cephei.Cell
  commentId: N:Cephei.Cell
  name: Cephei.Cell
  nameWithType: Cephei.Cell
  fullName: Cephei.Cell
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Cephei.Cell.Generic.ICell{{T}}
  commentId: T:Cephei.Cell.Generic.ICell{`0}
  parent: Cephei.Cell.Generic
  definition: Cephei.Cell.Generic.ICell`1
  name: ICell<T>
  nameWithType: ICell<T>
  fullName: Cephei.Cell.Generic.ICell<T>
  nameWithType.vb: ICell(Of T)
  fullName.vb: Cephei.Cell.Generic.ICell(Of T)
  name.vb: ICell(Of T)
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cephei.Cell.ICell
  commentId: T:Cephei.Cell.ICell
  parent: Cephei.Cell
  name: ICell
  nameWithType: ICell
  fullName: Cephei.Cell.ICell
- uid: Cephei.Cell.ICellEvent
  commentId: T:Cephei.Cell.ICellEvent
  parent: Cephei.Cell
  name: ICellEvent
  nameWithType: ICellEvent
  fullName: Cephei.Cell.ICellEvent
- uid: IObservable{{T}}
  commentId: '!:IObservable{`0}'
  definition: IObservable`1
  name: IObservable<T>
  nameWithType: IObservable<T>
  fullName: IObservable<T>
  nameWithType.vb: IObservable(Of T)
  fullName.vb: IObservable(Of T)
  name.vb: IObservable(Of T)
  spec.csharp:
  - uid: IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
  commentId: '!:IObservable{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}}'
  definition: IObservable`1
  name: IObservable<KeyValuePair<ISession, KeyValuePair<String, T>>>
  nameWithType: IObservable<KeyValuePair<ISession, KeyValuePair<String, T>>>
  fullName: IObservable<KeyValuePair<Cephei.Cell.ISession, KeyValuePair<System.String, T>>>
  nameWithType.vb: IObservable(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T)))
  fullName.vb: IObservable(Of KeyValuePair(Of Cephei.Cell.ISession, KeyValuePair(Of System.String, T)))
  name.vb: IObservable(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T)))
  spec.csharp:
  - uid: IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
  commentId: '!:IObservable{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}'
  definition: IObservable`1
  name: IObservable<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>
  nameWithType: IObservable<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>
  fullName: IObservable<Tuple<Cephei.Cell.ISession, Cephei.Cell.Generic.ICell<T>, Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime>>
  nameWithType.vb: IObservable(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime))
  fullName.vb: IObservable(Of Tuple(Of Cephei.Cell.ISession, Cephei.Cell.Generic.ICell(Of T), Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime))
  name.vb: IObservable(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime))
  spec.csharp:
  - uid: IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Tuple`5
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Tuple`5
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IObserver{{T}}
  commentId: '!:IObserver{`0}'
  definition: IObserver`1
  name: IObserver<T>
  nameWithType: IObserver<T>
  fullName: IObserver<T>
  nameWithType.vb: IObserver(Of T)
  fullName.vb: IObserver(Of T)
  name.vb: IObserver(Of T)
  spec.csharp:
  - uid: IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: IObserver
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: IObserver
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Cephei.Cell.Generic.ICell`1
  commentId: T:Cephei.Cell.Generic.ICell`1
  name: ICell<T>
  nameWithType: ICell<T>
  fullName: Cephei.Cell.Generic.ICell<T>
  nameWithType.vb: ICell(Of T)
  fullName.vb: Cephei.Cell.Generic.ICell(Of T)
  name.vb: ICell(Of T)
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cephei.Cell.Generic
  commentId: N:Cephei.Cell.Generic
  name: Cephei.Cell.Generic
  nameWithType: Cephei.Cell.Generic
  fullName: Cephei.Cell.Generic
- uid: IObservable`1
  isExternal: true
  name: IObservable<>
  nameWithType: IObservable<>
  fullName: IObservable<>
  nameWithType.vb: IObservable(Of )
  fullName.vb: IObservable(Of )
  name.vb: IObservable(Of )
  spec.csharp:
  - uid: IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IObserver`1
  isExternal: true
  name: IObserver<>
  nameWithType: IObserver<>
  fullName: IObserver<>
  nameWithType.vb: IObserver(Of )
  fullName.vb: IObserver(Of )
  name.vb: IObserver(Of )
  spec.csharp:
  - uid: IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: IObserver
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: IObserver
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Cephei.Cell.List`1.#ctor*
  commentId: Overload:Cephei.Cell.List`1.#ctor
  name: List
  nameWithType: List<T>.List
  fullName: Cephei.Cell.List<T>.List
  nameWithType.vb: List(Of T).List
  fullName.vb: Cephei.Cell.List(Of T).List
- uid: IList{Cephei.Cell.Generic.ICell{{T}}}
  commentId: '!:IList{Cephei.Cell.Generic.ICell{`0}}'
  definition: IList`1
  name: IList<ICell<T>>
  nameWithType: IList<ICell<T>>
  fullName: IList<Cephei.Cell.Generic.ICell<T>>
  nameWithType.vb: IList(Of ICell(Of T))
  fullName.vb: IList(Of Cephei.Cell.Generic.ICell(Of T))
  name.vb: IList(Of ICell(Of T))
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{Cephei.Cell.Generic.ICell{{T}}}
  commentId: '!:IEnumerable{Cephei.Cell.Generic.ICell{`0}}'
  definition: IEnumerable`1
  name: IEnumerable<ICell<T>>
  nameWithType: IEnumerable<ICell<T>>
  fullName: IEnumerable<Cephei.Cell.Generic.ICell<T>>
  nameWithType.vb: IEnumerable(Of ICell(Of T))
  fullName.vb: IEnumerable(Of Cephei.Cell.Generic.ICell(Of T))
  name.vb: IEnumerable(Of ICell(Of T))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Cephei.Cell.List`1.Value*
  commentId: Overload:Cephei.Cell.List`1.Value
  name: Value
  nameWithType: List<T>.Value
  fullName: Cephei.Cell.List<T>.Value
  nameWithType.vb: List(Of T).Value
  fullName.vb: Cephei.Cell.List(Of T).Value
- uid: Cephei.Cell.List`1.Parent*
  commentId: Overload:Cephei.Cell.List`1.Parent
  name: Parent
  nameWithType: List<T>.Parent
  fullName: Cephei.Cell.List<T>.Parent
  nameWithType.vb: List(Of T).Parent
  fullName.vb: Cephei.Cell.List(Of T).Parent
- uid: Cephei.Cell.ICell.Parent
  commentId: P:Cephei.Cell.ICell.Parent
  parent: Cephei.Cell.ICell
  name: Parent
  nameWithType: ICell.Parent
  fullName: Cephei.Cell.ICell.Parent
- uid: Cephei.Cell.List`1.Dependants*
  commentId: Overload:Cephei.Cell.List`1.Dependants
  name: Dependants
  nameWithType: List<T>.Dependants
  fullName: Cephei.Cell.List<T>.Dependants
  nameWithType.vb: List(Of T).Dependants
  fullName.vb: Cephei.Cell.List(Of T).Dependants
- uid: Cephei.Cell.ICell.Dependants
  commentId: P:Cephei.Cell.ICell.Dependants
  parent: Cephei.Cell.ICell
  name: Dependants
  nameWithType: ICell.Dependants
  fullName: Cephei.Cell.ICell.Dependants
- uid: IEnumerable{Cephei.Cell.ICellEvent}
  commentId: '!:IEnumerable{Cephei.Cell.ICellEvent}'
  definition: IEnumerable`1
  name: IEnumerable<ICellEvent>
  nameWithType: IEnumerable<ICellEvent>
  fullName: IEnumerable<Cephei.Cell.ICellEvent>
  nameWithType.vb: IEnumerable(Of ICellEvent)
  fullName.vb: IEnumerable(Of Cephei.Cell.ICellEvent)
  name.vb: IEnumerable(Of ICellEvent)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ICellEvent
    name: ICellEvent
    nameWithType: ICellEvent
    fullName: Cephei.Cell.ICellEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cephei.Cell.ICellEvent
    name: ICellEvent
    nameWithType: ICellEvent
    fullName: Cephei.Cell.ICellEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Cephei.Cell.List`1.Mnemonic*
  commentId: Overload:Cephei.Cell.List`1.Mnemonic
  name: Mnemonic
  nameWithType: List<T>.Mnemonic
  fullName: Cephei.Cell.List<T>.Mnemonic
  nameWithType.vb: List(Of T).Mnemonic
  fullName.vb: Cephei.Cell.List(Of T).Mnemonic
- uid: Cephei.Cell.ICell.Mnemonic
  commentId: P:Cephei.Cell.ICell.Mnemonic
  parent: Cephei.Cell.ICell
  name: Mnemonic
  nameWithType: ICell.Mnemonic
  fullName: Cephei.Cell.ICell.Mnemonic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Cephei.Cell.List`1.Cephei#Cell#Generic#ICell{T}#Value*
  commentId: Overload:Cephei.Cell.List`1.Cephei#Cell#Generic#ICell{T}#Value
  name: ICell<T>.Value
  nameWithType: List<T>.ICell<T>.Value
  fullName: Cephei.Cell.List<T>.Cephei.Cell.Generic.ICell<T>.Value
  nameWithType.vb: List(Of T).Cephei.Cell.Generic.ICell<T>.Value
  fullName.vb: Cephei.Cell.List(Of T).Cephei.Cell.Generic.ICell<T>.Value
  name.vb: Cephei.Cell.Generic.ICell<T>.Value
- uid: Cephei.Cell.Generic.ICell{{T}}.Value
  commentId: P:Cephei.Cell.Generic.ICell{`0}.Value
  parent: Cephei.Cell.Generic.ICell{{T}}
  definition: Cephei.Cell.Generic.ICell`1.Value
  name: Value
  nameWithType: ICell<T>.Value
  fullName: Cephei.Cell.Generic.ICell<T>.Value
  nameWithType.vb: ICell(Of T).Value
  fullName.vb: Cephei.Cell.Generic.ICell(Of T).Value
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Cephei.Cell.Generic.ICell`1.Value
  commentId: P:Cephei.Cell.Generic.ICell`1.Value
  name: Value
  nameWithType: ICell<T>.Value
  fullName: Cephei.Cell.Generic.ICell<T>.Value
  nameWithType.vb: ICell(Of T).Value
  fullName.vb: Cephei.Cell.Generic.ICell(Of T).Value
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Cephei.Cell.List`1.Count*
  commentId: Overload:Cephei.Cell.List`1.Count
  name: Count
  nameWithType: List<T>.Count
  fullName: Cephei.Cell.List<T>.Count
  nameWithType.vb: List(Of T).Count
  fullName.vb: Cephei.Cell.List(Of T).Count
- uid: Cephei.Cell.List`1.IsReadOnly*
  commentId: Overload:Cephei.Cell.List`1.IsReadOnly
  name: IsReadOnly
  nameWithType: List<T>.IsReadOnly
  fullName: Cephei.Cell.List<T>.IsReadOnly
  nameWithType.vb: List(Of T).IsReadOnly
  fullName.vb: Cephei.Cell.List(Of T).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cephei.Cell.List`1.Item*
  commentId: Overload:Cephei.Cell.List`1.Item
  name: Item
  nameWithType: List<T>.Item
  fullName: Cephei.Cell.List<T>.Item
  nameWithType.vb: List(Of T).Item
  fullName.vb: Cephei.Cell.List(Of T).Item
- uid: Cephei.Cell.ICell.Change
  commentId: E:Cephei.Cell.ICell.Change
  parent: Cephei.Cell.ICell
  name: Change
  nameWithType: ICell.Change
  fullName: Cephei.Cell.ICell.Change
- uid: Cephei.Cell.CellChange
  commentId: T:Cephei.Cell.CellChange
  parent: Cephei.Cell
  name: CellChange
  nameWithType: CellChange
  fullName: Cephei.Cell.CellChange
- uid: Cephei.Cell.List`1.Dispose*
  commentId: Overload:Cephei.Cell.List`1.Dispose
  name: Dispose
  nameWithType: List<T>.Dispose
  fullName: Cephei.Cell.List<T>.Dispose
  nameWithType.vb: List(Of T).Dispose
  fullName.vb: Cephei.Cell.List(Of T).Dispose
- uid: Cephei.Cell.List`1.OnChange*
  commentId: Overload:Cephei.Cell.List`1.OnChange
  name: OnChange
  nameWithType: List<T>.OnChange
  fullName: Cephei.Cell.List<T>.OnChange
  nameWithType.vb: List(Of T).OnChange
  fullName.vb: Cephei.Cell.List(Of T).OnChange
- uid: Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
  commentId: M:Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
  parent: Cephei.Cell.ICellEvent
  isExternal: true
  name: OnChange(CellEvent, ICellEvent, DateTime, ISession)
  nameWithType: ICellEvent.OnChange(CellEvent, ICellEvent, DateTime, ISession)
  fullName: Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
  spec.csharp:
  - uid: Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
    name: OnChange
    nameWithType: ICellEvent.OnChange
    fullName: Cephei.Cell.ICellEvent.OnChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.ICellEvent
    name: ICellEvent
    nameWithType: ICellEvent
    fullName: Cephei.Cell.ICellEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
    name: OnChange
    nameWithType: ICellEvent.OnChange
    fullName: Cephei.Cell.ICellEvent.OnChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.ICellEvent
    name: ICellEvent
    nameWithType: ICellEvent
    fullName: Cephei.Cell.ICellEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: )
    nameWithType: )
    fullName: )
- uid: Cephei.Cell.CellEvent
  commentId: T:Cephei.Cell.CellEvent
  parent: Cephei.Cell
  name: CellEvent
  nameWithType: CellEvent
  fullName: Cephei.Cell.CellEvent
- uid: DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: DateTime
- uid: Cephei.Cell.ISession
  commentId: T:Cephei.Cell.ISession
  parent: Cephei.Cell
  name: ISession
  nameWithType: ISession
  fullName: Cephei.Cell.ISession
- uid: Cephei.Cell.List`1.Subscribe*
  commentId: Overload:Cephei.Cell.List`1.Subscribe
  name: Subscribe
  nameWithType: List<T>.Subscribe
  fullName: Cephei.Cell.List<T>.Subscribe
  nameWithType.vb: List(Of T).Subscribe
  fullName.vb: Cephei.Cell.List(Of T).Subscribe
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
- uid: IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,{T}}}}
  commentId: '!:IObserver{KeyValuePair{Cephei.Cell.ISession,KeyValuePair{System.String,`0}}}'
  definition: IObserver`1
  name: IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>
  nameWithType: IObserver<KeyValuePair<ISession, KeyValuePair<String, T>>>
  fullName: IObserver<KeyValuePair<Cephei.Cell.ISession, KeyValuePair<System.String, T>>>
  nameWithType.vb: IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T)))
  fullName.vb: IObserver(Of KeyValuePair(Of Cephei.Cell.ISession, KeyValuePair(Of System.String, T)))
  name.vb: IObserver(Of KeyValuePair(Of ISession, KeyValuePair(Of String, T)))
  spec.csharp:
  - uid: IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: IObserver
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: IObserver
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{{T}},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}
  commentId: '!:IObserver{Tuple{Cephei.Cell.ISession,Cephei.Cell.Generic.ICell{`0},Cephei.Cell.CellEvent,Cephei.Cell.ICell,DateTime}}'
  definition: IObserver`1
  name: IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>
  nameWithType: IObserver<Tuple<ISession, ICell<T>, CellEvent, ICell, DateTime>>
  fullName: IObserver<Tuple<Cephei.Cell.ISession, Cephei.Cell.Generic.ICell<T>, Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime>>
  nameWithType.vb: IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime))
  fullName.vb: IObserver(Of Tuple(Of Cephei.Cell.ISession, Cephei.Cell.Generic.ICell(Of T), Cephei.Cell.CellEvent, Cephei.Cell.ICell, DateTime))
  name.vb: IObserver(Of Tuple(Of ISession, ICell(Of T), CellEvent, ICell, DateTime))
  spec.csharp:
  - uid: IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: IObserver
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Tuple`5
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: IObserver
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Tuple`5
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Cephei.Cell.ICell.HasFunction
  commentId: P:Cephei.Cell.ICell.HasFunction
  parent: Cephei.Cell.ICell
  name: HasFunction
  nameWithType: ICell.HasFunction
  fullName: Cephei.Cell.ICell.HasFunction
- uid: Cephei.Cell.List`1.HasFunction*
  commentId: Overload:Cephei.Cell.List`1.HasFunction
  name: HasFunction
  nameWithType: List<T>.HasFunction
  fullName: Cephei.Cell.List<T>.HasFunction
  nameWithType.vb: List(Of T).HasFunction
  fullName.vb: Cephei.Cell.List(Of T).HasFunction
- uid: Cephei.Cell.ICell.HasValue
  commentId: P:Cephei.Cell.ICell.HasValue
  parent: Cephei.Cell.ICell
  name: HasValue
  nameWithType: ICell.HasValue
  fullName: Cephei.Cell.ICell.HasValue
- uid: Cephei.Cell.List`1.HasValue*
  commentId: Overload:Cephei.Cell.List`1.HasValue
  name: HasValue
  nameWithType: List<T>.HasValue
  fullName: Cephei.Cell.List<T>.HasValue
  nameWithType.vb: List(Of T).HasValue
  fullName.vb: Cephei.Cell.List(Of T).HasValue
- uid: Cephei.Cell.ICell.Box
  commentId: P:Cephei.Cell.ICell.Box
  parent: Cephei.Cell.ICell
  name: Box
  nameWithType: ICell.Box
  fullName: Cephei.Cell.ICell.Box
- uid: Cephei.Cell.List`1.Box*
  commentId: Overload:Cephei.Cell.List`1.Box
  name: Box
  nameWithType: List<T>.Box
  fullName: Cephei.Cell.List<T>.Box
  nameWithType.vb: List(Of T).Box
  fullName.vb: Cephei.Cell.List(Of T).Box
- uid: Cephei.Cell.List`1.OnCompleted*
  commentId: Overload:Cephei.Cell.List`1.OnCompleted
  name: OnCompleted
  nameWithType: List<T>.OnCompleted
  fullName: Cephei.Cell.List<T>.OnCompleted
  nameWithType.vb: List(Of T).OnCompleted
  fullName.vb: Cephei.Cell.List(Of T).OnCompleted
- uid: Cephei.Cell.List`1.OnError*
  commentId: Overload:Cephei.Cell.List`1.OnError
  name: OnError
  nameWithType: List<T>.OnError
  fullName: Cephei.Cell.List<T>.OnError
  nameWithType.vb: List(Of T).OnError
  fullName.vb: Cephei.Cell.List(Of T).OnError
- uid: Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
- uid: Cephei.Cell.List`1.OnNext*
  commentId: Overload:Cephei.Cell.List`1.OnNext
  name: OnNext
  nameWithType: List<T>.OnNext
  fullName: Cephei.Cell.List<T>.OnNext
  nameWithType.vb: List(Of T).OnNext
  fullName.vb: Cephei.Cell.List(Of T).OnNext
- uid: Cephei.Cell.List`1.IndexOf*
  commentId: Overload:Cephei.Cell.List`1.IndexOf
  name: IndexOf
  nameWithType: List<T>.IndexOf
  fullName: Cephei.Cell.List<T>.IndexOf
  nameWithType.vb: List(Of T).IndexOf
  fullName.vb: Cephei.Cell.List(Of T).IndexOf
- uid: Cephei.Cell.List`1.Insert*
  commentId: Overload:Cephei.Cell.List`1.Insert
  name: Insert
  nameWithType: List<T>.Insert
  fullName: Cephei.Cell.List<T>.Insert
  nameWithType.vb: List(Of T).Insert
  fullName.vb: Cephei.Cell.List(Of T).Insert
- uid: Cephei.Cell.List`1.RemoveAt*
  commentId: Overload:Cephei.Cell.List`1.RemoveAt
  name: RemoveAt
  nameWithType: List<T>.RemoveAt
  fullName: Cephei.Cell.List<T>.RemoveAt
  nameWithType.vb: List(Of T).RemoveAt
  fullName.vb: Cephei.Cell.List(Of T).RemoveAt
- uid: Cephei.Cell.List`1.Add*
  commentId: Overload:Cephei.Cell.List`1.Add
  name: Add
  nameWithType: List<T>.Add
  fullName: Cephei.Cell.List<T>.Add
  nameWithType.vb: List(Of T).Add
  fullName.vb: Cephei.Cell.List(Of T).Add
- uid: Cephei.Cell.List`1.Clear*
  commentId: Overload:Cephei.Cell.List`1.Clear
  name: Clear
  nameWithType: List<T>.Clear
  fullName: Cephei.Cell.List<T>.Clear
  nameWithType.vb: List(Of T).Clear
  fullName.vb: Cephei.Cell.List(Of T).Clear
- uid: Cephei.Cell.List`1.Contains*
  commentId: Overload:Cephei.Cell.List`1.Contains
  name: Contains
  nameWithType: List<T>.Contains
  fullName: Cephei.Cell.List<T>.Contains
  nameWithType.vb: List(Of T).Contains
  fullName.vb: Cephei.Cell.List(Of T).Contains
- uid: Cephei.Cell.List`1.CopyTo*
  commentId: Overload:Cephei.Cell.List`1.CopyTo
  name: CopyTo
  nameWithType: List<T>.CopyTo
  fullName: Cephei.Cell.List<T>.CopyTo
  nameWithType.vb: List(Of T).CopyTo
  fullName.vb: Cephei.Cell.List(Of T).CopyTo
- uid: Cephei.Cell.Generic.ICell{{T}}[]
  isExternal: true
  name: ICell<T>[]
  nameWithType: ICell<T>[]
  fullName: Cephei.Cell.Generic.ICell<T>[]
  nameWithType.vb: ICell(Of T)()
  fullName.vb: Cephei.Cell.Generic.ICell(Of T)()
  name.vb: ICell(Of T)()
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Cephei.Cell.List`1.Remove*
  commentId: Overload:Cephei.Cell.List`1.Remove
  name: Remove
  nameWithType: List<T>.Remove
  fullName: Cephei.Cell.List<T>.Remove
  nameWithType.vb: List(Of T).Remove
  fullName.vb: Cephei.Cell.List(Of T).Remove
- uid: Cephei.Cell.List`1.GetEnumerator*
  commentId: Overload:Cephei.Cell.List`1.GetEnumerator
  name: GetEnumerator
  nameWithType: List<T>.GetEnumerator
  fullName: Cephei.Cell.List<T>.GetEnumerator
  nameWithType.vb: List(Of T).GetEnumerator
  fullName.vb: Cephei.Cell.List(Of T).GetEnumerator
- uid: IEnumerator{Cephei.Cell.Generic.ICell{{T}}}
  commentId: '!:IEnumerator{Cephei.Cell.Generic.ICell{`0}}'
  definition: IEnumerator`1
  name: IEnumerator<ICell<T>>
  nameWithType: IEnumerator<ICell<T>>
  fullName: IEnumerator<Cephei.Cell.Generic.ICell<T>>
  nameWithType.vb: IEnumerator(Of ICell(Of T))
  fullName.vb: IEnumerator(Of Cephei.Cell.Generic.ICell(Of T))
  name.vb: IEnumerator(Of ICell(Of T))
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
