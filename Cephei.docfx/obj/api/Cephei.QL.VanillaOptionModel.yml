### YamlMime:ManagedReference
items:
- uid: Cephei.QL.VanillaOptionModel
  commentId: T:Cephei.QL.VanillaOptionModel
  id: VanillaOptionModel
  parent: Cephei.QL
  children:
  - Cephei.QL.VanillaOptionModel.#ctor(Cephei.Cell.Generic.ICell<QLNet.StrikedTypePayoff> * Cephei.Cell.Generic.ICell<QLNet.Exercise> * Cephei.Cell.Generic.ICell<QLNet.IPricingEngine> * Cephei.Cell.Generic.ICell<QLNet.Date>)
  - Cephei.QL.VanillaOptionModel.CASH(unit)
  - Cephei.QL.VanillaOptionModel.Delta(unit)
  - Cephei.QL.VanillaOptionModel.DeltaForward(unit)
  - Cephei.QL.VanillaOptionModel.DividendRho(unit)
  - Cephei.QL.VanillaOptionModel.Elasticity(unit)
  - Cephei.QL.VanillaOptionModel.ErrorEstimate(unit)
  - Cephei.QL.VanillaOptionModel.EvaluationDate(unit)
  - Cephei.QL.VanillaOptionModel.exercise(unit)
  - Cephei.QL.VanillaOptionModel.Exercise(unit)
  - Cephei.QL.VanillaOptionModel.Gamma(unit)
  - Cephei.QL.VanillaOptionModel.ImpliedVolatility(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<int> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.VanillaOptionModel.IsExpired(unit)
  - Cephei.QL.VanillaOptionModel.ItmCashProbability(unit)
  - Cephei.QL.VanillaOptionModel.NPV(unit)
  - Cephei.QL.VanillaOptionModel.payoff(unit)
  - Cephei.QL.VanillaOptionModel.Payoff(unit)
  - Cephei.QL.VanillaOptionModel.PricingEngine(unit)
  - Cephei.QL.VanillaOptionModel.Result(Cephei.Cell.Generic.ICell<string>)
  - Cephei.QL.VanillaOptionModel.Rho(unit)
  - Cephei.QL.VanillaOptionModel.SetPricingEngine(Cephei.Cell.Generic.ICell<QLNet.IPricingEngine>)
  - Cephei.QL.VanillaOptionModel.StrikeSensitivity(unit)
  - Cephei.QL.VanillaOptionModel.Theta(unit)
  - Cephei.QL.VanillaOptionModel.ThetaPerDay(unit)
  - Cephei.QL.VanillaOptionModel.ValuationDate(unit)
  - Cephei.QL.VanillaOptionModel.Vega(unit)
  langs:
  - csharp
  - vb
  name: VanillaOptionModel
  nameWithType: Cephei.QL.VanillaOptionModel
  fullName: Cephei.QL.VanillaOptionModel
  type: Class
  source:
    id: Cephei.QL.VanillaOptionModel
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 35
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: >-
      [<AutoSerializable(true)>]

      type VanillaOptionModel (payoff:ICell<StrikedTypePayoff>, exercise:ICell<Exercise>, pricingEngine:ICell<IPricingEngine>, evaluationDate:ICell<Date>)
          inherit Model<VanillaOption>
          interface IDictionary<string,ICell>
          interface ICollection<KeyValuePair<string,ICell>>
          interface IReadOnlyDictionary<string,ICell>
          interface IReadOnlyCollection<KeyValuePair<string,ICell>>
          interface IEnumerable<KeyValuePair<string,ICell>>
          interface IDictionary
          interface ICollection
          interface IEnumerable
          interface IObservable<ICell>
          interface IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
          interface IObservable<ISession * Model * CellEvent * ICell * DateTime>
          interface IObservable<KeyValuePair<string,float>>
          interface IObservable<KeyValuePair<string,int>>
          interface IObservable<KeyValuePair<string,decimal>>
          interface ICell<VanillaOption>
          interface ICell
          interface ICellEvent
          interface IObservable<VanillaOption>
          interface IObservable<KeyValuePair<ISession,KeyValuePair<string,VanillaOption>>>
          interface IObservable<ISession * ICell<VanillaOption> * CellEvent * ICell * DateTime>
          interface IObserver<VanillaOption>
    parameters:
    - id: payoff
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.StrikedTypePayoff>
      attributes: []
    - id: exercise
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Exercise>
      attributes: []
    - id: pricingEngine
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.IPricingEngine>
      attributes: []
    - id: evaluationDate
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Date>
      attributes: []
    typeParameters: []
  inheritance:
  - TypeRef:System.Object
  - TypeRef:System.Collections.Concurrent.ConcurrentDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:Cephei.Cell.Model
  - TypeRef:Cephei.Cell.Generic.Model`1<QLNet.VanillaOption>
  implements:
  - TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.VanillaOption>
  - TypeRef:Cephei.Cell.ICell
  - TypeRef:Cephei.Cell.ICellEvent
  - TypeRef:System.Collections.Generic.ICollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IReadOnlyCollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IReadOnlyDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:System.Collections.ICollection
  - TypeRef:System.Collections.IDictionary
  - TypeRef:System.Collections.IEnumerable
  - TypeRef:System.IObservable`1<Cephei.Cell.ICell>
  - TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell`1<QLNet.VanillaOption> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  - TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  - TypeRef:System.IObservable`1<QLNet.VanillaOption>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,QLNet.VanillaOption>>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.decimal>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.float>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.int>>
  - TypeRef:System.IObserver`1<QLNet.VanillaOption>
  inheritedMembers:
  - Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell<'T>)
  - Cephei.Cell.Generic.Model`1.OnCompleted(unit)
  - Cephei.Cell.Generic.Model`1.OnError(exn)
  - Cephei.Cell.Generic.Model`1.OnNext('T)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<'T>)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>>)
  - Cephei.Cell.Generic.Model`1.Value(unit)
  - Cephei.Cell.Model.As(string)
  - Cephei.Cell.Model.Bind(unit)
  - Cephei.Cell.Model.Box(unit)
  - Cephei.Cell.Model.Change()
  - Cephei.Cell.Model.Create(Unit -> 'T * string)
  - Cephei.Cell.Model.CreateValue('T * string)
  - Cephei.Cell.Model.Dependants(unit)
  - Cephei.Cell.Model.Dispose(unit)
  - Cephei.Cell.Model.GetOrAdd(string * Cephei.Cell.ICell)
  - Cephei.Cell.Model.HasFunction(unit)
  - Cephei.Cell.Model.HasValue(unit)
  - Cephei.Cell.Model.Item(string)
  - Cephei.Cell.Model.Mnemonic(unit)
  - Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession)
  - Cephei.Cell.Model.Parent(unit)
  - Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ICell>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,float>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,int>>)
  - Cephei.Cell.Model.TryAdd(string * Cephei.Cell.ICell)
  - Cephei.Cell.Model.TryRemove(string * Cephei.Cell.ICell byref)
  - Cephei.Cell.Model.TryUpdate(string * Cephei.Cell.ICell * Cephei.Cell.ICell)
  - Cephei.Cell.Model.add_Change(Cephei.Cell.CellChange)
  - Cephei.Cell.Model.remove_Change(Cephei.Cell.CellChange)
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * 'TValue * System.Func<'TKey,'TValue,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Clear(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey('TKey)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Count(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * System.Func<'TKey,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Item('TKey)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Keys(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.ToArray(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd('TKey * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue('TKey * 'TValue byref)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove('TKey * 'TValue byref)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate('TKey * 'TValue * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Values(unit)
  attributes:
  - type: Microsoft.FSharp.Core.AutoSerializableAttribute
    arguments:
    - type: System.Boolean
      value: true
    namedArguments: []
- uid: Cephei.QL.VanillaOptionModel.#ctor(Cephei.Cell.Generic.ICell<QLNet.StrikedTypePayoff> * Cephei.Cell.Generic.ICell<QLNet.Exercise> * Cephei.Cell.Generic.ICell<QLNet.IPricingEngine> * Cephei.Cell.Generic.ICell<QLNet.Date>)
  commentId: M:Cephei.QL.VanillaOptionModel.#ctor(Cephei.Cell.Generic.ICell{QLNet.StrikedTypePayoff},Cephei.Cell.Generic.ICell{QLNet.Exercise},Cephei.Cell.Generic.ICell{QLNet.IPricingEngine},Cephei.Cell.Generic.ICell{QLNet.Date})
  id: '#ctor(Cephei.Cell.Generic.ICell<QLNet.StrikedTypePayoff> * Cephei.Cell.Generic.ICell<QLNet.Exercise> * Cephei.Cell.Generic.ICell<QLNet.IPricingEngine> * Cephei.Cell.Generic.ICell<QLNet.Date>)'
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'new: ICell<StrikedTypePayoff> * ICell<Exercise> * ICell<IPricingEngine> * ICell<Date> -> VanillaOptionModel'
  nameWithType: 'new: ICell<StrikedTypePayoff> * ICell<Exercise> * ICell<IPricingEngine> * ICell<Date> -> VanillaOptionModel'
  fullName: 'new: Cephei.Cell.Generic.ICell<QLNet.StrikedTypePayoff> * Cephei.Cell.Generic.ICell<QLNet.Exercise> * Cephei.Cell.Generic.ICell<QLNet.IPricingEngine> * Cephei.Cell.Generic.ICell<QLNet.Date> -> Cephei.QL.VanillaOptionModel'
  type: Constructor
  source:
    id: Cephei.QL.VanillaOptionModel.#ctor(Cephei.Cell.Generic.ICell<QLNet.StrikedTypePayoff> * Cephei.Cell.Generic.ICell<QLNet.Exercise> * Cephei.Cell.Generic.ICell<QLNet.IPricingEngine> * Cephei.Cell.Generic.ICell<QLNet.Date>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 35
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  summary: Implicit constructor.
  syntax:
    content: 'new: payoff:ICell<StrikedTypePayoff> * exercise:ICell<Exercise> * pricingEngine:ICell<IPricingEngine> * evaluationDate:ICell<Date> -> VanillaOptionModel'
    parameters:
    - id: payoff
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.StrikedTypePayoff>
      attributes: []
    - id: exercise
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Exercise>
      attributes: []
    - id: pricingEngine
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.IPricingEngine>
      attributes: []
    - id: evaluationDate
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Date>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.QL.VanillaOptionModel
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.#ctor*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.ImpliedVolatility(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<int> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.VanillaOptionModel.ImpliedVolatility(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{QLNet.GeneralizedBlackScholesProcess},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Int32},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Double})
  id: ImpliedVolatility(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<int> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<double>)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'member ImpliedVolatility: ICell<double> -> ICell<GeneralizedBlackScholesProcess> -> ICell<double> -> ICell<int> -> ICell<double> -> ICell<double> -> ICell<float>'
  nameWithType: 'member VanillaOptionModel.ImpliedVolatility: ICell<double> -> ICell<GeneralizedBlackScholesProcess> -> ICell<double> -> ICell<int> -> ICell<double> -> ICell<double> -> ICell<float>'
  fullName: 'member Cephei.QL.VanillaOptionModel.ImpliedVolatility: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<int> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.VanillaOptionModel.ImpliedVolatility(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<int> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 88
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member ImpliedVolatility: targetValue:ICell<double> -> Process:ICell<GeneralizedBlackScholesProcess> -> accuracy:ICell<double> -> maxEvaluations:ICell<int> -> minVol:ICell<double> -> maxVol:ICell<double> -> ICell<float>'
    parameters:
    - id: targetValue
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: Process
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.GeneralizedBlackScholesProcess>
      attributes: []
    - id: accuracy
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: maxEvaluations
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
    - id: minVol
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: maxVol
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.ImpliedVolatility*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.Result(Cephei.Cell.Generic.ICell<string>)
  commentId: M:Cephei.QL.VanillaOptionModel.Result(Cephei.Cell.Generic.ICell{System.String})
  id: Result(Cephei.Cell.Generic.ICell<string>)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'member Result: ICell<string> -> ICell<obj>'
  nameWithType: 'member VanillaOptionModel.Result: ICell<string> -> ICell<obj>'
  fullName: 'member Cephei.QL.VanillaOptionModel.Result: Cephei.Cell.Generic.ICell<string> -> Cephei.Cell.Generic.ICell<obj>'
  type: Method
  source:
    id: Cephei.QL.VanillaOptionModel.Result(Cephei.Cell.Generic.ICell<string>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 107
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Result: tag:ICell<string> -> ICell<obj>'
    parameters:
    - id: tag
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.string>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.obj>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.Result*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.SetPricingEngine(Cephei.Cell.Generic.ICell<QLNet.IPricingEngine>)
  commentId: M:Cephei.QL.VanillaOptionModel.SetPricingEngine(Cephei.Cell.Generic.ICell{QLNet.IPricingEngine})
  id: SetPricingEngine(Cephei.Cell.Generic.ICell<QLNet.IPricingEngine>)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'member SetPricingEngine: ICell<IPricingEngine> -> ICell<VanillaOption>'
  nameWithType: 'member VanillaOptionModel.SetPricingEngine: ICell<IPricingEngine> -> ICell<VanillaOption>'
  fullName: 'member Cephei.QL.VanillaOptionModel.SetPricingEngine: Cephei.Cell.Generic.ICell<QLNet.IPricingEngine> -> Cephei.Cell.Generic.ICell<QLNet.VanillaOption>'
  type: Method
  source:
    id: Cephei.QL.VanillaOptionModel.SetPricingEngine(Cephei.Cell.Generic.ICell<QLNet.IPricingEngine>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 109
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member SetPricingEngine: e:ICell<IPricingEngine> -> ICell<VanillaOption>'
    parameters:
    - id: e
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.IPricingEngine>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.VanillaOption>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.SetPricingEngine*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.payoff(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.payoff
  id: payoff(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property payoff: ICell<Payoff>'
  nameWithType: 'property VanillaOptionModel.payoff: ICell<Payoff>'
  fullName: 'property Cephei.QL.VanillaOptionModel.payoff: Cephei.Cell.Generic.ICell<QLNet.Payoff>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.payoff(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 84
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property payoff: ICell<Payoff> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Payoff>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.payoff*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.exercise(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.exercise
  id: exercise(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property exercise: ICell<Exercise>'
  nameWithType: 'property VanillaOptionModel.exercise: ICell<Exercise>'
  fullName: 'property Cephei.QL.VanillaOptionModel.exercise: Cephei.Cell.Generic.ICell<QLNet.Exercise>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.exercise(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 85
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property exercise: ICell<Exercise> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Exercise>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.exercise*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.Vega(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.Vega
  id: Vega(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property Vega: ICell<float>'
  nameWithType: 'property VanillaOptionModel.Vega: ICell<float>'
  fullName: 'property Cephei.QL.VanillaOptionModel.Vega: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.Vega(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 101
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Vega: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.Vega*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.ValuationDate(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.ValuationDate
  id: ValuationDate(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property ValuationDate: ICell<Date>'
  nameWithType: 'property VanillaOptionModel.ValuationDate: ICell<Date>'
  fullName: 'property Cephei.QL.VanillaOptionModel.ValuationDate: Cephei.Cell.Generic.ICell<QLNet.Date>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.ValuationDate(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 111
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property ValuationDate: ICell<Date> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Date>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.ValuationDate*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.ThetaPerDay(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.ThetaPerDay
  id: ThetaPerDay(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property ThetaPerDay: ICell<float>'
  nameWithType: 'property VanillaOptionModel.ThetaPerDay: ICell<float>'
  fullName: 'property Cephei.QL.VanillaOptionModel.ThetaPerDay: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.ThetaPerDay(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 100
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property ThetaPerDay: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.ThetaPerDay*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.Theta(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.Theta
  id: Theta(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property Theta: ICell<float>'
  nameWithType: 'property VanillaOptionModel.Theta: ICell<float>'
  fullName: 'property Cephei.QL.VanillaOptionModel.Theta: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.Theta(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 99
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Theta: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.Theta*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.StrikeSensitivity(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.StrikeSensitivity
  id: StrikeSensitivity(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property StrikeSensitivity: ICell<float>'
  nameWithType: 'property VanillaOptionModel.StrikeSensitivity: ICell<float>'
  fullName: 'property Cephei.QL.VanillaOptionModel.StrikeSensitivity: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.StrikeSensitivity(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 98
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property StrikeSensitivity: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.StrikeSensitivity*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.Rho(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.Rho
  id: Rho(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property Rho: ICell<float>'
  nameWithType: 'property VanillaOptionModel.Rho: ICell<float>'
  fullName: 'property Cephei.QL.VanillaOptionModel.Rho: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.Rho(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 97
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Rho: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.Rho*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.PricingEngine(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.PricingEngine
  id: PricingEngine(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property PricingEngine: ICell<IPricingEngine>'
  nameWithType: 'property VanillaOptionModel.PricingEngine: ICell<IPricingEngine>'
  fullName: 'property Cephei.QL.VanillaOptionModel.PricingEngine: Cephei.Cell.Generic.ICell<QLNet.IPricingEngine>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.PricingEngine(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 87
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property PricingEngine: ICell<IPricingEngine> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.IPricingEngine>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.PricingEngine*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.Payoff(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.Payoff
  id: Payoff(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property Payoff: ICell<Payoff>'
  nameWithType: 'property VanillaOptionModel.Payoff: ICell<Payoff>'
  fullName: 'property Cephei.QL.VanillaOptionModel.Payoff: Cephei.Cell.Generic.ICell<QLNet.Payoff>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.Payoff(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 103
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Payoff: ICell<Payoff> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Payoff>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.Payoff*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.NPV(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.NPV
  id: NPV(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property NPV: ICell<float>'
  nameWithType: 'property VanillaOptionModel.NPV: ICell<float>'
  fullName: 'property Cephei.QL.VanillaOptionModel.NPV: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.NPV(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 106
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property NPV: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.NPV*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.ItmCashProbability(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.ItmCashProbability
  id: ItmCashProbability(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property ItmCashProbability: ICell<float>'
  nameWithType: 'property VanillaOptionModel.ItmCashProbability: ICell<float>'
  fullName: 'property Cephei.QL.VanillaOptionModel.ItmCashProbability: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.ItmCashProbability(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 96
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property ItmCashProbability: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.ItmCashProbability*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.IsExpired(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.IsExpired
  id: IsExpired(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property IsExpired: ICell<bool>'
  nameWithType: 'property VanillaOptionModel.IsExpired: ICell<bool>'
  fullName: 'property Cephei.QL.VanillaOptionModel.IsExpired: Cephei.Cell.Generic.ICell<bool>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.IsExpired(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 95
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property IsExpired: ICell<bool> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.IsExpired*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.Gamma(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.Gamma
  id: Gamma(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property Gamma: ICell<float>'
  nameWithType: 'property VanillaOptionModel.Gamma: ICell<float>'
  fullName: 'property Cephei.QL.VanillaOptionModel.Gamma: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.Gamma(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 94
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Gamma: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.Gamma*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.Exercise(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.Exercise
  id: Exercise(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property Exercise: ICell<Exercise>'
  nameWithType: 'property VanillaOptionModel.Exercise: ICell<Exercise>'
  fullName: 'property Cephei.QL.VanillaOptionModel.Exercise: Cephei.Cell.Generic.ICell<QLNet.Exercise>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.Exercise(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 102
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Exercise: ICell<Exercise> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Exercise>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.Exercise*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.EvaluationDate(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.EvaluationDate
  id: EvaluationDate(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property EvaluationDate: ICell<Date>'
  nameWithType: 'property VanillaOptionModel.EvaluationDate: ICell<Date>'
  fullName: 'property Cephei.QL.VanillaOptionModel.EvaluationDate: Cephei.Cell.Generic.ICell<QLNet.Date>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.EvaluationDate(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 86
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property EvaluationDate: ICell<Date> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Date>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.EvaluationDate*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.ErrorEstimate(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.ErrorEstimate
  id: ErrorEstimate(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property ErrorEstimate: ICell<float>'
  nameWithType: 'property VanillaOptionModel.ErrorEstimate: ICell<float>'
  fullName: 'property Cephei.QL.VanillaOptionModel.ErrorEstimate: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.ErrorEstimate(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 105
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property ErrorEstimate: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.ErrorEstimate*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.Elasticity(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.Elasticity
  id: Elasticity(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property Elasticity: ICell<float>'
  nameWithType: 'property VanillaOptionModel.Elasticity: ICell<float>'
  fullName: 'property Cephei.QL.VanillaOptionModel.Elasticity: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.Elasticity(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 93
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Elasticity: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.Elasticity*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.DividendRho(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.DividendRho
  id: DividendRho(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property DividendRho: ICell<float>'
  nameWithType: 'property VanillaOptionModel.DividendRho: ICell<float>'
  fullName: 'property Cephei.QL.VanillaOptionModel.DividendRho: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.DividendRho(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 92
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property DividendRho: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.DividendRho*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.DeltaForward(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.DeltaForward
  id: DeltaForward(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property DeltaForward: ICell<float>'
  nameWithType: 'property VanillaOptionModel.DeltaForward: ICell<float>'
  fullName: 'property Cephei.QL.VanillaOptionModel.DeltaForward: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.DeltaForward(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 91
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property DeltaForward: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.DeltaForward*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.Delta(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.Delta
  id: Delta(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property Delta: ICell<float>'
  nameWithType: 'property VanillaOptionModel.Delta: ICell<float>'
  fullName: 'property Cephei.QL.VanillaOptionModel.Delta: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.Delta(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 90
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Delta: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.Delta*
  attributes: []
- uid: Cephei.QL.VanillaOptionModel.CASH(unit)
  commentId: P:Cephei.QL.VanillaOptionModel.CASH
  id: CASH(unit)
  parent: Cephei.QL.VanillaOptionModel
  langs:
  - csharp
  - vb
  name: 'property CASH: ICell<float>'
  nameWithType: 'property VanillaOptionModel.CASH: ICell<float>'
  fullName: 'property Cephei.QL.VanillaOptionModel.CASH: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.VanillaOptionModel.CASH(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\VanillaOptionModel.fs
    startLine: 104
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property CASH: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.VanillaOptionModel.CASH*
  attributes: []
references:
- uid: Cephei.QL
  commentId: N:Cephei.QL
  name: Cephei.QL
  nameWithType: Cephei.QL
  fullName: Cephei.QL
- uid: TypeRef:System.Object
  name: Object
  nameWithType: Object
  fullName: System.Object
  spec.csharp:
  - {}
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - {}
- uid: TypeRef:System.Collections.Concurrent.ConcurrentDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: ConcurrentDictionary<string,ICell>
  nameWithType: ConcurrentDictionary<string,ICell>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Model
  name: Model
  nameWithType: Model
  fullName: Cephei.Cell.Model
  spec.csharp:
  - {}
  - uid: Cephei.Cell.Model
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Model
  - {}
- uid: TypeRef:Cephei.Cell.Generic.Model`1<QLNet.VanillaOption>
  name: Model<VanillaOption>
  nameWithType: Model<VanillaOption>
  fullName: Cephei.Cell.Generic.Model<QLNet.VanillaOption>
  spec.csharp:
  - uid: Cephei.Cell.Generic.Model`1
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Generic.Model
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.VanillaOption
    name: VanillaOption
    nameWithType: VanillaOption
    fullName: QLNet.VanillaOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.VanillaOption>
  name: ICell<VanillaOption>
  nameWithType: ICell<VanillaOption>
  fullName: Cephei.Cell.Generic.ICell<QLNet.VanillaOption>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.VanillaOption
    name: VanillaOption
    nameWithType: VanillaOption
    fullName: QLNet.VanillaOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.ICell
  name: ICell
  nameWithType: ICell
  fullName: Cephei.Cell.ICell
  spec.csharp:
  - {}
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - {}
- uid: TypeRef:Cephei.Cell.ICellEvent
  name: ICellEvent
  nameWithType: ICellEvent
  fullName: Cephei.Cell.ICellEvent
  spec.csharp:
  - {}
  - uid: Cephei.Cell.ICellEvent
    name: ICellEvent
    nameWithType: ICellEvent
    fullName: Cephei.Cell.ICellEvent
  - {}
- uid: TypeRef:System.Collections.Generic.ICollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: ICollection<KeyValuePair<string,ICell>>
  nameWithType: ICollection<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: IDictionary<string,ICell>
  nameWithType: IDictionary<string,ICell>
  fullName: System.Collections.Generic.IDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: IEnumerable<KeyValuePair<string,ICell>>
  nameWithType: IEnumerable<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IReadOnlyCollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: IReadOnlyCollection<KeyValuePair<string,ICell>>
  nameWithType: IReadOnlyCollection<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IReadOnlyDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: IReadOnlyDictionary<string,ICell>
  nameWithType: IReadOnlyDictionary<string,ICell>
  fullName: System.Collections.Generic.IReadOnlyDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.ICollection
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
  spec.csharp:
  - {}
  - uid: System.Collections.ICollection
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.ICollection
  - {}
- uid: TypeRef:System.Collections.IDictionary
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
  spec.csharp:
  - {}
  - uid: System.Collections.IDictionary
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.IDictionary
  - {}
- uid: TypeRef:System.Collections.IEnumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
  spec.csharp:
  - {}
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
  - {}
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ICell>
  name: IObservable<ICell>
  nameWithType: IObservable<ICell>
  fullName: System.IObservable<Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell`1<QLNet.VanillaOption> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  name: IObservable<ISession * ICell<VanillaOption> * CellEvent * ICell * DateTime>
  nameWithType: IObservable<ISession * ICell<VanillaOption> * CellEvent * ICell * DateTime>
  fullName: System.IObservable<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<QLNet.VanillaOption> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.VanillaOption
    name: VanillaOption
    nameWithType: VanillaOption
    fullName: QLNet.VanillaOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  name: IObservable<ISession * Model * CellEvent * ICell * DateTime>
  nameWithType: IObservable<ISession * Model * CellEvent * ICell * DateTime>
  fullName: System.IObservable<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.Model
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Model
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<QLNet.VanillaOption>
  name: IObservable<VanillaOption>
  nameWithType: IObservable<VanillaOption>
  fullName: System.IObservable<QLNet.VanillaOption>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.VanillaOption
    name: VanillaOption
    nameWithType: VanillaOption
    fullName: QLNet.VanillaOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>>
  name: IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
  nameWithType: IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,QLNet.VanillaOption>>>
  name: IObservable<KeyValuePair<ISession,KeyValuePair<string,VanillaOption>>>
  nameWithType: IObservable<KeyValuePair<ISession,KeyValuePair<string,VanillaOption>>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,QLNet.VanillaOption>>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: QLNet.VanillaOption
    name: VanillaOption
    nameWithType: VanillaOption
    fullName: QLNet.VanillaOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.decimal>>
  name: IObservable<KeyValuePair<string,decimal>>
  nameWithType: IObservable<KeyValuePair<string,decimal>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,decimal>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.decimal
    name: decimal
    nameWithType: decimal
    fullName: decimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.float>>
  name: IObservable<KeyValuePair<string,float>>
  nameWithType: IObservable<KeyValuePair<string,float>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,float>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.int>>
  name: IObservable<KeyValuePair<string,int>>
  nameWithType: IObservable<KeyValuePair<string,int>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,int>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.int
    name: int
    nameWithType: int
    fullName: int
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObserver`1<QLNet.VanillaOption>
  name: IObserver<VanillaOption>
  nameWithType: IObserver<VanillaOption>
  fullName: System.IObserver<QLNet.VanillaOption>
  spec.csharp:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.VanillaOption
    name: VanillaOption
    nameWithType: VanillaOption
    fullName: QLNet.VanillaOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell<'T>)
  name: "member Bind: ICell<'T> -> unit"
  nameWithType: "member Model.Bind: ICell<'T> -> unit"
  fullName: "member Cephei.Cell.Generic.Model.Bind: Cephei.Cell.Generic.ICell<'T> -> unit"
- uid: Cephei.Cell.Generic.Model`1.OnCompleted(unit)
  name: 'abstract member OnCompleted: unit -> unit'
  nameWithType: 'abstract member Model.OnCompleted: unit -> unit'
  fullName: 'abstract member Cephei.Cell.Generic.Model.OnCompleted: unit -> unit'
- uid: Cephei.Cell.Generic.Model`1.OnError(exn)
  name: 'abstract member OnError: exn -> unit'
  nameWithType: 'abstract member Model.OnError: exn -> unit'
  fullName: 'abstract member Cephei.Cell.Generic.Model.OnError: exn -> unit'
- uid: Cephei.Cell.Generic.Model`1.OnNext('T)
  name: "abstract member OnNext: 'T -> unit"
  nameWithType: "abstract member Model.OnNext: 'T -> unit"
  fullName: "abstract member Cephei.Cell.Generic.Model.OnNext: 'T -> unit"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<'T>)
  name: "abstract member Subscribe: IObserver<'T> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<'T> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<'T> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  name: "abstract member Subscribe: IObserver<ISession * ICell<'T> * CellEvent * ICell * DateTime> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<ISession * ICell<'T> * CellEvent * ICell * DateTime> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>>)
  name: "abstract member Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,'T>>> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,'T>>> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Value(unit)
  name: "abstract property Value: 'T"
  nameWithType: "abstract property Model.Value: 'T"
  fullName: "abstract property Cephei.Cell.Generic.Model.Value: 'T"
- uid: Cephei.Cell.Model.As(string)
  name: "member As: string -> ICell<'T>"
  nameWithType: "member Model.As: string -> ICell<'T>"
  fullName: "member Cephei.Cell.Model.As: string -> Cephei.Cell.Generic.ICell<'T>"
- uid: Cephei.Cell.Model.Bind(unit)
  name: 'member Bind: unit -> unit'
  nameWithType: 'member Model.Bind: unit -> unit'
  fullName: 'member Cephei.Cell.Model.Bind: unit -> unit'
- uid: Cephei.Cell.Model.Box(unit)
  name: 'abstract property Box: obj'
  nameWithType: 'abstract property Model.Box: obj'
  fullName: 'abstract property Cephei.Cell.Model.Box: obj'
- uid: Cephei.Cell.Model.Change()
  name: 'abstract member Change: CellChange'
  nameWithType: 'abstract member Model.Change: CellChange'
  fullName: 'abstract member Cephei.Cell.Model.Change: Cephei.Cell.CellChange'
- uid: Cephei.Cell.Model.Create(Unit -> 'T * string)
  name: "member Create: Unit -> 'T * string -> Cell<'T>"
  nameWithType: "member Model.Create: Unit -> 'T * string -> Cell<'T>"
  fullName: "member Cephei.Cell.Model.Create: Unit -> 'T * string -> Cephei.Cell.Generic.Cell<'T>"
- uid: Cephei.Cell.Model.CreateValue('T * string)
  name: "member CreateValue: 'T * string -> Cell<'T>"
  nameWithType: "member Model.CreateValue: 'T * string -> Cell<'T>"
  fullName: "member Cephei.Cell.Model.CreateValue: 'T * string -> Cephei.Cell.Generic.Cell<'T>"
- uid: Cephei.Cell.Model.Dependants(unit)
  name: 'abstract property Dependants: IEnumerable<ICellEvent>'
  nameWithType: 'abstract property Model.Dependants: IEnumerable<ICellEvent>'
  fullName: 'abstract property Cephei.Cell.Model.Dependants: System.Collections.Generic.IEnumerable<Cephei.Cell.ICellEvent>'
- uid: Cephei.Cell.Model.Dispose(unit)
  name: 'member Dispose: unit -> unit'
  nameWithType: 'member Model.Dispose: unit -> unit'
  fullName: 'member Cephei.Cell.Model.Dispose: unit -> unit'
- uid: Cephei.Cell.Model.GetOrAdd(string * Cephei.Cell.ICell)
  name: 'member GetOrAdd: string * ICell -> ICell'
  nameWithType: 'member Model.GetOrAdd: string * ICell -> ICell'
  fullName: 'member Cephei.Cell.Model.GetOrAdd: string * Cephei.Cell.ICell -> Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.HasFunction(unit)
  name: 'abstract property HasFunction: bool'
  nameWithType: 'abstract property Model.HasFunction: bool'
  fullName: 'abstract property Cephei.Cell.Model.HasFunction: bool'
- uid: Cephei.Cell.Model.HasValue(unit)
  name: 'abstract property HasValue: bool'
  nameWithType: 'abstract property Model.HasValue: bool'
  fullName: 'abstract property Cephei.Cell.Model.HasValue: bool'
- uid: Cephei.Cell.Model.Item(string)
  name: 'property Item: string -> ICell'
  nameWithType: 'property Model.Item: string -> ICell'
  fullName: 'property Cephei.Cell.Model.Item: string -> Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.Mnemonic(unit)
  name: 'abstract property Mnemonic: string'
  nameWithType: 'abstract property Model.Mnemonic: string'
  fullName: 'abstract property Cephei.Cell.Model.Mnemonic: string'
- uid: Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession)
  name: 'abstract member OnChange: CellEvent * ICellEvent * DateTime * ISession -> unit'
  nameWithType: 'abstract member Model.OnChange: CellEvent * ICellEvent * DateTime * ISession -> unit'
  fullName: 'abstract member Cephei.Cell.Model.OnChange: Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession -> unit'
- uid: Cephei.Cell.Model.Parent(unit)
  name: 'abstract property Parent: ICell'
  nameWithType: 'abstract property Model.Parent: ICell'
  fullName: 'abstract property Cephei.Cell.Model.Parent: Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ICell>)
  name: 'abstract member Subscribe: IObserver<ICell> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<ICell> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<Cephei.Cell.ICell> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  name: 'abstract member Subscribe: IObserver<ISession * Model * CellEvent * ICell * DateTime> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<ISession * Model * CellEvent * ICell * DateTime> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,ICell>>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,ICell>>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,decimal>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,decimal>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,float>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,float>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,float>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,float>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,int>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,int>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,int>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,int>> -> System.IDisposable'
- uid: Cephei.Cell.Model.TryAdd(string * Cephei.Cell.ICell)
  name: 'member TryAdd: string * ICell -> bool'
  nameWithType: 'member Model.TryAdd: string * ICell -> bool'
  fullName: 'member Cephei.Cell.Model.TryAdd: string * Cephei.Cell.ICell -> bool'
- uid: Cephei.Cell.Model.TryRemove(string * Cephei.Cell.ICell byref)
  name: 'member TryRemove: string * ICell byref -> bool'
  nameWithType: 'member Model.TryRemove: string * ICell byref -> bool'
  fullName: 'member Cephei.Cell.Model.TryRemove: string * Cephei.Cell.ICell byref -> bool'
- uid: Cephei.Cell.Model.TryUpdate(string * Cephei.Cell.ICell * Cephei.Cell.ICell)
  name: 'member TryUpdate: string * ICell * ICell -> bool'
  nameWithType: 'member Model.TryUpdate: string * ICell * ICell -> bool'
  fullName: 'member Cephei.Cell.Model.TryUpdate: string * Cephei.Cell.ICell * Cephei.Cell.ICell -> bool'
- uid: Cephei.Cell.Model.add_Change(Cephei.Cell.CellChange)
  name: 'abstract member add_Change: CellChange -> unit'
  nameWithType: 'abstract member Model.add_Change: CellChange -> unit'
  fullName: 'abstract member Cephei.Cell.Model.add_Change: Cephei.Cell.CellChange -> unit'
- uid: Cephei.Cell.Model.remove_Change(Cephei.Cell.CellChange)
  name: 'abstract member remove_Change: CellChange -> unit'
  nameWithType: 'abstract member Model.remove_Change: CellChange -> unit'
  fullName: 'abstract member Cephei.Cell.Model.remove_Change: Cephei.Cell.CellChange -> unit'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * 'TValue * System.Func<'TKey,'TValue,'TValue>)
  name: "member AddOrUpdate: 'TKey * 'TValue * Func<'TKey,'TValue,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.AddOrUpdate: 'TKey * 'TValue * Func<'TKey,'TValue,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.AddOrUpdate: 'TKey * 'TValue * System.Func<'TKey,'TValue,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue>)
  name: "member AddOrUpdate: 'TKey * Func<'TKey,'TValue> * Func<'TKey,'TValue,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.AddOrUpdate: 'TKey * Func<'TKey,'TValue> * Func<'TKey,'TValue,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.AddOrUpdate: 'TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear(unit)
  name: 'abstract member Clear: unit -> unit'
  nameWithType: 'abstract member ConcurrentDictionary.Clear: unit -> unit'
  fullName: 'abstract member System.Collections.Concurrent.ConcurrentDictionary.Clear: unit -> unit'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey('TKey)
  name: "abstract member ContainsKey: 'TKey -> bool"
  nameWithType: "abstract member ConcurrentDictionary.ContainsKey: 'TKey -> bool"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.ContainsKey: 'TKey -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count(unit)
  name: 'abstract property Count: int'
  nameWithType: 'abstract property ConcurrentDictionary.Count: int'
  fullName: 'abstract property System.Collections.Concurrent.ConcurrentDictionary.Count: int'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator(unit)
  name: "abstract member GetEnumerator: unit -> IEnumerator<KeyValuePair<'TKey,'TValue>>"
  nameWithType: "abstract member ConcurrentDictionary.GetEnumerator: unit -> IEnumerator<KeyValuePair<'TKey,'TValue>>"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.GetEnumerator: unit -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<'TKey,'TValue>>"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * 'TValue)
  name: "member GetOrAdd: 'TKey * 'TValue -> 'TValue"
  nameWithType: "member ConcurrentDictionary.GetOrAdd: 'TKey * 'TValue -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd: 'TKey * 'TValue -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * System.Func<'TKey,'TValue>)
  name: "member GetOrAdd: 'TKey * Func<'TKey,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.GetOrAdd: 'TKey * Func<'TKey,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd: 'TKey * System.Func<'TKey,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty(unit)
  name: 'property IsEmpty: bool'
  nameWithType: 'property ConcurrentDictionary.IsEmpty: bool'
  fullName: 'property System.Collections.Concurrent.ConcurrentDictionary.IsEmpty: bool'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item('TKey)
  name: "abstract property Item: 'TKey -> 'TValue"
  nameWithType: "abstract property ConcurrentDictionary.Item: 'TKey -> 'TValue"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Item: 'TKey -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys(unit)
  name: "abstract property Keys: ICollection<'TKey>"
  nameWithType: "abstract property ConcurrentDictionary.Keys: ICollection<'TKey>"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Keys: System.Collections.Generic.ICollection<'TKey>"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray(unit)
  name: "member ToArray: unit -> KeyValuePair<'TKey,'TValue> []"
  nameWithType: "member ConcurrentDictionary.ToArray: unit -> KeyValuePair<'TKey,'TValue> []"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.ToArray: unit -> System.Collections.Generic.KeyValuePair<'TKey,'TValue> []"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd('TKey * 'TValue)
  name: "member TryAdd: 'TKey * 'TValue -> bool"
  nameWithType: "member ConcurrentDictionary.TryAdd: 'TKey * 'TValue -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryAdd: 'TKey * 'TValue -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue('TKey * 'TValue byref)
  name: "abstract member TryGetValue: 'TKey * 'TValue byref -> bool"
  nameWithType: "abstract member ConcurrentDictionary.TryGetValue: 'TKey * 'TValue byref -> bool"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.TryGetValue: 'TKey * 'TValue byref -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove('TKey * 'TValue byref)
  name: "member TryRemove: 'TKey * 'TValue byref -> bool"
  nameWithType: "member ConcurrentDictionary.TryRemove: 'TKey * 'TValue byref -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryRemove: 'TKey * 'TValue byref -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate('TKey * 'TValue * 'TValue)
  name: "member TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
  nameWithType: "member ConcurrentDictionary.TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values(unit)
  name: "abstract property Values: ICollection<'TValue>"
  nameWithType: "abstract property ConcurrentDictionary.Values: ICollection<'TValue>"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Values: System.Collections.Generic.ICollection<'TValue>"
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.StrikedTypePayoff>
  name: ICell<StrikedTypePayoff>
  nameWithType: ICell<StrikedTypePayoff>
  fullName: Cephei.Cell.Generic.ICell<QLNet.StrikedTypePayoff>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.StrikedTypePayoff
    name: StrikedTypePayoff
    nameWithType: StrikedTypePayoff
    fullName: QLNet.StrikedTypePayoff
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Exercise>
  name: ICell<Exercise>
  nameWithType: ICell<Exercise>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Exercise>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Exercise
    name: Exercise
    nameWithType: Exercise
    fullName: QLNet.Exercise
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.IPricingEngine>
  name: ICell<IPricingEngine>
  nameWithType: ICell<IPricingEngine>
  fullName: Cephei.Cell.Generic.ICell<QLNet.IPricingEngine>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.IPricingEngine
    name: IPricingEngine
    nameWithType: IPricingEngine
    fullName: QLNet.IPricingEngine
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Date>
  name: ICell<Date>
  nameWithType: ICell<Date>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Date>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Date
    name: Date
    nameWithType: Date
    fullName: QLNet.Date
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.VanillaOptionModel.#ctor*
  commentId: Overload:Cephei.QL.VanillaOptionModel.#ctor*
  name: ( .ctor )
  nameWithType: VanillaOptionModel.( .ctor )
  fullName: Cephei.QL.VanillaOptionModel
- uid: TypeRef:Cephei.QL.VanillaOptionModel
  name: VanillaOptionModel
  nameWithType: VanillaOptionModel
  fullName: Cephei.QL.VanillaOptionModel
  spec.csharp:
  - {}
  - uid: Cephei.QL.VanillaOptionModel
    name: VanillaOptionModel
    nameWithType: VanillaOptionModel
    fullName: Cephei.QL.VanillaOptionModel
  - {}
- uid: Cephei.QL.VanillaOptionModel.ImpliedVolatility*
  commentId: Overload:Cephei.QL.VanillaOptionModel.ImpliedVolatility*
  name: ImpliedVolatility
  nameWithType: VanillaOptionModel.ImpliedVolatility
  fullName: Cephei.QL.VanillaOptionModel.ImpliedVolatility
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
  name: ICell<double>
  nameWithType: ICell<double>
  fullName: Cephei.Cell.Generic.ICell<double>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.double
    name: double
    nameWithType: double
    fullName: double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.GeneralizedBlackScholesProcess>
  name: ICell<GeneralizedBlackScholesProcess>
  nameWithType: ICell<GeneralizedBlackScholesProcess>
  fullName: Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.GeneralizedBlackScholesProcess
    name: GeneralizedBlackScholesProcess
    nameWithType: GeneralizedBlackScholesProcess
    fullName: QLNet.GeneralizedBlackScholesProcess
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
  name: ICell<int>
  nameWithType: ICell<int>
  fullName: Cephei.Cell.Generic.ICell<int>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.int
    name: int
    nameWithType: int
    fullName: int
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
  name: ICell<float>
  nameWithType: ICell<float>
  fullName: Cephei.Cell.Generic.ICell<float>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.VanillaOptionModel.Result*
  commentId: Overload:Cephei.QL.VanillaOptionModel.Result*
  name: Result
  nameWithType: VanillaOptionModel.Result
  fullName: Cephei.QL.VanillaOptionModel.Result
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.string>
  name: ICell<string>
  nameWithType: ICell<string>
  fullName: Cephei.Cell.Generic.ICell<string>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.obj>
  name: ICell<obj>
  nameWithType: ICell<obj>
  fullName: Cephei.Cell.Generic.ICell<obj>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.obj
    name: obj
    nameWithType: obj
    fullName: obj
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.VanillaOptionModel.SetPricingEngine*
  commentId: Overload:Cephei.QL.VanillaOptionModel.SetPricingEngine*
  name: SetPricingEngine
  nameWithType: VanillaOptionModel.SetPricingEngine
  fullName: Cephei.QL.VanillaOptionModel.SetPricingEngine
- uid: Cephei.QL.VanillaOptionModel.payoff*
  commentId: Overload:Cephei.QL.VanillaOptionModel.payoff*
  name: payoff
  nameWithType: VanillaOptionModel.payoff
  fullName: Cephei.QL.VanillaOptionModel.payoff
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Payoff>
  name: ICell<Payoff>
  nameWithType: ICell<Payoff>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Payoff>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Payoff
    name: Payoff
    nameWithType: Payoff
    fullName: QLNet.Payoff
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.VanillaOptionModel.exercise*
  commentId: Overload:Cephei.QL.VanillaOptionModel.exercise*
  name: exercise
  nameWithType: VanillaOptionModel.exercise
  fullName: Cephei.QL.VanillaOptionModel.exercise
- uid: Cephei.QL.VanillaOptionModel.Vega*
  commentId: Overload:Cephei.QL.VanillaOptionModel.Vega*
  name: Vega
  nameWithType: VanillaOptionModel.Vega
  fullName: Cephei.QL.VanillaOptionModel.Vega
- uid: Cephei.QL.VanillaOptionModel.ValuationDate*
  commentId: Overload:Cephei.QL.VanillaOptionModel.ValuationDate*
  name: ValuationDate
  nameWithType: VanillaOptionModel.ValuationDate
  fullName: Cephei.QL.VanillaOptionModel.ValuationDate
- uid: Cephei.QL.VanillaOptionModel.ThetaPerDay*
  commentId: Overload:Cephei.QL.VanillaOptionModel.ThetaPerDay*
  name: ThetaPerDay
  nameWithType: VanillaOptionModel.ThetaPerDay
  fullName: Cephei.QL.VanillaOptionModel.ThetaPerDay
- uid: Cephei.QL.VanillaOptionModel.Theta*
  commentId: Overload:Cephei.QL.VanillaOptionModel.Theta*
  name: Theta
  nameWithType: VanillaOptionModel.Theta
  fullName: Cephei.QL.VanillaOptionModel.Theta
- uid: Cephei.QL.VanillaOptionModel.StrikeSensitivity*
  commentId: Overload:Cephei.QL.VanillaOptionModel.StrikeSensitivity*
  name: StrikeSensitivity
  nameWithType: VanillaOptionModel.StrikeSensitivity
  fullName: Cephei.QL.VanillaOptionModel.StrikeSensitivity
- uid: Cephei.QL.VanillaOptionModel.Rho*
  commentId: Overload:Cephei.QL.VanillaOptionModel.Rho*
  name: Rho
  nameWithType: VanillaOptionModel.Rho
  fullName: Cephei.QL.VanillaOptionModel.Rho
- uid: Cephei.QL.VanillaOptionModel.PricingEngine*
  commentId: Overload:Cephei.QL.VanillaOptionModel.PricingEngine*
  name: PricingEngine
  nameWithType: VanillaOptionModel.PricingEngine
  fullName: Cephei.QL.VanillaOptionModel.PricingEngine
- uid: Cephei.QL.VanillaOptionModel.Payoff*
  commentId: Overload:Cephei.QL.VanillaOptionModel.Payoff*
  name: Payoff
  nameWithType: VanillaOptionModel.Payoff
  fullName: Cephei.QL.VanillaOptionModel.Payoff
- uid: Cephei.QL.VanillaOptionModel.NPV*
  commentId: Overload:Cephei.QL.VanillaOptionModel.NPV*
  name: NPV
  nameWithType: VanillaOptionModel.NPV
  fullName: Cephei.QL.VanillaOptionModel.NPV
- uid: Cephei.QL.VanillaOptionModel.ItmCashProbability*
  commentId: Overload:Cephei.QL.VanillaOptionModel.ItmCashProbability*
  name: ItmCashProbability
  nameWithType: VanillaOptionModel.ItmCashProbability
  fullName: Cephei.QL.VanillaOptionModel.ItmCashProbability
- uid: Cephei.QL.VanillaOptionModel.IsExpired*
  commentId: Overload:Cephei.QL.VanillaOptionModel.IsExpired*
  name: IsExpired
  nameWithType: VanillaOptionModel.IsExpired
  fullName: Cephei.QL.VanillaOptionModel.IsExpired
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
  name: ICell<bool>
  nameWithType: ICell<bool>
  fullName: Cephei.Cell.Generic.ICell<bool>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.bool
    name: bool
    nameWithType: bool
    fullName: bool
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.VanillaOptionModel.Gamma*
  commentId: Overload:Cephei.QL.VanillaOptionModel.Gamma*
  name: Gamma
  nameWithType: VanillaOptionModel.Gamma
  fullName: Cephei.QL.VanillaOptionModel.Gamma
- uid: Cephei.QL.VanillaOptionModel.Exercise*
  commentId: Overload:Cephei.QL.VanillaOptionModel.Exercise*
  name: Exercise
  nameWithType: VanillaOptionModel.Exercise
  fullName: Cephei.QL.VanillaOptionModel.Exercise
- uid: Cephei.QL.VanillaOptionModel.EvaluationDate*
  commentId: Overload:Cephei.QL.VanillaOptionModel.EvaluationDate*
  name: EvaluationDate
  nameWithType: VanillaOptionModel.EvaluationDate
  fullName: Cephei.QL.VanillaOptionModel.EvaluationDate
- uid: Cephei.QL.VanillaOptionModel.ErrorEstimate*
  commentId: Overload:Cephei.QL.VanillaOptionModel.ErrorEstimate*
  name: ErrorEstimate
  nameWithType: VanillaOptionModel.ErrorEstimate
  fullName: Cephei.QL.VanillaOptionModel.ErrorEstimate
- uid: Cephei.QL.VanillaOptionModel.Elasticity*
  commentId: Overload:Cephei.QL.VanillaOptionModel.Elasticity*
  name: Elasticity
  nameWithType: VanillaOptionModel.Elasticity
  fullName: Cephei.QL.VanillaOptionModel.Elasticity
- uid: Cephei.QL.VanillaOptionModel.DividendRho*
  commentId: Overload:Cephei.QL.VanillaOptionModel.DividendRho*
  name: DividendRho
  nameWithType: VanillaOptionModel.DividendRho
  fullName: Cephei.QL.VanillaOptionModel.DividendRho
- uid: Cephei.QL.VanillaOptionModel.DeltaForward*
  commentId: Overload:Cephei.QL.VanillaOptionModel.DeltaForward*
  name: DeltaForward
  nameWithType: VanillaOptionModel.DeltaForward
  fullName: Cephei.QL.VanillaOptionModel.DeltaForward
- uid: Cephei.QL.VanillaOptionModel.Delta*
  commentId: Overload:Cephei.QL.VanillaOptionModel.Delta*
  name: Delta
  nameWithType: VanillaOptionModel.Delta
  fullName: Cephei.QL.VanillaOptionModel.Delta
- uid: Cephei.QL.VanillaOptionModel.CASH*
  commentId: Overload:Cephei.QL.VanillaOptionModel.CASH*
  name: CASH
  nameWithType: VanillaOptionModel.CASH
  fullName: Cephei.QL.VanillaOptionModel.CASH
