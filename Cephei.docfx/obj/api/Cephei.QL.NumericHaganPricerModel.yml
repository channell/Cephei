### YamlMime:ManagedReference
items:
- uid: Cephei.QL.NumericHaganPricerModel
  commentId: T:Cephei.QL.NumericHaganPricerModel
  id: NumericHaganPricerModel
  parent: Cephei.QL
  children:
  - Cephei.QL.NumericHaganPricerModel.#ctor(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.SwaptionVolatilityStructure>> * Cephei.Cell.Generic.ICell<QLNet.GFunctionFactory.YieldCurveModel> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.NumericHaganPricerModel.CapletPrice(Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.NumericHaganPricerModel.CapletRate(Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.NumericHaganPricerModel.FloorletPrice(Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.NumericHaganPricerModel.FloorletRate(Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.NumericHaganPricerModel.hardUpperLimit(unit)
  - Cephei.QL.NumericHaganPricerModel.Initialize(Cephei.Cell.Generic.ICell<QLNet.FloatingRateCoupon>)
  - Cephei.QL.NumericHaganPricerModel.Integrate(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer.ConundrumIntegrand>)
  - Cephei.QL.NumericHaganPricerModel.lowerLimit(unit)
  - Cephei.QL.NumericHaganPricerModel.meanReversion(unit)
  - Cephei.QL.NumericHaganPricerModel.MeanReversion(unit)
  - Cephei.QL.NumericHaganPricerModel.modelOfYieldCurve(unit)
  - Cephei.QL.NumericHaganPricerModel.precision(unit)
  - Cephei.QL.NumericHaganPricerModel.RefineIntegration(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer.ConundrumIntegrand>)
  - Cephei.QL.NumericHaganPricerModel.RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  - Cephei.QL.NumericHaganPricerModel.ResetUpperLimit(Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.NumericHaganPricerModel.SetMeanReversion(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>>)
  - Cephei.QL.NumericHaganPricerModel.SetSwaptionVolatility(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.SwaptionVolatilityStructure>>)
  - Cephei.QL.NumericHaganPricerModel.StdDeviations(unit)
  - Cephei.QL.NumericHaganPricerModel.SwapletPrice(unit)
  - Cephei.QL.NumericHaganPricerModel.SwapletRate(unit)
  - Cephei.QL.NumericHaganPricerModel.swaptionVol(unit)
  - Cephei.QL.NumericHaganPricerModel.SwaptionVolatility(unit)
  - Cephei.QL.NumericHaganPricerModel.UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  - Cephei.QL.NumericHaganPricerModel.Update(unit)
  - Cephei.QL.NumericHaganPricerModel.upperLimit(unit)
  - Cephei.QL.NumericHaganPricerModel.UpperLimit(unit)
  langs:
  - csharp
  - vb
  name: NumericHaganPricerModel
  nameWithType: Cephei.QL.NumericHaganPricerModel
  fullName: Cephei.QL.NumericHaganPricerModel
  type: Class
  source:
    id: Cephei.QL.NumericHaganPricerModel
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 35
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: >-
      [<AutoSerializable(true)>]

      type NumericHaganPricerModel (swaptionVol:ICell<Handle<SwaptionVolatilityStructure>>, modelOfYieldCurve:ICell<YieldCurveModel>, meanReversion:ICell<Handle<Quote>>, lowerLimit:ICell<double>, upperLimit:ICell<double>, precision:ICell<double>, hardUpperLimit:ICell<double>)
          inherit Model<NumericHaganPricer>
          interface IDictionary<string,ICell>
          interface ICollection<KeyValuePair<string,ICell>>
          interface IReadOnlyDictionary<string,ICell>
          interface IReadOnlyCollection<KeyValuePair<string,ICell>>
          interface IEnumerable<KeyValuePair<string,ICell>>
          interface IDictionary
          interface ICollection
          interface IEnumerable
          interface IObservable<ICell>
          interface IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
          interface IObservable<ISession * Model * CellEvent * ICell * DateTime>
          interface IObservable<KeyValuePair<string,float>>
          interface IObservable<KeyValuePair<string,int>>
          interface IObservable<KeyValuePair<string,decimal>>
          interface ICell<NumericHaganPricer>
          interface ICell
          interface ICellEvent
          interface IObservable<NumericHaganPricer>
          interface IObservable<KeyValuePair<ISession,KeyValuePair<string,NumericHaganPricer>>>
          interface IObservable<ISession * ICell<NumericHaganPricer> * CellEvent * ICell * DateTime>
          interface IObserver<NumericHaganPricer>
    parameters:
    - id: swaptionVol
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.SwaptionVolatilityStructure>>
      attributes: []
    - id: modelOfYieldCurve
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.GFunctionFactory.YieldCurveModel>
      attributes: []
    - id: meanReversion
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.Quote>>
      attributes: []
    - id: lowerLimit
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: upperLimit
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: precision
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: hardUpperLimit
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
  inheritance:
  - TypeRef:System.Object
  - TypeRef:System.Collections.Concurrent.ConcurrentDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:Cephei.Cell.Model
  - TypeRef:Cephei.Cell.Generic.Model`1<QLNet.NumericHaganPricer>
  implements:
  - TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.NumericHaganPricer>
  - TypeRef:Cephei.Cell.ICell
  - TypeRef:Cephei.Cell.ICellEvent
  - TypeRef:System.Collections.Generic.ICollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IReadOnlyCollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IReadOnlyDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:System.Collections.ICollection
  - TypeRef:System.Collections.IDictionary
  - TypeRef:System.Collections.IEnumerable
  - TypeRef:System.IObservable`1<Cephei.Cell.ICell>
  - TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell`1<QLNet.NumericHaganPricer> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  - TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  - TypeRef:System.IObservable`1<QLNet.NumericHaganPricer>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,QLNet.NumericHaganPricer>>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.decimal>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.float>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.int>>
  - TypeRef:System.IObserver`1<QLNet.NumericHaganPricer>
  inheritedMembers:
  - Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell<'T>)
  - Cephei.Cell.Generic.Model`1.OnCompleted(unit)
  - Cephei.Cell.Generic.Model`1.OnError(exn)
  - Cephei.Cell.Generic.Model`1.OnNext('T)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<'T>)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>>)
  - Cephei.Cell.Generic.Model`1.Value(unit)
  - Cephei.Cell.Model.As(string)
  - Cephei.Cell.Model.Bind(unit)
  - Cephei.Cell.Model.Box(unit)
  - Cephei.Cell.Model.Change()
  - Cephei.Cell.Model.Create(Unit -> 'T * string)
  - Cephei.Cell.Model.CreateValue('T * string)
  - Cephei.Cell.Model.Dependants(unit)
  - Cephei.Cell.Model.Dispose(unit)
  - Cephei.Cell.Model.GetOrAdd(string * Cephei.Cell.ICell)
  - Cephei.Cell.Model.HasFunction(unit)
  - Cephei.Cell.Model.HasValue(unit)
  - Cephei.Cell.Model.Item(string)
  - Cephei.Cell.Model.Mnemonic(unit)
  - Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession)
  - Cephei.Cell.Model.Parent(unit)
  - Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ICell>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,float>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,int>>)
  - Cephei.Cell.Model.TryAdd(string * Cephei.Cell.ICell)
  - Cephei.Cell.Model.TryRemove(string * Cephei.Cell.ICell byref)
  - Cephei.Cell.Model.TryUpdate(string * Cephei.Cell.ICell * Cephei.Cell.ICell)
  - Cephei.Cell.Model.add_Change(Cephei.Cell.CellChange)
  - Cephei.Cell.Model.remove_Change(Cephei.Cell.CellChange)
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * 'TValue * System.Func<'TKey,'TValue,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Clear(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey('TKey)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Count(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * System.Func<'TKey,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Item('TKey)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Keys(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.ToArray(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd('TKey * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue('TKey * 'TValue byref)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove('TKey * 'TValue byref)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate('TKey * 'TValue * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Values(unit)
  attributes:
  - type: Microsoft.FSharp.Core.AutoSerializableAttribute
    arguments:
    - type: System.Boolean
      value: true
    namedArguments: []
- uid: Cephei.QL.NumericHaganPricerModel.#ctor(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.SwaptionVolatilityStructure>> * Cephei.Cell.Generic.ICell<QLNet.GFunctionFactory.YieldCurveModel> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.NumericHaganPricerModel.#ctor(Cephei.Cell.Generic.ICell{QLNet.Handle{QLNet.SwaptionVolatilityStructure}},Cephei.Cell.Generic.ICell{QLNet.GFunctionFactory.YieldCurveModel},Cephei.Cell.Generic.ICell{QLNet.Handle{QLNet.Quote}},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Double})
  id: '#ctor(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.SwaptionVolatilityStructure>> * Cephei.Cell.Generic.ICell<QLNet.GFunctionFactory.YieldCurveModel> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double>)'
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'new: ICell<Handle<SwaptionVolatilityStructure>> * ICell<YieldCurveModel> * ICell<Handle<Quote>> * ICell<double> * ICell<double> * ICell<double> * ICell<double> -> NumericHaganPricerModel'
  nameWithType: 'new: ICell<Handle<SwaptionVolatilityStructure>> * ICell<YieldCurveModel> * ICell<Handle<Quote>> * ICell<double> * ICell<double> * ICell<double> * ICell<double> -> NumericHaganPricerModel'
  fullName: 'new: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.SwaptionVolatilityStructure>> * Cephei.Cell.Generic.ICell<QLNet.GFunctionFactory.YieldCurveModel> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> -> Cephei.QL.NumericHaganPricerModel'
  type: Constructor
  source:
    id: Cephei.QL.NumericHaganPricerModel.#ctor(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.SwaptionVolatilityStructure>> * Cephei.Cell.Generic.ICell<QLNet.GFunctionFactory.YieldCurveModel> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 35
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  summary: Implicit constructor.
  syntax:
    content: 'new: swaptionVol:ICell<Handle<SwaptionVolatilityStructure>> * modelOfYieldCurve:ICell<YieldCurveModel> * meanReversion:ICell<Handle<Quote>> * lowerLimit:ICell<double> * upperLimit:ICell<double> * precision:ICell<double> * hardUpperLimit:ICell<double> -> NumericHaganPricerModel'
    parameters:
    - id: swaptionVol
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.SwaptionVolatilityStructure>>
      attributes: []
    - id: modelOfYieldCurve
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.GFunctionFactory.YieldCurveModel>
      attributes: []
    - id: meanReversion
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.Quote>>
      attributes: []
    - id: lowerLimit
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: upperLimit
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: precision
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: hardUpperLimit
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.QL.NumericHaganPricerModel
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.#ctor*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.CapletPrice(Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.NumericHaganPricerModel.CapletPrice(Cephei.Cell.Generic.ICell{System.Double})
  id: CapletPrice(Cephei.Cell.Generic.ICell<double>)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'member CapletPrice: ICell<double> -> ICell<float>'
  nameWithType: 'member NumericHaganPricerModel.CapletPrice: ICell<double> -> ICell<float>'
  fullName: 'member Cephei.QL.NumericHaganPricerModel.CapletPrice: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.NumericHaganPricerModel.CapletPrice(Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 118
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member CapletPrice: effectiveCap:ICell<double> -> ICell<float>'
    parameters:
    - id: effectiveCap
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.CapletPrice*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.CapletRate(Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.NumericHaganPricerModel.CapletRate(Cephei.Cell.Generic.ICell{System.Double})
  id: CapletRate(Cephei.Cell.Generic.ICell<double>)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'member CapletRate: ICell<double> -> ICell<float>'
  nameWithType: 'member NumericHaganPricerModel.CapletRate: ICell<double> -> ICell<float>'
  fullName: 'member Cephei.QL.NumericHaganPricerModel.CapletRate: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.NumericHaganPricerModel.CapletRate(Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 120
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member CapletRate: effectiveCap:ICell<double> -> ICell<float>'
    parameters:
    - id: effectiveCap
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.CapletRate*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.FloorletPrice(Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.NumericHaganPricerModel.FloorletPrice(Cephei.Cell.Generic.ICell{System.Double})
  id: FloorletPrice(Cephei.Cell.Generic.ICell<double>)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'member FloorletPrice: ICell<double> -> ICell<float>'
  nameWithType: 'member NumericHaganPricerModel.FloorletPrice: ICell<double> -> ICell<float>'
  fullName: 'member Cephei.QL.NumericHaganPricerModel.FloorletPrice: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.NumericHaganPricerModel.FloorletPrice(Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 122
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member FloorletPrice: effectiveFloor:ICell<double> -> ICell<float>'
    parameters:
    - id: effectiveFloor
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.FloorletPrice*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.FloorletRate(Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.NumericHaganPricerModel.FloorletRate(Cephei.Cell.Generic.ICell{System.Double})
  id: FloorletRate(Cephei.Cell.Generic.ICell<double>)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'member FloorletRate: ICell<double> -> ICell<float>'
  nameWithType: 'member NumericHaganPricerModel.FloorletRate: ICell<double> -> ICell<float>'
  fullName: 'member Cephei.QL.NumericHaganPricerModel.FloorletRate: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.NumericHaganPricerModel.FloorletRate(Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 124
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member FloorletRate: effectiveFloor:ICell<double> -> ICell<float>'
    parameters:
    - id: effectiveFloor
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.FloorletRate*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.Initialize(Cephei.Cell.Generic.ICell<QLNet.FloatingRateCoupon>)
  commentId: M:Cephei.QL.NumericHaganPricerModel.Initialize(Cephei.Cell.Generic.ICell{QLNet.FloatingRateCoupon})
  id: Initialize(Cephei.Cell.Generic.ICell<QLNet.FloatingRateCoupon>)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'member Initialize: ICell<FloatingRateCoupon> -> ICell<NumericHaganPricer>'
  nameWithType: 'member NumericHaganPricerModel.Initialize: ICell<FloatingRateCoupon> -> ICell<NumericHaganPricer>'
  fullName: 'member Cephei.QL.NumericHaganPricerModel.Initialize: Cephei.Cell.Generic.ICell<QLNet.FloatingRateCoupon> -> Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer>'
  type: Method
  source:
    id: Cephei.QL.NumericHaganPricerModel.Initialize(Cephei.Cell.Generic.ICell<QLNet.FloatingRateCoupon>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 126
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Initialize: coupon:ICell<FloatingRateCoupon> -> ICell<NumericHaganPricer>'
    parameters:
    - id: coupon
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.FloatingRateCoupon>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.NumericHaganPricer>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.Initialize*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.Integrate(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer.ConundrumIntegrand>)
  commentId: M:Cephei.QL.NumericHaganPricerModel.Integrate(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{QLNet.NumericHaganPricer.ConundrumIntegrand})
  id: Integrate(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer.ConundrumIntegrand>)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'member Integrate: ICell<double> -> ICell<double> -> ICell<ConundrumIntegrand> -> ICell<float>'
  nameWithType: 'member NumericHaganPricerModel.Integrate: ICell<double> -> ICell<double> -> ICell<ConundrumIntegrand> -> ICell<float>'
  fullName: 'member Cephei.QL.NumericHaganPricerModel.Integrate: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer.ConundrumIntegrand> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.NumericHaganPricerModel.Integrate(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer.ConundrumIntegrand>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 109
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Integrate: a:ICell<double> -> b:ICell<double> -> integrand:ICell<ConundrumIntegrand> -> ICell<float>'
    parameters:
    - id: a
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: b
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: integrand
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.NumericHaganPricer.ConundrumIntegrand>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.Integrate*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.RefineIntegration(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer.ConundrumIntegrand>)
  commentId: M:Cephei.QL.NumericHaganPricerModel.RefineIntegration(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{QLNet.NumericHaganPricer.ConundrumIntegrand})
  id: RefineIntegration(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer.ConundrumIntegrand>)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'member RefineIntegration: ICell<double> -> ICell<ConundrumIntegrand> -> ICell<float>'
  nameWithType: 'member NumericHaganPricerModel.RefineIntegration: ICell<double> -> ICell<ConundrumIntegrand> -> ICell<float>'
  fullName: 'member Cephei.QL.NumericHaganPricerModel.RefineIntegration: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer.ConundrumIntegrand> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.NumericHaganPricerModel.RefineIntegration(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer.ConundrumIntegrand>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 111
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member RefineIntegration: integralValue:ICell<double> -> integrand:ICell<ConundrumIntegrand> -> ICell<float>'
    parameters:
    - id: integralValue
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: integrand
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.NumericHaganPricer.ConundrumIntegrand>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.RefineIntegration*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  commentId: M:Cephei.QL.NumericHaganPricerModel.RegisterWith(Cephei.Cell.Generic.ICell{QLNet.Callback})
  id: RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'member RegisterWith: ICell<Callback> -> ICell<NumericHaganPricer>'
  nameWithType: 'member NumericHaganPricerModel.RegisterWith: ICell<Callback> -> ICell<NumericHaganPricer>'
  fullName: 'member Cephei.QL.NumericHaganPricerModel.RegisterWith: Cephei.Cell.Generic.ICell<QLNet.Callback> -> Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer>'
  type: Method
  source:
    id: Cephei.QL.NumericHaganPricerModel.RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 135
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member RegisterWith: handler:ICell<Callback> -> ICell<NumericHaganPricer>'
    parameters:
    - id: handler
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Callback>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.NumericHaganPricer>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.RegisterWith*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.ResetUpperLimit(Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.NumericHaganPricerModel.ResetUpperLimit(Cephei.Cell.Generic.ICell{System.Double})
  id: ResetUpperLimit(Cephei.Cell.Generic.ICell<double>)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'member ResetUpperLimit: ICell<double> -> ICell<float>'
  nameWithType: 'member NumericHaganPricerModel.ResetUpperLimit: ICell<double> -> ICell<float>'
  fullName: 'member Cephei.QL.NumericHaganPricerModel.ResetUpperLimit: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.NumericHaganPricerModel.ResetUpperLimit(Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 113
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member ResetUpperLimit: stdDeviationsForUpperLimit:ICell<double> -> ICell<float>'
    parameters:
    - id: stdDeviationsForUpperLimit
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.ResetUpperLimit*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.SetMeanReversion(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>>)
  commentId: M:Cephei.QL.NumericHaganPricerModel.SetMeanReversion(Cephei.Cell.Generic.ICell{QLNet.Handle{QLNet.Quote}})
  id: SetMeanReversion(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>>)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'member SetMeanReversion: ICell<Handle<Quote>> -> ICell<NumericHaganPricer>'
  nameWithType: 'member NumericHaganPricerModel.SetMeanReversion: ICell<Handle<Quote>> -> ICell<NumericHaganPricer>'
  fullName: 'member Cephei.QL.NumericHaganPricerModel.SetMeanReversion: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> -> Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer>'
  type: Method
  source:
    id: Cephei.QL.NumericHaganPricerModel.SetMeanReversion(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 129
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member SetMeanReversion: meanReversion:ICell<Handle<Quote>> -> ICell<NumericHaganPricer>'
    parameters:
    - id: meanReversion
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.Quote>>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.NumericHaganPricer>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.SetMeanReversion*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.SetSwaptionVolatility(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.SwaptionVolatilityStructure>>)
  commentId: M:Cephei.QL.NumericHaganPricerModel.SetSwaptionVolatility(Cephei.Cell.Generic.ICell{QLNet.Handle{QLNet.SwaptionVolatilityStructure}})
  id: SetSwaptionVolatility(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.SwaptionVolatilityStructure>>)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'member SetSwaptionVolatility: ICell<Handle<SwaptionVolatilityStructure>> -> ICell<NumericHaganPricer>'
  nameWithType: 'member NumericHaganPricerModel.SetSwaptionVolatility: ICell<Handle<SwaptionVolatilityStructure>> -> ICell<NumericHaganPricer>'
  fullName: 'member Cephei.QL.NumericHaganPricerModel.SetSwaptionVolatility: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.SwaptionVolatilityStructure>> -> Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer>'
  type: Method
  source:
    id: Cephei.QL.NumericHaganPricerModel.SetSwaptionVolatility(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.SwaptionVolatilityStructure>>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 132
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member SetSwaptionVolatility: v:ICell<Handle<SwaptionVolatilityStructure>> -> ICell<NumericHaganPricer>'
    parameters:
    - id: v
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.SwaptionVolatilityStructure>>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.NumericHaganPricer>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.SetSwaptionVolatility*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  commentId: M:Cephei.QL.NumericHaganPricerModel.UnregisterWith(Cephei.Cell.Generic.ICell{QLNet.Callback})
  id: UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'member UnregisterWith: ICell<Callback> -> ICell<NumericHaganPricer>'
  nameWithType: 'member NumericHaganPricerModel.UnregisterWith: ICell<Callback> -> ICell<NumericHaganPricer>'
  fullName: 'member Cephei.QL.NumericHaganPricerModel.UnregisterWith: Cephei.Cell.Generic.ICell<QLNet.Callback> -> Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer>'
  type: Method
  source:
    id: Cephei.QL.NumericHaganPricerModel.UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 137
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member UnregisterWith: handler:ICell<Callback> -> ICell<NumericHaganPricer>'
    parameters:
    - id: handler
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Callback>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.NumericHaganPricer>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.UnregisterWith*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.upperLimit(unit)
  commentId: P:Cephei.QL.NumericHaganPricerModel.upperLimit
  id: upperLimit(unit)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'property upperLimit: ICell<float>'
  nameWithType: 'property NumericHaganPricerModel.upperLimit: ICell<float>'
  fullName: 'property Cephei.QL.NumericHaganPricerModel.upperLimit: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.NumericHaganPricerModel.upperLimit(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 106
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property upperLimit: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.upperLimit*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.swaptionVol(unit)
  commentId: P:Cephei.QL.NumericHaganPricerModel.swaptionVol
  id: swaptionVol(unit)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'property swaptionVol: ICell<Handle<SwaptionVolatilityStructure>>'
  nameWithType: 'property NumericHaganPricerModel.swaptionVol: ICell<Handle<SwaptionVolatilityStructure>>'
  fullName: 'property Cephei.QL.NumericHaganPricerModel.swaptionVol: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.SwaptionVolatilityStructure>>'
  type: Property
  source:
    id: Cephei.QL.NumericHaganPricerModel.swaptionVol(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 102
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property swaptionVol: ICell<Handle<SwaptionVolatilityStructure>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.SwaptionVolatilityStructure>>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.swaptionVol*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.precision(unit)
  commentId: P:Cephei.QL.NumericHaganPricerModel.precision
  id: precision(unit)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'property precision: ICell<double>'
  nameWithType: 'property NumericHaganPricerModel.precision: ICell<double>'
  fullName: 'property Cephei.QL.NumericHaganPricerModel.precision: Cephei.Cell.Generic.ICell<double>'
  type: Property
  source:
    id: Cephei.QL.NumericHaganPricerModel.precision(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 107
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property precision: ICell<double> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.precision*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.modelOfYieldCurve(unit)
  commentId: P:Cephei.QL.NumericHaganPricerModel.modelOfYieldCurve
  id: modelOfYieldCurve(unit)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'property modelOfYieldCurve: ICell<YieldCurveModel>'
  nameWithType: 'property NumericHaganPricerModel.modelOfYieldCurve: ICell<YieldCurveModel>'
  fullName: 'property Cephei.QL.NumericHaganPricerModel.modelOfYieldCurve: Cephei.Cell.Generic.ICell<QLNet.GFunctionFactory.YieldCurveModel>'
  type: Property
  source:
    id: Cephei.QL.NumericHaganPricerModel.modelOfYieldCurve(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 103
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property modelOfYieldCurve: ICell<YieldCurveModel> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.GFunctionFactory.YieldCurveModel>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.modelOfYieldCurve*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.meanReversion(unit)
  commentId: P:Cephei.QL.NumericHaganPricerModel.meanReversion
  id: meanReversion(unit)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'property meanReversion: ICell<float>'
  nameWithType: 'property NumericHaganPricerModel.meanReversion: ICell<float>'
  fullName: 'property Cephei.QL.NumericHaganPricerModel.meanReversion: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.NumericHaganPricerModel.meanReversion(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 104
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property meanReversion: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.meanReversion*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.lowerLimit(unit)
  commentId: P:Cephei.QL.NumericHaganPricerModel.lowerLimit
  id: lowerLimit(unit)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'property lowerLimit: ICell<double>'
  nameWithType: 'property NumericHaganPricerModel.lowerLimit: ICell<double>'
  fullName: 'property Cephei.QL.NumericHaganPricerModel.lowerLimit: Cephei.Cell.Generic.ICell<double>'
  type: Property
  source:
    id: Cephei.QL.NumericHaganPricerModel.lowerLimit(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 105
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property lowerLimit: ICell<double> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.lowerLimit*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.hardUpperLimit(unit)
  commentId: P:Cephei.QL.NumericHaganPricerModel.hardUpperLimit
  id: hardUpperLimit(unit)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'property hardUpperLimit: ICell<double>'
  nameWithType: 'property NumericHaganPricerModel.hardUpperLimit: ICell<double>'
  fullName: 'property Cephei.QL.NumericHaganPricerModel.hardUpperLimit: Cephei.Cell.Generic.ICell<double>'
  type: Property
  source:
    id: Cephei.QL.NumericHaganPricerModel.hardUpperLimit(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 108
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property hardUpperLimit: ICell<double> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.hardUpperLimit*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.UpperLimit(unit)
  commentId: P:Cephei.QL.NumericHaganPricerModel.UpperLimit
  id: UpperLimit(unit)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'property UpperLimit: ICell<float>'
  nameWithType: 'property NumericHaganPricerModel.UpperLimit: ICell<float>'
  fullName: 'property Cephei.QL.NumericHaganPricerModel.UpperLimit: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.NumericHaganPricerModel.UpperLimit(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 117
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property UpperLimit: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.UpperLimit*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.Update(unit)
  commentId: P:Cephei.QL.NumericHaganPricerModel.Update
  id: Update(unit)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'property Update: ICell<NumericHaganPricer>'
  nameWithType: 'property NumericHaganPricerModel.Update: ICell<NumericHaganPricer>'
  fullName: 'property Cephei.QL.NumericHaganPricerModel.Update: Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer>'
  type: Property
  source:
    id: Cephei.QL.NumericHaganPricerModel.Update(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 139
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Update: ICell<NumericHaganPricer> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.NumericHaganPricer>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.Update*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.SwaptionVolatility(unit)
  commentId: P:Cephei.QL.NumericHaganPricerModel.SwaptionVolatility
  id: SwaptionVolatility(unit)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'property SwaptionVolatility: ICell<Handle<SwaptionVolatilityStructure>>'
  nameWithType: 'property NumericHaganPricerModel.SwaptionVolatility: ICell<Handle<SwaptionVolatilityStructure>>'
  fullName: 'property Cephei.QL.NumericHaganPricerModel.SwaptionVolatility: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.SwaptionVolatilityStructure>>'
  type: Property
  source:
    id: Cephei.QL.NumericHaganPricerModel.SwaptionVolatility(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 134
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property SwaptionVolatility: ICell<Handle<SwaptionVolatilityStructure>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.SwaptionVolatilityStructure>>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.SwaptionVolatility*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.SwapletRate(unit)
  commentId: P:Cephei.QL.NumericHaganPricerModel.SwapletRate
  id: SwapletRate(unit)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'property SwapletRate: ICell<float>'
  nameWithType: 'property NumericHaganPricerModel.SwapletRate: ICell<float>'
  fullName: 'property Cephei.QL.NumericHaganPricerModel.SwapletRate: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.NumericHaganPricerModel.SwapletRate(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 131
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property SwapletRate: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.SwapletRate*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.SwapletPrice(unit)
  commentId: P:Cephei.QL.NumericHaganPricerModel.SwapletPrice
  id: SwapletPrice(unit)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'property SwapletPrice: ICell<float>'
  nameWithType: 'property NumericHaganPricerModel.SwapletPrice: ICell<float>'
  fullName: 'property Cephei.QL.NumericHaganPricerModel.SwapletPrice: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.NumericHaganPricerModel.SwapletPrice(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 116
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property SwapletPrice: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.SwapletPrice*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.StdDeviations(unit)
  commentId: P:Cephei.QL.NumericHaganPricerModel.StdDeviations
  id: StdDeviations(unit)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'property StdDeviations: ICell<float>'
  nameWithType: 'property NumericHaganPricerModel.StdDeviations: ICell<float>'
  fullName: 'property Cephei.QL.NumericHaganPricerModel.StdDeviations: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.NumericHaganPricerModel.StdDeviations(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 115
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property StdDeviations: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.StdDeviations*
  attributes: []
- uid: Cephei.QL.NumericHaganPricerModel.MeanReversion(unit)
  commentId: P:Cephei.QL.NumericHaganPricerModel.MeanReversion
  id: MeanReversion(unit)
  parent: Cephei.QL.NumericHaganPricerModel
  langs:
  - csharp
  - vb
  name: 'property MeanReversion: ICell<float>'
  nameWithType: 'property NumericHaganPricerModel.MeanReversion: ICell<float>'
  fullName: 'property Cephei.QL.NumericHaganPricerModel.MeanReversion: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.NumericHaganPricerModel.MeanReversion(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\NumericHaganPricerModel.fs
    startLine: 128
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property MeanReversion: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.NumericHaganPricerModel.MeanReversion*
  attributes: []
references:
- uid: Cephei.QL
  commentId: N:Cephei.QL
  name: Cephei.QL
  nameWithType: Cephei.QL
  fullName: Cephei.QL
- uid: TypeRef:System.Object
  name: Object
  nameWithType: Object
  fullName: System.Object
  spec.csharp:
  - {}
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - {}
- uid: TypeRef:System.Collections.Concurrent.ConcurrentDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: ConcurrentDictionary<string,ICell>
  nameWithType: ConcurrentDictionary<string,ICell>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Model
  name: Model
  nameWithType: Model
  fullName: Cephei.Cell.Model
  spec.csharp:
  - {}
  - uid: Cephei.Cell.Model
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Model
  - {}
- uid: TypeRef:Cephei.Cell.Generic.Model`1<QLNet.NumericHaganPricer>
  name: Model<NumericHaganPricer>
  nameWithType: Model<NumericHaganPricer>
  fullName: Cephei.Cell.Generic.Model<QLNet.NumericHaganPricer>
  spec.csharp:
  - uid: Cephei.Cell.Generic.Model`1
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Generic.Model
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.NumericHaganPricer
    name: NumericHaganPricer
    nameWithType: NumericHaganPricer
    fullName: QLNet.NumericHaganPricer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.NumericHaganPricer>
  name: ICell<NumericHaganPricer>
  nameWithType: ICell<NumericHaganPricer>
  fullName: Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.NumericHaganPricer
    name: NumericHaganPricer
    nameWithType: NumericHaganPricer
    fullName: QLNet.NumericHaganPricer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.ICell
  name: ICell
  nameWithType: ICell
  fullName: Cephei.Cell.ICell
  spec.csharp:
  - {}
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - {}
- uid: TypeRef:Cephei.Cell.ICellEvent
  name: ICellEvent
  nameWithType: ICellEvent
  fullName: Cephei.Cell.ICellEvent
  spec.csharp:
  - {}
  - uid: Cephei.Cell.ICellEvent
    name: ICellEvent
    nameWithType: ICellEvent
    fullName: Cephei.Cell.ICellEvent
  - {}
- uid: TypeRef:System.Collections.Generic.ICollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: ICollection<KeyValuePair<string,ICell>>
  nameWithType: ICollection<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: IDictionary<string,ICell>
  nameWithType: IDictionary<string,ICell>
  fullName: System.Collections.Generic.IDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: IEnumerable<KeyValuePair<string,ICell>>
  nameWithType: IEnumerable<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IReadOnlyCollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: IReadOnlyCollection<KeyValuePair<string,ICell>>
  nameWithType: IReadOnlyCollection<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IReadOnlyDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: IReadOnlyDictionary<string,ICell>
  nameWithType: IReadOnlyDictionary<string,ICell>
  fullName: System.Collections.Generic.IReadOnlyDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.ICollection
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
  spec.csharp:
  - {}
  - uid: System.Collections.ICollection
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.ICollection
  - {}
- uid: TypeRef:System.Collections.IDictionary
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
  spec.csharp:
  - {}
  - uid: System.Collections.IDictionary
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.IDictionary
  - {}
- uid: TypeRef:System.Collections.IEnumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
  spec.csharp:
  - {}
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
  - {}
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ICell>
  name: IObservable<ICell>
  nameWithType: IObservable<ICell>
  fullName: System.IObservable<Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell`1<QLNet.NumericHaganPricer> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  name: IObservable<ISession * ICell<NumericHaganPricer> * CellEvent * ICell * DateTime>
  nameWithType: IObservable<ISession * ICell<NumericHaganPricer> * CellEvent * ICell * DateTime>
  fullName: System.IObservable<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.NumericHaganPricer
    name: NumericHaganPricer
    nameWithType: NumericHaganPricer
    fullName: QLNet.NumericHaganPricer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  name: IObservable<ISession * Model * CellEvent * ICell * DateTime>
  nameWithType: IObservable<ISession * Model * CellEvent * ICell * DateTime>
  fullName: System.IObservable<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.Model
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Model
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<QLNet.NumericHaganPricer>
  name: IObservable<NumericHaganPricer>
  nameWithType: IObservable<NumericHaganPricer>
  fullName: System.IObservable<QLNet.NumericHaganPricer>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.NumericHaganPricer
    name: NumericHaganPricer
    nameWithType: NumericHaganPricer
    fullName: QLNet.NumericHaganPricer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>>
  name: IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
  nameWithType: IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,QLNet.NumericHaganPricer>>>
  name: IObservable<KeyValuePair<ISession,KeyValuePair<string,NumericHaganPricer>>>
  nameWithType: IObservable<KeyValuePair<ISession,KeyValuePair<string,NumericHaganPricer>>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,QLNet.NumericHaganPricer>>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: QLNet.NumericHaganPricer
    name: NumericHaganPricer
    nameWithType: NumericHaganPricer
    fullName: QLNet.NumericHaganPricer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.decimal>>
  name: IObservable<KeyValuePair<string,decimal>>
  nameWithType: IObservable<KeyValuePair<string,decimal>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,decimal>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.decimal
    name: decimal
    nameWithType: decimal
    fullName: decimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.float>>
  name: IObservable<KeyValuePair<string,float>>
  nameWithType: IObservable<KeyValuePair<string,float>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,float>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.int>>
  name: IObservable<KeyValuePair<string,int>>
  nameWithType: IObservable<KeyValuePair<string,int>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,int>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.int
    name: int
    nameWithType: int
    fullName: int
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObserver`1<QLNet.NumericHaganPricer>
  name: IObserver<NumericHaganPricer>
  nameWithType: IObserver<NumericHaganPricer>
  fullName: System.IObserver<QLNet.NumericHaganPricer>
  spec.csharp:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.NumericHaganPricer
    name: NumericHaganPricer
    nameWithType: NumericHaganPricer
    fullName: QLNet.NumericHaganPricer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell<'T>)
  name: "member Bind: ICell<'T> -> unit"
  nameWithType: "member Model.Bind: ICell<'T> -> unit"
  fullName: "member Cephei.Cell.Generic.Model.Bind: Cephei.Cell.Generic.ICell<'T> -> unit"
- uid: Cephei.Cell.Generic.Model`1.OnCompleted(unit)
  name: 'abstract member OnCompleted: unit -> unit'
  nameWithType: 'abstract member Model.OnCompleted: unit -> unit'
  fullName: 'abstract member Cephei.Cell.Generic.Model.OnCompleted: unit -> unit'
- uid: Cephei.Cell.Generic.Model`1.OnError(exn)
  name: 'abstract member OnError: exn -> unit'
  nameWithType: 'abstract member Model.OnError: exn -> unit'
  fullName: 'abstract member Cephei.Cell.Generic.Model.OnError: exn -> unit'
- uid: Cephei.Cell.Generic.Model`1.OnNext('T)
  name: "abstract member OnNext: 'T -> unit"
  nameWithType: "abstract member Model.OnNext: 'T -> unit"
  fullName: "abstract member Cephei.Cell.Generic.Model.OnNext: 'T -> unit"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<'T>)
  name: "abstract member Subscribe: IObserver<'T> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<'T> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<'T> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  name: "abstract member Subscribe: IObserver<ISession * ICell<'T> * CellEvent * ICell * DateTime> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<ISession * ICell<'T> * CellEvent * ICell * DateTime> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>>)
  name: "abstract member Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,'T>>> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,'T>>> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Value(unit)
  name: "abstract property Value: 'T"
  nameWithType: "abstract property Model.Value: 'T"
  fullName: "abstract property Cephei.Cell.Generic.Model.Value: 'T"
- uid: Cephei.Cell.Model.As(string)
  name: "member As: string -> ICell<'T>"
  nameWithType: "member Model.As: string -> ICell<'T>"
  fullName: "member Cephei.Cell.Model.As: string -> Cephei.Cell.Generic.ICell<'T>"
- uid: Cephei.Cell.Model.Bind(unit)
  name: 'member Bind: unit -> unit'
  nameWithType: 'member Model.Bind: unit -> unit'
  fullName: 'member Cephei.Cell.Model.Bind: unit -> unit'
- uid: Cephei.Cell.Model.Box(unit)
  name: 'abstract property Box: obj'
  nameWithType: 'abstract property Model.Box: obj'
  fullName: 'abstract property Cephei.Cell.Model.Box: obj'
- uid: Cephei.Cell.Model.Change()
  name: 'abstract member Change: CellChange'
  nameWithType: 'abstract member Model.Change: CellChange'
  fullName: 'abstract member Cephei.Cell.Model.Change: Cephei.Cell.CellChange'
- uid: Cephei.Cell.Model.Create(Unit -> 'T * string)
  name: "member Create: Unit -> 'T * string -> Cell<'T>"
  nameWithType: "member Model.Create: Unit -> 'T * string -> Cell<'T>"
  fullName: "member Cephei.Cell.Model.Create: Unit -> 'T * string -> Cephei.Cell.Generic.Cell<'T>"
- uid: Cephei.Cell.Model.CreateValue('T * string)
  name: "member CreateValue: 'T * string -> Cell<'T>"
  nameWithType: "member Model.CreateValue: 'T * string -> Cell<'T>"
  fullName: "member Cephei.Cell.Model.CreateValue: 'T * string -> Cephei.Cell.Generic.Cell<'T>"
- uid: Cephei.Cell.Model.Dependants(unit)
  name: 'abstract property Dependants: IEnumerable<ICellEvent>'
  nameWithType: 'abstract property Model.Dependants: IEnumerable<ICellEvent>'
  fullName: 'abstract property Cephei.Cell.Model.Dependants: System.Collections.Generic.IEnumerable<Cephei.Cell.ICellEvent>'
- uid: Cephei.Cell.Model.Dispose(unit)
  name: 'member Dispose: unit -> unit'
  nameWithType: 'member Model.Dispose: unit -> unit'
  fullName: 'member Cephei.Cell.Model.Dispose: unit -> unit'
- uid: Cephei.Cell.Model.GetOrAdd(string * Cephei.Cell.ICell)
  name: 'member GetOrAdd: string * ICell -> ICell'
  nameWithType: 'member Model.GetOrAdd: string * ICell -> ICell'
  fullName: 'member Cephei.Cell.Model.GetOrAdd: string * Cephei.Cell.ICell -> Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.HasFunction(unit)
  name: 'abstract property HasFunction: bool'
  nameWithType: 'abstract property Model.HasFunction: bool'
  fullName: 'abstract property Cephei.Cell.Model.HasFunction: bool'
- uid: Cephei.Cell.Model.HasValue(unit)
  name: 'abstract property HasValue: bool'
  nameWithType: 'abstract property Model.HasValue: bool'
  fullName: 'abstract property Cephei.Cell.Model.HasValue: bool'
- uid: Cephei.Cell.Model.Item(string)
  name: 'property Item: string -> ICell'
  nameWithType: 'property Model.Item: string -> ICell'
  fullName: 'property Cephei.Cell.Model.Item: string -> Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.Mnemonic(unit)
  name: 'abstract property Mnemonic: string'
  nameWithType: 'abstract property Model.Mnemonic: string'
  fullName: 'abstract property Cephei.Cell.Model.Mnemonic: string'
- uid: Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession)
  name: 'abstract member OnChange: CellEvent * ICellEvent * DateTime * ISession -> unit'
  nameWithType: 'abstract member Model.OnChange: CellEvent * ICellEvent * DateTime * ISession -> unit'
  fullName: 'abstract member Cephei.Cell.Model.OnChange: Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession -> unit'
- uid: Cephei.Cell.Model.Parent(unit)
  name: 'abstract property Parent: ICell'
  nameWithType: 'abstract property Model.Parent: ICell'
  fullName: 'abstract property Cephei.Cell.Model.Parent: Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ICell>)
  name: 'abstract member Subscribe: IObserver<ICell> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<ICell> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<Cephei.Cell.ICell> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  name: 'abstract member Subscribe: IObserver<ISession * Model * CellEvent * ICell * DateTime> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<ISession * Model * CellEvent * ICell * DateTime> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,ICell>>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,ICell>>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,decimal>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,decimal>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,float>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,float>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,float>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,float>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,int>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,int>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,int>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,int>> -> System.IDisposable'
- uid: Cephei.Cell.Model.TryAdd(string * Cephei.Cell.ICell)
  name: 'member TryAdd: string * ICell -> bool'
  nameWithType: 'member Model.TryAdd: string * ICell -> bool'
  fullName: 'member Cephei.Cell.Model.TryAdd: string * Cephei.Cell.ICell -> bool'
- uid: Cephei.Cell.Model.TryRemove(string * Cephei.Cell.ICell byref)
  name: 'member TryRemove: string * ICell byref -> bool'
  nameWithType: 'member Model.TryRemove: string * ICell byref -> bool'
  fullName: 'member Cephei.Cell.Model.TryRemove: string * Cephei.Cell.ICell byref -> bool'
- uid: Cephei.Cell.Model.TryUpdate(string * Cephei.Cell.ICell * Cephei.Cell.ICell)
  name: 'member TryUpdate: string * ICell * ICell -> bool'
  nameWithType: 'member Model.TryUpdate: string * ICell * ICell -> bool'
  fullName: 'member Cephei.Cell.Model.TryUpdate: string * Cephei.Cell.ICell * Cephei.Cell.ICell -> bool'
- uid: Cephei.Cell.Model.add_Change(Cephei.Cell.CellChange)
  name: 'abstract member add_Change: CellChange -> unit'
  nameWithType: 'abstract member Model.add_Change: CellChange -> unit'
  fullName: 'abstract member Cephei.Cell.Model.add_Change: Cephei.Cell.CellChange -> unit'
- uid: Cephei.Cell.Model.remove_Change(Cephei.Cell.CellChange)
  name: 'abstract member remove_Change: CellChange -> unit'
  nameWithType: 'abstract member Model.remove_Change: CellChange -> unit'
  fullName: 'abstract member Cephei.Cell.Model.remove_Change: Cephei.Cell.CellChange -> unit'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * 'TValue * System.Func<'TKey,'TValue,'TValue>)
  name: "member AddOrUpdate: 'TKey * 'TValue * Func<'TKey,'TValue,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.AddOrUpdate: 'TKey * 'TValue * Func<'TKey,'TValue,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.AddOrUpdate: 'TKey * 'TValue * System.Func<'TKey,'TValue,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue>)
  name: "member AddOrUpdate: 'TKey * Func<'TKey,'TValue> * Func<'TKey,'TValue,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.AddOrUpdate: 'TKey * Func<'TKey,'TValue> * Func<'TKey,'TValue,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.AddOrUpdate: 'TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear(unit)
  name: 'abstract member Clear: unit -> unit'
  nameWithType: 'abstract member ConcurrentDictionary.Clear: unit -> unit'
  fullName: 'abstract member System.Collections.Concurrent.ConcurrentDictionary.Clear: unit -> unit'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey('TKey)
  name: "abstract member ContainsKey: 'TKey -> bool"
  nameWithType: "abstract member ConcurrentDictionary.ContainsKey: 'TKey -> bool"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.ContainsKey: 'TKey -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count(unit)
  name: 'abstract property Count: int'
  nameWithType: 'abstract property ConcurrentDictionary.Count: int'
  fullName: 'abstract property System.Collections.Concurrent.ConcurrentDictionary.Count: int'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator(unit)
  name: "abstract member GetEnumerator: unit -> IEnumerator<KeyValuePair<'TKey,'TValue>>"
  nameWithType: "abstract member ConcurrentDictionary.GetEnumerator: unit -> IEnumerator<KeyValuePair<'TKey,'TValue>>"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.GetEnumerator: unit -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<'TKey,'TValue>>"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * 'TValue)
  name: "member GetOrAdd: 'TKey * 'TValue -> 'TValue"
  nameWithType: "member ConcurrentDictionary.GetOrAdd: 'TKey * 'TValue -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd: 'TKey * 'TValue -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * System.Func<'TKey,'TValue>)
  name: "member GetOrAdd: 'TKey * Func<'TKey,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.GetOrAdd: 'TKey * Func<'TKey,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd: 'TKey * System.Func<'TKey,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty(unit)
  name: 'property IsEmpty: bool'
  nameWithType: 'property ConcurrentDictionary.IsEmpty: bool'
  fullName: 'property System.Collections.Concurrent.ConcurrentDictionary.IsEmpty: bool'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item('TKey)
  name: "abstract property Item: 'TKey -> 'TValue"
  nameWithType: "abstract property ConcurrentDictionary.Item: 'TKey -> 'TValue"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Item: 'TKey -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys(unit)
  name: "abstract property Keys: ICollection<'TKey>"
  nameWithType: "abstract property ConcurrentDictionary.Keys: ICollection<'TKey>"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Keys: System.Collections.Generic.ICollection<'TKey>"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray(unit)
  name: "member ToArray: unit -> KeyValuePair<'TKey,'TValue> []"
  nameWithType: "member ConcurrentDictionary.ToArray: unit -> KeyValuePair<'TKey,'TValue> []"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.ToArray: unit -> System.Collections.Generic.KeyValuePair<'TKey,'TValue> []"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd('TKey * 'TValue)
  name: "member TryAdd: 'TKey * 'TValue -> bool"
  nameWithType: "member ConcurrentDictionary.TryAdd: 'TKey * 'TValue -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryAdd: 'TKey * 'TValue -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue('TKey * 'TValue byref)
  name: "abstract member TryGetValue: 'TKey * 'TValue byref -> bool"
  nameWithType: "abstract member ConcurrentDictionary.TryGetValue: 'TKey * 'TValue byref -> bool"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.TryGetValue: 'TKey * 'TValue byref -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove('TKey * 'TValue byref)
  name: "member TryRemove: 'TKey * 'TValue byref -> bool"
  nameWithType: "member ConcurrentDictionary.TryRemove: 'TKey * 'TValue byref -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryRemove: 'TKey * 'TValue byref -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate('TKey * 'TValue * 'TValue)
  name: "member TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
  nameWithType: "member ConcurrentDictionary.TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values(unit)
  name: "abstract property Values: ICollection<'TValue>"
  nameWithType: "abstract property ConcurrentDictionary.Values: ICollection<'TValue>"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Values: System.Collections.Generic.ICollection<'TValue>"
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.SwaptionVolatilityStructure>>
  name: ICell<Handle<SwaptionVolatilityStructure>>
  nameWithType: ICell<Handle<SwaptionVolatilityStructure>>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.SwaptionVolatilityStructure>>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Handle`1
    name: Handle
    nameWithType: Handle
    fullName: QLNet.Handle
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.SwaptionVolatilityStructure
    name: SwaptionVolatilityStructure
    nameWithType: SwaptionVolatilityStructure
    fullName: QLNet.SwaptionVolatilityStructure
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.GFunctionFactory.YieldCurveModel>
  name: ICell<YieldCurveModel>
  nameWithType: ICell<YieldCurveModel>
  fullName: Cephei.Cell.Generic.ICell<QLNet.GFunctionFactory.YieldCurveModel>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.GFunctionFactory.YieldCurveModel
    name: YieldCurveModel
    nameWithType: YieldCurveModel
    fullName: QLNet.GFunctionFactory.YieldCurveModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.Quote>>
  name: ICell<Handle<Quote>>
  nameWithType: ICell<Handle<Quote>>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Handle`1
    name: Handle
    nameWithType: Handle
    fullName: QLNet.Handle
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Quote
    name: Quote
    nameWithType: Quote
    fullName: QLNet.Quote
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
  name: ICell<double>
  nameWithType: ICell<double>
  fullName: Cephei.Cell.Generic.ICell<double>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.double
    name: double
    nameWithType: double
    fullName: double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.NumericHaganPricerModel.#ctor*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.#ctor*
  name: ( .ctor )
  nameWithType: NumericHaganPricerModel.( .ctor )
  fullName: Cephei.QL.NumericHaganPricerModel
- uid: TypeRef:Cephei.QL.NumericHaganPricerModel
  name: NumericHaganPricerModel
  nameWithType: NumericHaganPricerModel
  fullName: Cephei.QL.NumericHaganPricerModel
  spec.csharp:
  - {}
  - uid: Cephei.QL.NumericHaganPricerModel
    name: NumericHaganPricerModel
    nameWithType: NumericHaganPricerModel
    fullName: Cephei.QL.NumericHaganPricerModel
  - {}
- uid: Cephei.QL.NumericHaganPricerModel.CapletPrice*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.CapletPrice*
  name: CapletPrice
  nameWithType: NumericHaganPricerModel.CapletPrice
  fullName: Cephei.QL.NumericHaganPricerModel.CapletPrice
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
  name: ICell<float>
  nameWithType: ICell<float>
  fullName: Cephei.Cell.Generic.ICell<float>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.NumericHaganPricerModel.CapletRate*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.CapletRate*
  name: CapletRate
  nameWithType: NumericHaganPricerModel.CapletRate
  fullName: Cephei.QL.NumericHaganPricerModel.CapletRate
- uid: Cephei.QL.NumericHaganPricerModel.FloorletPrice*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.FloorletPrice*
  name: FloorletPrice
  nameWithType: NumericHaganPricerModel.FloorletPrice
  fullName: Cephei.QL.NumericHaganPricerModel.FloorletPrice
- uid: Cephei.QL.NumericHaganPricerModel.FloorletRate*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.FloorletRate*
  name: FloorletRate
  nameWithType: NumericHaganPricerModel.FloorletRate
  fullName: Cephei.QL.NumericHaganPricerModel.FloorletRate
- uid: Cephei.QL.NumericHaganPricerModel.Initialize*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.Initialize*
  name: Initialize
  nameWithType: NumericHaganPricerModel.Initialize
  fullName: Cephei.QL.NumericHaganPricerModel.Initialize
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.FloatingRateCoupon>
  name: ICell<FloatingRateCoupon>
  nameWithType: ICell<FloatingRateCoupon>
  fullName: Cephei.Cell.Generic.ICell<QLNet.FloatingRateCoupon>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.FloatingRateCoupon
    name: FloatingRateCoupon
    nameWithType: FloatingRateCoupon
    fullName: QLNet.FloatingRateCoupon
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.NumericHaganPricerModel.Integrate*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.Integrate*
  name: Integrate
  nameWithType: NumericHaganPricerModel.Integrate
  fullName: Cephei.QL.NumericHaganPricerModel.Integrate
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.NumericHaganPricer.ConundrumIntegrand>
  name: ICell<ConundrumIntegrand>
  nameWithType: ICell<ConundrumIntegrand>
  fullName: Cephei.Cell.Generic.ICell<QLNet.NumericHaganPricer.ConundrumIntegrand>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.NumericHaganPricer.ConundrumIntegrand
    name: ConundrumIntegrand
    nameWithType: ConundrumIntegrand
    fullName: QLNet.NumericHaganPricer.ConundrumIntegrand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.NumericHaganPricerModel.RefineIntegration*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.RefineIntegration*
  name: RefineIntegration
  nameWithType: NumericHaganPricerModel.RefineIntegration
  fullName: Cephei.QL.NumericHaganPricerModel.RefineIntegration
- uid: Cephei.QL.NumericHaganPricerModel.RegisterWith*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.RegisterWith*
  name: RegisterWith
  nameWithType: NumericHaganPricerModel.RegisterWith
  fullName: Cephei.QL.NumericHaganPricerModel.RegisterWith
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Callback>
  name: ICell<Callback>
  nameWithType: ICell<Callback>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Callback>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Callback
    name: Callback
    nameWithType: Callback
    fullName: QLNet.Callback
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.NumericHaganPricerModel.ResetUpperLimit*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.ResetUpperLimit*
  name: ResetUpperLimit
  nameWithType: NumericHaganPricerModel.ResetUpperLimit
  fullName: Cephei.QL.NumericHaganPricerModel.ResetUpperLimit
- uid: Cephei.QL.NumericHaganPricerModel.SetMeanReversion*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.SetMeanReversion*
  name: SetMeanReversion
  nameWithType: NumericHaganPricerModel.SetMeanReversion
  fullName: Cephei.QL.NumericHaganPricerModel.SetMeanReversion
- uid: Cephei.QL.NumericHaganPricerModel.SetSwaptionVolatility*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.SetSwaptionVolatility*
  name: SetSwaptionVolatility
  nameWithType: NumericHaganPricerModel.SetSwaptionVolatility
  fullName: Cephei.QL.NumericHaganPricerModel.SetSwaptionVolatility
- uid: Cephei.QL.NumericHaganPricerModel.UnregisterWith*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.UnregisterWith*
  name: UnregisterWith
  nameWithType: NumericHaganPricerModel.UnregisterWith
  fullName: Cephei.QL.NumericHaganPricerModel.UnregisterWith
- uid: Cephei.QL.NumericHaganPricerModel.upperLimit*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.upperLimit*
  name: upperLimit
  nameWithType: NumericHaganPricerModel.upperLimit
  fullName: Cephei.QL.NumericHaganPricerModel.upperLimit
- uid: Cephei.QL.NumericHaganPricerModel.swaptionVol*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.swaptionVol*
  name: swaptionVol
  nameWithType: NumericHaganPricerModel.swaptionVol
  fullName: Cephei.QL.NumericHaganPricerModel.swaptionVol
- uid: Cephei.QL.NumericHaganPricerModel.precision*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.precision*
  name: precision
  nameWithType: NumericHaganPricerModel.precision
  fullName: Cephei.QL.NumericHaganPricerModel.precision
- uid: Cephei.QL.NumericHaganPricerModel.modelOfYieldCurve*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.modelOfYieldCurve*
  name: modelOfYieldCurve
  nameWithType: NumericHaganPricerModel.modelOfYieldCurve
  fullName: Cephei.QL.NumericHaganPricerModel.modelOfYieldCurve
- uid: Cephei.QL.NumericHaganPricerModel.meanReversion*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.meanReversion*
  name: meanReversion
  nameWithType: NumericHaganPricerModel.meanReversion
  fullName: Cephei.QL.NumericHaganPricerModel.meanReversion
- uid: Cephei.QL.NumericHaganPricerModel.lowerLimit*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.lowerLimit*
  name: lowerLimit
  nameWithType: NumericHaganPricerModel.lowerLimit
  fullName: Cephei.QL.NumericHaganPricerModel.lowerLimit
- uid: Cephei.QL.NumericHaganPricerModel.hardUpperLimit*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.hardUpperLimit*
  name: hardUpperLimit
  nameWithType: NumericHaganPricerModel.hardUpperLimit
  fullName: Cephei.QL.NumericHaganPricerModel.hardUpperLimit
- uid: Cephei.QL.NumericHaganPricerModel.UpperLimit*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.UpperLimit*
  name: UpperLimit
  nameWithType: NumericHaganPricerModel.UpperLimit
  fullName: Cephei.QL.NumericHaganPricerModel.UpperLimit
- uid: Cephei.QL.NumericHaganPricerModel.Update*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.Update*
  name: Update
  nameWithType: NumericHaganPricerModel.Update
  fullName: Cephei.QL.NumericHaganPricerModel.Update
- uid: Cephei.QL.NumericHaganPricerModel.SwaptionVolatility*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.SwaptionVolatility*
  name: SwaptionVolatility
  nameWithType: NumericHaganPricerModel.SwaptionVolatility
  fullName: Cephei.QL.NumericHaganPricerModel.SwaptionVolatility
- uid: Cephei.QL.NumericHaganPricerModel.SwapletRate*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.SwapletRate*
  name: SwapletRate
  nameWithType: NumericHaganPricerModel.SwapletRate
  fullName: Cephei.QL.NumericHaganPricerModel.SwapletRate
- uid: Cephei.QL.NumericHaganPricerModel.SwapletPrice*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.SwapletPrice*
  name: SwapletPrice
  nameWithType: NumericHaganPricerModel.SwapletPrice
  fullName: Cephei.QL.NumericHaganPricerModel.SwapletPrice
- uid: Cephei.QL.NumericHaganPricerModel.StdDeviations*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.StdDeviations*
  name: StdDeviations
  nameWithType: NumericHaganPricerModel.StdDeviations
  fullName: Cephei.QL.NumericHaganPricerModel.StdDeviations
- uid: Cephei.QL.NumericHaganPricerModel.MeanReversion*
  commentId: Overload:Cephei.QL.NumericHaganPricerModel.MeanReversion*
  name: MeanReversion
  nameWithType: NumericHaganPricerModel.MeanReversion
  fullName: Cephei.QL.NumericHaganPricerModel.MeanReversion
