### YamlMime:ManagedReference
items:
- uid: Cephei.QL.HestonProcessModel
  commentId: T:Cephei.QL.HestonProcessModel
  id: HestonProcessModel
  parent: Cephei.QL
  children:
  - Cephei.QL.HestonProcessModel.#ctor(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.HestonProcess.Discretization>)
  - Cephei.QL.HestonProcessModel.Apply(Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
  - Cephei.QL.HestonProcessModel.Covariance(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.HestonProcessModel.d(unit)
  - Cephei.QL.HestonProcessModel.Diffusion(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
  - Cephei.QL.HestonProcessModel.dividendYield(unit)
  - Cephei.QL.HestonProcessModel.DividendYield(unit)
  - Cephei.QL.HestonProcessModel.Drift(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
  - Cephei.QL.HestonProcessModel.Evolve(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
  - Cephei.QL.HestonProcessModel.Expectation(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.HestonProcessModel.Factors(unit)
  - Cephei.QL.HestonProcessModel.InitialValues(unit)
  - Cephei.QL.HestonProcessModel.kappa(unit)
  - Cephei.QL.HestonProcessModel.Kappa(unit)
  - Cephei.QL.HestonProcessModel.RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  - Cephei.QL.HestonProcessModel.rho(unit)
  - Cephei.QL.HestonProcessModel.Rho(unit)
  - Cephei.QL.HestonProcessModel.riskFreeRate(unit)
  - Cephei.QL.HestonProcessModel.RiskFreeRate(unit)
  - Cephei.QL.HestonProcessModel.s0(unit)
  - Cephei.QL.HestonProcessModel.S0(unit)
  - Cephei.QL.HestonProcessModel.sigma(unit)
  - Cephei.QL.HestonProcessModel.Sigma(unit)
  - Cephei.QL.HestonProcessModel.Size(unit)
  - Cephei.QL.HestonProcessModel.StdDeviation(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.HestonProcessModel.theta(unit)
  - Cephei.QL.HestonProcessModel.Theta(unit)
  - Cephei.QL.HestonProcessModel.Time(Cephei.Cell.Generic.ICell<QLNet.Date>)
  - Cephei.QL.HestonProcessModel.UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  - Cephei.QL.HestonProcessModel.Update(unit)
  - Cephei.QL.HestonProcessModel.v0(unit)
  - Cephei.QL.HestonProcessModel.V0(unit)
  langs:
  - csharp
  - vb
  name: HestonProcessModel
  nameWithType: Cephei.QL.HestonProcessModel
  fullName: Cephei.QL.HestonProcessModel
  type: Class
  source:
    id: Cephei.QL.HestonProcessModel
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 35
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: >-
      [<AutoSerializable(true)>]

      type HestonProcessModel (riskFreeRate:ICell<Handle<YieldTermStructure>>, dividendYield:ICell<Handle<YieldTermStructure>>, s0:ICell<Handle<Quote>>, v0:ICell<double>, kappa:ICell<double>, theta:ICell<double>, sigma:ICell<double>, rho:ICell<double>, d:ICell<Discretization>)
          inherit Model<HestonProcess>
          interface IDictionary<string,ICell>
          interface ICollection<KeyValuePair<string,ICell>>
          interface IReadOnlyDictionary<string,ICell>
          interface IReadOnlyCollection<KeyValuePair<string,ICell>>
          interface IEnumerable<KeyValuePair<string,ICell>>
          interface IDictionary
          interface ICollection
          interface IEnumerable
          interface IObservable<ICell>
          interface IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
          interface IObservable<ISession * Model * CellEvent * ICell * DateTime>
          interface IObservable<KeyValuePair<string,float>>
          interface IObservable<KeyValuePair<string,int>>
          interface IObservable<KeyValuePair<string,decimal>>
          interface ICell<HestonProcess>
          interface ICell
          interface ICellEvent
          interface IObservable<HestonProcess>
          interface IObservable<KeyValuePair<ISession,KeyValuePair<string,HestonProcess>>>
          interface IObservable<ISession * ICell<HestonProcess> * CellEvent * ICell * DateTime>
          interface IObserver<HestonProcess>
    parameters:
    - id: riskFreeRate
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
    - id: dividendYield
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
    - id: s0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.Quote>>
      attributes: []
    - id: v0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: kappa
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: theta
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: sigma
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: rho
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: d
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.HestonProcess.Discretization>
      attributes: []
    typeParameters: []
  inheritance:
  - TypeRef:System.Object
  - TypeRef:System.Collections.Concurrent.ConcurrentDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:Cephei.Cell.Model
  - TypeRef:Cephei.Cell.Generic.Model`1<QLNet.HestonProcess>
  implements:
  - TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.HestonProcess>
  - TypeRef:Cephei.Cell.ICell
  - TypeRef:Cephei.Cell.ICellEvent
  - TypeRef:System.Collections.Generic.ICollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IReadOnlyCollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IReadOnlyDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:System.Collections.ICollection
  - TypeRef:System.Collections.IDictionary
  - TypeRef:System.Collections.IEnumerable
  - TypeRef:System.IObservable`1<Cephei.Cell.ICell>
  - TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell`1<QLNet.HestonProcess> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  - TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  - TypeRef:System.IObservable`1<QLNet.HestonProcess>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,QLNet.HestonProcess>>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.decimal>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.float>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.int>>
  - TypeRef:System.IObserver`1<QLNet.HestonProcess>
  inheritedMembers:
  - Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell<'T>)
  - Cephei.Cell.Generic.Model`1.OnCompleted(unit)
  - Cephei.Cell.Generic.Model`1.OnError(exn)
  - Cephei.Cell.Generic.Model`1.OnNext('T)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<'T>)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>>)
  - Cephei.Cell.Generic.Model`1.Value(unit)
  - Cephei.Cell.Model.As(string)
  - Cephei.Cell.Model.Bind(unit)
  - Cephei.Cell.Model.Box(unit)
  - Cephei.Cell.Model.Change()
  - Cephei.Cell.Model.Create(Unit -> 'T * string)
  - Cephei.Cell.Model.CreateValue('T * string)
  - Cephei.Cell.Model.Dependants(unit)
  - Cephei.Cell.Model.Dispose(unit)
  - Cephei.Cell.Model.GetOrAdd(string * Cephei.Cell.ICell)
  - Cephei.Cell.Model.HasFunction(unit)
  - Cephei.Cell.Model.HasValue(unit)
  - Cephei.Cell.Model.Item(string)
  - Cephei.Cell.Model.Mnemonic(unit)
  - Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession)
  - Cephei.Cell.Model.Parent(unit)
  - Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ICell>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,float>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,int>>)
  - Cephei.Cell.Model.TryAdd(string * Cephei.Cell.ICell)
  - Cephei.Cell.Model.TryRemove(string * Cephei.Cell.ICell byref)
  - Cephei.Cell.Model.TryUpdate(string * Cephei.Cell.ICell * Cephei.Cell.ICell)
  - Cephei.Cell.Model.add_Change(Cephei.Cell.CellChange)
  - Cephei.Cell.Model.remove_Change(Cephei.Cell.CellChange)
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * 'TValue * System.Func<'TKey,'TValue,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Clear(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey('TKey)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Count(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * System.Func<'TKey,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Item('TKey)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Keys(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.ToArray(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd('TKey * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue('TKey * 'TValue byref)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove('TKey * 'TValue byref)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate('TKey * 'TValue * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Values(unit)
  attributes:
  - type: Microsoft.FSharp.Core.AutoSerializableAttribute
    arguments:
    - type: System.Boolean
      value: true
    namedArguments: []
- uid: Cephei.QL.HestonProcessModel.#ctor(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.HestonProcess.Discretization>)
  commentId: M:Cephei.QL.HestonProcessModel.#ctor(Cephei.Cell.Generic.ICell{QLNet.Handle{QLNet.YieldTermStructure}},Cephei.Cell.Generic.ICell{QLNet.Handle{QLNet.YieldTermStructure}},Cephei.Cell.Generic.ICell{QLNet.Handle{QLNet.Quote}},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{QLNet.HestonProcess.Discretization})
  id: '#ctor(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.HestonProcess.Discretization>)'
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'new: ICell<Handle<YieldTermStructure>> * ICell<Handle<YieldTermStructure>> * ICell<Handle<Quote>> * ICell<double> * ICell<double> * ICell<double> * ICell<double> * ICell<double> * ICell<Discretization> -> HestonProcessModel'
  nameWithType: 'new: ICell<Handle<YieldTermStructure>> * ICell<Handle<YieldTermStructure>> * ICell<Handle<Quote>> * ICell<double> * ICell<double> * ICell<double> * ICell<double> * ICell<double> * ICell<Discretization> -> HestonProcessModel'
  fullName: 'new: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.HestonProcess.Discretization> -> Cephei.QL.HestonProcessModel'
  type: Constructor
  source:
    id: Cephei.QL.HestonProcessModel.#ctor(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.HestonProcess.Discretization>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 35
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  summary: Implicit constructor.
  syntax:
    content: 'new: riskFreeRate:ICell<Handle<YieldTermStructure>> * dividendYield:ICell<Handle<YieldTermStructure>> * s0:ICell<Handle<Quote>> * v0:ICell<double> * kappa:ICell<double> * theta:ICell<double> * sigma:ICell<double> * rho:ICell<double> * d:ICell<Discretization> -> HestonProcessModel'
    parameters:
    - id: riskFreeRate
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
    - id: dividendYield
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
    - id: s0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.Quote>>
      attributes: []
    - id: v0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: kappa
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: theta
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: sigma
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: rho
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: d
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.HestonProcess.Discretization>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.QL.HestonProcessModel
      attributes: []
  overload: Cephei.QL.HestonProcessModel.#ctor*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.Apply(Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
  commentId: M:Cephei.QL.HestonProcessModel.Apply(Cephei.Cell.Generic.ICell{QLNet.Vector},Cephei.Cell.Generic.ICell{QLNet.Vector})
  id: Apply(Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'member Apply: ICell<Vector> -> ICell<Vector> -> ICell<Vector>'
  nameWithType: 'member HestonProcessModel.Apply: ICell<Vector> -> ICell<Vector> -> ICell<Vector>'
  fullName: 'member Cephei.QL.HestonProcessModel.Apply: Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<QLNet.Vector>'
  type: Method
  source:
    id: Cephei.QL.HestonProcessModel.Apply(Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 113
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Apply: x0:ICell<Vector> -> dx:ICell<Vector> -> ICell<Vector>'
    parameters:
    - id: x0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
    - id: dx
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.Apply*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.Covariance(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.HestonProcessModel.Covariance(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{QLNet.Vector},Cephei.Cell.Generic.ICell{System.Double})
  id: Covariance(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double>)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'member Covariance: ICell<double> -> ICell<Vector> -> ICell<double> -> ICell<Matrix>'
  nameWithType: 'member HestonProcessModel.Covariance: ICell<double> -> ICell<Vector> -> ICell<double> -> ICell<Matrix>'
  fullName: 'member Cephei.QL.HestonProcessModel.Covariance: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Matrix>'
  type: Method
  source:
    id: Cephei.QL.HestonProcessModel.Covariance(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 134
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Covariance: t0:ICell<double> -> x0:ICell<Vector> -> dt:ICell<double> -> ICell<Matrix>'
    parameters:
    - id: t0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: x0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
    - id: dt
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Matrix>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.Covariance*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.Diffusion(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
  commentId: M:Cephei.QL.HestonProcessModel.Diffusion(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{QLNet.Vector})
  id: Diffusion(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'member Diffusion: ICell<double> -> ICell<Vector> -> ICell<Matrix>'
  nameWithType: 'member HestonProcessModel.Diffusion: ICell<double> -> ICell<Vector> -> ICell<Matrix>'
  fullName: 'member Cephei.QL.HestonProcessModel.Diffusion: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<QLNet.Matrix>'
  type: Method
  source:
    id: Cephei.QL.HestonProcessModel.Diffusion(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 115
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Diffusion: t:ICell<double> -> x:ICell<Vector> -> ICell<Matrix>'
    parameters:
    - id: t
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: x
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Matrix>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.Diffusion*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.Drift(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
  commentId: M:Cephei.QL.HestonProcessModel.Drift(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{QLNet.Vector})
  id: Drift(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'member Drift: ICell<double> -> ICell<Vector> -> ICell<Vector>'
  nameWithType: 'member HestonProcessModel.Drift: ICell<double> -> ICell<Vector> -> ICell<Vector>'
  fullName: 'member Cephei.QL.HestonProcessModel.Drift: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<QLNet.Vector>'
  type: Method
  source:
    id: Cephei.QL.HestonProcessModel.Drift(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 118
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Drift: t:ICell<double> -> x:ICell<Vector> -> ICell<Vector>'
    parameters:
    - id: t
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: x
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.Drift*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.Evolve(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
  commentId: M:Cephei.QL.HestonProcessModel.Evolve(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{QLNet.Vector},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{QLNet.Vector})
  id: Evolve(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'member Evolve: ICell<double> -> ICell<Vector> -> ICell<double> -> ICell<Vector> -> ICell<Vector>'
  nameWithType: 'member HestonProcessModel.Evolve: ICell<double> -> ICell<Vector> -> ICell<double> -> ICell<Vector> -> ICell<Vector>'
  fullName: 'member Cephei.QL.HestonProcessModel.Evolve: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<QLNet.Vector>'
  type: Method
  source:
    id: Cephei.QL.HestonProcessModel.Evolve(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 120
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Evolve: t0:ICell<double> -> x0:ICell<Vector> -> dt:ICell<double> -> dw:ICell<Vector> -> ICell<Vector>'
    parameters:
    - id: t0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: x0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
    - id: dt
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: dw
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.Evolve*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.Expectation(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.HestonProcessModel.Expectation(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{QLNet.Vector},Cephei.Cell.Generic.ICell{System.Double})
  id: Expectation(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double>)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'member Expectation: ICell<double> -> ICell<Vector> -> ICell<double> -> ICell<Vector>'
  nameWithType: 'member HestonProcessModel.Expectation: ICell<double> -> ICell<Vector> -> ICell<double> -> ICell<Vector>'
  fullName: 'member Cephei.QL.HestonProcessModel.Expectation: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector>'
  type: Method
  source:
    id: Cephei.QL.HestonProcessModel.Expectation(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 136
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Expectation: t0:ICell<double> -> x0:ICell<Vector> -> dt:ICell<double> -> ICell<Vector>'
    parameters:
    - id: t0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: x0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
    - id: dt
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.Expectation*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  commentId: M:Cephei.QL.HestonProcessModel.RegisterWith(Cephei.Cell.Generic.ICell{QLNet.Callback})
  id: RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'member RegisterWith: ICell<Callback> -> ICell<HestonProcess>'
  nameWithType: 'member HestonProcessModel.RegisterWith: ICell<Callback> -> ICell<HestonProcess>'
  fullName: 'member Cephei.QL.HestonProcessModel.RegisterWith: Cephei.Cell.Generic.ICell<QLNet.Callback> -> Cephei.Cell.Generic.ICell<QLNet.HestonProcess>'
  type: Method
  source:
    id: Cephei.QL.HestonProcessModel.RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 138
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member RegisterWith: handler:ICell<Callback> -> ICell<HestonProcess>'
    parameters:
    - id: handler
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Callback>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.HestonProcess>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.RegisterWith*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.StdDeviation(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.HestonProcessModel.StdDeviation(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{QLNet.Vector},Cephei.Cell.Generic.ICell{System.Double})
  id: StdDeviation(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double>)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'member StdDeviation: ICell<double> -> ICell<Vector> -> ICell<double> -> ICell<Matrix>'
  nameWithType: 'member HestonProcessModel.StdDeviation: ICell<double> -> ICell<Vector> -> ICell<double> -> ICell<Matrix>'
  fullName: 'member Cephei.QL.HestonProcessModel.StdDeviation: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Matrix>'
  type: Method
  source:
    id: Cephei.QL.HestonProcessModel.StdDeviation(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 140
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member StdDeviation: t0:ICell<double> -> x0:ICell<Vector> -> dt:ICell<double> -> ICell<Matrix>'
    parameters:
    - id: t0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: x0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
    - id: dt
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Matrix>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.StdDeviation*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.Time(Cephei.Cell.Generic.ICell<QLNet.Date>)
  commentId: M:Cephei.QL.HestonProcessModel.Time(Cephei.Cell.Generic.ICell{QLNet.Date})
  id: Time(Cephei.Cell.Generic.ICell<QLNet.Date>)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'member Time: ICell<Date> -> ICell<float>'
  nameWithType: 'member HestonProcessModel.Time: ICell<Date> -> ICell<float>'
  fullName: 'member Cephei.QL.HestonProcessModel.Time: Cephei.Cell.Generic.ICell<QLNet.Date> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.HestonProcessModel.Time(Cephei.Cell.Generic.ICell<QLNet.Date>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 131
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Time: d:ICell<Date> -> ICell<float>'
    parameters:
    - id: d
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Date>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.Time*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  commentId: M:Cephei.QL.HestonProcessModel.UnregisterWith(Cephei.Cell.Generic.ICell{QLNet.Callback})
  id: UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'member UnregisterWith: ICell<Callback> -> ICell<HestonProcess>'
  nameWithType: 'member HestonProcessModel.UnregisterWith: ICell<Callback> -> ICell<HestonProcess>'
  fullName: 'member Cephei.QL.HestonProcessModel.UnregisterWith: Cephei.Cell.Generic.ICell<QLNet.Callback> -> Cephei.Cell.Generic.ICell<QLNet.HestonProcess>'
  type: Method
  source:
    id: Cephei.QL.HestonProcessModel.UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 142
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member UnregisterWith: handler:ICell<Callback> -> ICell<HestonProcess>'
    parameters:
    - id: handler
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Callback>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.HestonProcess>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.UnregisterWith*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.v0(unit)
  commentId: P:Cephei.QL.HestonProcessModel.v0
  id: v0(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property v0: ICell<float>'
  nameWithType: 'property HestonProcessModel.v0: ICell<float>'
  fullName: 'property Cephei.QL.HestonProcessModel.v0: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.v0(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 107
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property v0: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.v0*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.theta(unit)
  commentId: P:Cephei.QL.HestonProcessModel.theta
  id: theta(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property theta: ICell<float>'
  nameWithType: 'property HestonProcessModel.theta: ICell<float>'
  fullName: 'property Cephei.QL.HestonProcessModel.theta: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.theta(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 109
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property theta: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.theta*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.sigma(unit)
  commentId: P:Cephei.QL.HestonProcessModel.sigma
  id: sigma(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property sigma: ICell<float>'
  nameWithType: 'property HestonProcessModel.sigma: ICell<float>'
  fullName: 'property Cephei.QL.HestonProcessModel.sigma: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.sigma(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 110
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property sigma: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.sigma*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.s0(unit)
  commentId: P:Cephei.QL.HestonProcessModel.s0
  id: s0(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property s0: ICell<Handle<Quote>>'
  nameWithType: 'property HestonProcessModel.s0: ICell<Handle<Quote>>'
  fullName: 'property Cephei.QL.HestonProcessModel.s0: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.s0(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 106
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property s0: ICell<Handle<Quote>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.Quote>>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.s0*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.riskFreeRate(unit)
  commentId: P:Cephei.QL.HestonProcessModel.riskFreeRate
  id: riskFreeRate(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property riskFreeRate: ICell<Handle<YieldTermStructure>>'
  nameWithType: 'property HestonProcessModel.riskFreeRate: ICell<Handle<YieldTermStructure>>'
  fullName: 'property Cephei.QL.HestonProcessModel.riskFreeRate: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.riskFreeRate(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 104
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property riskFreeRate: ICell<Handle<YieldTermStructure>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.riskFreeRate*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.rho(unit)
  commentId: P:Cephei.QL.HestonProcessModel.rho
  id: rho(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property rho: ICell<float>'
  nameWithType: 'property HestonProcessModel.rho: ICell<float>'
  fullName: 'property Cephei.QL.HestonProcessModel.rho: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.rho(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 111
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property rho: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.rho*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.kappa(unit)
  commentId: P:Cephei.QL.HestonProcessModel.kappa
  id: kappa(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property kappa: ICell<float>'
  nameWithType: 'property HestonProcessModel.kappa: ICell<float>'
  fullName: 'property Cephei.QL.HestonProcessModel.kappa: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.kappa(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 108
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property kappa: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.kappa*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.dividendYield(unit)
  commentId: P:Cephei.QL.HestonProcessModel.dividendYield
  id: dividendYield(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property dividendYield: ICell<Handle<YieldTermStructure>>'
  nameWithType: 'property HestonProcessModel.dividendYield: ICell<Handle<YieldTermStructure>>'
  fullName: 'property Cephei.QL.HestonProcessModel.dividendYield: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.dividendYield(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 105
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property dividendYield: ICell<Handle<YieldTermStructure>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.dividendYield*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.d(unit)
  commentId: P:Cephei.QL.HestonProcessModel.d
  id: d(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property d: ICell<Discretization>'
  nameWithType: 'property HestonProcessModel.d: ICell<Discretization>'
  fullName: 'property Cephei.QL.HestonProcessModel.d: Cephei.Cell.Generic.ICell<QLNet.HestonProcess.Discretization>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.d(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 112
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property d: ICell<Discretization> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.HestonProcess.Discretization>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.d*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.V0(unit)
  commentId: P:Cephei.QL.HestonProcessModel.V0
  id: V0(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property V0: ICell<float>'
  nameWithType: 'property HestonProcessModel.V0: ICell<float>'
  fullName: 'property Cephei.QL.HestonProcessModel.V0: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.V0(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 133
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property V0: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.V0*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.Update(unit)
  commentId: P:Cephei.QL.HestonProcessModel.Update
  id: Update(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property Update: ICell<HestonProcess>'
  nameWithType: 'property HestonProcessModel.Update: ICell<HestonProcess>'
  fullName: 'property Cephei.QL.HestonProcessModel.Update: Cephei.Cell.Generic.ICell<QLNet.HestonProcess>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.Update(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 144
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Update: ICell<HestonProcess> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.HestonProcess>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.Update*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.Theta(unit)
  commentId: P:Cephei.QL.HestonProcessModel.Theta
  id: Theta(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property Theta: ICell<float>'
  nameWithType: 'property HestonProcessModel.Theta: ICell<float>'
  fullName: 'property Cephei.QL.HestonProcessModel.Theta: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.Theta(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 130
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Theta: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.Theta*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.Size(unit)
  commentId: P:Cephei.QL.HestonProcessModel.Size
  id: Size(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property Size: ICell<int>'
  nameWithType: 'property HestonProcessModel.Size: ICell<int>'
  fullName: 'property Cephei.QL.HestonProcessModel.Size: Cephei.Cell.Generic.ICell<int>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.Size(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 129
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Size: ICell<int> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.Size*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.Sigma(unit)
  commentId: P:Cephei.QL.HestonProcessModel.Sigma
  id: Sigma(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property Sigma: ICell<float>'
  nameWithType: 'property HestonProcessModel.Sigma: ICell<float>'
  fullName: 'property Cephei.QL.HestonProcessModel.Sigma: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.Sigma(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 128
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Sigma: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.Sigma*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.S0(unit)
  commentId: P:Cephei.QL.HestonProcessModel.S0
  id: S0(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property S0: ICell<Handle<Quote>>'
  nameWithType: 'property HestonProcessModel.S0: ICell<Handle<Quote>>'
  fullName: 'property Cephei.QL.HestonProcessModel.S0: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.S0(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 127
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property S0: ICell<Handle<Quote>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.Quote>>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.S0*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.RiskFreeRate(unit)
  commentId: P:Cephei.QL.HestonProcessModel.RiskFreeRate
  id: RiskFreeRate(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property RiskFreeRate: ICell<Handle<YieldTermStructure>>'
  nameWithType: 'property HestonProcessModel.RiskFreeRate: ICell<Handle<YieldTermStructure>>'
  fullName: 'property Cephei.QL.HestonProcessModel.RiskFreeRate: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.RiskFreeRate(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 126
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property RiskFreeRate: ICell<Handle<YieldTermStructure>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.RiskFreeRate*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.Rho(unit)
  commentId: P:Cephei.QL.HestonProcessModel.Rho
  id: Rho(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property Rho: ICell<float>'
  nameWithType: 'property HestonProcessModel.Rho: ICell<float>'
  fullName: 'property Cephei.QL.HestonProcessModel.Rho: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.Rho(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 125
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Rho: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.Rho*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.Kappa(unit)
  commentId: P:Cephei.QL.HestonProcessModel.Kappa
  id: Kappa(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property Kappa: ICell<float>'
  nameWithType: 'property HestonProcessModel.Kappa: ICell<float>'
  fullName: 'property Cephei.QL.HestonProcessModel.Kappa: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.Kappa(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 124
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Kappa: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.Kappa*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.InitialValues(unit)
  commentId: P:Cephei.QL.HestonProcessModel.InitialValues
  id: InitialValues(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property InitialValues: ICell<Vector>'
  nameWithType: 'property HestonProcessModel.InitialValues: ICell<Vector>'
  fullName: 'property Cephei.QL.HestonProcessModel.InitialValues: Cephei.Cell.Generic.ICell<QLNet.Vector>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.InitialValues(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 123
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property InitialValues: ICell<Vector> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.InitialValues*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.Factors(unit)
  commentId: P:Cephei.QL.HestonProcessModel.Factors
  id: Factors(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property Factors: ICell<int>'
  nameWithType: 'property HestonProcessModel.Factors: ICell<int>'
  fullName: 'property Cephei.QL.HestonProcessModel.Factors: Cephei.Cell.Generic.ICell<int>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.Factors(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 122
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Factors: ICell<int> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.Factors*
  attributes: []
- uid: Cephei.QL.HestonProcessModel.DividendYield(unit)
  commentId: P:Cephei.QL.HestonProcessModel.DividendYield
  id: DividendYield(unit)
  parent: Cephei.QL.HestonProcessModel
  langs:
  - csharp
  - vb
  name: 'property DividendYield: ICell<Handle<YieldTermStructure>>'
  nameWithType: 'property HestonProcessModel.DividendYield: ICell<Handle<YieldTermStructure>>'
  fullName: 'property Cephei.QL.HestonProcessModel.DividendYield: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>>'
  type: Property
  source:
    id: Cephei.QL.HestonProcessModel.DividendYield(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\HestonProcessModel.fs
    startLine: 117
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property DividendYield: ICell<Handle<YieldTermStructure>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
  overload: Cephei.QL.HestonProcessModel.DividendYield*
  attributes: []
references:
- uid: Cephei.QL
  commentId: N:Cephei.QL
  name: Cephei.QL
  nameWithType: Cephei.QL
  fullName: Cephei.QL
- uid: TypeRef:System.Object
  name: Object
  nameWithType: Object
  fullName: System.Object
  spec.csharp:
  - {}
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - {}
- uid: TypeRef:System.Collections.Concurrent.ConcurrentDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: ConcurrentDictionary<string,ICell>
  nameWithType: ConcurrentDictionary<string,ICell>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Model
  name: Model
  nameWithType: Model
  fullName: Cephei.Cell.Model
  spec.csharp:
  - {}
  - uid: Cephei.Cell.Model
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Model
  - {}
- uid: TypeRef:Cephei.Cell.Generic.Model`1<QLNet.HestonProcess>
  name: Model<HestonProcess>
  nameWithType: Model<HestonProcess>
  fullName: Cephei.Cell.Generic.Model<QLNet.HestonProcess>
  spec.csharp:
  - uid: Cephei.Cell.Generic.Model`1
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Generic.Model
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.HestonProcess
    name: HestonProcess
    nameWithType: HestonProcess
    fullName: QLNet.HestonProcess
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.HestonProcess>
  name: ICell<HestonProcess>
  nameWithType: ICell<HestonProcess>
  fullName: Cephei.Cell.Generic.ICell<QLNet.HestonProcess>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.HestonProcess
    name: HestonProcess
    nameWithType: HestonProcess
    fullName: QLNet.HestonProcess
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.ICell
  name: ICell
  nameWithType: ICell
  fullName: Cephei.Cell.ICell
  spec.csharp:
  - {}
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - {}
- uid: TypeRef:Cephei.Cell.ICellEvent
  name: ICellEvent
  nameWithType: ICellEvent
  fullName: Cephei.Cell.ICellEvent
  spec.csharp:
  - {}
  - uid: Cephei.Cell.ICellEvent
    name: ICellEvent
    nameWithType: ICellEvent
    fullName: Cephei.Cell.ICellEvent
  - {}
- uid: TypeRef:System.Collections.Generic.ICollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: ICollection<KeyValuePair<string,ICell>>
  nameWithType: ICollection<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: IDictionary<string,ICell>
  nameWithType: IDictionary<string,ICell>
  fullName: System.Collections.Generic.IDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: IEnumerable<KeyValuePair<string,ICell>>
  nameWithType: IEnumerable<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IReadOnlyCollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: IReadOnlyCollection<KeyValuePair<string,ICell>>
  nameWithType: IReadOnlyCollection<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IReadOnlyDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: IReadOnlyDictionary<string,ICell>
  nameWithType: IReadOnlyDictionary<string,ICell>
  fullName: System.Collections.Generic.IReadOnlyDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.ICollection
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
  spec.csharp:
  - {}
  - uid: System.Collections.ICollection
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.ICollection
  - {}
- uid: TypeRef:System.Collections.IDictionary
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
  spec.csharp:
  - {}
  - uid: System.Collections.IDictionary
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.IDictionary
  - {}
- uid: TypeRef:System.Collections.IEnumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
  spec.csharp:
  - {}
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
  - {}
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ICell>
  name: IObservable<ICell>
  nameWithType: IObservable<ICell>
  fullName: System.IObservable<Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell`1<QLNet.HestonProcess> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  name: IObservable<ISession * ICell<HestonProcess> * CellEvent * ICell * DateTime>
  nameWithType: IObservable<ISession * ICell<HestonProcess> * CellEvent * ICell * DateTime>
  fullName: System.IObservable<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<QLNet.HestonProcess> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.HestonProcess
    name: HestonProcess
    nameWithType: HestonProcess
    fullName: QLNet.HestonProcess
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  name: IObservable<ISession * Model * CellEvent * ICell * DateTime>
  nameWithType: IObservable<ISession * Model * CellEvent * ICell * DateTime>
  fullName: System.IObservable<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.Model
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Model
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<QLNet.HestonProcess>
  name: IObservable<HestonProcess>
  nameWithType: IObservable<HestonProcess>
  fullName: System.IObservable<QLNet.HestonProcess>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.HestonProcess
    name: HestonProcess
    nameWithType: HestonProcess
    fullName: QLNet.HestonProcess
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>>
  name: IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
  nameWithType: IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,QLNet.HestonProcess>>>
  name: IObservable<KeyValuePair<ISession,KeyValuePair<string,HestonProcess>>>
  nameWithType: IObservable<KeyValuePair<ISession,KeyValuePair<string,HestonProcess>>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,QLNet.HestonProcess>>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: QLNet.HestonProcess
    name: HestonProcess
    nameWithType: HestonProcess
    fullName: QLNet.HestonProcess
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.decimal>>
  name: IObservable<KeyValuePair<string,decimal>>
  nameWithType: IObservable<KeyValuePair<string,decimal>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,decimal>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.decimal
    name: decimal
    nameWithType: decimal
    fullName: decimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.float>>
  name: IObservable<KeyValuePair<string,float>>
  nameWithType: IObservable<KeyValuePair<string,float>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,float>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.int>>
  name: IObservable<KeyValuePair<string,int>>
  nameWithType: IObservable<KeyValuePair<string,int>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,int>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.int
    name: int
    nameWithType: int
    fullName: int
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObserver`1<QLNet.HestonProcess>
  name: IObserver<HestonProcess>
  nameWithType: IObserver<HestonProcess>
  fullName: System.IObserver<QLNet.HestonProcess>
  spec.csharp:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.HestonProcess
    name: HestonProcess
    nameWithType: HestonProcess
    fullName: QLNet.HestonProcess
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell<'T>)
  name: "member Bind: ICell<'T> -> unit"
  nameWithType: "member Model.Bind: ICell<'T> -> unit"
  fullName: "member Cephei.Cell.Generic.Model.Bind: Cephei.Cell.Generic.ICell<'T> -> unit"
- uid: Cephei.Cell.Generic.Model`1.OnCompleted(unit)
  name: 'abstract member OnCompleted: unit -> unit'
  nameWithType: 'abstract member Model.OnCompleted: unit -> unit'
  fullName: 'abstract member Cephei.Cell.Generic.Model.OnCompleted: unit -> unit'
- uid: Cephei.Cell.Generic.Model`1.OnError(exn)
  name: 'abstract member OnError: exn -> unit'
  nameWithType: 'abstract member Model.OnError: exn -> unit'
  fullName: 'abstract member Cephei.Cell.Generic.Model.OnError: exn -> unit'
- uid: Cephei.Cell.Generic.Model`1.OnNext('T)
  name: "abstract member OnNext: 'T -> unit"
  nameWithType: "abstract member Model.OnNext: 'T -> unit"
  fullName: "abstract member Cephei.Cell.Generic.Model.OnNext: 'T -> unit"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<'T>)
  name: "abstract member Subscribe: IObserver<'T> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<'T> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<'T> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  name: "abstract member Subscribe: IObserver<ISession * ICell<'T> * CellEvent * ICell * DateTime> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<ISession * ICell<'T> * CellEvent * ICell * DateTime> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>>)
  name: "abstract member Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,'T>>> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,'T>>> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Value(unit)
  name: "abstract property Value: 'T"
  nameWithType: "abstract property Model.Value: 'T"
  fullName: "abstract property Cephei.Cell.Generic.Model.Value: 'T"
- uid: Cephei.Cell.Model.As(string)
  name: "member As: string -> ICell<'T>"
  nameWithType: "member Model.As: string -> ICell<'T>"
  fullName: "member Cephei.Cell.Model.As: string -> Cephei.Cell.Generic.ICell<'T>"
- uid: Cephei.Cell.Model.Bind(unit)
  name: 'member Bind: unit -> unit'
  nameWithType: 'member Model.Bind: unit -> unit'
  fullName: 'member Cephei.Cell.Model.Bind: unit -> unit'
- uid: Cephei.Cell.Model.Box(unit)
  name: 'abstract property Box: obj'
  nameWithType: 'abstract property Model.Box: obj'
  fullName: 'abstract property Cephei.Cell.Model.Box: obj'
- uid: Cephei.Cell.Model.Change()
  name: 'abstract member Change: CellChange'
  nameWithType: 'abstract member Model.Change: CellChange'
  fullName: 'abstract member Cephei.Cell.Model.Change: Cephei.Cell.CellChange'
- uid: Cephei.Cell.Model.Create(Unit -> 'T * string)
  name: "member Create: Unit -> 'T * string -> Cell<'T>"
  nameWithType: "member Model.Create: Unit -> 'T * string -> Cell<'T>"
  fullName: "member Cephei.Cell.Model.Create: Unit -> 'T * string -> Cephei.Cell.Generic.Cell<'T>"
- uid: Cephei.Cell.Model.CreateValue('T * string)
  name: "member CreateValue: 'T * string -> Cell<'T>"
  nameWithType: "member Model.CreateValue: 'T * string -> Cell<'T>"
  fullName: "member Cephei.Cell.Model.CreateValue: 'T * string -> Cephei.Cell.Generic.Cell<'T>"
- uid: Cephei.Cell.Model.Dependants(unit)
  name: 'abstract property Dependants: IEnumerable<ICellEvent>'
  nameWithType: 'abstract property Model.Dependants: IEnumerable<ICellEvent>'
  fullName: 'abstract property Cephei.Cell.Model.Dependants: System.Collections.Generic.IEnumerable<Cephei.Cell.ICellEvent>'
- uid: Cephei.Cell.Model.Dispose(unit)
  name: 'member Dispose: unit -> unit'
  nameWithType: 'member Model.Dispose: unit -> unit'
  fullName: 'member Cephei.Cell.Model.Dispose: unit -> unit'
- uid: Cephei.Cell.Model.GetOrAdd(string * Cephei.Cell.ICell)
  name: 'member GetOrAdd: string * ICell -> ICell'
  nameWithType: 'member Model.GetOrAdd: string * ICell -> ICell'
  fullName: 'member Cephei.Cell.Model.GetOrAdd: string * Cephei.Cell.ICell -> Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.HasFunction(unit)
  name: 'abstract property HasFunction: bool'
  nameWithType: 'abstract property Model.HasFunction: bool'
  fullName: 'abstract property Cephei.Cell.Model.HasFunction: bool'
- uid: Cephei.Cell.Model.HasValue(unit)
  name: 'abstract property HasValue: bool'
  nameWithType: 'abstract property Model.HasValue: bool'
  fullName: 'abstract property Cephei.Cell.Model.HasValue: bool'
- uid: Cephei.Cell.Model.Item(string)
  name: 'property Item: string -> ICell'
  nameWithType: 'property Model.Item: string -> ICell'
  fullName: 'property Cephei.Cell.Model.Item: string -> Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.Mnemonic(unit)
  name: 'abstract property Mnemonic: string'
  nameWithType: 'abstract property Model.Mnemonic: string'
  fullName: 'abstract property Cephei.Cell.Model.Mnemonic: string'
- uid: Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession)
  name: 'abstract member OnChange: CellEvent * ICellEvent * DateTime * ISession -> unit'
  nameWithType: 'abstract member Model.OnChange: CellEvent * ICellEvent * DateTime * ISession -> unit'
  fullName: 'abstract member Cephei.Cell.Model.OnChange: Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession -> unit'
- uid: Cephei.Cell.Model.Parent(unit)
  name: 'abstract property Parent: ICell'
  nameWithType: 'abstract property Model.Parent: ICell'
  fullName: 'abstract property Cephei.Cell.Model.Parent: Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ICell>)
  name: 'abstract member Subscribe: IObserver<ICell> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<ICell> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<Cephei.Cell.ICell> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  name: 'abstract member Subscribe: IObserver<ISession * Model * CellEvent * ICell * DateTime> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<ISession * Model * CellEvent * ICell * DateTime> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,ICell>>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,ICell>>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,decimal>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,decimal>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,float>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,float>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,float>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,float>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,int>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,int>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,int>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,int>> -> System.IDisposable'
- uid: Cephei.Cell.Model.TryAdd(string * Cephei.Cell.ICell)
  name: 'member TryAdd: string * ICell -> bool'
  nameWithType: 'member Model.TryAdd: string * ICell -> bool'
  fullName: 'member Cephei.Cell.Model.TryAdd: string * Cephei.Cell.ICell -> bool'
- uid: Cephei.Cell.Model.TryRemove(string * Cephei.Cell.ICell byref)
  name: 'member TryRemove: string * ICell byref -> bool'
  nameWithType: 'member Model.TryRemove: string * ICell byref -> bool'
  fullName: 'member Cephei.Cell.Model.TryRemove: string * Cephei.Cell.ICell byref -> bool'
- uid: Cephei.Cell.Model.TryUpdate(string * Cephei.Cell.ICell * Cephei.Cell.ICell)
  name: 'member TryUpdate: string * ICell * ICell -> bool'
  nameWithType: 'member Model.TryUpdate: string * ICell * ICell -> bool'
  fullName: 'member Cephei.Cell.Model.TryUpdate: string * Cephei.Cell.ICell * Cephei.Cell.ICell -> bool'
- uid: Cephei.Cell.Model.add_Change(Cephei.Cell.CellChange)
  name: 'abstract member add_Change: CellChange -> unit'
  nameWithType: 'abstract member Model.add_Change: CellChange -> unit'
  fullName: 'abstract member Cephei.Cell.Model.add_Change: Cephei.Cell.CellChange -> unit'
- uid: Cephei.Cell.Model.remove_Change(Cephei.Cell.CellChange)
  name: 'abstract member remove_Change: CellChange -> unit'
  nameWithType: 'abstract member Model.remove_Change: CellChange -> unit'
  fullName: 'abstract member Cephei.Cell.Model.remove_Change: Cephei.Cell.CellChange -> unit'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * 'TValue * System.Func<'TKey,'TValue,'TValue>)
  name: "member AddOrUpdate: 'TKey * 'TValue * Func<'TKey,'TValue,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.AddOrUpdate: 'TKey * 'TValue * Func<'TKey,'TValue,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.AddOrUpdate: 'TKey * 'TValue * System.Func<'TKey,'TValue,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue>)
  name: "member AddOrUpdate: 'TKey * Func<'TKey,'TValue> * Func<'TKey,'TValue,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.AddOrUpdate: 'TKey * Func<'TKey,'TValue> * Func<'TKey,'TValue,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.AddOrUpdate: 'TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear(unit)
  name: 'abstract member Clear: unit -> unit'
  nameWithType: 'abstract member ConcurrentDictionary.Clear: unit -> unit'
  fullName: 'abstract member System.Collections.Concurrent.ConcurrentDictionary.Clear: unit -> unit'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey('TKey)
  name: "abstract member ContainsKey: 'TKey -> bool"
  nameWithType: "abstract member ConcurrentDictionary.ContainsKey: 'TKey -> bool"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.ContainsKey: 'TKey -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count(unit)
  name: 'abstract property Count: int'
  nameWithType: 'abstract property ConcurrentDictionary.Count: int'
  fullName: 'abstract property System.Collections.Concurrent.ConcurrentDictionary.Count: int'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator(unit)
  name: "abstract member GetEnumerator: unit -> IEnumerator<KeyValuePair<'TKey,'TValue>>"
  nameWithType: "abstract member ConcurrentDictionary.GetEnumerator: unit -> IEnumerator<KeyValuePair<'TKey,'TValue>>"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.GetEnumerator: unit -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<'TKey,'TValue>>"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * 'TValue)
  name: "member GetOrAdd: 'TKey * 'TValue -> 'TValue"
  nameWithType: "member ConcurrentDictionary.GetOrAdd: 'TKey * 'TValue -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd: 'TKey * 'TValue -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * System.Func<'TKey,'TValue>)
  name: "member GetOrAdd: 'TKey * Func<'TKey,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.GetOrAdd: 'TKey * Func<'TKey,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd: 'TKey * System.Func<'TKey,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty(unit)
  name: 'property IsEmpty: bool'
  nameWithType: 'property ConcurrentDictionary.IsEmpty: bool'
  fullName: 'property System.Collections.Concurrent.ConcurrentDictionary.IsEmpty: bool'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item('TKey)
  name: "abstract property Item: 'TKey -> 'TValue"
  nameWithType: "abstract property ConcurrentDictionary.Item: 'TKey -> 'TValue"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Item: 'TKey -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys(unit)
  name: "abstract property Keys: ICollection<'TKey>"
  nameWithType: "abstract property ConcurrentDictionary.Keys: ICollection<'TKey>"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Keys: System.Collections.Generic.ICollection<'TKey>"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray(unit)
  name: "member ToArray: unit -> KeyValuePair<'TKey,'TValue> []"
  nameWithType: "member ConcurrentDictionary.ToArray: unit -> KeyValuePair<'TKey,'TValue> []"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.ToArray: unit -> System.Collections.Generic.KeyValuePair<'TKey,'TValue> []"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd('TKey * 'TValue)
  name: "member TryAdd: 'TKey * 'TValue -> bool"
  nameWithType: "member ConcurrentDictionary.TryAdd: 'TKey * 'TValue -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryAdd: 'TKey * 'TValue -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue('TKey * 'TValue byref)
  name: "abstract member TryGetValue: 'TKey * 'TValue byref -> bool"
  nameWithType: "abstract member ConcurrentDictionary.TryGetValue: 'TKey * 'TValue byref -> bool"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.TryGetValue: 'TKey * 'TValue byref -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove('TKey * 'TValue byref)
  name: "member TryRemove: 'TKey * 'TValue byref -> bool"
  nameWithType: "member ConcurrentDictionary.TryRemove: 'TKey * 'TValue byref -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryRemove: 'TKey * 'TValue byref -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate('TKey * 'TValue * 'TValue)
  name: "member TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
  nameWithType: "member ConcurrentDictionary.TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values(unit)
  name: "abstract property Values: ICollection<'TValue>"
  nameWithType: "abstract property ConcurrentDictionary.Values: ICollection<'TValue>"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Values: System.Collections.Generic.ICollection<'TValue>"
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
  name: ICell<Handle<YieldTermStructure>>
  nameWithType: ICell<Handle<YieldTermStructure>>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Handle`1
    name: Handle
    nameWithType: Handle
    fullName: QLNet.Handle
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.YieldTermStructure
    name: YieldTermStructure
    nameWithType: YieldTermStructure
    fullName: QLNet.YieldTermStructure
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.Quote>>
  name: ICell<Handle<Quote>>
  nameWithType: ICell<Handle<Quote>>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Handle`1
    name: Handle
    nameWithType: Handle
    fullName: QLNet.Handle
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Quote
    name: Quote
    nameWithType: Quote
    fullName: QLNet.Quote
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
  name: ICell<double>
  nameWithType: ICell<double>
  fullName: Cephei.Cell.Generic.ICell<double>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.double
    name: double
    nameWithType: double
    fullName: double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.HestonProcess.Discretization>
  name: ICell<Discretization>
  nameWithType: ICell<Discretization>
  fullName: Cephei.Cell.Generic.ICell<QLNet.HestonProcess.Discretization>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.HestonProcess.Discretization
    name: Discretization
    nameWithType: Discretization
    fullName: QLNet.HestonProcess.Discretization
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.HestonProcessModel.#ctor*
  commentId: Overload:Cephei.QL.HestonProcessModel.#ctor*
  name: ( .ctor )
  nameWithType: HestonProcessModel.( .ctor )
  fullName: Cephei.QL.HestonProcessModel
- uid: TypeRef:Cephei.QL.HestonProcessModel
  name: HestonProcessModel
  nameWithType: HestonProcessModel
  fullName: Cephei.QL.HestonProcessModel
  spec.csharp:
  - {}
  - uid: Cephei.QL.HestonProcessModel
    name: HestonProcessModel
    nameWithType: HestonProcessModel
    fullName: Cephei.QL.HestonProcessModel
  - {}
- uid: Cephei.QL.HestonProcessModel.Apply*
  commentId: Overload:Cephei.QL.HestonProcessModel.Apply*
  name: Apply
  nameWithType: HestonProcessModel.Apply
  fullName: Cephei.QL.HestonProcessModel.Apply
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
  name: ICell<Vector>
  nameWithType: ICell<Vector>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Vector>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Vector
    name: Vector
    nameWithType: Vector
    fullName: QLNet.Vector
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.HestonProcessModel.Covariance*
  commentId: Overload:Cephei.QL.HestonProcessModel.Covariance*
  name: Covariance
  nameWithType: HestonProcessModel.Covariance
  fullName: Cephei.QL.HestonProcessModel.Covariance
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Matrix>
  name: ICell<Matrix>
  nameWithType: ICell<Matrix>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Matrix>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Matrix
    name: Matrix
    nameWithType: Matrix
    fullName: QLNet.Matrix
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.HestonProcessModel.Diffusion*
  commentId: Overload:Cephei.QL.HestonProcessModel.Diffusion*
  name: Diffusion
  nameWithType: HestonProcessModel.Diffusion
  fullName: Cephei.QL.HestonProcessModel.Diffusion
- uid: Cephei.QL.HestonProcessModel.Drift*
  commentId: Overload:Cephei.QL.HestonProcessModel.Drift*
  name: Drift
  nameWithType: HestonProcessModel.Drift
  fullName: Cephei.QL.HestonProcessModel.Drift
- uid: Cephei.QL.HestonProcessModel.Evolve*
  commentId: Overload:Cephei.QL.HestonProcessModel.Evolve*
  name: Evolve
  nameWithType: HestonProcessModel.Evolve
  fullName: Cephei.QL.HestonProcessModel.Evolve
- uid: Cephei.QL.HestonProcessModel.Expectation*
  commentId: Overload:Cephei.QL.HestonProcessModel.Expectation*
  name: Expectation
  nameWithType: HestonProcessModel.Expectation
  fullName: Cephei.QL.HestonProcessModel.Expectation
- uid: Cephei.QL.HestonProcessModel.RegisterWith*
  commentId: Overload:Cephei.QL.HestonProcessModel.RegisterWith*
  name: RegisterWith
  nameWithType: HestonProcessModel.RegisterWith
  fullName: Cephei.QL.HestonProcessModel.RegisterWith
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Callback>
  name: ICell<Callback>
  nameWithType: ICell<Callback>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Callback>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Callback
    name: Callback
    nameWithType: Callback
    fullName: QLNet.Callback
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.HestonProcessModel.StdDeviation*
  commentId: Overload:Cephei.QL.HestonProcessModel.StdDeviation*
  name: StdDeviation
  nameWithType: HestonProcessModel.StdDeviation
  fullName: Cephei.QL.HestonProcessModel.StdDeviation
- uid: Cephei.QL.HestonProcessModel.Time*
  commentId: Overload:Cephei.QL.HestonProcessModel.Time*
  name: Time
  nameWithType: HestonProcessModel.Time
  fullName: Cephei.QL.HestonProcessModel.Time
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Date>
  name: ICell<Date>
  nameWithType: ICell<Date>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Date>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Date
    name: Date
    nameWithType: Date
    fullName: QLNet.Date
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
  name: ICell<float>
  nameWithType: ICell<float>
  fullName: Cephei.Cell.Generic.ICell<float>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.HestonProcessModel.UnregisterWith*
  commentId: Overload:Cephei.QL.HestonProcessModel.UnregisterWith*
  name: UnregisterWith
  nameWithType: HestonProcessModel.UnregisterWith
  fullName: Cephei.QL.HestonProcessModel.UnregisterWith
- uid: Cephei.QL.HestonProcessModel.v0*
  commentId: Overload:Cephei.QL.HestonProcessModel.v0*
  name: v0
  nameWithType: HestonProcessModel.v0
  fullName: Cephei.QL.HestonProcessModel.v0
- uid: Cephei.QL.HestonProcessModel.theta*
  commentId: Overload:Cephei.QL.HestonProcessModel.theta*
  name: theta
  nameWithType: HestonProcessModel.theta
  fullName: Cephei.QL.HestonProcessModel.theta
- uid: Cephei.QL.HestonProcessModel.sigma*
  commentId: Overload:Cephei.QL.HestonProcessModel.sigma*
  name: sigma
  nameWithType: HestonProcessModel.sigma
  fullName: Cephei.QL.HestonProcessModel.sigma
- uid: Cephei.QL.HestonProcessModel.s0*
  commentId: Overload:Cephei.QL.HestonProcessModel.s0*
  name: s0
  nameWithType: HestonProcessModel.s0
  fullName: Cephei.QL.HestonProcessModel.s0
- uid: Cephei.QL.HestonProcessModel.riskFreeRate*
  commentId: Overload:Cephei.QL.HestonProcessModel.riskFreeRate*
  name: riskFreeRate
  nameWithType: HestonProcessModel.riskFreeRate
  fullName: Cephei.QL.HestonProcessModel.riskFreeRate
- uid: Cephei.QL.HestonProcessModel.rho*
  commentId: Overload:Cephei.QL.HestonProcessModel.rho*
  name: rho
  nameWithType: HestonProcessModel.rho
  fullName: Cephei.QL.HestonProcessModel.rho
- uid: Cephei.QL.HestonProcessModel.kappa*
  commentId: Overload:Cephei.QL.HestonProcessModel.kappa*
  name: kappa
  nameWithType: HestonProcessModel.kappa
  fullName: Cephei.QL.HestonProcessModel.kappa
- uid: Cephei.QL.HestonProcessModel.dividendYield*
  commentId: Overload:Cephei.QL.HestonProcessModel.dividendYield*
  name: dividendYield
  nameWithType: HestonProcessModel.dividendYield
  fullName: Cephei.QL.HestonProcessModel.dividendYield
- uid: Cephei.QL.HestonProcessModel.d*
  commentId: Overload:Cephei.QL.HestonProcessModel.d*
  name: d
  nameWithType: HestonProcessModel.d
  fullName: Cephei.QL.HestonProcessModel.d
- uid: Cephei.QL.HestonProcessModel.V0*
  commentId: Overload:Cephei.QL.HestonProcessModel.V0*
  name: V0
  nameWithType: HestonProcessModel.V0
  fullName: Cephei.QL.HestonProcessModel.V0
- uid: Cephei.QL.HestonProcessModel.Update*
  commentId: Overload:Cephei.QL.HestonProcessModel.Update*
  name: Update
  nameWithType: HestonProcessModel.Update
  fullName: Cephei.QL.HestonProcessModel.Update
- uid: Cephei.QL.HestonProcessModel.Theta*
  commentId: Overload:Cephei.QL.HestonProcessModel.Theta*
  name: Theta
  nameWithType: HestonProcessModel.Theta
  fullName: Cephei.QL.HestonProcessModel.Theta
- uid: Cephei.QL.HestonProcessModel.Size*
  commentId: Overload:Cephei.QL.HestonProcessModel.Size*
  name: Size
  nameWithType: HestonProcessModel.Size
  fullName: Cephei.QL.HestonProcessModel.Size
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
  name: ICell<int>
  nameWithType: ICell<int>
  fullName: Cephei.Cell.Generic.ICell<int>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.int
    name: int
    nameWithType: int
    fullName: int
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.HestonProcessModel.Sigma*
  commentId: Overload:Cephei.QL.HestonProcessModel.Sigma*
  name: Sigma
  nameWithType: HestonProcessModel.Sigma
  fullName: Cephei.QL.HestonProcessModel.Sigma
- uid: Cephei.QL.HestonProcessModel.S0*
  commentId: Overload:Cephei.QL.HestonProcessModel.S0*
  name: S0
  nameWithType: HestonProcessModel.S0
  fullName: Cephei.QL.HestonProcessModel.S0
- uid: Cephei.QL.HestonProcessModel.RiskFreeRate*
  commentId: Overload:Cephei.QL.HestonProcessModel.RiskFreeRate*
  name: RiskFreeRate
  nameWithType: HestonProcessModel.RiskFreeRate
  fullName: Cephei.QL.HestonProcessModel.RiskFreeRate
- uid: Cephei.QL.HestonProcessModel.Rho*
  commentId: Overload:Cephei.QL.HestonProcessModel.Rho*
  name: Rho
  nameWithType: HestonProcessModel.Rho
  fullName: Cephei.QL.HestonProcessModel.Rho
- uid: Cephei.QL.HestonProcessModel.Kappa*
  commentId: Overload:Cephei.QL.HestonProcessModel.Kappa*
  name: Kappa
  nameWithType: HestonProcessModel.Kappa
  fullName: Cephei.QL.HestonProcessModel.Kappa
- uid: Cephei.QL.HestonProcessModel.InitialValues*
  commentId: Overload:Cephei.QL.HestonProcessModel.InitialValues*
  name: InitialValues
  nameWithType: HestonProcessModel.InitialValues
  fullName: Cephei.QL.HestonProcessModel.InitialValues
- uid: Cephei.QL.HestonProcessModel.Factors*
  commentId: Overload:Cephei.QL.HestonProcessModel.Factors*
  name: Factors
  nameWithType: HestonProcessModel.Factors
  fullName: Cephei.QL.HestonProcessModel.Factors
- uid: Cephei.QL.HestonProcessModel.DividendYield*
  commentId: Overload:Cephei.QL.HestonProcessModel.DividendYield*
  name: DividendYield
  nameWithType: HestonProcessModel.DividendYield
  fullName: Cephei.QL.HestonProcessModel.DividendYield
