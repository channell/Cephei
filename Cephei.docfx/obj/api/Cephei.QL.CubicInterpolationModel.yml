### YamlMime:ManagedReference
items:
- uid: Cephei.QL.CubicInterpolationModel
  commentId: T:Cephei.QL.CubicInterpolationModel
  id: CubicInterpolationModel
  parent: Cephei.QL
  children:
  - Cephei.QL.CubicInterpolationModel.#ctor(Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.DerivativeApprox> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.BoundaryCondition> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.BoundaryCondition> * Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.CubicInterpolationModel.ACoefficients(unit)
  - Cephei.QL.CubicInterpolationModel.AllowsExtrapolation(unit)
  - Cephei.QL.CubicInterpolationModel.BCoefficients(unit)
  - Cephei.QL.CubicInterpolationModel.CCoefficients(unit)
  - Cephei.QL.CubicInterpolationModel.da(unit)
  - Cephei.QL.CubicInterpolationModel.Derivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  - Cephei.QL.CubicInterpolationModel.DisableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
  - Cephei.QL.CubicInterpolationModel.Empty(unit)
  - Cephei.QL.CubicInterpolationModel.EnableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
  - Cephei.QL.CubicInterpolationModel.Extrapolate(unit)
  - Cephei.QL.CubicInterpolationModel.leftCond(unit)
  - Cephei.QL.CubicInterpolationModel.leftConditionValue(unit)
  - Cephei.QL.CubicInterpolationModel.monotonic(unit)
  - Cephei.QL.CubicInterpolationModel.Primitive(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  - Cephei.QL.CubicInterpolationModel.rightCond(unit)
  - Cephei.QL.CubicInterpolationModel.rightConditionValue(unit)
  - Cephei.QL.CubicInterpolationModel.SecondDerivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  - Cephei.QL.CubicInterpolationModel.size(unit)
  - Cephei.QL.CubicInterpolationModel.Update(unit)
  - Cephei.QL.CubicInterpolationModel.Value(Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.CubicInterpolationModel.Value1(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  - Cephei.QL.CubicInterpolationModel.xBegin(unit)
  - Cephei.QL.CubicInterpolationModel.XMax(unit)
  - Cephei.QL.CubicInterpolationModel.XMin(unit)
  - Cephei.QL.CubicInterpolationModel.yBegin(unit)
  langs:
  - csharp
  - vb
  name: CubicInterpolationModel
  nameWithType: Cephei.QL.CubicInterpolationModel
  fullName: Cephei.QL.CubicInterpolationModel
  type: Class
  source:
    id: Cephei.QL.CubicInterpolationModel
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 35
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: >-
      [<AutoSerializable(true)>]

      type CubicInterpolationModel (xBegin:ICell<List<double>>, size:ICell<int>, yBegin:ICell<List<double>>, da:ICell<DerivativeApprox>, monotonic:ICell<bool>, leftCond:ICell<BoundaryCondition>, leftConditionValue:ICell<double>, rightCond:ICell<BoundaryCondition>, rightConditionValue:ICell<double>)
          inherit Model<CubicInterpolation>
          interface IDictionary<string,ICell>
          interface ICollection<KeyValuePair<string,ICell>>
          interface IReadOnlyDictionary<string,ICell>
          interface IReadOnlyCollection<KeyValuePair<string,ICell>>
          interface IEnumerable<KeyValuePair<string,ICell>>
          interface IDictionary
          interface ICollection
          interface IEnumerable
          interface IObservable<ICell>
          interface IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
          interface IObservable<ISession * Model * CellEvent * ICell * DateTime>
          interface IObservable<KeyValuePair<string,float>>
          interface IObservable<KeyValuePair<string,int>>
          interface IObservable<KeyValuePair<string,decimal>>
          interface ICell<CubicInterpolation>
          interface ICell
          interface ICellEvent
          interface IObservable<CubicInterpolation>
          interface IObservable<KeyValuePair<ISession,KeyValuePair<string,CubicInterpolation>>>
          interface IObservable<ISession * ICell<CubicInterpolation> * CellEvent * ICell * DateTime>
          interface IObserver<CubicInterpolation>
    parameters:
    - id: xBegin
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: size
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
    - id: yBegin
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: da
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation.DerivativeApprox>
      attributes: []
    - id: monotonic
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    - id: leftCond
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation.BoundaryCondition>
      attributes: []
    - id: leftConditionValue
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: rightCond
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation.BoundaryCondition>
      attributes: []
    - id: rightConditionValue
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
  inheritance:
  - TypeRef:System.Object
  - TypeRef:System.Collections.Concurrent.ConcurrentDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:Cephei.Cell.Model
  - TypeRef:Cephei.Cell.Generic.Model`1<QLNet.CubicInterpolation>
  implements:
  - TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation>
  - TypeRef:Cephei.Cell.ICell
  - TypeRef:Cephei.Cell.ICellEvent
  - TypeRef:System.Collections.Generic.ICollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IReadOnlyCollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IReadOnlyDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:System.Collections.ICollection
  - TypeRef:System.Collections.IDictionary
  - TypeRef:System.Collections.IEnumerable
  - TypeRef:System.IObservable`1<Cephei.Cell.ICell>
  - TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  - TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  - TypeRef:System.IObservable`1<QLNet.CubicInterpolation>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,QLNet.CubicInterpolation>>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.decimal>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.float>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.int>>
  - TypeRef:System.IObserver`1<QLNet.CubicInterpolation>
  inheritedMembers:
  - Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell<'T>)
  - Cephei.Cell.Generic.Model`1.OnCompleted(unit)
  - Cephei.Cell.Generic.Model`1.OnError(exn)
  - Cephei.Cell.Generic.Model`1.OnNext('T)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<'T>)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>>)
  - Cephei.Cell.Generic.Model`1.Value(unit)
  - Cephei.Cell.Model.As(string)
  - Cephei.Cell.Model.Bind(unit)
  - Cephei.Cell.Model.Box(unit)
  - Cephei.Cell.Model.Change()
  - Cephei.Cell.Model.Create(Unit -> 'T * string)
  - Cephei.Cell.Model.CreateValue('T * string)
  - Cephei.Cell.Model.Dependants(unit)
  - Cephei.Cell.Model.Dispose(unit)
  - Cephei.Cell.Model.GetOrAdd(string * Cephei.Cell.ICell)
  - Cephei.Cell.Model.HasFunction(unit)
  - Cephei.Cell.Model.HasValue(unit)
  - Cephei.Cell.Model.Item(string)
  - Cephei.Cell.Model.Mnemonic(unit)
  - Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession)
  - Cephei.Cell.Model.Parent(unit)
  - Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ICell>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,float>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,int>>)
  - Cephei.Cell.Model.TryAdd(string * Cephei.Cell.ICell)
  - Cephei.Cell.Model.TryRemove(string * Cephei.Cell.ICell byref)
  - Cephei.Cell.Model.TryUpdate(string * Cephei.Cell.ICell * Cephei.Cell.ICell)
  - Cephei.Cell.Model.add_Change(Cephei.Cell.CellChange)
  - Cephei.Cell.Model.remove_Change(Cephei.Cell.CellChange)
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * 'TValue * System.Func<'TKey,'TValue,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Clear(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey('TKey)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Count(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * System.Func<'TKey,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Item('TKey)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Keys(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.ToArray(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd('TKey * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue('TKey * 'TValue byref)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove('TKey * 'TValue byref)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate('TKey * 'TValue * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Values(unit)
  attributes:
  - type: Microsoft.FSharp.Core.AutoSerializableAttribute
    arguments:
    - type: System.Boolean
      value: true
    namedArguments: []
- uid: Cephei.QL.CubicInterpolationModel.#ctor(Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.DerivativeApprox> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.BoundaryCondition> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.BoundaryCondition> * Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.CubicInterpolationModel.#ctor(Cephei.Cell.Generic.ICell{System.Collections.Generic.List{System.Double}},Cephei.Cell.Generic.ICell{System.Int32},Cephei.Cell.Generic.ICell{System.Collections.Generic.List{System.Double}},Cephei.Cell.Generic.ICell{QLNet.CubicInterpolation.DerivativeApprox},Cephei.Cell.Generic.ICell{System.Boolean},Cephei.Cell.Generic.ICell{QLNet.CubicInterpolation.BoundaryCondition},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{QLNet.CubicInterpolation.BoundaryCondition},Cephei.Cell.Generic.ICell{System.Double})
  id: '#ctor(Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.DerivativeApprox> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.BoundaryCondition> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.BoundaryCondition> * Cephei.Cell.Generic.ICell<double>)'
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'new: ICell<List<double>> * ICell<int> * ICell<List<double>> * ICell<DerivativeApprox> * ICell<bool> * ICell<BoundaryCondition> * ICell<double> * ICell<BoundaryCondition> * ICell<double> -> CubicInterpolationModel'
  nameWithType: 'new: ICell<List<double>> * ICell<int> * ICell<List<double>> * ICell<DerivativeApprox> * ICell<bool> * ICell<BoundaryCondition> * ICell<double> * ICell<BoundaryCondition> * ICell<double> -> CubicInterpolationModel'
  fullName: 'new: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.DerivativeApprox> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.BoundaryCondition> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.BoundaryCondition> * Cephei.Cell.Generic.ICell<double> -> Cephei.QL.CubicInterpolationModel'
  type: Constructor
  source:
    id: Cephei.QL.CubicInterpolationModel.#ctor(Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.DerivativeApprox> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.BoundaryCondition> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.BoundaryCondition> * Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 35
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  summary: Implicit constructor.
  syntax:
    content: 'new: xBegin:ICell<List<double>> * size:ICell<int> * yBegin:ICell<List<double>> * da:ICell<DerivativeApprox> * monotonic:ICell<bool> * leftCond:ICell<BoundaryCondition> * leftConditionValue:ICell<double> * rightCond:ICell<BoundaryCondition> * rightConditionValue:ICell<double> -> CubicInterpolationModel'
    parameters:
    - id: xBegin
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: size
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
    - id: yBegin
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: da
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation.DerivativeApprox>
      attributes: []
    - id: monotonic
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    - id: leftCond
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation.BoundaryCondition>
      attributes: []
    - id: leftConditionValue
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: rightCond
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation.BoundaryCondition>
      attributes: []
    - id: rightConditionValue
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.QL.CubicInterpolationModel
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.#ctor*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.Derivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  commentId: M:Cephei.QL.CubicInterpolationModel.Derivative(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Boolean})
  id: Derivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'member Derivative: ICell<double> -> ICell<bool> -> ICell<float>'
  nameWithType: 'member CubicInterpolationModel.Derivative: ICell<double> -> ICell<bool> -> ICell<float>'
  fullName: 'member Cephei.QL.CubicInterpolationModel.Derivative: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.CubicInterpolationModel.Derivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 107
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Derivative: x:ICell<double> -> allowExtrapolation:ICell<bool> -> ICell<float>'
    parameters:
    - id: x
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: allowExtrapolation
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.Derivative*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.DisableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
  commentId: M:Cephei.QL.CubicInterpolationModel.DisableExtrapolation(Cephei.Cell.Generic.ICell{System.Boolean})
  id: DisableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'member DisableExtrapolation: ICell<bool> -> ICell<CubicInterpolation>'
  nameWithType: 'member CubicInterpolationModel.DisableExtrapolation: ICell<bool> -> ICell<CubicInterpolation>'
  fullName: 'member Cephei.QL.CubicInterpolationModel.DisableExtrapolation: Cephei.Cell.Generic.ICell<bool> -> Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation>'
  type: Method
  source:
    id: Cephei.QL.CubicInterpolationModel.DisableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 122
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member DisableExtrapolation: b:ICell<bool> -> ICell<CubicInterpolation>'
    parameters:
    - id: b
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.DisableExtrapolation*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.EnableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
  commentId: M:Cephei.QL.CubicInterpolationModel.EnableExtrapolation(Cephei.Cell.Generic.ICell{System.Boolean})
  id: EnableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'member EnableExtrapolation: ICell<bool> -> ICell<CubicInterpolation>'
  nameWithType: 'member CubicInterpolationModel.EnableExtrapolation: ICell<bool> -> ICell<CubicInterpolation>'
  fullName: 'member Cephei.QL.CubicInterpolationModel.EnableExtrapolation: Cephei.Cell.Generic.ICell<bool> -> Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation>'
  type: Method
  source:
    id: Cephei.QL.CubicInterpolationModel.EnableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 124
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member EnableExtrapolation: b:ICell<bool> -> ICell<CubicInterpolation>'
    parameters:
    - id: b
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.EnableExtrapolation*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.Primitive(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  commentId: M:Cephei.QL.CubicInterpolationModel.Primitive(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Boolean})
  id: Primitive(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'member Primitive: ICell<double> -> ICell<bool> -> ICell<float>'
  nameWithType: 'member CubicInterpolationModel.Primitive: ICell<double> -> ICell<bool> -> ICell<float>'
  fullName: 'member Cephei.QL.CubicInterpolationModel.Primitive: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.CubicInterpolationModel.Primitive(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 110
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Primitive: x:ICell<double> -> allowExtrapolation:ICell<bool> -> ICell<float>'
    parameters:
    - id: x
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: allowExtrapolation
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.Primitive*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.SecondDerivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  commentId: M:Cephei.QL.CubicInterpolationModel.SecondDerivative(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Boolean})
  id: SecondDerivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'member SecondDerivative: ICell<double> -> ICell<bool> -> ICell<float>'
  nameWithType: 'member CubicInterpolationModel.SecondDerivative: ICell<double> -> ICell<bool> -> ICell<float>'
  fullName: 'member Cephei.QL.CubicInterpolationModel.SecondDerivative: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.CubicInterpolationModel.SecondDerivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 112
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member SecondDerivative: x:ICell<double> -> allowExtrapolation:ICell<bool> -> ICell<float>'
    parameters:
    - id: x
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: allowExtrapolation
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.SecondDerivative*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.Value(Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.CubicInterpolationModel.Value(Cephei.Cell.Generic.ICell{System.Double})
  id: Value(Cephei.Cell.Generic.ICell<double>)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'member Value: ICell<double> -> ICell<float>'
  nameWithType: 'member CubicInterpolationModel.Value: ICell<double> -> ICell<float>'
  fullName: 'member Cephei.QL.CubicInterpolationModel.Value: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.CubicInterpolationModel.Value(Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 115
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Value: x:ICell<double> -> ICell<float>'
    parameters:
    - id: x
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.Value*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.Value1(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  commentId: M:Cephei.QL.CubicInterpolationModel.Value1(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Boolean})
  id: Value1(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'member Value1: ICell<double> -> ICell<bool> -> ICell<float>'
  nameWithType: 'member CubicInterpolationModel.Value1: ICell<double> -> ICell<bool> -> ICell<float>'
  fullName: 'member Cephei.QL.CubicInterpolationModel.Value1: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.CubicInterpolationModel.Value1(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 117
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Value1: x:ICell<double> -> allowExtrapolation:ICell<bool> -> ICell<float>'
    parameters:
    - id: x
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: allowExtrapolation
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.Value1*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.yBegin(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.yBegin
  id: yBegin(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property yBegin: ICell<List<double>>'
  nameWithType: 'property CubicInterpolationModel.yBegin: ICell<List<double>>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.yBegin: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.yBegin(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 97
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property yBegin: ICell<List<double>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.yBegin*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.xBegin(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.xBegin
  id: xBegin(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property xBegin: ICell<List<double>>'
  nameWithType: 'property CubicInterpolationModel.xBegin: ICell<List<double>>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.xBegin: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.xBegin(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 95
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property xBegin: ICell<List<double>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.xBegin*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.size(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.size
  id: size(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property size: ICell<int>'
  nameWithType: 'property CubicInterpolationModel.size: ICell<int>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.size: Cephei.Cell.Generic.ICell<int>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.size(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 96
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property size: ICell<int> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.size*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.rightConditionValue(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.rightConditionValue
  id: rightConditionValue(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property rightConditionValue: ICell<double>'
  nameWithType: 'property CubicInterpolationModel.rightConditionValue: ICell<double>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.rightConditionValue: Cephei.Cell.Generic.ICell<double>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.rightConditionValue(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 103
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property rightConditionValue: ICell<double> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.rightConditionValue*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.rightCond(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.rightCond
  id: rightCond(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property rightCond: ICell<BoundaryCondition>'
  nameWithType: 'property CubicInterpolationModel.rightCond: ICell<BoundaryCondition>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.rightCond: Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.BoundaryCondition>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.rightCond(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 102
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property rightCond: ICell<BoundaryCondition> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation.BoundaryCondition>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.rightCond*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.monotonic(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.monotonic
  id: monotonic(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property monotonic: ICell<bool>'
  nameWithType: 'property CubicInterpolationModel.monotonic: ICell<bool>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.monotonic: Cephei.Cell.Generic.ICell<bool>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.monotonic(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 99
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property monotonic: ICell<bool> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.monotonic*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.leftConditionValue(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.leftConditionValue
  id: leftConditionValue(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property leftConditionValue: ICell<double>'
  nameWithType: 'property CubicInterpolationModel.leftConditionValue: ICell<double>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.leftConditionValue: Cephei.Cell.Generic.ICell<double>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.leftConditionValue(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 101
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property leftConditionValue: ICell<double> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.leftConditionValue*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.leftCond(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.leftCond
  id: leftCond(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property leftCond: ICell<BoundaryCondition>'
  nameWithType: 'property CubicInterpolationModel.leftCond: ICell<BoundaryCondition>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.leftCond: Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.BoundaryCondition>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.leftCond(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 100
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property leftCond: ICell<BoundaryCondition> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation.BoundaryCondition>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.leftCond*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.da(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.da
  id: da(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property da: ICell<DerivativeApprox>'
  nameWithType: 'property CubicInterpolationModel.da: ICell<DerivativeApprox>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.da: Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.DerivativeApprox>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.da(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 98
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property da: ICell<DerivativeApprox> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation.DerivativeApprox>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.da*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.XMin(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.XMin
  id: XMin(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property XMin: ICell<float>'
  nameWithType: 'property CubicInterpolationModel.XMin: ICell<float>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.XMin: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.XMin(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 120
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property XMin: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.XMin*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.XMax(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.XMax
  id: XMax(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property XMax: ICell<float>'
  nameWithType: 'property CubicInterpolationModel.XMax: ICell<float>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.XMax: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.XMax(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 119
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property XMax: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.XMax*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.Update(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.Update
  id: Update(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property Update: ICell<CubicInterpolation>'
  nameWithType: 'property CubicInterpolationModel.Update: ICell<CubicInterpolation>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.Update: Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.Update(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 114
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Update: ICell<CubicInterpolation> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.Update*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.Extrapolate(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.Extrapolate
  id: Extrapolate(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property Extrapolate: ICell<bool>'
  nameWithType: 'property CubicInterpolationModel.Extrapolate: ICell<bool>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.Extrapolate: Cephei.Cell.Generic.ICell<bool>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.Extrapolate(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 126
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Extrapolate: ICell<bool> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.Extrapolate*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.Empty(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.Empty
  id: Empty(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property Empty: ICell<bool>'
  nameWithType: 'property CubicInterpolationModel.Empty: ICell<bool>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.Empty: Cephei.Cell.Generic.ICell<bool>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.Empty(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 109
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Empty: ICell<bool> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.Empty*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.CCoefficients(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.CCoefficients
  id: CCoefficients(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property CCoefficients: ICell<List<float>>'
  nameWithType: 'property CubicInterpolationModel.CCoefficients: ICell<List<float>>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.CCoefficients: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<float>>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.CCoefficients(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 106
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property CCoefficients: ICell<List<float>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.float>>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.CCoefficients*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.BCoefficients(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.BCoefficients
  id: BCoefficients(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property BCoefficients: ICell<List<float>>'
  nameWithType: 'property CubicInterpolationModel.BCoefficients: ICell<List<float>>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.BCoefficients: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<float>>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.BCoefficients(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 105
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property BCoefficients: ICell<List<float>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.float>>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.BCoefficients*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.AllowsExtrapolation(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.AllowsExtrapolation
  id: AllowsExtrapolation(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property AllowsExtrapolation: ICell<bool>'
  nameWithType: 'property CubicInterpolationModel.AllowsExtrapolation: ICell<bool>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.AllowsExtrapolation: Cephei.Cell.Generic.ICell<bool>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.AllowsExtrapolation(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 121
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property AllowsExtrapolation: ICell<bool> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.AllowsExtrapolation*
  attributes: []
- uid: Cephei.QL.CubicInterpolationModel.ACoefficients(unit)
  commentId: P:Cephei.QL.CubicInterpolationModel.ACoefficients
  id: ACoefficients(unit)
  parent: Cephei.QL.CubicInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property ACoefficients: ICell<List<float>>'
  nameWithType: 'property CubicInterpolationModel.ACoefficients: ICell<List<float>>'
  fullName: 'property Cephei.QL.CubicInterpolationModel.ACoefficients: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<float>>'
  type: Property
  source:
    id: Cephei.QL.CubicInterpolationModel.ACoefficients(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\CubicInterpolationModel.fs
    startLine: 104
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property ACoefficients: ICell<List<float>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.float>>
      attributes: []
  overload: Cephei.QL.CubicInterpolationModel.ACoefficients*
  attributes: []
references:
- uid: Cephei.QL
  commentId: N:Cephei.QL
  name: Cephei.QL
  nameWithType: Cephei.QL
  fullName: Cephei.QL
- uid: TypeRef:System.Object
  name: Object
  nameWithType: Object
  fullName: System.Object
  spec.csharp:
  - {}
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - {}
- uid: TypeRef:System.Collections.Concurrent.ConcurrentDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: ConcurrentDictionary<string,ICell>
  nameWithType: ConcurrentDictionary<string,ICell>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Model
  name: Model
  nameWithType: Model
  fullName: Cephei.Cell.Model
  spec.csharp:
  - {}
  - uid: Cephei.Cell.Model
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Model
  - {}
- uid: TypeRef:Cephei.Cell.Generic.Model`1<QLNet.CubicInterpolation>
  name: Model<CubicInterpolation>
  nameWithType: Model<CubicInterpolation>
  fullName: Cephei.Cell.Generic.Model<QLNet.CubicInterpolation>
  spec.csharp:
  - uid: Cephei.Cell.Generic.Model`1
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Generic.Model
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.CubicInterpolation
    name: CubicInterpolation
    nameWithType: CubicInterpolation
    fullName: QLNet.CubicInterpolation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation>
  name: ICell<CubicInterpolation>
  nameWithType: ICell<CubicInterpolation>
  fullName: Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.CubicInterpolation
    name: CubicInterpolation
    nameWithType: CubicInterpolation
    fullName: QLNet.CubicInterpolation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.ICell
  name: ICell
  nameWithType: ICell
  fullName: Cephei.Cell.ICell
  spec.csharp:
  - {}
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - {}
- uid: TypeRef:Cephei.Cell.ICellEvent
  name: ICellEvent
  nameWithType: ICellEvent
  fullName: Cephei.Cell.ICellEvent
  spec.csharp:
  - {}
  - uid: Cephei.Cell.ICellEvent
    name: ICellEvent
    nameWithType: ICellEvent
    fullName: Cephei.Cell.ICellEvent
  - {}
- uid: TypeRef:System.Collections.Generic.ICollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: ICollection<KeyValuePair<string,ICell>>
  nameWithType: ICollection<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: IDictionary<string,ICell>
  nameWithType: IDictionary<string,ICell>
  fullName: System.Collections.Generic.IDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: IEnumerable<KeyValuePair<string,ICell>>
  nameWithType: IEnumerable<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IReadOnlyCollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: IReadOnlyCollection<KeyValuePair<string,ICell>>
  nameWithType: IReadOnlyCollection<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IReadOnlyDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: IReadOnlyDictionary<string,ICell>
  nameWithType: IReadOnlyDictionary<string,ICell>
  fullName: System.Collections.Generic.IReadOnlyDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.ICollection
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
  spec.csharp:
  - {}
  - uid: System.Collections.ICollection
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.ICollection
  - {}
- uid: TypeRef:System.Collections.IDictionary
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
  spec.csharp:
  - {}
  - uid: System.Collections.IDictionary
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.IDictionary
  - {}
- uid: TypeRef:System.Collections.IEnumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
  spec.csharp:
  - {}
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
  - {}
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ICell>
  name: IObservable<ICell>
  nameWithType: IObservable<ICell>
  fullName: System.IObservable<Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  name: IObservable<ISession * ICell<CubicInterpolation> * CellEvent * ICell * DateTime>
  nameWithType: IObservable<ISession * ICell<CubicInterpolation> * CellEvent * ICell * DateTime>
  fullName: System.IObservable<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.CubicInterpolation
    name: CubicInterpolation
    nameWithType: CubicInterpolation
    fullName: QLNet.CubicInterpolation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  name: IObservable<ISession * Model * CellEvent * ICell * DateTime>
  nameWithType: IObservable<ISession * Model * CellEvent * ICell * DateTime>
  fullName: System.IObservable<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.Model
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Model
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<QLNet.CubicInterpolation>
  name: IObservable<CubicInterpolation>
  nameWithType: IObservable<CubicInterpolation>
  fullName: System.IObservable<QLNet.CubicInterpolation>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.CubicInterpolation
    name: CubicInterpolation
    nameWithType: CubicInterpolation
    fullName: QLNet.CubicInterpolation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>>
  name: IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
  nameWithType: IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,QLNet.CubicInterpolation>>>
  name: IObservable<KeyValuePair<ISession,KeyValuePair<string,CubicInterpolation>>>
  nameWithType: IObservable<KeyValuePair<ISession,KeyValuePair<string,CubicInterpolation>>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,QLNet.CubicInterpolation>>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: QLNet.CubicInterpolation
    name: CubicInterpolation
    nameWithType: CubicInterpolation
    fullName: QLNet.CubicInterpolation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.decimal>>
  name: IObservable<KeyValuePair<string,decimal>>
  nameWithType: IObservable<KeyValuePair<string,decimal>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,decimal>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.decimal
    name: decimal
    nameWithType: decimal
    fullName: decimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.float>>
  name: IObservable<KeyValuePair<string,float>>
  nameWithType: IObservable<KeyValuePair<string,float>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,float>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.int>>
  name: IObservable<KeyValuePair<string,int>>
  nameWithType: IObservable<KeyValuePair<string,int>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,int>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.int
    name: int
    nameWithType: int
    fullName: int
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObserver`1<QLNet.CubicInterpolation>
  name: IObserver<CubicInterpolation>
  nameWithType: IObserver<CubicInterpolation>
  fullName: System.IObserver<QLNet.CubicInterpolation>
  spec.csharp:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.CubicInterpolation
    name: CubicInterpolation
    nameWithType: CubicInterpolation
    fullName: QLNet.CubicInterpolation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell<'T>)
  name: "member Bind: ICell<'T> -> unit"
  nameWithType: "member Model.Bind: ICell<'T> -> unit"
  fullName: "member Cephei.Cell.Generic.Model.Bind: Cephei.Cell.Generic.ICell<'T> -> unit"
- uid: Cephei.Cell.Generic.Model`1.OnCompleted(unit)
  name: 'abstract member OnCompleted: unit -> unit'
  nameWithType: 'abstract member Model.OnCompleted: unit -> unit'
  fullName: 'abstract member Cephei.Cell.Generic.Model.OnCompleted: unit -> unit'
- uid: Cephei.Cell.Generic.Model`1.OnError(exn)
  name: 'abstract member OnError: exn -> unit'
  nameWithType: 'abstract member Model.OnError: exn -> unit'
  fullName: 'abstract member Cephei.Cell.Generic.Model.OnError: exn -> unit'
- uid: Cephei.Cell.Generic.Model`1.OnNext('T)
  name: "abstract member OnNext: 'T -> unit"
  nameWithType: "abstract member Model.OnNext: 'T -> unit"
  fullName: "abstract member Cephei.Cell.Generic.Model.OnNext: 'T -> unit"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<'T>)
  name: "abstract member Subscribe: IObserver<'T> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<'T> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<'T> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  name: "abstract member Subscribe: IObserver<ISession * ICell<'T> * CellEvent * ICell * DateTime> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<ISession * ICell<'T> * CellEvent * ICell * DateTime> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>>)
  name: "abstract member Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,'T>>> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,'T>>> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Value(unit)
  name: "abstract property Value: 'T"
  nameWithType: "abstract property Model.Value: 'T"
  fullName: "abstract property Cephei.Cell.Generic.Model.Value: 'T"
- uid: Cephei.Cell.Model.As(string)
  name: "member As: string -> ICell<'T>"
  nameWithType: "member Model.As: string -> ICell<'T>"
  fullName: "member Cephei.Cell.Model.As: string -> Cephei.Cell.Generic.ICell<'T>"
- uid: Cephei.Cell.Model.Bind(unit)
  name: 'member Bind: unit -> unit'
  nameWithType: 'member Model.Bind: unit -> unit'
  fullName: 'member Cephei.Cell.Model.Bind: unit -> unit'
- uid: Cephei.Cell.Model.Box(unit)
  name: 'abstract property Box: obj'
  nameWithType: 'abstract property Model.Box: obj'
  fullName: 'abstract property Cephei.Cell.Model.Box: obj'
- uid: Cephei.Cell.Model.Change()
  name: 'abstract member Change: CellChange'
  nameWithType: 'abstract member Model.Change: CellChange'
  fullName: 'abstract member Cephei.Cell.Model.Change: Cephei.Cell.CellChange'
- uid: Cephei.Cell.Model.Create(Unit -> 'T * string)
  name: "member Create: Unit -> 'T * string -> Cell<'T>"
  nameWithType: "member Model.Create: Unit -> 'T * string -> Cell<'T>"
  fullName: "member Cephei.Cell.Model.Create: Unit -> 'T * string -> Cephei.Cell.Generic.Cell<'T>"
- uid: Cephei.Cell.Model.CreateValue('T * string)
  name: "member CreateValue: 'T * string -> Cell<'T>"
  nameWithType: "member Model.CreateValue: 'T * string -> Cell<'T>"
  fullName: "member Cephei.Cell.Model.CreateValue: 'T * string -> Cephei.Cell.Generic.Cell<'T>"
- uid: Cephei.Cell.Model.Dependants(unit)
  name: 'abstract property Dependants: IEnumerable<ICellEvent>'
  nameWithType: 'abstract property Model.Dependants: IEnumerable<ICellEvent>'
  fullName: 'abstract property Cephei.Cell.Model.Dependants: System.Collections.Generic.IEnumerable<Cephei.Cell.ICellEvent>'
- uid: Cephei.Cell.Model.Dispose(unit)
  name: 'member Dispose: unit -> unit'
  nameWithType: 'member Model.Dispose: unit -> unit'
  fullName: 'member Cephei.Cell.Model.Dispose: unit -> unit'
- uid: Cephei.Cell.Model.GetOrAdd(string * Cephei.Cell.ICell)
  name: 'member GetOrAdd: string * ICell -> ICell'
  nameWithType: 'member Model.GetOrAdd: string * ICell -> ICell'
  fullName: 'member Cephei.Cell.Model.GetOrAdd: string * Cephei.Cell.ICell -> Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.HasFunction(unit)
  name: 'abstract property HasFunction: bool'
  nameWithType: 'abstract property Model.HasFunction: bool'
  fullName: 'abstract property Cephei.Cell.Model.HasFunction: bool'
- uid: Cephei.Cell.Model.HasValue(unit)
  name: 'abstract property HasValue: bool'
  nameWithType: 'abstract property Model.HasValue: bool'
  fullName: 'abstract property Cephei.Cell.Model.HasValue: bool'
- uid: Cephei.Cell.Model.Item(string)
  name: 'property Item: string -> ICell'
  nameWithType: 'property Model.Item: string -> ICell'
  fullName: 'property Cephei.Cell.Model.Item: string -> Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.Mnemonic(unit)
  name: 'abstract property Mnemonic: string'
  nameWithType: 'abstract property Model.Mnemonic: string'
  fullName: 'abstract property Cephei.Cell.Model.Mnemonic: string'
- uid: Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession)
  name: 'abstract member OnChange: CellEvent * ICellEvent * DateTime * ISession -> unit'
  nameWithType: 'abstract member Model.OnChange: CellEvent * ICellEvent * DateTime * ISession -> unit'
  fullName: 'abstract member Cephei.Cell.Model.OnChange: Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession -> unit'
- uid: Cephei.Cell.Model.Parent(unit)
  name: 'abstract property Parent: ICell'
  nameWithType: 'abstract property Model.Parent: ICell'
  fullName: 'abstract property Cephei.Cell.Model.Parent: Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ICell>)
  name: 'abstract member Subscribe: IObserver<ICell> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<ICell> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<Cephei.Cell.ICell> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  name: 'abstract member Subscribe: IObserver<ISession * Model * CellEvent * ICell * DateTime> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<ISession * Model * CellEvent * ICell * DateTime> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,ICell>>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,ICell>>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,decimal>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,decimal>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,float>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,float>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,float>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,float>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,int>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,int>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,int>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,int>> -> System.IDisposable'
- uid: Cephei.Cell.Model.TryAdd(string * Cephei.Cell.ICell)
  name: 'member TryAdd: string * ICell -> bool'
  nameWithType: 'member Model.TryAdd: string * ICell -> bool'
  fullName: 'member Cephei.Cell.Model.TryAdd: string * Cephei.Cell.ICell -> bool'
- uid: Cephei.Cell.Model.TryRemove(string * Cephei.Cell.ICell byref)
  name: 'member TryRemove: string * ICell byref -> bool'
  nameWithType: 'member Model.TryRemove: string * ICell byref -> bool'
  fullName: 'member Cephei.Cell.Model.TryRemove: string * Cephei.Cell.ICell byref -> bool'
- uid: Cephei.Cell.Model.TryUpdate(string * Cephei.Cell.ICell * Cephei.Cell.ICell)
  name: 'member TryUpdate: string * ICell * ICell -> bool'
  nameWithType: 'member Model.TryUpdate: string * ICell * ICell -> bool'
  fullName: 'member Cephei.Cell.Model.TryUpdate: string * Cephei.Cell.ICell * Cephei.Cell.ICell -> bool'
- uid: Cephei.Cell.Model.add_Change(Cephei.Cell.CellChange)
  name: 'abstract member add_Change: CellChange -> unit'
  nameWithType: 'abstract member Model.add_Change: CellChange -> unit'
  fullName: 'abstract member Cephei.Cell.Model.add_Change: Cephei.Cell.CellChange -> unit'
- uid: Cephei.Cell.Model.remove_Change(Cephei.Cell.CellChange)
  name: 'abstract member remove_Change: CellChange -> unit'
  nameWithType: 'abstract member Model.remove_Change: CellChange -> unit'
  fullName: 'abstract member Cephei.Cell.Model.remove_Change: Cephei.Cell.CellChange -> unit'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * 'TValue * System.Func<'TKey,'TValue,'TValue>)
  name: "member AddOrUpdate: 'TKey * 'TValue * Func<'TKey,'TValue,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.AddOrUpdate: 'TKey * 'TValue * Func<'TKey,'TValue,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.AddOrUpdate: 'TKey * 'TValue * System.Func<'TKey,'TValue,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue>)
  name: "member AddOrUpdate: 'TKey * Func<'TKey,'TValue> * Func<'TKey,'TValue,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.AddOrUpdate: 'TKey * Func<'TKey,'TValue> * Func<'TKey,'TValue,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.AddOrUpdate: 'TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear(unit)
  name: 'abstract member Clear: unit -> unit'
  nameWithType: 'abstract member ConcurrentDictionary.Clear: unit -> unit'
  fullName: 'abstract member System.Collections.Concurrent.ConcurrentDictionary.Clear: unit -> unit'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey('TKey)
  name: "abstract member ContainsKey: 'TKey -> bool"
  nameWithType: "abstract member ConcurrentDictionary.ContainsKey: 'TKey -> bool"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.ContainsKey: 'TKey -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count(unit)
  name: 'abstract property Count: int'
  nameWithType: 'abstract property ConcurrentDictionary.Count: int'
  fullName: 'abstract property System.Collections.Concurrent.ConcurrentDictionary.Count: int'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator(unit)
  name: "abstract member GetEnumerator: unit -> IEnumerator<KeyValuePair<'TKey,'TValue>>"
  nameWithType: "abstract member ConcurrentDictionary.GetEnumerator: unit -> IEnumerator<KeyValuePair<'TKey,'TValue>>"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.GetEnumerator: unit -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<'TKey,'TValue>>"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * 'TValue)
  name: "member GetOrAdd: 'TKey * 'TValue -> 'TValue"
  nameWithType: "member ConcurrentDictionary.GetOrAdd: 'TKey * 'TValue -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd: 'TKey * 'TValue -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * System.Func<'TKey,'TValue>)
  name: "member GetOrAdd: 'TKey * Func<'TKey,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.GetOrAdd: 'TKey * Func<'TKey,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd: 'TKey * System.Func<'TKey,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty(unit)
  name: 'property IsEmpty: bool'
  nameWithType: 'property ConcurrentDictionary.IsEmpty: bool'
  fullName: 'property System.Collections.Concurrent.ConcurrentDictionary.IsEmpty: bool'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item('TKey)
  name: "abstract property Item: 'TKey -> 'TValue"
  nameWithType: "abstract property ConcurrentDictionary.Item: 'TKey -> 'TValue"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Item: 'TKey -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys(unit)
  name: "abstract property Keys: ICollection<'TKey>"
  nameWithType: "abstract property ConcurrentDictionary.Keys: ICollection<'TKey>"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Keys: System.Collections.Generic.ICollection<'TKey>"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray(unit)
  name: "member ToArray: unit -> KeyValuePair<'TKey,'TValue> []"
  nameWithType: "member ConcurrentDictionary.ToArray: unit -> KeyValuePair<'TKey,'TValue> []"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.ToArray: unit -> System.Collections.Generic.KeyValuePair<'TKey,'TValue> []"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd('TKey * 'TValue)
  name: "member TryAdd: 'TKey * 'TValue -> bool"
  nameWithType: "member ConcurrentDictionary.TryAdd: 'TKey * 'TValue -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryAdd: 'TKey * 'TValue -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue('TKey * 'TValue byref)
  name: "abstract member TryGetValue: 'TKey * 'TValue byref -> bool"
  nameWithType: "abstract member ConcurrentDictionary.TryGetValue: 'TKey * 'TValue byref -> bool"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.TryGetValue: 'TKey * 'TValue byref -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove('TKey * 'TValue byref)
  name: "member TryRemove: 'TKey * 'TValue byref -> bool"
  nameWithType: "member ConcurrentDictionary.TryRemove: 'TKey * 'TValue byref -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryRemove: 'TKey * 'TValue byref -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate('TKey * 'TValue * 'TValue)
  name: "member TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
  nameWithType: "member ConcurrentDictionary.TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values(unit)
  name: "abstract property Values: ICollection<'TValue>"
  nameWithType: "abstract property ConcurrentDictionary.Values: ICollection<'TValue>"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Values: System.Collections.Generic.ICollection<'TValue>"
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
  name: ICell<List<double>>
  nameWithType: ICell<List<double>>
  fullName: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.double
    name: double
    nameWithType: double
    fullName: double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
  name: ICell<int>
  nameWithType: ICell<int>
  fullName: Cephei.Cell.Generic.ICell<int>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.int
    name: int
    nameWithType: int
    fullName: int
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation.DerivativeApprox>
  name: ICell<DerivativeApprox>
  nameWithType: ICell<DerivativeApprox>
  fullName: Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.DerivativeApprox>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.CubicInterpolation.DerivativeApprox
    name: DerivativeApprox
    nameWithType: DerivativeApprox
    fullName: QLNet.CubicInterpolation.DerivativeApprox
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
  name: ICell<bool>
  nameWithType: ICell<bool>
  fullName: Cephei.Cell.Generic.ICell<bool>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.bool
    name: bool
    nameWithType: bool
    fullName: bool
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.CubicInterpolation.BoundaryCondition>
  name: ICell<BoundaryCondition>
  nameWithType: ICell<BoundaryCondition>
  fullName: Cephei.Cell.Generic.ICell<QLNet.CubicInterpolation.BoundaryCondition>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.CubicInterpolation.BoundaryCondition
    name: BoundaryCondition
    nameWithType: BoundaryCondition
    fullName: QLNet.CubicInterpolation.BoundaryCondition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
  name: ICell<double>
  nameWithType: ICell<double>
  fullName: Cephei.Cell.Generic.ICell<double>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.double
    name: double
    nameWithType: double
    fullName: double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.CubicInterpolationModel.#ctor*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.#ctor*
  name: ( .ctor )
  nameWithType: CubicInterpolationModel.( .ctor )
  fullName: Cephei.QL.CubicInterpolationModel
- uid: TypeRef:Cephei.QL.CubicInterpolationModel
  name: CubicInterpolationModel
  nameWithType: CubicInterpolationModel
  fullName: Cephei.QL.CubicInterpolationModel
  spec.csharp:
  - {}
  - uid: Cephei.QL.CubicInterpolationModel
    name: CubicInterpolationModel
    nameWithType: CubicInterpolationModel
    fullName: Cephei.QL.CubicInterpolationModel
  - {}
- uid: Cephei.QL.CubicInterpolationModel.Derivative*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.Derivative*
  name: Derivative
  nameWithType: CubicInterpolationModel.Derivative
  fullName: Cephei.QL.CubicInterpolationModel.Derivative
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
  name: ICell<float>
  nameWithType: ICell<float>
  fullName: Cephei.Cell.Generic.ICell<float>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.CubicInterpolationModel.DisableExtrapolation*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.DisableExtrapolation*
  name: DisableExtrapolation
  nameWithType: CubicInterpolationModel.DisableExtrapolation
  fullName: Cephei.QL.CubicInterpolationModel.DisableExtrapolation
- uid: Cephei.QL.CubicInterpolationModel.EnableExtrapolation*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.EnableExtrapolation*
  name: EnableExtrapolation
  nameWithType: CubicInterpolationModel.EnableExtrapolation
  fullName: Cephei.QL.CubicInterpolationModel.EnableExtrapolation
- uid: Cephei.QL.CubicInterpolationModel.Primitive*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.Primitive*
  name: Primitive
  nameWithType: CubicInterpolationModel.Primitive
  fullName: Cephei.QL.CubicInterpolationModel.Primitive
- uid: Cephei.QL.CubicInterpolationModel.SecondDerivative*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.SecondDerivative*
  name: SecondDerivative
  nameWithType: CubicInterpolationModel.SecondDerivative
  fullName: Cephei.QL.CubicInterpolationModel.SecondDerivative
- uid: Cephei.QL.CubicInterpolationModel.Value*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.Value*
  name: Value
  nameWithType: CubicInterpolationModel.Value
  fullName: Cephei.QL.CubicInterpolationModel.Value
- uid: Cephei.QL.CubicInterpolationModel.Value1*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.Value1*
  name: Value1
  nameWithType: CubicInterpolationModel.Value1
  fullName: Cephei.QL.CubicInterpolationModel.Value1
- uid: Cephei.QL.CubicInterpolationModel.yBegin*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.yBegin*
  name: yBegin
  nameWithType: CubicInterpolationModel.yBegin
  fullName: Cephei.QL.CubicInterpolationModel.yBegin
- uid: Cephei.QL.CubicInterpolationModel.xBegin*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.xBegin*
  name: xBegin
  nameWithType: CubicInterpolationModel.xBegin
  fullName: Cephei.QL.CubicInterpolationModel.xBegin
- uid: Cephei.QL.CubicInterpolationModel.size*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.size*
  name: size
  nameWithType: CubicInterpolationModel.size
  fullName: Cephei.QL.CubicInterpolationModel.size
- uid: Cephei.QL.CubicInterpolationModel.rightConditionValue*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.rightConditionValue*
  name: rightConditionValue
  nameWithType: CubicInterpolationModel.rightConditionValue
  fullName: Cephei.QL.CubicInterpolationModel.rightConditionValue
- uid: Cephei.QL.CubicInterpolationModel.rightCond*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.rightCond*
  name: rightCond
  nameWithType: CubicInterpolationModel.rightCond
  fullName: Cephei.QL.CubicInterpolationModel.rightCond
- uid: Cephei.QL.CubicInterpolationModel.monotonic*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.monotonic*
  name: monotonic
  nameWithType: CubicInterpolationModel.monotonic
  fullName: Cephei.QL.CubicInterpolationModel.monotonic
- uid: Cephei.QL.CubicInterpolationModel.leftConditionValue*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.leftConditionValue*
  name: leftConditionValue
  nameWithType: CubicInterpolationModel.leftConditionValue
  fullName: Cephei.QL.CubicInterpolationModel.leftConditionValue
- uid: Cephei.QL.CubicInterpolationModel.leftCond*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.leftCond*
  name: leftCond
  nameWithType: CubicInterpolationModel.leftCond
  fullName: Cephei.QL.CubicInterpolationModel.leftCond
- uid: Cephei.QL.CubicInterpolationModel.da*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.da*
  name: da
  nameWithType: CubicInterpolationModel.da
  fullName: Cephei.QL.CubicInterpolationModel.da
- uid: Cephei.QL.CubicInterpolationModel.XMin*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.XMin*
  name: XMin
  nameWithType: CubicInterpolationModel.XMin
  fullName: Cephei.QL.CubicInterpolationModel.XMin
- uid: Cephei.QL.CubicInterpolationModel.XMax*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.XMax*
  name: XMax
  nameWithType: CubicInterpolationModel.XMax
  fullName: Cephei.QL.CubicInterpolationModel.XMax
- uid: Cephei.QL.CubicInterpolationModel.Update*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.Update*
  name: Update
  nameWithType: CubicInterpolationModel.Update
  fullName: Cephei.QL.CubicInterpolationModel.Update
- uid: Cephei.QL.CubicInterpolationModel.Extrapolate*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.Extrapolate*
  name: Extrapolate
  nameWithType: CubicInterpolationModel.Extrapolate
  fullName: Cephei.QL.CubicInterpolationModel.Extrapolate
- uid: Cephei.QL.CubicInterpolationModel.Empty*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.Empty*
  name: Empty
  nameWithType: CubicInterpolationModel.Empty
  fullName: Cephei.QL.CubicInterpolationModel.Empty
- uid: Cephei.QL.CubicInterpolationModel.CCoefficients*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.CCoefficients*
  name: CCoefficients
  nameWithType: CubicInterpolationModel.CCoefficients
  fullName: Cephei.QL.CubicInterpolationModel.CCoefficients
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.float>>
  name: ICell<List<float>>
  nameWithType: ICell<List<float>>
  fullName: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<float>>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.CubicInterpolationModel.BCoefficients*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.BCoefficients*
  name: BCoefficients
  nameWithType: CubicInterpolationModel.BCoefficients
  fullName: Cephei.QL.CubicInterpolationModel.BCoefficients
- uid: Cephei.QL.CubicInterpolationModel.AllowsExtrapolation*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.AllowsExtrapolation*
  name: AllowsExtrapolation
  nameWithType: CubicInterpolationModel.AllowsExtrapolation
  fullName: Cephei.QL.CubicInterpolationModel.AllowsExtrapolation
- uid: Cephei.QL.CubicInterpolationModel.ACoefficients*
  commentId: Overload:Cephei.QL.CubicInterpolationModel.ACoefficients*
  name: ACoefficients
  nameWithType: CubicInterpolationModel.ACoefficients
  fullName: Cephei.QL.CubicInterpolationModel.ACoefficients
