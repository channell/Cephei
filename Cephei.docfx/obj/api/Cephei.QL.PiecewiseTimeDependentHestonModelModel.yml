### YamlMime:ManagedReference
items:
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  commentId: T:Cephei.QL.PiecewiseTimeDependentHestonModelModel
  id: PiecewiseTimeDependentHestonModelModel
  parent: Cephei.QL
  children:
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.#ctor(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.TimeGrid>)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.Calibrate(Cephei.Cell.Generic.ICell<System.Collections.Generic.List<QLNet.CalibrationHelper>> -> Cephei.Cell.Generic.ICell<QLNet.OptimizationMethod> -> Cephei.Cell.Generic.ICell<QLNet.EndCriteria> -> Cephei.Cell.Generic.ICell<QLNet.Constraint> -> Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> -> Cephei.Cell.Generic.ICell<System.Collections.Generic.List<bool>>)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.Constraint(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.dividendYield(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.DividendYield(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.EndCriteria(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.Kappa(Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.kappa(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.NotifyObservers(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.Parameters(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.Rho(Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.rho(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.riskFreeRate(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.RiskFreeRate(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.s0(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.S0(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.SetParams(Cephei.Cell.Generic.ICell<QLNet.Vector>)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.Sigma(Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.sigma(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.Theta(Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.theta(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.timeGrid(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.TimeGrid(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.Update(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.v0(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.V0(unit)
  - Cephei.QL.PiecewiseTimeDependentHestonModelModel.Value(Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<System.Collections.Generic.List<QLNet.CalibrationHelper>>)
  langs:
  - csharp
  - vb
  name: PiecewiseTimeDependentHestonModelModel
  nameWithType: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  type: Class
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 35
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: >-
      [<AutoSerializable(true)>]

      type PiecewiseTimeDependentHestonModelModel (riskFreeRate:ICell<Handle<YieldTermStructure>>, dividendYield:ICell<Handle<YieldTermStructure>>, s0:ICell<Handle<Quote>>, v0:ICell<double>, theta:ICell<Parameter>, kappa:ICell<Parameter>, sigma:ICell<Parameter>, rho:ICell<Parameter>, timeGrid:ICell<TimeGrid>)
          inherit Model<PiecewiseTimeDependentHestonModel>
          interface IDictionary<string,ICell>
          interface ICollection<KeyValuePair<string,ICell>>
          interface IReadOnlyDictionary<string,ICell>
          interface IReadOnlyCollection<KeyValuePair<string,ICell>>
          interface IEnumerable<KeyValuePair<string,ICell>>
          interface IDictionary
          interface ICollection
          interface IEnumerable
          interface IObservable<ICell>
          interface IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
          interface IObservable<ISession * Model * CellEvent * ICell * DateTime>
          interface IObservable<KeyValuePair<string,float>>
          interface IObservable<KeyValuePair<string,int>>
          interface IObservable<KeyValuePair<string,decimal>>
          interface ICell<PiecewiseTimeDependentHestonModel>
          interface ICell
          interface ICellEvent
          interface IObservable<PiecewiseTimeDependentHestonModel>
          interface IObservable<KeyValuePair<ISession,KeyValuePair<string,PiecewiseTimeDependentHestonModel>>>
          interface IObservable<ISession * ICell<PiecewiseTimeDependentHestonModel> * CellEvent * ICell * DateTime>
          interface IObserver<PiecewiseTimeDependentHestonModel>
    parameters:
    - id: riskFreeRate
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
    - id: dividendYield
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
    - id: s0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.Quote>>
      attributes: []
    - id: v0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: theta
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Parameter>
      attributes: []
    - id: kappa
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Parameter>
      attributes: []
    - id: sigma
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Parameter>
      attributes: []
    - id: rho
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Parameter>
      attributes: []
    - id: timeGrid
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.TimeGrid>
      attributes: []
    typeParameters: []
  inheritance:
  - TypeRef:System.Object
  - TypeRef:System.Collections.Concurrent.ConcurrentDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:Cephei.Cell.Model
  - TypeRef:Cephei.Cell.Generic.Model`1<QLNet.PiecewiseTimeDependentHestonModel>
  implements:
  - TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.PiecewiseTimeDependentHestonModel>
  - TypeRef:Cephei.Cell.ICell
  - TypeRef:Cephei.Cell.ICellEvent
  - TypeRef:System.Collections.Generic.ICollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IReadOnlyCollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IReadOnlyDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:System.Collections.ICollection
  - TypeRef:System.Collections.IDictionary
  - TypeRef:System.Collections.IEnumerable
  - TypeRef:System.IObservable`1<Cephei.Cell.ICell>
  - TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell`1<QLNet.PiecewiseTimeDependentHestonModel> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  - TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  - TypeRef:System.IObservable`1<QLNet.PiecewiseTimeDependentHestonModel>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,QLNet.PiecewiseTimeDependentHestonModel>>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.decimal>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.float>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.int>>
  - TypeRef:System.IObserver`1<QLNet.PiecewiseTimeDependentHestonModel>
  inheritedMembers:
  - Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell<'T>)
  - Cephei.Cell.Generic.Model`1.OnCompleted(unit)
  - Cephei.Cell.Generic.Model`1.OnError(exn)
  - Cephei.Cell.Generic.Model`1.OnNext('T)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<'T>)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>>)
  - Cephei.Cell.Generic.Model`1.Value(unit)
  - Cephei.Cell.Model.As(string)
  - Cephei.Cell.Model.Bind(unit)
  - Cephei.Cell.Model.Box(unit)
  - Cephei.Cell.Model.Change()
  - Cephei.Cell.Model.Create(Unit -> 'T * string)
  - Cephei.Cell.Model.CreateValue('T * string)
  - Cephei.Cell.Model.Dependants(unit)
  - Cephei.Cell.Model.Dispose(unit)
  - Cephei.Cell.Model.GetOrAdd(string * Cephei.Cell.ICell)
  - Cephei.Cell.Model.HasFunction(unit)
  - Cephei.Cell.Model.HasValue(unit)
  - Cephei.Cell.Model.Item(string)
  - Cephei.Cell.Model.Mnemonic(unit)
  - Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession)
  - Cephei.Cell.Model.Parent(unit)
  - Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ICell>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,float>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,int>>)
  - Cephei.Cell.Model.TryAdd(string * Cephei.Cell.ICell)
  - Cephei.Cell.Model.TryRemove(string * Cephei.Cell.ICell byref)
  - Cephei.Cell.Model.TryUpdate(string * Cephei.Cell.ICell * Cephei.Cell.ICell)
  - Cephei.Cell.Model.add_Change(Cephei.Cell.CellChange)
  - Cephei.Cell.Model.remove_Change(Cephei.Cell.CellChange)
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * 'TValue * System.Func<'TKey,'TValue,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Clear(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey('TKey)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Count(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * System.Func<'TKey,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Item('TKey)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Keys(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.ToArray(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd('TKey * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue('TKey * 'TValue byref)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove('TKey * 'TValue byref)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate('TKey * 'TValue * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Values(unit)
  attributes:
  - type: Microsoft.FSharp.Core.AutoSerializableAttribute
    arguments:
    - type: System.Boolean
      value: true
    namedArguments: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.#ctor(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.TimeGrid>)
  commentId: M:Cephei.QL.PiecewiseTimeDependentHestonModelModel.#ctor(Cephei.Cell.Generic.ICell{QLNet.Handle{QLNet.YieldTermStructure}},Cephei.Cell.Generic.ICell{QLNet.Handle{QLNet.YieldTermStructure}},Cephei.Cell.Generic.ICell{QLNet.Handle{QLNet.Quote}},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{QLNet.Parameter},Cephei.Cell.Generic.ICell{QLNet.Parameter},Cephei.Cell.Generic.ICell{QLNet.Parameter},Cephei.Cell.Generic.ICell{QLNet.Parameter},Cephei.Cell.Generic.ICell{QLNet.TimeGrid})
  id: '#ctor(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.TimeGrid>)'
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'new: ICell<Handle<YieldTermStructure>> * ICell<Handle<YieldTermStructure>> * ICell<Handle<Quote>> * ICell<double> * ICell<Parameter> * ICell<Parameter> * ICell<Parameter> * ICell<Parameter> * ICell<TimeGrid> -> PiecewiseTimeDependentHestonModelModel'
  nameWithType: 'new: ICell<Handle<YieldTermStructure>> * ICell<Handle<YieldTermStructure>> * ICell<Handle<Quote>> * ICell<double> * ICell<Parameter> * ICell<Parameter> * ICell<Parameter> * ICell<Parameter> * ICell<TimeGrid> -> PiecewiseTimeDependentHestonModelModel'
  fullName: 'new: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.TimeGrid> -> Cephei.QL.PiecewiseTimeDependentHestonModelModel'
  type: Constructor
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.#ctor(Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>> * Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.Parameter> * Cephei.Cell.Generic.ICell<QLNet.TimeGrid>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 35
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  summary: Implicit constructor.
  syntax:
    content: 'new: riskFreeRate:ICell<Handle<YieldTermStructure>> * dividendYield:ICell<Handle<YieldTermStructure>> * s0:ICell<Handle<Quote>> * v0:ICell<double> * theta:ICell<Parameter> * kappa:ICell<Parameter> * sigma:ICell<Parameter> * rho:ICell<Parameter> * timeGrid:ICell<TimeGrid> -> PiecewiseTimeDependentHestonModelModel'
    parameters:
    - id: riskFreeRate
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
    - id: dividendYield
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
    - id: s0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.Quote>>
      attributes: []
    - id: v0
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: theta
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Parameter>
      attributes: []
    - id: kappa
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Parameter>
      attributes: []
    - id: sigma
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Parameter>
      attributes: []
    - id: rho
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Parameter>
      attributes: []
    - id: timeGrid
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.TimeGrid>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.QL.PiecewiseTimeDependentHestonModelModel
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.#ctor*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Calibrate(Cephei.Cell.Generic.ICell<System.Collections.Generic.List<QLNet.CalibrationHelper>> -> Cephei.Cell.Generic.ICell<QLNet.OptimizationMethod> -> Cephei.Cell.Generic.ICell<QLNet.EndCriteria> -> Cephei.Cell.Generic.ICell<QLNet.Constraint> -> Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> -> Cephei.Cell.Generic.ICell<System.Collections.Generic.List<bool>>)
  commentId: M:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Calibrate(Cephei.Cell.Generic.ICell{System.Collections.Generic.List{QLNet.CalibrationHelper}},Cephei.Cell.Generic.ICell{QLNet.OptimizationMethod},Cephei.Cell.Generic.ICell{QLNet.EndCriteria},Cephei.Cell.Generic.ICell{QLNet.Constraint},Cephei.Cell.Generic.ICell{System.Collections.Generic.List{System.Double}},Cephei.Cell.Generic.ICell{System.Collections.Generic.List{System.Boolean}})
  id: Calibrate(Cephei.Cell.Generic.ICell<System.Collections.Generic.List<QLNet.CalibrationHelper>> -> Cephei.Cell.Generic.ICell<QLNet.OptimizationMethod> -> Cephei.Cell.Generic.ICell<QLNet.EndCriteria> -> Cephei.Cell.Generic.ICell<QLNet.Constraint> -> Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> -> Cephei.Cell.Generic.ICell<System.Collections.Generic.List<bool>>)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'member Calibrate: ICell<List<CalibrationHelper>> -> ICell<OptimizationMethod> -> ICell<EndCriteria> -> ICell<Constraint> -> ICell<List<double>> -> ICell<List<bool>> -> ICell<PiecewiseTimeDependentHestonModel>'
  nameWithType: 'member PiecewiseTimeDependentHestonModelModel.Calibrate: ICell<List<CalibrationHelper>> -> ICell<OptimizationMethod> -> ICell<EndCriteria> -> ICell<Constraint> -> ICell<List<double>> -> ICell<List<bool>> -> ICell<PiecewiseTimeDependentHestonModel>'
  fullName: 'member Cephei.QL.PiecewiseTimeDependentHestonModelModel.Calibrate: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<QLNet.CalibrationHelper>> -> Cephei.Cell.Generic.ICell<QLNet.OptimizationMethod> -> Cephei.Cell.Generic.ICell<QLNet.EndCriteria> -> Cephei.Cell.Generic.ICell<QLNet.Constraint> -> Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> -> Cephei.Cell.Generic.ICell<System.Collections.Generic.List<bool>> -> Cephei.Cell.Generic.ICell<QLNet.PiecewiseTimeDependentHestonModel>'
  type: Method
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Calibrate(Cephei.Cell.Generic.ICell<System.Collections.Generic.List<QLNet.CalibrationHelper>> -> Cephei.Cell.Generic.ICell<QLNet.OptimizationMethod> -> Cephei.Cell.Generic.ICell<QLNet.EndCriteria> -> Cephei.Cell.Generic.ICell<QLNet.Constraint> -> Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> -> Cephei.Cell.Generic.ICell<System.Collections.Generic.List<bool>>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 125
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Calibrate: instruments:ICell<List<CalibrationHelper>> -> Method:ICell<OptimizationMethod> -> endCriteria:ICell<EndCriteria> -> additionalConstraint:ICell<Constraint> -> weights:ICell<List<double>> -> fixParameters:ICell<List<bool>> -> ICell<PiecewiseTimeDependentHestonModel>'
    parameters:
    - id: instruments
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<QLNet.CalibrationHelper>>
      attributes: []
    - id: Method
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.OptimizationMethod>
      attributes: []
    - id: endCriteria
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.EndCriteria>
      attributes: []
    - id: additionalConstraint
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Constraint>
      attributes: []
    - id: weights
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: fixParameters
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.bool>>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.PiecewiseTimeDependentHestonModel>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Calibrate*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Kappa(Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Kappa(Cephei.Cell.Generic.ICell{System.Double})
  id: Kappa(Cephei.Cell.Generic.ICell<double>)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'member Kappa: ICell<double> -> ICell<float>'
  nameWithType: 'member PiecewiseTimeDependentHestonModelModel.Kappa: ICell<double> -> ICell<float>'
  fullName: 'member Cephei.QL.PiecewiseTimeDependentHestonModelModel.Kappa: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Kappa(Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 113
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Kappa: t:ICell<double> -> ICell<float>'
    parameters:
    - id: t
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Kappa*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  commentId: M:Cephei.QL.PiecewiseTimeDependentHestonModelModel.RegisterWith(Cephei.Cell.Generic.ICell{QLNet.Callback})
  id: RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'member RegisterWith: ICell<Callback> -> ICell<PiecewiseTimeDependentHestonModel>'
  nameWithType: 'member PiecewiseTimeDependentHestonModelModel.RegisterWith: ICell<Callback> -> ICell<PiecewiseTimeDependentHestonModel>'
  fullName: 'member Cephei.QL.PiecewiseTimeDependentHestonModelModel.RegisterWith: Cephei.Cell.Generic.ICell<QLNet.Callback> -> Cephei.Cell.Generic.ICell<QLNet.PiecewiseTimeDependentHestonModel>'
  type: Method
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 131
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member RegisterWith: handler:ICell<Callback> -> ICell<PiecewiseTimeDependentHestonModel>'
    parameters:
    - id: handler
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Callback>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.PiecewiseTimeDependentHestonModel>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.RegisterWith*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Rho(Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Rho(Cephei.Cell.Generic.ICell{System.Double})
  id: Rho(Cephei.Cell.Generic.ICell<double>)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'member Rho: ICell<double> -> ICell<float>'
  nameWithType: 'member PiecewiseTimeDependentHestonModelModel.Rho: ICell<double> -> ICell<float>'
  fullName: 'member Cephei.QL.PiecewiseTimeDependentHestonModelModel.Rho: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Rho(Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 115
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Rho: t:ICell<double> -> ICell<float>'
    parameters:
    - id: t
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Rho*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.SetParams(Cephei.Cell.Generic.ICell<QLNet.Vector>)
  commentId: M:Cephei.QL.PiecewiseTimeDependentHestonModelModel.SetParams(Cephei.Cell.Generic.ICell{QLNet.Vector})
  id: SetParams(Cephei.Cell.Generic.ICell<QLNet.Vector>)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'member SetParams: ICell<Vector> -> ICell<PiecewiseTimeDependentHestonModel>'
  nameWithType: 'member PiecewiseTimeDependentHestonModelModel.SetParams: ICell<Vector> -> ICell<PiecewiseTimeDependentHestonModel>'
  fullName: 'member Cephei.QL.PiecewiseTimeDependentHestonModelModel.SetParams: Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<QLNet.PiecewiseTimeDependentHestonModel>'
  type: Method
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.SetParams(Cephei.Cell.Generic.ICell<QLNet.Vector>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 133
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member SetParams: parameters:ICell<Vector> -> ICell<PiecewiseTimeDependentHestonModel>'
    parameters:
    - id: parameters
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.PiecewiseTimeDependentHestonModel>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.SetParams*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Sigma(Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Sigma(Cephei.Cell.Generic.ICell{System.Double})
  id: Sigma(Cephei.Cell.Generic.ICell<double>)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'member Sigma: ICell<double> -> ICell<float>'
  nameWithType: 'member PiecewiseTimeDependentHestonModelModel.Sigma: ICell<double> -> ICell<float>'
  fullName: 'member Cephei.QL.PiecewiseTimeDependentHestonModelModel.Sigma: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Sigma(Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 119
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Sigma: t:ICell<double> -> ICell<float>'
    parameters:
    - id: t
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Sigma*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Theta(Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Theta(Cephei.Cell.Generic.ICell{System.Double})
  id: Theta(Cephei.Cell.Generic.ICell<double>)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'member Theta: ICell<double> -> ICell<float>'
  nameWithType: 'member PiecewiseTimeDependentHestonModelModel.Theta: ICell<double> -> ICell<float>'
  fullName: 'member Cephei.QL.PiecewiseTimeDependentHestonModelModel.Theta: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Theta(Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 121
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Theta: t:ICell<double> -> ICell<float>'
    parameters:
    - id: t
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Theta*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  commentId: M:Cephei.QL.PiecewiseTimeDependentHestonModelModel.UnregisterWith(Cephei.Cell.Generic.ICell{QLNet.Callback})
  id: UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'member UnregisterWith: ICell<Callback> -> ICell<PiecewiseTimeDependentHestonModel>'
  nameWithType: 'member PiecewiseTimeDependentHestonModelModel.UnregisterWith: ICell<Callback> -> ICell<PiecewiseTimeDependentHestonModel>'
  fullName: 'member Cephei.QL.PiecewiseTimeDependentHestonModelModel.UnregisterWith: Cephei.Cell.Generic.ICell<QLNet.Callback> -> Cephei.Cell.Generic.ICell<QLNet.PiecewiseTimeDependentHestonModel>'
  type: Method
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 135
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member UnregisterWith: handler:ICell<Callback> -> ICell<PiecewiseTimeDependentHestonModel>'
    parameters:
    - id: handler
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Callback>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.PiecewiseTimeDependentHestonModel>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.UnregisterWith*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Value(Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<System.Collections.Generic.List<QLNet.CalibrationHelper>>)
  commentId: M:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Value(Cephei.Cell.Generic.ICell{QLNet.Vector},Cephei.Cell.Generic.ICell{System.Collections.Generic.List{QLNet.CalibrationHelper}})
  id: Value(Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<System.Collections.Generic.List<QLNet.CalibrationHelper>>)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'member Value: ICell<Vector> -> ICell<List<CalibrationHelper>> -> ICell<float>'
  nameWithType: 'member PiecewiseTimeDependentHestonModelModel.Value: ICell<Vector> -> ICell<List<CalibrationHelper>> -> ICell<float>'
  fullName: 'member Cephei.QL.PiecewiseTimeDependentHestonModelModel.Value: Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<System.Collections.Generic.List<QLNet.CalibrationHelper>> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Value(Cephei.Cell.Generic.ICell<QLNet.Vector> -> Cephei.Cell.Generic.ICell<System.Collections.Generic.List<QLNet.CalibrationHelper>>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 138
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Value: parameters:ICell<Vector> -> instruments:ICell<List<CalibrationHelper>> -> ICell<float>'
    parameters:
    - id: parameters
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
    - id: instruments
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<QLNet.CalibrationHelper>>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Value*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.v0(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.v0
  id: v0(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property v0: ICell<float>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.v0: ICell<float>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.v0: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.v0(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 106
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property v0: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.v0*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.timeGrid(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.timeGrid
  id: timeGrid(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property timeGrid: ICell<TimeGrid>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.timeGrid: ICell<TimeGrid>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.timeGrid: Cephei.Cell.Generic.ICell<QLNet.TimeGrid>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.timeGrid(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 111
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property timeGrid: ICell<TimeGrid> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.TimeGrid>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.timeGrid*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.theta(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.theta
  id: theta(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property theta: ICell<double> -> ICell<float>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.theta: ICell<double> -> ICell<float>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.theta: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.theta(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 107
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property theta: ICell<double> -> ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double> -> Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.theta*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.sigma(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.sigma
  id: sigma(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property sigma: ICell<double> -> ICell<float>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.sigma: ICell<double> -> ICell<float>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.sigma: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.sigma(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 109
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property sigma: ICell<double> -> ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double> -> Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.sigma*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.s0(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.s0
  id: s0(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property s0: ICell<float>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.s0: ICell<float>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.s0: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.s0(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 105
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property s0: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.s0*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.riskFreeRate(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.riskFreeRate
  id: riskFreeRate(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property riskFreeRate: ICell<Handle<YieldTermStructure>>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.riskFreeRate: ICell<Handle<YieldTermStructure>>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.riskFreeRate: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.riskFreeRate(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 103
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property riskFreeRate: ICell<Handle<YieldTermStructure>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.riskFreeRate*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.rho(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.rho
  id: rho(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property rho: ICell<double> -> ICell<float>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.rho: ICell<double> -> ICell<float>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.rho: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.rho(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 110
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property rho: ICell<double> -> ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double> -> Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.rho*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.kappa(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.kappa
  id: kappa(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property kappa: ICell<double> -> ICell<float>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.kappa: ICell<double> -> ICell<float>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.kappa: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.kappa(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 108
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property kappa: ICell<double> -> ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double> -> Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.kappa*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.dividendYield(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.dividendYield
  id: dividendYield(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property dividendYield: ICell<Handle<YieldTermStructure>>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.dividendYield: ICell<Handle<YieldTermStructure>>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.dividendYield: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.dividendYield(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 104
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property dividendYield: ICell<Handle<YieldTermStructure>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.dividendYield*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.V0(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.V0
  id: V0(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property V0: ICell<float>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.V0: ICell<float>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.V0: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.V0(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 124
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property V0: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.V0*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Update(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Update
  id: Update(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property Update: ICell<PiecewiseTimeDependentHestonModel>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.Update: ICell<PiecewiseTimeDependentHestonModel>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.Update: Cephei.Cell.Generic.ICell<QLNet.PiecewiseTimeDependentHestonModel>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Update(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 137
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Update: ICell<PiecewiseTimeDependentHestonModel> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.PiecewiseTimeDependentHestonModel>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Update*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.TimeGrid(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.TimeGrid
  id: TimeGrid(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property TimeGrid: ICell<TimeGrid>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.TimeGrid: ICell<TimeGrid>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.TimeGrid: Cephei.Cell.Generic.ICell<QLNet.TimeGrid>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.TimeGrid(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 123
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property TimeGrid: ICell<TimeGrid> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.TimeGrid>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.TimeGrid*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.S0(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.S0
  id: S0(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property S0: ICell<float>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.S0: ICell<float>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.S0: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.S0(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 118
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property S0: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.S0*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.RiskFreeRate(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.RiskFreeRate
  id: RiskFreeRate(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property RiskFreeRate: ICell<Handle<YieldTermStructure>>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.RiskFreeRate: ICell<Handle<YieldTermStructure>>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.RiskFreeRate: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.RiskFreeRate(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 117
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property RiskFreeRate: ICell<Handle<YieldTermStructure>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.RiskFreeRate*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Parameters(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Parameters
  id: Parameters(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property Parameters: ICell<Vector>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.Parameters: ICell<Vector>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.Parameters: Cephei.Cell.Generic.ICell<QLNet.Vector>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Parameters(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 130
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Parameters: ICell<Vector> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Parameters*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.NotifyObservers(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.NotifyObservers
  id: NotifyObservers(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property NotifyObservers: ICell<PiecewiseTimeDependentHestonModel>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.NotifyObservers: ICell<PiecewiseTimeDependentHestonModel>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.NotifyObservers: Cephei.Cell.Generic.ICell<QLNet.PiecewiseTimeDependentHestonModel>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.NotifyObservers(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 129
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property NotifyObservers: ICell<PiecewiseTimeDependentHestonModel> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.PiecewiseTimeDependentHestonModel>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.NotifyObservers*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.EndCriteria(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.EndCriteria
  id: EndCriteria(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property EndCriteria: ICell<Type>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.EndCriteria: ICell<Type>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.EndCriteria: Cephei.Cell.Generic.ICell<QLNet.EndCriteria.Type>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.EndCriteria(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 128
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property EndCriteria: ICell<Type> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.EndCriteria.Type>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.EndCriteria*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.DividendYield(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.DividendYield
  id: DividendYield(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property DividendYield: ICell<Handle<YieldTermStructure>>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.DividendYield: ICell<Handle<YieldTermStructure>>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.DividendYield: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.DividendYield(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 112
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property DividendYield: ICell<Handle<YieldTermStructure>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.DividendYield*
  attributes: []
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Constraint(unit)
  commentId: P:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Constraint
  id: Constraint(unit)
  parent: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  langs:
  - csharp
  - vb
  name: 'property Constraint: ICell<Constraint>'
  nameWithType: 'property PiecewiseTimeDependentHestonModelModel.Constraint: ICell<Constraint>'
  fullName: 'property Cephei.QL.PiecewiseTimeDependentHestonModelModel.Constraint: Cephei.Cell.Generic.ICell<QLNet.Constraint>'
  type: Property
  source:
    id: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Constraint(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\PiecewiseTimeDependentHestonModelModel.fs
    startLine: 127
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Constraint: ICell<Constraint> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Constraint>
      attributes: []
  overload: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Constraint*
  attributes: []
references:
- uid: Cephei.QL
  commentId: N:Cephei.QL
  name: Cephei.QL
  nameWithType: Cephei.QL
  fullName: Cephei.QL
- uid: TypeRef:System.Object
  name: Object
  nameWithType: Object
  fullName: System.Object
  spec.csharp:
  - {}
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - {}
- uid: TypeRef:System.Collections.Concurrent.ConcurrentDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: ConcurrentDictionary<string,ICell>
  nameWithType: ConcurrentDictionary<string,ICell>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Model
  name: Model
  nameWithType: Model
  fullName: Cephei.Cell.Model
  spec.csharp:
  - {}
  - uid: Cephei.Cell.Model
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Model
  - {}
- uid: TypeRef:Cephei.Cell.Generic.Model`1<QLNet.PiecewiseTimeDependentHestonModel>
  name: Model<PiecewiseTimeDependentHestonModel>
  nameWithType: Model<PiecewiseTimeDependentHestonModel>
  fullName: Cephei.Cell.Generic.Model<QLNet.PiecewiseTimeDependentHestonModel>
  spec.csharp:
  - uid: Cephei.Cell.Generic.Model`1
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Generic.Model
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.PiecewiseTimeDependentHestonModel
    name: PiecewiseTimeDependentHestonModel
    nameWithType: PiecewiseTimeDependentHestonModel
    fullName: QLNet.PiecewiseTimeDependentHestonModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.PiecewiseTimeDependentHestonModel>
  name: ICell<PiecewiseTimeDependentHestonModel>
  nameWithType: ICell<PiecewiseTimeDependentHestonModel>
  fullName: Cephei.Cell.Generic.ICell<QLNet.PiecewiseTimeDependentHestonModel>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.PiecewiseTimeDependentHestonModel
    name: PiecewiseTimeDependentHestonModel
    nameWithType: PiecewiseTimeDependentHestonModel
    fullName: QLNet.PiecewiseTimeDependentHestonModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.ICell
  name: ICell
  nameWithType: ICell
  fullName: Cephei.Cell.ICell
  spec.csharp:
  - {}
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - {}
- uid: TypeRef:Cephei.Cell.ICellEvent
  name: ICellEvent
  nameWithType: ICellEvent
  fullName: Cephei.Cell.ICellEvent
  spec.csharp:
  - {}
  - uid: Cephei.Cell.ICellEvent
    name: ICellEvent
    nameWithType: ICellEvent
    fullName: Cephei.Cell.ICellEvent
  - {}
- uid: TypeRef:System.Collections.Generic.ICollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: ICollection<KeyValuePair<string,ICell>>
  nameWithType: ICollection<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: IDictionary<string,ICell>
  nameWithType: IDictionary<string,ICell>
  fullName: System.Collections.Generic.IDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: IEnumerable<KeyValuePair<string,ICell>>
  nameWithType: IEnumerable<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IReadOnlyCollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: IReadOnlyCollection<KeyValuePair<string,ICell>>
  nameWithType: IReadOnlyCollection<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IReadOnlyDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: IReadOnlyDictionary<string,ICell>
  nameWithType: IReadOnlyDictionary<string,ICell>
  fullName: System.Collections.Generic.IReadOnlyDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.ICollection
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
  spec.csharp:
  - {}
  - uid: System.Collections.ICollection
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.ICollection
  - {}
- uid: TypeRef:System.Collections.IDictionary
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
  spec.csharp:
  - {}
  - uid: System.Collections.IDictionary
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.IDictionary
  - {}
- uid: TypeRef:System.Collections.IEnumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
  spec.csharp:
  - {}
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
  - {}
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ICell>
  name: IObservable<ICell>
  nameWithType: IObservable<ICell>
  fullName: System.IObservable<Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell`1<QLNet.PiecewiseTimeDependentHestonModel> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  name: IObservable<ISession * ICell<PiecewiseTimeDependentHestonModel> * CellEvent * ICell * DateTime>
  nameWithType: IObservable<ISession * ICell<PiecewiseTimeDependentHestonModel> * CellEvent * ICell * DateTime>
  fullName: System.IObservable<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<QLNet.PiecewiseTimeDependentHestonModel> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.PiecewiseTimeDependentHestonModel
    name: PiecewiseTimeDependentHestonModel
    nameWithType: PiecewiseTimeDependentHestonModel
    fullName: QLNet.PiecewiseTimeDependentHestonModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  name: IObservable<ISession * Model * CellEvent * ICell * DateTime>
  nameWithType: IObservable<ISession * Model * CellEvent * ICell * DateTime>
  fullName: System.IObservable<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.Model
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Model
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<QLNet.PiecewiseTimeDependentHestonModel>
  name: IObservable<PiecewiseTimeDependentHestonModel>
  nameWithType: IObservable<PiecewiseTimeDependentHestonModel>
  fullName: System.IObservable<QLNet.PiecewiseTimeDependentHestonModel>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.PiecewiseTimeDependentHestonModel
    name: PiecewiseTimeDependentHestonModel
    nameWithType: PiecewiseTimeDependentHestonModel
    fullName: QLNet.PiecewiseTimeDependentHestonModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>>
  name: IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
  nameWithType: IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,QLNet.PiecewiseTimeDependentHestonModel>>>
  name: IObservable<KeyValuePair<ISession,KeyValuePair<string,PiecewiseTimeDependentHestonModel>>>
  nameWithType: IObservable<KeyValuePair<ISession,KeyValuePair<string,PiecewiseTimeDependentHestonModel>>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,QLNet.PiecewiseTimeDependentHestonModel>>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: QLNet.PiecewiseTimeDependentHestonModel
    name: PiecewiseTimeDependentHestonModel
    nameWithType: PiecewiseTimeDependentHestonModel
    fullName: QLNet.PiecewiseTimeDependentHestonModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.decimal>>
  name: IObservable<KeyValuePair<string,decimal>>
  nameWithType: IObservable<KeyValuePair<string,decimal>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,decimal>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.decimal
    name: decimal
    nameWithType: decimal
    fullName: decimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.float>>
  name: IObservable<KeyValuePair<string,float>>
  nameWithType: IObservable<KeyValuePair<string,float>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,float>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.int>>
  name: IObservable<KeyValuePair<string,int>>
  nameWithType: IObservable<KeyValuePair<string,int>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,int>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.int
    name: int
    nameWithType: int
    fullName: int
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObserver`1<QLNet.PiecewiseTimeDependentHestonModel>
  name: IObserver<PiecewiseTimeDependentHestonModel>
  nameWithType: IObserver<PiecewiseTimeDependentHestonModel>
  fullName: System.IObserver<QLNet.PiecewiseTimeDependentHestonModel>
  spec.csharp:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.PiecewiseTimeDependentHestonModel
    name: PiecewiseTimeDependentHestonModel
    nameWithType: PiecewiseTimeDependentHestonModel
    fullName: QLNet.PiecewiseTimeDependentHestonModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell<'T>)
  name: "member Bind: ICell<'T> -> unit"
  nameWithType: "member Model.Bind: ICell<'T> -> unit"
  fullName: "member Cephei.Cell.Generic.Model.Bind: Cephei.Cell.Generic.ICell<'T> -> unit"
- uid: Cephei.Cell.Generic.Model`1.OnCompleted(unit)
  name: 'abstract member OnCompleted: unit -> unit'
  nameWithType: 'abstract member Model.OnCompleted: unit -> unit'
  fullName: 'abstract member Cephei.Cell.Generic.Model.OnCompleted: unit -> unit'
- uid: Cephei.Cell.Generic.Model`1.OnError(exn)
  name: 'abstract member OnError: exn -> unit'
  nameWithType: 'abstract member Model.OnError: exn -> unit'
  fullName: 'abstract member Cephei.Cell.Generic.Model.OnError: exn -> unit'
- uid: Cephei.Cell.Generic.Model`1.OnNext('T)
  name: "abstract member OnNext: 'T -> unit"
  nameWithType: "abstract member Model.OnNext: 'T -> unit"
  fullName: "abstract member Cephei.Cell.Generic.Model.OnNext: 'T -> unit"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<'T>)
  name: "abstract member Subscribe: IObserver<'T> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<'T> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<'T> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  name: "abstract member Subscribe: IObserver<ISession * ICell<'T> * CellEvent * ICell * DateTime> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<ISession * ICell<'T> * CellEvent * ICell * DateTime> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>>)
  name: "abstract member Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,'T>>> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,'T>>> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Value(unit)
  name: "abstract property Value: 'T"
  nameWithType: "abstract property Model.Value: 'T"
  fullName: "abstract property Cephei.Cell.Generic.Model.Value: 'T"
- uid: Cephei.Cell.Model.As(string)
  name: "member As: string -> ICell<'T>"
  nameWithType: "member Model.As: string -> ICell<'T>"
  fullName: "member Cephei.Cell.Model.As: string -> Cephei.Cell.Generic.ICell<'T>"
- uid: Cephei.Cell.Model.Bind(unit)
  name: 'member Bind: unit -> unit'
  nameWithType: 'member Model.Bind: unit -> unit'
  fullName: 'member Cephei.Cell.Model.Bind: unit -> unit'
- uid: Cephei.Cell.Model.Box(unit)
  name: 'abstract property Box: obj'
  nameWithType: 'abstract property Model.Box: obj'
  fullName: 'abstract property Cephei.Cell.Model.Box: obj'
- uid: Cephei.Cell.Model.Change()
  name: 'abstract member Change: CellChange'
  nameWithType: 'abstract member Model.Change: CellChange'
  fullName: 'abstract member Cephei.Cell.Model.Change: Cephei.Cell.CellChange'
- uid: Cephei.Cell.Model.Create(Unit -> 'T * string)
  name: "member Create: Unit -> 'T * string -> Cell<'T>"
  nameWithType: "member Model.Create: Unit -> 'T * string -> Cell<'T>"
  fullName: "member Cephei.Cell.Model.Create: Unit -> 'T * string -> Cephei.Cell.Generic.Cell<'T>"
- uid: Cephei.Cell.Model.CreateValue('T * string)
  name: "member CreateValue: 'T * string -> Cell<'T>"
  nameWithType: "member Model.CreateValue: 'T * string -> Cell<'T>"
  fullName: "member Cephei.Cell.Model.CreateValue: 'T * string -> Cephei.Cell.Generic.Cell<'T>"
- uid: Cephei.Cell.Model.Dependants(unit)
  name: 'abstract property Dependants: IEnumerable<ICellEvent>'
  nameWithType: 'abstract property Model.Dependants: IEnumerable<ICellEvent>'
  fullName: 'abstract property Cephei.Cell.Model.Dependants: System.Collections.Generic.IEnumerable<Cephei.Cell.ICellEvent>'
- uid: Cephei.Cell.Model.Dispose(unit)
  name: 'member Dispose: unit -> unit'
  nameWithType: 'member Model.Dispose: unit -> unit'
  fullName: 'member Cephei.Cell.Model.Dispose: unit -> unit'
- uid: Cephei.Cell.Model.GetOrAdd(string * Cephei.Cell.ICell)
  name: 'member GetOrAdd: string * ICell -> ICell'
  nameWithType: 'member Model.GetOrAdd: string * ICell -> ICell'
  fullName: 'member Cephei.Cell.Model.GetOrAdd: string * Cephei.Cell.ICell -> Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.HasFunction(unit)
  name: 'abstract property HasFunction: bool'
  nameWithType: 'abstract property Model.HasFunction: bool'
  fullName: 'abstract property Cephei.Cell.Model.HasFunction: bool'
- uid: Cephei.Cell.Model.HasValue(unit)
  name: 'abstract property HasValue: bool'
  nameWithType: 'abstract property Model.HasValue: bool'
  fullName: 'abstract property Cephei.Cell.Model.HasValue: bool'
- uid: Cephei.Cell.Model.Item(string)
  name: 'property Item: string -> ICell'
  nameWithType: 'property Model.Item: string -> ICell'
  fullName: 'property Cephei.Cell.Model.Item: string -> Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.Mnemonic(unit)
  name: 'abstract property Mnemonic: string'
  nameWithType: 'abstract property Model.Mnemonic: string'
  fullName: 'abstract property Cephei.Cell.Model.Mnemonic: string'
- uid: Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession)
  name: 'abstract member OnChange: CellEvent * ICellEvent * DateTime * ISession -> unit'
  nameWithType: 'abstract member Model.OnChange: CellEvent * ICellEvent * DateTime * ISession -> unit'
  fullName: 'abstract member Cephei.Cell.Model.OnChange: Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession -> unit'
- uid: Cephei.Cell.Model.Parent(unit)
  name: 'abstract property Parent: ICell'
  nameWithType: 'abstract property Model.Parent: ICell'
  fullName: 'abstract property Cephei.Cell.Model.Parent: Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ICell>)
  name: 'abstract member Subscribe: IObserver<ICell> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<ICell> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<Cephei.Cell.ICell> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  name: 'abstract member Subscribe: IObserver<ISession * Model * CellEvent * ICell * DateTime> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<ISession * Model * CellEvent * ICell * DateTime> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,ICell>>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,ICell>>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,decimal>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,decimal>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,float>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,float>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,float>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,float>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,int>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,int>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,int>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,int>> -> System.IDisposable'
- uid: Cephei.Cell.Model.TryAdd(string * Cephei.Cell.ICell)
  name: 'member TryAdd: string * ICell -> bool'
  nameWithType: 'member Model.TryAdd: string * ICell -> bool'
  fullName: 'member Cephei.Cell.Model.TryAdd: string * Cephei.Cell.ICell -> bool'
- uid: Cephei.Cell.Model.TryRemove(string * Cephei.Cell.ICell byref)
  name: 'member TryRemove: string * ICell byref -> bool'
  nameWithType: 'member Model.TryRemove: string * ICell byref -> bool'
  fullName: 'member Cephei.Cell.Model.TryRemove: string * Cephei.Cell.ICell byref -> bool'
- uid: Cephei.Cell.Model.TryUpdate(string * Cephei.Cell.ICell * Cephei.Cell.ICell)
  name: 'member TryUpdate: string * ICell * ICell -> bool'
  nameWithType: 'member Model.TryUpdate: string * ICell * ICell -> bool'
  fullName: 'member Cephei.Cell.Model.TryUpdate: string * Cephei.Cell.ICell * Cephei.Cell.ICell -> bool'
- uid: Cephei.Cell.Model.add_Change(Cephei.Cell.CellChange)
  name: 'abstract member add_Change: CellChange -> unit'
  nameWithType: 'abstract member Model.add_Change: CellChange -> unit'
  fullName: 'abstract member Cephei.Cell.Model.add_Change: Cephei.Cell.CellChange -> unit'
- uid: Cephei.Cell.Model.remove_Change(Cephei.Cell.CellChange)
  name: 'abstract member remove_Change: CellChange -> unit'
  nameWithType: 'abstract member Model.remove_Change: CellChange -> unit'
  fullName: 'abstract member Cephei.Cell.Model.remove_Change: Cephei.Cell.CellChange -> unit'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * 'TValue * System.Func<'TKey,'TValue,'TValue>)
  name: "member AddOrUpdate: 'TKey * 'TValue * Func<'TKey,'TValue,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.AddOrUpdate: 'TKey * 'TValue * Func<'TKey,'TValue,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.AddOrUpdate: 'TKey * 'TValue * System.Func<'TKey,'TValue,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue>)
  name: "member AddOrUpdate: 'TKey * Func<'TKey,'TValue> * Func<'TKey,'TValue,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.AddOrUpdate: 'TKey * Func<'TKey,'TValue> * Func<'TKey,'TValue,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.AddOrUpdate: 'TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear(unit)
  name: 'abstract member Clear: unit -> unit'
  nameWithType: 'abstract member ConcurrentDictionary.Clear: unit -> unit'
  fullName: 'abstract member System.Collections.Concurrent.ConcurrentDictionary.Clear: unit -> unit'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey('TKey)
  name: "abstract member ContainsKey: 'TKey -> bool"
  nameWithType: "abstract member ConcurrentDictionary.ContainsKey: 'TKey -> bool"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.ContainsKey: 'TKey -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count(unit)
  name: 'abstract property Count: int'
  nameWithType: 'abstract property ConcurrentDictionary.Count: int'
  fullName: 'abstract property System.Collections.Concurrent.ConcurrentDictionary.Count: int'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator(unit)
  name: "abstract member GetEnumerator: unit -> IEnumerator<KeyValuePair<'TKey,'TValue>>"
  nameWithType: "abstract member ConcurrentDictionary.GetEnumerator: unit -> IEnumerator<KeyValuePair<'TKey,'TValue>>"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.GetEnumerator: unit -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<'TKey,'TValue>>"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * 'TValue)
  name: "member GetOrAdd: 'TKey * 'TValue -> 'TValue"
  nameWithType: "member ConcurrentDictionary.GetOrAdd: 'TKey * 'TValue -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd: 'TKey * 'TValue -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * System.Func<'TKey,'TValue>)
  name: "member GetOrAdd: 'TKey * Func<'TKey,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.GetOrAdd: 'TKey * Func<'TKey,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd: 'TKey * System.Func<'TKey,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty(unit)
  name: 'property IsEmpty: bool'
  nameWithType: 'property ConcurrentDictionary.IsEmpty: bool'
  fullName: 'property System.Collections.Concurrent.ConcurrentDictionary.IsEmpty: bool'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item('TKey)
  name: "abstract property Item: 'TKey -> 'TValue"
  nameWithType: "abstract property ConcurrentDictionary.Item: 'TKey -> 'TValue"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Item: 'TKey -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys(unit)
  name: "abstract property Keys: ICollection<'TKey>"
  nameWithType: "abstract property ConcurrentDictionary.Keys: ICollection<'TKey>"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Keys: System.Collections.Generic.ICollection<'TKey>"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray(unit)
  name: "member ToArray: unit -> KeyValuePair<'TKey,'TValue> []"
  nameWithType: "member ConcurrentDictionary.ToArray: unit -> KeyValuePair<'TKey,'TValue> []"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.ToArray: unit -> System.Collections.Generic.KeyValuePair<'TKey,'TValue> []"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd('TKey * 'TValue)
  name: "member TryAdd: 'TKey * 'TValue -> bool"
  nameWithType: "member ConcurrentDictionary.TryAdd: 'TKey * 'TValue -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryAdd: 'TKey * 'TValue -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue('TKey * 'TValue byref)
  name: "abstract member TryGetValue: 'TKey * 'TValue byref -> bool"
  nameWithType: "abstract member ConcurrentDictionary.TryGetValue: 'TKey * 'TValue byref -> bool"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.TryGetValue: 'TKey * 'TValue byref -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove('TKey * 'TValue byref)
  name: "member TryRemove: 'TKey * 'TValue byref -> bool"
  nameWithType: "member ConcurrentDictionary.TryRemove: 'TKey * 'TValue byref -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryRemove: 'TKey * 'TValue byref -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate('TKey * 'TValue * 'TValue)
  name: "member TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
  nameWithType: "member ConcurrentDictionary.TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values(unit)
  name: "abstract property Values: ICollection<'TValue>"
  nameWithType: "abstract property ConcurrentDictionary.Values: ICollection<'TValue>"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Values: System.Collections.Generic.ICollection<'TValue>"
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.YieldTermStructure>>
  name: ICell<Handle<YieldTermStructure>>
  nameWithType: ICell<Handle<YieldTermStructure>>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.YieldTermStructure>>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Handle`1
    name: Handle
    nameWithType: Handle
    fullName: QLNet.Handle
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.YieldTermStructure
    name: YieldTermStructure
    nameWithType: YieldTermStructure
    fullName: QLNet.YieldTermStructure
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Handle`1<QLNet.Quote>>
  name: ICell<Handle<Quote>>
  nameWithType: ICell<Handle<Quote>>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Handle<QLNet.Quote>>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Handle`1
    name: Handle
    nameWithType: Handle
    fullName: QLNet.Handle
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Quote
    name: Quote
    nameWithType: Quote
    fullName: QLNet.Quote
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
  name: ICell<double>
  nameWithType: ICell<double>
  fullName: Cephei.Cell.Generic.ICell<double>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.double
    name: double
    nameWithType: double
    fullName: double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Parameter>
  name: ICell<Parameter>
  nameWithType: ICell<Parameter>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Parameter>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Parameter
    name: Parameter
    nameWithType: Parameter
    fullName: QLNet.Parameter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.TimeGrid>
  name: ICell<TimeGrid>
  nameWithType: ICell<TimeGrid>
  fullName: Cephei.Cell.Generic.ICell<QLNet.TimeGrid>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.TimeGrid
    name: TimeGrid
    nameWithType: TimeGrid
    fullName: QLNet.TimeGrid
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.#ctor*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.#ctor*
  name: ( .ctor )
  nameWithType: PiecewiseTimeDependentHestonModelModel.( .ctor )
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel
- uid: TypeRef:Cephei.QL.PiecewiseTimeDependentHestonModelModel
  name: PiecewiseTimeDependentHestonModelModel
  nameWithType: PiecewiseTimeDependentHestonModelModel
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  spec.csharp:
  - {}
  - uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel
    name: PiecewiseTimeDependentHestonModelModel
    nameWithType: PiecewiseTimeDependentHestonModelModel
    fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel
  - {}
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Calibrate*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Calibrate*
  name: Calibrate
  nameWithType: PiecewiseTimeDependentHestonModelModel.Calibrate
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Calibrate
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<QLNet.CalibrationHelper>>
  name: ICell<List<CalibrationHelper>>
  nameWithType: ICell<List<CalibrationHelper>>
  fullName: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<QLNet.CalibrationHelper>>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.CalibrationHelper
    name: CalibrationHelper
    nameWithType: CalibrationHelper
    fullName: QLNet.CalibrationHelper
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.OptimizationMethod>
  name: ICell<OptimizationMethod>
  nameWithType: ICell<OptimizationMethod>
  fullName: Cephei.Cell.Generic.ICell<QLNet.OptimizationMethod>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.OptimizationMethod
    name: OptimizationMethod
    nameWithType: OptimizationMethod
    fullName: QLNet.OptimizationMethod
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.EndCriteria>
  name: ICell<EndCriteria>
  nameWithType: ICell<EndCriteria>
  fullName: Cephei.Cell.Generic.ICell<QLNet.EndCriteria>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.EndCriteria
    name: EndCriteria
    nameWithType: EndCriteria
    fullName: QLNet.EndCriteria
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Constraint>
  name: ICell<Constraint>
  nameWithType: ICell<Constraint>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Constraint>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Constraint
    name: Constraint
    nameWithType: Constraint
    fullName: QLNet.Constraint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
  name: ICell<List<double>>
  nameWithType: ICell<List<double>>
  fullName: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.double
    name: double
    nameWithType: double
    fullName: double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.bool>>
  name: ICell<List<bool>>
  nameWithType: ICell<List<bool>>
  fullName: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<bool>>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.bool
    name: bool
    nameWithType: bool
    fullName: bool
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Kappa*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Kappa*
  name: Kappa
  nameWithType: PiecewiseTimeDependentHestonModelModel.Kappa
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Kappa
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
  name: ICell<float>
  nameWithType: ICell<float>
  fullName: Cephei.Cell.Generic.ICell<float>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.RegisterWith*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.RegisterWith*
  name: RegisterWith
  nameWithType: PiecewiseTimeDependentHestonModelModel.RegisterWith
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.RegisterWith
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Callback>
  name: ICell<Callback>
  nameWithType: ICell<Callback>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Callback>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Callback
    name: Callback
    nameWithType: Callback
    fullName: QLNet.Callback
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Rho*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Rho*
  name: Rho
  nameWithType: PiecewiseTimeDependentHestonModelModel.Rho
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Rho
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.SetParams*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.SetParams*
  name: SetParams
  nameWithType: PiecewiseTimeDependentHestonModelModel.SetParams
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.SetParams
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
  name: ICell<Vector>
  nameWithType: ICell<Vector>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Vector>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Vector
    name: Vector
    nameWithType: Vector
    fullName: QLNet.Vector
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Sigma*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Sigma*
  name: Sigma
  nameWithType: PiecewiseTimeDependentHestonModelModel.Sigma
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Sigma
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Theta*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Theta*
  name: Theta
  nameWithType: PiecewiseTimeDependentHestonModelModel.Theta
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Theta
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.UnregisterWith*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.UnregisterWith*
  name: UnregisterWith
  nameWithType: PiecewiseTimeDependentHestonModelModel.UnregisterWith
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.UnregisterWith
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Value*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Value*
  name: Value
  nameWithType: PiecewiseTimeDependentHestonModelModel.Value
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Value
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.v0*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.v0*
  name: v0
  nameWithType: PiecewiseTimeDependentHestonModelModel.v0
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.v0
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.timeGrid*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.timeGrid*
  name: timeGrid
  nameWithType: PiecewiseTimeDependentHestonModelModel.timeGrid
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.timeGrid
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.theta*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.theta*
  name: theta
  nameWithType: PiecewiseTimeDependentHestonModelModel.theta
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.theta
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double> -> Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
  name: ICell<double> -> ICell<float>
  nameWithType: ICell<double> -> ICell<float>
  fullName: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.double
    name: double
    nameWithType: double
    fullName: double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: " -> "
    nameWithType: " -> "
    fullName: " -> "
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.sigma*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.sigma*
  name: sigma
  nameWithType: PiecewiseTimeDependentHestonModelModel.sigma
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.sigma
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.s0*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.s0*
  name: s0
  nameWithType: PiecewiseTimeDependentHestonModelModel.s0
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.s0
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.riskFreeRate*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.riskFreeRate*
  name: riskFreeRate
  nameWithType: PiecewiseTimeDependentHestonModelModel.riskFreeRate
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.riskFreeRate
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.rho*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.rho*
  name: rho
  nameWithType: PiecewiseTimeDependentHestonModelModel.rho
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.rho
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.kappa*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.kappa*
  name: kappa
  nameWithType: PiecewiseTimeDependentHestonModelModel.kappa
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.kappa
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.dividendYield*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.dividendYield*
  name: dividendYield
  nameWithType: PiecewiseTimeDependentHestonModelModel.dividendYield
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.dividendYield
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.V0*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.V0*
  name: V0
  nameWithType: PiecewiseTimeDependentHestonModelModel.V0
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.V0
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Update*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Update*
  name: Update
  nameWithType: PiecewiseTimeDependentHestonModelModel.Update
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Update
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.TimeGrid*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.TimeGrid*
  name: TimeGrid
  nameWithType: PiecewiseTimeDependentHestonModelModel.TimeGrid
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.TimeGrid
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.S0*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.S0*
  name: S0
  nameWithType: PiecewiseTimeDependentHestonModelModel.S0
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.S0
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.RiskFreeRate*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.RiskFreeRate*
  name: RiskFreeRate
  nameWithType: PiecewiseTimeDependentHestonModelModel.RiskFreeRate
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.RiskFreeRate
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Parameters*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Parameters*
  name: Parameters
  nameWithType: PiecewiseTimeDependentHestonModelModel.Parameters
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Parameters
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.NotifyObservers*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.NotifyObservers*
  name: NotifyObservers
  nameWithType: PiecewiseTimeDependentHestonModelModel.NotifyObservers
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.NotifyObservers
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.EndCriteria*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.EndCriteria*
  name: EndCriteria
  nameWithType: PiecewiseTimeDependentHestonModelModel.EndCriteria
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.EndCriteria
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.EndCriteria.Type>
  name: ICell<Type>
  nameWithType: ICell<Type>
  fullName: Cephei.Cell.Generic.ICell<QLNet.EndCriteria.Type>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.EndCriteria.Type
    name: Type
    nameWithType: Type
    fullName: QLNet.EndCriteria.Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.DividendYield*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.DividendYield*
  name: DividendYield
  nameWithType: PiecewiseTimeDependentHestonModelModel.DividendYield
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.DividendYield
- uid: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Constraint*
  commentId: Overload:Cephei.QL.PiecewiseTimeDependentHestonModelModel.Constraint*
  name: Constraint
  nameWithType: PiecewiseTimeDependentHestonModelModel.Constraint
  fullName: Cephei.QL.PiecewiseTimeDependentHestonModelModel.Constraint
