### YamlMime:ManagedReference
items:
- uid: Cephei.Cell.ICell
  commentId: T:Cephei.Cell.ICell
  id: ICell
  parent: Cephei.Cell
  children:
  - Cephei.Cell.ICell.Box
  - Cephei.Cell.ICell.Change
  - Cephei.Cell.ICell.Dependants
  - Cephei.Cell.ICell.HasFunction
  - Cephei.Cell.ICell.HasValue
  - Cephei.Cell.ICell.Mnemonic
  - Cephei.Cell.ICell.Parent
  langs:
  - csharp
  - vb
  name: ICell
  nameWithType: ICell
  fullName: Cephei.Cell.ICell
  type: Interface
  source:
    remote:
      path: Cephei.Cell/ICell.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: ICell
    path: ../Cephei.Cell/ICell.cs
    startLine: 42
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  summary: "\nICell provides a base interface with the common behavior of all Cells\n"
  example: []
  syntax:
    content: 'public interface ICell : ICellEvent'
    content.vb: >-
      Public Interface ICell
          Inherits ICellEvent
  inheritedMembers:
  - Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Cephei.Cell.ICell.Parent
  commentId: P:Cephei.Cell.ICell.Parent
  id: Parent
  parent: Cephei.Cell.ICell
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: ICell.Parent
  fullName: Cephei.Cell.ICell.Parent
  type: Property
  source:
    remote:
      path: Cephei.Cell/ICell.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Parent
    path: ../Cephei.Cell/ICell.cs
    startLine: 49
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  summary: "\nReference to the parent of this cell - usually the model the cell is defined in.\n\nParents get notifications for all changes to their childen\n"
  example: []
  syntax:
    content: ICell Parent { get; set; }
    parameters: []
    return:
      type: Cephei.Cell.ICell
    content.vb: Property Parent As ICell
  overload: Cephei.Cell.ICell.Parent*
  modifiers.csharp:
  - get
  - set
- uid: Cephei.Cell.ICell.Dependants
  commentId: P:Cephei.Cell.ICell.Dependants
  id: Dependants
  parent: Cephei.Cell.ICell
  langs:
  - csharp
  - vb
  name: Dependants
  nameWithType: ICell.Dependants
  fullName: Cephei.Cell.ICell.Dependants
  type: Property
  source:
    remote:
      path: Cephei.Cell/ICell.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Dependants
    path: ../Cephei.Cell/ICell.cs
    startLine: 55
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  summary: "\nEnumerated list of the Target vale of all event delegates.\nThis is used to ensure that multiple references do not result in events being\nfired multiple times <em>x = f (y,y) </em>has a single dependancy\n"
  example: []
  syntax:
    content: IEnumerable<ICellEvent> Dependants { get; }
    parameters: []
    return:
      type: IEnumerable{Cephei.Cell.ICellEvent}
    content.vb: ReadOnly Property Dependants As IEnumerable(Of ICellEvent)
  overload: Cephei.Cell.ICell.Dependants*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Cephei.Cell.ICell.Mnemonic
  commentId: P:Cephei.Cell.ICell.Mnemonic
  id: Mnemonic
  parent: Cephei.Cell.ICell
  langs:
  - csharp
  - vb
  name: Mnemonic
  nameWithType: ICell.Mnemonic
  fullName: Cephei.Cell.ICell.Mnemonic
  type: Property
  source:
    remote:
      path: Cephei.Cell/ICell.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Mnemonic
    path: ../Cephei.Cell/ICell.cs
    startLine: 60
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  summary: "\nrefeence Mnemonic that provides context for multiple subscriptions and model\nreferences\n"
  example: []
  syntax:
    content: string Mnemonic { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property Mnemonic As String
  overload: Cephei.Cell.ICell.Mnemonic*
  modifiers.csharp:
  - get
  - set
- uid: Cephei.Cell.ICell.Change
  commentId: E:Cephei.Cell.ICell.Change
  id: Change
  parent: Cephei.Cell.ICell
  langs:
  - csharp
  - vb
  name: Change
  nameWithType: ICell.Change
  fullName: Cephei.Cell.ICell.Change
  type: Event
  source:
    remote:
      path: Cephei.Cell/ICell.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Change
    path: ../Cephei.Cell/ICell.cs
    startLine: 66
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  summary: "\nEvent handle that a dependant cell uses to subscribe to changes.\ne.g. if <em>x = f (y)</em> then <em>x</em> will attach its OnChange to <em>y</em>\nEvent to subscribe to changes<em> </em>\n"
  example: []
  syntax:
    content: event CellChange Change
    return:
      type: Cephei.Cell.CellChange
    content.vb: Event Change As CellChange
- uid: Cephei.Cell.ICell.HasFunction
  commentId: P:Cephei.Cell.ICell.HasFunction
  id: HasFunction
  parent: Cephei.Cell.ICell
  langs:
  - csharp
  - vb
  name: HasFunction
  nameWithType: ICell.HasFunction
  fullName: Cephei.Cell.ICell.HasFunction
  type: Property
  source:
    remote:
      path: Cephei.Cell/ICell.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: HasFunction
    path: ../Cephei.Cell/ICell.cs
    startLine: 71
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  summary: "\nDoes the cell havee a function that can be subscribed to \n"
  example: []
  syntax:
    content: bool HasFunction { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property HasFunction As Boolean
  overload: Cephei.Cell.ICell.HasFunction*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Cephei.Cell.ICell.HasValue
  commentId: P:Cephei.Cell.ICell.HasValue
  id: HasValue
  parent: Cephei.Cell.ICell
  langs:
  - csharp
  - vb
  name: HasValue
  nameWithType: ICell.HasValue
  fullName: Cephei.Cell.ICell.HasValue
  type: Property
  source:
    remote:
      path: Cephei.Cell/ICell.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: HasValue
    path: ../Cephei.Cell/ICell.cs
    startLine: 76
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  summary: "\nDoes the cell havee a function that can be subscribed to \n"
  example: []
  syntax:
    content: bool HasValue { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property HasValue As Boolean
  overload: Cephei.Cell.ICell.HasValue*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Cephei.Cell.ICell.Box
  commentId: P:Cephei.Cell.ICell.Box
  id: Box
  parent: Cephei.Cell.ICell
  langs:
  - csharp
  - vb
  name: Box
  nameWithType: ICell.Box
  fullName: Cephei.Cell.ICell.Box
  type: Property
  source:
    remote:
      path: Cephei.Cell/ICell.cs
      branch: master
      repo: https://github.com/channell/Cephei
    id: Box
    path: ../Cephei.Cell/ICell.cs
    startLine: 81
  assemblies:
  - Cephei - Backup.Cell
  namespace: Cephei.Cell
  summary: "\nSupport assignement from boxed values\n"
  example: []
  syntax:
    content: object Box { get; set; }
    parameters: []
    return:
      type: System.Object
    content.vb: Property Box As Object
  overload: Cephei.Cell.ICell.Box*
  modifiers.csharp:
  - get
  - set
references:
- uid: Cephei.Cell
  commentId: N:Cephei.Cell
  name: Cephei.Cell
  nameWithType: Cephei.Cell
  fullName: Cephei.Cell
- uid: Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
  commentId: M:Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
  parent: Cephei.Cell.ICellEvent
  isExternal: true
  name: OnChange(CellEvent, ICellEvent, DateTime, ISession)
  nameWithType: ICellEvent.OnChange(CellEvent, ICellEvent, DateTime, ISession)
  fullName: Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent, Cephei.Cell.ICellEvent, DateTime, Cephei.Cell.ISession)
  spec.csharp:
  - uid: Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
    name: OnChange
    nameWithType: ICellEvent.OnChange
    fullName: Cephei.Cell.ICellEvent.OnChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.ICellEvent
    name: ICellEvent
    nameWithType: ICellEvent
    fullName: Cephei.Cell.ICellEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Cephei.Cell.ICellEvent.OnChange(Cephei.Cell.CellEvent,Cephei.Cell.ICellEvent,DateTime,Cephei.Cell.ISession)
    name: OnChange
    nameWithType: ICellEvent.OnChange
    fullName: Cephei.Cell.ICellEvent.OnChange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.ICellEvent
    name: ICellEvent
    nameWithType: ICellEvent
    fullName: Cephei.Cell.ICellEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: )
    nameWithType: )
    fullName: )
- uid: Cephei.Cell.ICellEvent
  commentId: T:Cephei.Cell.ICellEvent
  parent: Cephei.Cell
  name: ICellEvent
  nameWithType: ICellEvent
  fullName: Cephei.Cell.ICellEvent
- uid: Cephei.Cell.ICell.Parent*
  commentId: Overload:Cephei.Cell.ICell.Parent
  name: Parent
  nameWithType: ICell.Parent
  fullName: Cephei.Cell.ICell.Parent
- uid: Cephei.Cell.ICell
  commentId: T:Cephei.Cell.ICell
  parent: Cephei.Cell
  name: ICell
  nameWithType: ICell
  fullName: Cephei.Cell.ICell
- uid: Cephei.Cell.ICell.Dependants*
  commentId: Overload:Cephei.Cell.ICell.Dependants
  name: Dependants
  nameWithType: ICell.Dependants
  fullName: Cephei.Cell.ICell.Dependants
- uid: IEnumerable{Cephei.Cell.ICellEvent}
  commentId: '!:IEnumerable{Cephei.Cell.ICellEvent}'
  definition: IEnumerable`1
  name: IEnumerable<ICellEvent>
  nameWithType: IEnumerable<ICellEvent>
  fullName: IEnumerable<Cephei.Cell.ICellEvent>
  nameWithType.vb: IEnumerable(Of ICellEvent)
  fullName.vb: IEnumerable(Of Cephei.Cell.ICellEvent)
  name.vb: IEnumerable(Of ICellEvent)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ICellEvent
    name: ICellEvent
    nameWithType: ICellEvent
    fullName: Cephei.Cell.ICellEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Cephei.Cell.ICellEvent
    name: ICellEvent
    nameWithType: ICellEvent
    fullName: Cephei.Cell.ICellEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Cephei.Cell.ICell.Mnemonic*
  commentId: Overload:Cephei.Cell.ICell.Mnemonic
  name: Mnemonic
  nameWithType: ICell.Mnemonic
  fullName: Cephei.Cell.ICell.Mnemonic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Cephei.Cell.CellChange
  commentId: T:Cephei.Cell.CellChange
  parent: Cephei.Cell
  name: CellChange
  nameWithType: CellChange
  fullName: Cephei.Cell.CellChange
- uid: Cephei.Cell.ICell.HasFunction*
  commentId: Overload:Cephei.Cell.ICell.HasFunction
  name: HasFunction
  nameWithType: ICell.HasFunction
  fullName: Cephei.Cell.ICell.HasFunction
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cephei.Cell.ICell.HasValue*
  commentId: Overload:Cephei.Cell.ICell.HasValue
  name: HasValue
  nameWithType: ICell.HasValue
  fullName: Cephei.Cell.ICell.HasValue
- uid: Cephei.Cell.ICell.Box*
  commentId: Overload:Cephei.Cell.ICell.Box
  name: Box
  nameWithType: ICell.Box
  fullName: Cephei.Cell.ICell.Box
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
