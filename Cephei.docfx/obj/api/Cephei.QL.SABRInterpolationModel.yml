### YamlMime:ManagedReference
items:
- uid: Cephei.QL.SABRInterpolationModel
  commentId: T:Cephei.QL.SABRInterpolationModel
  id: SABRInterpolationModel
  parent: Cephei.QL
  children:
  - Cephei.QL.SABRInterpolationModel.#ctor(Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<QLNet.EndCriteria> * Cephei.Cell.Generic.ICell<QLNet.OptimizationMethod> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.VolatilityType> * Cephei.Cell.Generic.ICell<QLNet.SabrApproximationModel>)
  - Cephei.QL.SABRInterpolationModel.AllowsExtrapolation(unit)
  - Cephei.QL.SABRInterpolationModel.alpha(unit)
  - Cephei.QL.SABRInterpolationModel.Alpha(unit)
  - Cephei.QL.SABRInterpolationModel.alphaIsFixed(unit)
  - Cephei.QL.SABRInterpolationModel.approximationModel(unit)
  - Cephei.QL.SABRInterpolationModel.beta(unit)
  - Cephei.QL.SABRInterpolationModel.Beta(unit)
  - Cephei.QL.SABRInterpolationModel.betaIsFixed(unit)
  - Cephei.QL.SABRInterpolationModel.Derivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  - Cephei.QL.SABRInterpolationModel.DisableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
  - Cephei.QL.SABRInterpolationModel.Empty(unit)
  - Cephei.QL.SABRInterpolationModel.EnableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
  - Cephei.QL.SABRInterpolationModel.endCriteria(unit)
  - Cephei.QL.SABRInterpolationModel.EndCriteria(unit)
  - Cephei.QL.SABRInterpolationModel.errorAccept(unit)
  - Cephei.QL.SABRInterpolationModel.Expiry(unit)
  - Cephei.QL.SABRInterpolationModel.Extrapolate(unit)
  - Cephei.QL.SABRInterpolationModel.forward(unit)
  - Cephei.QL.SABRInterpolationModel.Forward(unit)
  - Cephei.QL.SABRInterpolationModel.InterpolationWeights(unit)
  - Cephei.QL.SABRInterpolationModel.MaxError(unit)
  - Cephei.QL.SABRInterpolationModel.maxGuesses(unit)
  - Cephei.QL.SABRInterpolationModel.nu(unit)
  - Cephei.QL.SABRInterpolationModel.Nu(unit)
  - Cephei.QL.SABRInterpolationModel.nuIsFixed(unit)
  - Cephei.QL.SABRInterpolationModel.optMethod(unit)
  - Cephei.QL.SABRInterpolationModel.Primitive(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  - Cephei.QL.SABRInterpolationModel.rho(unit)
  - Cephei.QL.SABRInterpolationModel.Rho(unit)
  - Cephei.QL.SABRInterpolationModel.rhoIsFixed(unit)
  - Cephei.QL.SABRInterpolationModel.RmsError(unit)
  - Cephei.QL.SABRInterpolationModel.SecondDerivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  - Cephei.QL.SABRInterpolationModel.shift(unit)
  - Cephei.QL.SABRInterpolationModel.t(unit)
  - Cephei.QL.SABRInterpolationModel.Update(unit)
  - Cephei.QL.SABRInterpolationModel.useMaxError(unit)
  - Cephei.QL.SABRInterpolationModel.Value(Cephei.Cell.Generic.ICell<double>)
  - Cephei.QL.SABRInterpolationModel.Value1(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  - Cephei.QL.SABRInterpolationModel.vegaWeighted(unit)
  - Cephei.QL.SABRInterpolationModel.volatilityType(unit)
  - Cephei.QL.SABRInterpolationModel.xBegin(unit)
  - Cephei.QL.SABRInterpolationModel.xEnd(unit)
  - Cephei.QL.SABRInterpolationModel.XMax(unit)
  - Cephei.QL.SABRInterpolationModel.XMin(unit)
  - Cephei.QL.SABRInterpolationModel.yBegin(unit)
  langs:
  - csharp
  - vb
  name: SABRInterpolationModel
  nameWithType: Cephei.QL.SABRInterpolationModel
  fullName: Cephei.QL.SABRInterpolationModel
  type: Class
  source:
    id: Cephei.QL.SABRInterpolationModel
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 35
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: >-
      [<AutoSerializable(true)>]

      type SABRInterpolationModel (xBegin:ICell<List<double>>, xEnd:ICell<int>, yBegin:ICell<List<double>>, t:ICell<double>, forward:ICell<double>, alpha:ICell<Nullable<double>>, beta:ICell<Nullable<double>>, nu:ICell<Nullable<double>>, rho:ICell<Nullable<double>>, alphaIsFixed:ICell<bool>, betaIsFixed:ICell<bool>, nuIsFixed:ICell<bool>, rhoIsFixed:ICell<bool>, vegaWeighted:ICell<bool>, endCriteria:ICell<EndCriteria>, optMethod:ICell<OptimizationMethod>, errorAccept:ICell<double>, useMaxError:ICell<bool>, maxGuesses:ICell<int>, shift:ICell<double>, volatilityType:ICell<VolatilityType>, approximationModel:ICell<SabrApproximationModel>)
          inherit Model<SABRInterpolation>
          interface IDictionary<string,ICell>
          interface ICollection<KeyValuePair<string,ICell>>
          interface IReadOnlyDictionary<string,ICell>
          interface IReadOnlyCollection<KeyValuePair<string,ICell>>
          interface IEnumerable<KeyValuePair<string,ICell>>
          interface IDictionary
          interface ICollection
          interface IEnumerable
          interface IObservable<ICell>
          interface IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
          interface IObservable<ISession * Model * CellEvent * ICell * DateTime>
          interface IObservable<KeyValuePair<string,float>>
          interface IObservable<KeyValuePair<string,int>>
          interface IObservable<KeyValuePair<string,decimal>>
          interface ICell<SABRInterpolation>
          interface ICell
          interface ICellEvent
          interface IObservable<SABRInterpolation>
          interface IObservable<KeyValuePair<ISession,KeyValuePair<string,SABRInterpolation>>>
          interface IObservable<ISession * ICell<SABRInterpolation> * CellEvent * ICell * DateTime>
          interface IObserver<SABRInterpolation>
    parameters:
    - id: xBegin
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: xEnd
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
    - id: yBegin
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: t
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: forward
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: alpha
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Nullable`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: beta
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Nullable`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: nu
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Nullable`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: rho
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Nullable`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: alphaIsFixed
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    - id: betaIsFixed
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    - id: nuIsFixed
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    - id: rhoIsFixed
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    - id: vegaWeighted
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    - id: endCriteria
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.EndCriteria>
      attributes: []
    - id: optMethod
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.OptimizationMethod>
      attributes: []
    - id: errorAccept
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: useMaxError
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    - id: maxGuesses
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
    - id: shift
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: volatilityType
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.VolatilityType>
      attributes: []
    - id: approximationModel
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.SabrApproximationModel>
      attributes: []
    typeParameters: []
  inheritance:
  - TypeRef:System.Object
  - TypeRef:System.Collections.Concurrent.ConcurrentDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:Cephei.Cell.Model
  - TypeRef:Cephei.Cell.Generic.Model`1<QLNet.SABRInterpolation>
  implements:
  - TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.SABRInterpolation>
  - TypeRef:Cephei.Cell.ICell
  - TypeRef:Cephei.Cell.ICellEvent
  - TypeRef:System.Collections.Generic.ICollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IReadOnlyCollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IReadOnlyDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:System.Collections.ICollection
  - TypeRef:System.Collections.IDictionary
  - TypeRef:System.Collections.IEnumerable
  - TypeRef:System.IObservable`1<Cephei.Cell.ICell>
  - TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell`1<QLNet.SABRInterpolation> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  - TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  - TypeRef:System.IObservable`1<QLNet.SABRInterpolation>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,QLNet.SABRInterpolation>>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.decimal>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.float>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.int>>
  - TypeRef:System.IObserver`1<QLNet.SABRInterpolation>
  inheritedMembers:
  - Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell<'T>)
  - Cephei.Cell.Generic.Model`1.OnCompleted(unit)
  - Cephei.Cell.Generic.Model`1.OnError(exn)
  - Cephei.Cell.Generic.Model`1.OnNext('T)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<'T>)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>>)
  - Cephei.Cell.Generic.Model`1.Value(unit)
  - Cephei.Cell.Model.As(string)
  - Cephei.Cell.Model.Bind(unit)
  - Cephei.Cell.Model.Box(unit)
  - Cephei.Cell.Model.Change()
  - Cephei.Cell.Model.Create(Unit -> 'T * string)
  - Cephei.Cell.Model.CreateValue('T * string)
  - Cephei.Cell.Model.Dependants(unit)
  - Cephei.Cell.Model.Dispose(unit)
  - Cephei.Cell.Model.GetOrAdd(string * Cephei.Cell.ICell)
  - Cephei.Cell.Model.HasFunction(unit)
  - Cephei.Cell.Model.HasValue(unit)
  - Cephei.Cell.Model.Item(string)
  - Cephei.Cell.Model.Mnemonic(unit)
  - Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession)
  - Cephei.Cell.Model.Parent(unit)
  - Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ICell>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,float>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,int>>)
  - Cephei.Cell.Model.TryAdd(string * Cephei.Cell.ICell)
  - Cephei.Cell.Model.TryRemove(string * Cephei.Cell.ICell byref)
  - Cephei.Cell.Model.TryUpdate(string * Cephei.Cell.ICell * Cephei.Cell.ICell)
  - Cephei.Cell.Model.add_Change(Cephei.Cell.CellChange)
  - Cephei.Cell.Model.remove_Change(Cephei.Cell.CellChange)
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * 'TValue * System.Func<'TKey,'TValue,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Clear(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey('TKey)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Count(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * System.Func<'TKey,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Item('TKey)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Keys(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.ToArray(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd('TKey * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue('TKey * 'TValue byref)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove('TKey * 'TValue byref)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate('TKey * 'TValue * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Values(unit)
  attributes:
  - type: Microsoft.FSharp.Core.AutoSerializableAttribute
    arguments:
    - type: System.Boolean
      value: true
    namedArguments: []
- uid: Cephei.QL.SABRInterpolationModel.#ctor(Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<QLNet.EndCriteria> * Cephei.Cell.Generic.ICell<QLNet.OptimizationMethod> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.VolatilityType> * Cephei.Cell.Generic.ICell<QLNet.SabrApproximationModel>)
  commentId: M:Cephei.QL.SABRInterpolationModel.#ctor(Cephei.Cell.Generic.ICell{System.Collections.Generic.List{System.Double}},Cephei.Cell.Generic.ICell{System.Int32},Cephei.Cell.Generic.ICell{System.Collections.Generic.List{System.Double}},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Nullable{System.Double}},Cephei.Cell.Generic.ICell{System.Nullable{System.Double}},Cephei.Cell.Generic.ICell{System.Nullable{System.Double}},Cephei.Cell.Generic.ICell{System.Nullable{System.Double}},Cephei.Cell.Generic.ICell{System.Boolean},Cephei.Cell.Generic.ICell{System.Boolean},Cephei.Cell.Generic.ICell{System.Boolean},Cephei.Cell.Generic.ICell{System.Boolean},Cephei.Cell.Generic.ICell{System.Boolean},Cephei.Cell.Generic.ICell{QLNet.EndCriteria},Cephei.Cell.Generic.ICell{QLNet.OptimizationMethod},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Boolean},Cephei.Cell.Generic.ICell{System.Int32},Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{QLNet.VolatilityType},Cephei.Cell.Generic.ICell{QLNet.SabrApproximationModel})
  id: '#ctor(Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<QLNet.EndCriteria> * Cephei.Cell.Generic.ICell<QLNet.OptimizationMethod> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.VolatilityType> * Cephei.Cell.Generic.ICell<QLNet.SabrApproximationModel>)'
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'new: ICell<List<double>> * ICell<int> * ICell<List<double>> * ICell<double> * ICell<double> * ICell<Nullable<double>> * ICell<Nullable<double>> * ICell<Nullable<double>> * ICell<Nullable<double>> * ICell<bool> * ICell<bool> * ICell<bool> * ICell<bool> * ICell<bool> * ICell<EndCriteria> * ICell<OptimizationMethod> * ICell<double> * ICell<bool> * ICell<int> * ICell<double> * ICell<VolatilityType> * ICell<SabrApproximationModel> -> SABRInterpolationModel'
  nameWithType: 'new: ICell<List<double>> * ICell<int> * ICell<List<double>> * ICell<double> * ICell<double> * ICell<Nullable<double>> * ICell<Nullable<double>> * ICell<Nullable<double>> * ICell<Nullable<double>> * ICell<bool> * ICell<bool> * ICell<bool> * ICell<bool> * ICell<bool> * ICell<EndCriteria> * ICell<OptimizationMethod> * ICell<double> * ICell<bool> * ICell<int> * ICell<double> * ICell<VolatilityType> * ICell<SabrApproximationModel> -> SABRInterpolationModel'
  fullName: 'new: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<QLNet.EndCriteria> * Cephei.Cell.Generic.ICell<QLNet.OptimizationMethod> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.VolatilityType> * Cephei.Cell.Generic.ICell<QLNet.SabrApproximationModel> -> Cephei.QL.SABRInterpolationModel'
  type: Constructor
  source:
    id: Cephei.QL.SABRInterpolationModel.#ctor(Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<System.Nullable<double>> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<QLNet.EndCriteria> * Cephei.Cell.Generic.ICell<QLNet.OptimizationMethod> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<bool> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<double> * Cephei.Cell.Generic.ICell<QLNet.VolatilityType> * Cephei.Cell.Generic.ICell<QLNet.SabrApproximationModel>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 35
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  summary: Implicit constructor.
  syntax:
    content: 'new: xBegin:ICell<List<double>> * xEnd:ICell<int> * yBegin:ICell<List<double>> * t:ICell<double> * forward:ICell<double> * alpha:ICell<Nullable<double>> * beta:ICell<Nullable<double>> * nu:ICell<Nullable<double>> * rho:ICell<Nullable<double>> * alphaIsFixed:ICell<bool> * betaIsFixed:ICell<bool> * nuIsFixed:ICell<bool> * rhoIsFixed:ICell<bool> * vegaWeighted:ICell<bool> * endCriteria:ICell<EndCriteria> * optMethod:ICell<OptimizationMethod> * errorAccept:ICell<double> * useMaxError:ICell<bool> * maxGuesses:ICell<int> * shift:ICell<double> * volatilityType:ICell<VolatilityType> * approximationModel:ICell<SabrApproximationModel> -> SABRInterpolationModel'
    parameters:
    - id: xBegin
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: xEnd
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
    - id: yBegin
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: t
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: forward
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: alpha
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Nullable`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: beta
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Nullable`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: nu
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Nullable`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: rho
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Nullable`1<Microsoft.FSharp.Core.double>>
      attributes: []
    - id: alphaIsFixed
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    - id: betaIsFixed
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    - id: nuIsFixed
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    - id: rhoIsFixed
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    - id: vegaWeighted
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    - id: endCriteria
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.EndCriteria>
      attributes: []
    - id: optMethod
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.OptimizationMethod>
      attributes: []
    - id: errorAccept
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: useMaxError
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    - id: maxGuesses
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
    - id: shift
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: volatilityType
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.VolatilityType>
      attributes: []
    - id: approximationModel
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.SabrApproximationModel>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.QL.SABRInterpolationModel
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.#ctor*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.Derivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  commentId: M:Cephei.QL.SABRInterpolationModel.Derivative(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Boolean})
  id: Derivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'member Derivative: ICell<double> -> ICell<bool> -> ICell<float>'
  nameWithType: 'member SABRInterpolationModel.Derivative: ICell<double> -> ICell<bool> -> ICell<float>'
  fullName: 'member Cephei.QL.SABRInterpolationModel.Derivative: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.SABRInterpolationModel.Derivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 160
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Derivative: x:ICell<double> -> allowExtrapolation:ICell<bool> -> ICell<float>'
    parameters:
    - id: x
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: allowExtrapolation
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.Derivative*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.DisableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
  commentId: M:Cephei.QL.SABRInterpolationModel.DisableExtrapolation(Cephei.Cell.Generic.ICell{System.Boolean})
  id: DisableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'member DisableExtrapolation: ICell<bool> -> ICell<SABRInterpolation>'
  nameWithType: 'member SABRInterpolationModel.DisableExtrapolation: ICell<bool> -> ICell<SABRInterpolation>'
  fullName: 'member Cephei.QL.SABRInterpolationModel.DisableExtrapolation: Cephei.Cell.Generic.ICell<bool> -> Cephei.Cell.Generic.ICell<QLNet.SABRInterpolation>'
  type: Method
  source:
    id: Cephei.QL.SABRInterpolationModel.DisableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 175
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member DisableExtrapolation: b:ICell<bool> -> ICell<SABRInterpolation>'
    parameters:
    - id: b
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.SABRInterpolation>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.DisableExtrapolation*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.EnableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
  commentId: M:Cephei.QL.SABRInterpolationModel.EnableExtrapolation(Cephei.Cell.Generic.ICell{System.Boolean})
  id: EnableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'member EnableExtrapolation: ICell<bool> -> ICell<SABRInterpolation>'
  nameWithType: 'member SABRInterpolationModel.EnableExtrapolation: ICell<bool> -> ICell<SABRInterpolation>'
  fullName: 'member Cephei.QL.SABRInterpolationModel.EnableExtrapolation: Cephei.Cell.Generic.ICell<bool> -> Cephei.Cell.Generic.ICell<QLNet.SABRInterpolation>'
  type: Method
  source:
    id: Cephei.QL.SABRInterpolationModel.EnableExtrapolation(Cephei.Cell.Generic.ICell<bool>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 177
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member EnableExtrapolation: b:ICell<bool> -> ICell<SABRInterpolation>'
    parameters:
    - id: b
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.SABRInterpolation>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.EnableExtrapolation*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.Primitive(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  commentId: M:Cephei.QL.SABRInterpolationModel.Primitive(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Boolean})
  id: Primitive(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'member Primitive: ICell<double> -> ICell<bool> -> ICell<float>'
  nameWithType: 'member SABRInterpolationModel.Primitive: ICell<double> -> ICell<bool> -> ICell<float>'
  fullName: 'member Cephei.QL.SABRInterpolationModel.Primitive: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.SABRInterpolationModel.Primitive(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 163
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Primitive: x:ICell<double> -> allowExtrapolation:ICell<bool> -> ICell<float>'
    parameters:
    - id: x
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: allowExtrapolation
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.Primitive*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.SecondDerivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  commentId: M:Cephei.QL.SABRInterpolationModel.SecondDerivative(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Boolean})
  id: SecondDerivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'member SecondDerivative: ICell<double> -> ICell<bool> -> ICell<float>'
  nameWithType: 'member SABRInterpolationModel.SecondDerivative: ICell<double> -> ICell<bool> -> ICell<float>'
  fullName: 'member Cephei.QL.SABRInterpolationModel.SecondDerivative: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.SABRInterpolationModel.SecondDerivative(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 165
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member SecondDerivative: x:ICell<double> -> allowExtrapolation:ICell<bool> -> ICell<float>'
    parameters:
    - id: x
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: allowExtrapolation
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.SecondDerivative*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.Value(Cephei.Cell.Generic.ICell<double>)
  commentId: M:Cephei.QL.SABRInterpolationModel.Value(Cephei.Cell.Generic.ICell{System.Double})
  id: Value(Cephei.Cell.Generic.ICell<double>)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'member Value: ICell<double> -> ICell<float>'
  nameWithType: 'member SABRInterpolationModel.Value: ICell<double> -> ICell<float>'
  fullName: 'member Cephei.QL.SABRInterpolationModel.Value: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.SABRInterpolationModel.Value(Cephei.Cell.Generic.ICell<double>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 168
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Value: x:ICell<double> -> ICell<float>'
    parameters:
    - id: x
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.Value*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.Value1(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  commentId: M:Cephei.QL.SABRInterpolationModel.Value1(Cephei.Cell.Generic.ICell{System.Double},Cephei.Cell.Generic.ICell{System.Boolean})
  id: Value1(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'member Value1: ICell<double> -> ICell<bool> -> ICell<float>'
  nameWithType: 'member SABRInterpolationModel.Value1: ICell<double> -> ICell<bool> -> ICell<float>'
  fullName: 'member Cephei.QL.SABRInterpolationModel.Value1: Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool> -> Cephei.Cell.Generic.ICell<float>'
  type: Method
  source:
    id: Cephei.QL.SABRInterpolationModel.Value1(Cephei.Cell.Generic.ICell<double> -> Cephei.Cell.Generic.ICell<bool>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 170
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Value1: x:ICell<double> -> allowExtrapolation:ICell<bool> -> ICell<float>'
    parameters:
    - id: x
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
    - id: allowExtrapolation
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.Value1*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.yBegin(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.yBegin
  id: yBegin(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property yBegin: ICell<List<double>>'
  nameWithType: 'property SABRInterpolationModel.yBegin: ICell<List<double>>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.yBegin: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.yBegin(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 130
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property yBegin: ICell<List<double>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.yBegin*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.xEnd(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.xEnd
  id: xEnd(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property xEnd: ICell<int>'
  nameWithType: 'property SABRInterpolationModel.xEnd: ICell<int>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.xEnd: Cephei.Cell.Generic.ICell<int>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.xEnd(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 129
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property xEnd: ICell<int> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.xEnd*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.xBegin(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.xBegin
  id: xBegin(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property xBegin: ICell<List<double>>'
  nameWithType: 'property SABRInterpolationModel.xBegin: ICell<List<double>>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.xBegin: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.xBegin(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 128
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property xBegin: ICell<List<double>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.xBegin*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.volatilityType(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.volatilityType
  id: volatilityType(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property volatilityType: ICell<VolatilityType>'
  nameWithType: 'property SABRInterpolationModel.volatilityType: ICell<VolatilityType>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.volatilityType: Cephei.Cell.Generic.ICell<QLNet.VolatilityType>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.volatilityType(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 148
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property volatilityType: ICell<VolatilityType> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.VolatilityType>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.volatilityType*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.vegaWeighted(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.vegaWeighted
  id: vegaWeighted(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property vegaWeighted: ICell<bool>'
  nameWithType: 'property SABRInterpolationModel.vegaWeighted: ICell<bool>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.vegaWeighted: Cephei.Cell.Generic.ICell<bool>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.vegaWeighted(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 141
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property vegaWeighted: ICell<bool> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.vegaWeighted*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.useMaxError(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.useMaxError
  id: useMaxError(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property useMaxError: ICell<bool>'
  nameWithType: 'property SABRInterpolationModel.useMaxError: ICell<bool>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.useMaxError: Cephei.Cell.Generic.ICell<bool>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.useMaxError(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 145
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property useMaxError: ICell<bool> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.useMaxError*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.t(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.t
  id: t(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property t: ICell<double>'
  nameWithType: 'property SABRInterpolationModel.t: ICell<double>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.t: Cephei.Cell.Generic.ICell<double>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.t(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 131
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property t: ICell<double> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.t*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.shift(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.shift
  id: shift(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property shift: ICell<double>'
  nameWithType: 'property SABRInterpolationModel.shift: ICell<double>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.shift: Cephei.Cell.Generic.ICell<double>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.shift(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 147
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property shift: ICell<double> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.shift*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.rhoIsFixed(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.rhoIsFixed
  id: rhoIsFixed(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property rhoIsFixed: ICell<bool>'
  nameWithType: 'property SABRInterpolationModel.rhoIsFixed: ICell<bool>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.rhoIsFixed: Cephei.Cell.Generic.ICell<bool>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.rhoIsFixed(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 140
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property rhoIsFixed: ICell<bool> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.rhoIsFixed*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.rho(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.rho
  id: rho(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property rho: ICell<float>'
  nameWithType: 'property SABRInterpolationModel.rho: ICell<float>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.rho: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.rho(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 136
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property rho: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.rho*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.optMethod(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.optMethod
  id: optMethod(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property optMethod: ICell<OptimizationMethod>'
  nameWithType: 'property SABRInterpolationModel.optMethod: ICell<OptimizationMethod>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.optMethod: Cephei.Cell.Generic.ICell<QLNet.OptimizationMethod>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.optMethod(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 143
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property optMethod: ICell<OptimizationMethod> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.OptimizationMethod>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.optMethod*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.nuIsFixed(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.nuIsFixed
  id: nuIsFixed(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property nuIsFixed: ICell<bool>'
  nameWithType: 'property SABRInterpolationModel.nuIsFixed: ICell<bool>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.nuIsFixed: Cephei.Cell.Generic.ICell<bool>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.nuIsFixed(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 139
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property nuIsFixed: ICell<bool> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.nuIsFixed*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.nu(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.nu
  id: nu(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property nu: ICell<float>'
  nameWithType: 'property SABRInterpolationModel.nu: ICell<float>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.nu: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.nu(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 135
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property nu: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.nu*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.maxGuesses(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.maxGuesses
  id: maxGuesses(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property maxGuesses: ICell<int>'
  nameWithType: 'property SABRInterpolationModel.maxGuesses: ICell<int>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.maxGuesses: Cephei.Cell.Generic.ICell<int>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.maxGuesses(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 146
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property maxGuesses: ICell<int> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.maxGuesses*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.forward(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.forward
  id: forward(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property forward: ICell<float>'
  nameWithType: 'property SABRInterpolationModel.forward: ICell<float>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.forward: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.forward(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 132
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property forward: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.forward*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.errorAccept(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.errorAccept
  id: errorAccept(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property errorAccept: ICell<double>'
  nameWithType: 'property SABRInterpolationModel.errorAccept: ICell<double>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.errorAccept: Cephei.Cell.Generic.ICell<double>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.errorAccept(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 144
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property errorAccept: ICell<double> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.errorAccept*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.endCriteria(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.endCriteria
  id: endCriteria(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property endCriteria: ICell<Type>'
  nameWithType: 'property SABRInterpolationModel.endCriteria: ICell<Type>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.endCriteria: Cephei.Cell.Generic.ICell<QLNet.EndCriteria.Type>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.endCriteria(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 142
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property endCriteria: ICell<Type> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.EndCriteria.Type>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.endCriteria*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.betaIsFixed(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.betaIsFixed
  id: betaIsFixed(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property betaIsFixed: ICell<bool>'
  nameWithType: 'property SABRInterpolationModel.betaIsFixed: ICell<bool>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.betaIsFixed: Cephei.Cell.Generic.ICell<bool>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.betaIsFixed(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 138
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property betaIsFixed: ICell<bool> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.betaIsFixed*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.beta(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.beta
  id: beta(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property beta: ICell<float>'
  nameWithType: 'property SABRInterpolationModel.beta: ICell<float>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.beta: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.beta(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 134
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property beta: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.beta*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.approximationModel(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.approximationModel
  id: approximationModel(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property approximationModel: ICell<SabrApproximationModel>'
  nameWithType: 'property SABRInterpolationModel.approximationModel: ICell<SabrApproximationModel>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.approximationModel: Cephei.Cell.Generic.ICell<QLNet.SabrApproximationModel>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.approximationModel(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 149
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property approximationModel: ICell<SabrApproximationModel> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.SabrApproximationModel>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.approximationModel*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.alphaIsFixed(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.alphaIsFixed
  id: alphaIsFixed(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property alphaIsFixed: ICell<bool>'
  nameWithType: 'property SABRInterpolationModel.alphaIsFixed: ICell<bool>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.alphaIsFixed: Cephei.Cell.Generic.ICell<bool>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.alphaIsFixed(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 137
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property alphaIsFixed: ICell<bool> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.alphaIsFixed*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.alpha(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.alpha
  id: alpha(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property alpha: ICell<float>'
  nameWithType: 'property SABRInterpolationModel.alpha: ICell<float>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.alpha: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.alpha(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 133
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property alpha: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.alpha*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.XMin(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.XMin
  id: XMin(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property XMin: ICell<float>'
  nameWithType: 'property SABRInterpolationModel.XMin: ICell<float>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.XMin: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.XMin(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 173
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property XMin: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.XMin*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.XMax(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.XMax
  id: XMax(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property XMax: ICell<float>'
  nameWithType: 'property SABRInterpolationModel.XMax: ICell<float>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.XMax: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.XMax(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 172
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property XMax: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.XMax*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.Update(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.Update
  id: Update(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property Update: ICell<SABRInterpolation>'
  nameWithType: 'property SABRInterpolationModel.Update: ICell<SABRInterpolation>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.Update: Cephei.Cell.Generic.ICell<QLNet.SABRInterpolation>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.Update(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 167
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Update: ICell<SABRInterpolation> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.SABRInterpolation>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.Update*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.RmsError(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.RmsError
  id: RmsError(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property RmsError: ICell<float>'
  nameWithType: 'property SABRInterpolationModel.RmsError: ICell<float>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.RmsError: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.RmsError(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 159
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property RmsError: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.RmsError*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.Rho(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.Rho
  id: Rho(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property Rho: ICell<float>'
  nameWithType: 'property SABRInterpolationModel.Rho: ICell<float>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.Rho: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.Rho(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 158
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Rho: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.Rho*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.Nu(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.Nu
  id: Nu(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property Nu: ICell<float>'
  nameWithType: 'property SABRInterpolationModel.Nu: ICell<float>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.Nu: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.Nu(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 157
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Nu: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.Nu*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.MaxError(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.MaxError
  id: MaxError(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property MaxError: ICell<float>'
  nameWithType: 'property SABRInterpolationModel.MaxError: ICell<float>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.MaxError: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.MaxError(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 156
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property MaxError: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.MaxError*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.InterpolationWeights(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.InterpolationWeights
  id: InterpolationWeights(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property InterpolationWeights: ICell<List<float>>'
  nameWithType: 'property SABRInterpolationModel.InterpolationWeights: ICell<List<float>>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.InterpolationWeights: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<float>>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.InterpolationWeights(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 155
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property InterpolationWeights: ICell<List<float>> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.float>>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.InterpolationWeights*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.Forward(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.Forward
  id: Forward(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property Forward: ICell<float>'
  nameWithType: 'property SABRInterpolationModel.Forward: ICell<float>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.Forward: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.Forward(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 154
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Forward: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.Forward*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.Extrapolate(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.Extrapolate
  id: Extrapolate(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property Extrapolate: ICell<bool>'
  nameWithType: 'property SABRInterpolationModel.Extrapolate: ICell<bool>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.Extrapolate: Cephei.Cell.Generic.ICell<bool>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.Extrapolate(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 179
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Extrapolate: ICell<bool> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.Extrapolate*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.Expiry(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.Expiry
  id: Expiry(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property Expiry: ICell<float>'
  nameWithType: 'property SABRInterpolationModel.Expiry: ICell<float>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.Expiry: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.Expiry(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 153
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Expiry: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.Expiry*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.EndCriteria(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.EndCriteria
  id: EndCriteria(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property EndCriteria: ICell<Type>'
  nameWithType: 'property SABRInterpolationModel.EndCriteria: ICell<Type>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.EndCriteria: Cephei.Cell.Generic.ICell<QLNet.EndCriteria.Type>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.EndCriteria(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 152
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property EndCriteria: ICell<Type> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.EndCriteria.Type>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.EndCriteria*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.Empty(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.Empty
  id: Empty(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property Empty: ICell<bool>'
  nameWithType: 'property SABRInterpolationModel.Empty: ICell<bool>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.Empty: Cephei.Cell.Generic.ICell<bool>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.Empty(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 162
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Empty: ICell<bool> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.Empty*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.Beta(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.Beta
  id: Beta(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property Beta: ICell<float>'
  nameWithType: 'property SABRInterpolationModel.Beta: ICell<float>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.Beta: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.Beta(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 151
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Beta: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.Beta*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.Alpha(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.Alpha
  id: Alpha(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property Alpha: ICell<float>'
  nameWithType: 'property SABRInterpolationModel.Alpha: ICell<float>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.Alpha: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.Alpha(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 150
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Alpha: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.Alpha*
  attributes: []
- uid: Cephei.QL.SABRInterpolationModel.AllowsExtrapolation(unit)
  commentId: P:Cephei.QL.SABRInterpolationModel.AllowsExtrapolation
  id: AllowsExtrapolation(unit)
  parent: Cephei.QL.SABRInterpolationModel
  langs:
  - csharp
  - vb
  name: 'property AllowsExtrapolation: ICell<bool>'
  nameWithType: 'property SABRInterpolationModel.AllowsExtrapolation: ICell<bool>'
  fullName: 'property Cephei.QL.SABRInterpolationModel.AllowsExtrapolation: Cephei.Cell.Generic.ICell<bool>'
  type: Property
  source:
    id: Cephei.QL.SABRInterpolationModel.AllowsExtrapolation(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\SABRInterpolationModel.fs
    startLine: 174
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property AllowsExtrapolation: ICell<bool> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
  overload: Cephei.QL.SABRInterpolationModel.AllowsExtrapolation*
  attributes: []
references:
- uid: Cephei.QL
  commentId: N:Cephei.QL
  name: Cephei.QL
  nameWithType: Cephei.QL
  fullName: Cephei.QL
- uid: TypeRef:System.Object
  name: Object
  nameWithType: Object
  fullName: System.Object
  spec.csharp:
  - {}
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - {}
- uid: TypeRef:System.Collections.Concurrent.ConcurrentDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: ConcurrentDictionary<string,ICell>
  nameWithType: ConcurrentDictionary<string,ICell>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Model
  name: Model
  nameWithType: Model
  fullName: Cephei.Cell.Model
  spec.csharp:
  - {}
  - uid: Cephei.Cell.Model
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Model
  - {}
- uid: TypeRef:Cephei.Cell.Generic.Model`1<QLNet.SABRInterpolation>
  name: Model<SABRInterpolation>
  nameWithType: Model<SABRInterpolation>
  fullName: Cephei.Cell.Generic.Model<QLNet.SABRInterpolation>
  spec.csharp:
  - uid: Cephei.Cell.Generic.Model`1
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Generic.Model
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.SABRInterpolation
    name: SABRInterpolation
    nameWithType: SABRInterpolation
    fullName: QLNet.SABRInterpolation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.SABRInterpolation>
  name: ICell<SABRInterpolation>
  nameWithType: ICell<SABRInterpolation>
  fullName: Cephei.Cell.Generic.ICell<QLNet.SABRInterpolation>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.SABRInterpolation
    name: SABRInterpolation
    nameWithType: SABRInterpolation
    fullName: QLNet.SABRInterpolation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.ICell
  name: ICell
  nameWithType: ICell
  fullName: Cephei.Cell.ICell
  spec.csharp:
  - {}
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - {}
- uid: TypeRef:Cephei.Cell.ICellEvent
  name: ICellEvent
  nameWithType: ICellEvent
  fullName: Cephei.Cell.ICellEvent
  spec.csharp:
  - {}
  - uid: Cephei.Cell.ICellEvent
    name: ICellEvent
    nameWithType: ICellEvent
    fullName: Cephei.Cell.ICellEvent
  - {}
- uid: TypeRef:System.Collections.Generic.ICollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: ICollection<KeyValuePair<string,ICell>>
  nameWithType: ICollection<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: IDictionary<string,ICell>
  nameWithType: IDictionary<string,ICell>
  fullName: System.Collections.Generic.IDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: IEnumerable<KeyValuePair<string,ICell>>
  nameWithType: IEnumerable<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IReadOnlyCollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: IReadOnlyCollection<KeyValuePair<string,ICell>>
  nameWithType: IReadOnlyCollection<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IReadOnlyDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: IReadOnlyDictionary<string,ICell>
  nameWithType: IReadOnlyDictionary<string,ICell>
  fullName: System.Collections.Generic.IReadOnlyDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.ICollection
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
  spec.csharp:
  - {}
  - uid: System.Collections.ICollection
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.ICollection
  - {}
- uid: TypeRef:System.Collections.IDictionary
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
  spec.csharp:
  - {}
  - uid: System.Collections.IDictionary
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.IDictionary
  - {}
- uid: TypeRef:System.Collections.IEnumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
  spec.csharp:
  - {}
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
  - {}
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ICell>
  name: IObservable<ICell>
  nameWithType: IObservable<ICell>
  fullName: System.IObservable<Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell`1<QLNet.SABRInterpolation> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  name: IObservable<ISession * ICell<SABRInterpolation> * CellEvent * ICell * DateTime>
  nameWithType: IObservable<ISession * ICell<SABRInterpolation> * CellEvent * ICell * DateTime>
  fullName: System.IObservable<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<QLNet.SABRInterpolation> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.SABRInterpolation
    name: SABRInterpolation
    nameWithType: SABRInterpolation
    fullName: QLNet.SABRInterpolation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  name: IObservable<ISession * Model * CellEvent * ICell * DateTime>
  nameWithType: IObservable<ISession * Model * CellEvent * ICell * DateTime>
  fullName: System.IObservable<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.Model
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Model
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<QLNet.SABRInterpolation>
  name: IObservable<SABRInterpolation>
  nameWithType: IObservable<SABRInterpolation>
  fullName: System.IObservable<QLNet.SABRInterpolation>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.SABRInterpolation
    name: SABRInterpolation
    nameWithType: SABRInterpolation
    fullName: QLNet.SABRInterpolation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>>
  name: IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
  nameWithType: IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,QLNet.SABRInterpolation>>>
  name: IObservable<KeyValuePair<ISession,KeyValuePair<string,SABRInterpolation>>>
  nameWithType: IObservable<KeyValuePair<ISession,KeyValuePair<string,SABRInterpolation>>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,QLNet.SABRInterpolation>>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: QLNet.SABRInterpolation
    name: SABRInterpolation
    nameWithType: SABRInterpolation
    fullName: QLNet.SABRInterpolation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.decimal>>
  name: IObservable<KeyValuePair<string,decimal>>
  nameWithType: IObservable<KeyValuePair<string,decimal>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,decimal>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.decimal
    name: decimal
    nameWithType: decimal
    fullName: decimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.float>>
  name: IObservable<KeyValuePair<string,float>>
  nameWithType: IObservable<KeyValuePair<string,float>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,float>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.int>>
  name: IObservable<KeyValuePair<string,int>>
  nameWithType: IObservable<KeyValuePair<string,int>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,int>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.int
    name: int
    nameWithType: int
    fullName: int
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObserver`1<QLNet.SABRInterpolation>
  name: IObserver<SABRInterpolation>
  nameWithType: IObserver<SABRInterpolation>
  fullName: System.IObserver<QLNet.SABRInterpolation>
  spec.csharp:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.SABRInterpolation
    name: SABRInterpolation
    nameWithType: SABRInterpolation
    fullName: QLNet.SABRInterpolation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell<'T>)
  name: "member Bind: ICell<'T> -> unit"
  nameWithType: "member Model.Bind: ICell<'T> -> unit"
  fullName: "member Cephei.Cell.Generic.Model.Bind: Cephei.Cell.Generic.ICell<'T> -> unit"
- uid: Cephei.Cell.Generic.Model`1.OnCompleted(unit)
  name: 'abstract member OnCompleted: unit -> unit'
  nameWithType: 'abstract member Model.OnCompleted: unit -> unit'
  fullName: 'abstract member Cephei.Cell.Generic.Model.OnCompleted: unit -> unit'
- uid: Cephei.Cell.Generic.Model`1.OnError(exn)
  name: 'abstract member OnError: exn -> unit'
  nameWithType: 'abstract member Model.OnError: exn -> unit'
  fullName: 'abstract member Cephei.Cell.Generic.Model.OnError: exn -> unit'
- uid: Cephei.Cell.Generic.Model`1.OnNext('T)
  name: "abstract member OnNext: 'T -> unit"
  nameWithType: "abstract member Model.OnNext: 'T -> unit"
  fullName: "abstract member Cephei.Cell.Generic.Model.OnNext: 'T -> unit"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<'T>)
  name: "abstract member Subscribe: IObserver<'T> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<'T> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<'T> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  name: "abstract member Subscribe: IObserver<ISession * ICell<'T> * CellEvent * ICell * DateTime> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<ISession * ICell<'T> * CellEvent * ICell * DateTime> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>>)
  name: "abstract member Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,'T>>> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,'T>>> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Value(unit)
  name: "abstract property Value: 'T"
  nameWithType: "abstract property Model.Value: 'T"
  fullName: "abstract property Cephei.Cell.Generic.Model.Value: 'T"
- uid: Cephei.Cell.Model.As(string)
  name: "member As: string -> ICell<'T>"
  nameWithType: "member Model.As: string -> ICell<'T>"
  fullName: "member Cephei.Cell.Model.As: string -> Cephei.Cell.Generic.ICell<'T>"
- uid: Cephei.Cell.Model.Bind(unit)
  name: 'member Bind: unit -> unit'
  nameWithType: 'member Model.Bind: unit -> unit'
  fullName: 'member Cephei.Cell.Model.Bind: unit -> unit'
- uid: Cephei.Cell.Model.Box(unit)
  name: 'abstract property Box: obj'
  nameWithType: 'abstract property Model.Box: obj'
  fullName: 'abstract property Cephei.Cell.Model.Box: obj'
- uid: Cephei.Cell.Model.Change()
  name: 'abstract member Change: CellChange'
  nameWithType: 'abstract member Model.Change: CellChange'
  fullName: 'abstract member Cephei.Cell.Model.Change: Cephei.Cell.CellChange'
- uid: Cephei.Cell.Model.Create(Unit -> 'T * string)
  name: "member Create: Unit -> 'T * string -> Cell<'T>"
  nameWithType: "member Model.Create: Unit -> 'T * string -> Cell<'T>"
  fullName: "member Cephei.Cell.Model.Create: Unit -> 'T * string -> Cephei.Cell.Generic.Cell<'T>"
- uid: Cephei.Cell.Model.CreateValue('T * string)
  name: "member CreateValue: 'T * string -> Cell<'T>"
  nameWithType: "member Model.CreateValue: 'T * string -> Cell<'T>"
  fullName: "member Cephei.Cell.Model.CreateValue: 'T * string -> Cephei.Cell.Generic.Cell<'T>"
- uid: Cephei.Cell.Model.Dependants(unit)
  name: 'abstract property Dependants: IEnumerable<ICellEvent>'
  nameWithType: 'abstract property Model.Dependants: IEnumerable<ICellEvent>'
  fullName: 'abstract property Cephei.Cell.Model.Dependants: System.Collections.Generic.IEnumerable<Cephei.Cell.ICellEvent>'
- uid: Cephei.Cell.Model.Dispose(unit)
  name: 'member Dispose: unit -> unit'
  nameWithType: 'member Model.Dispose: unit -> unit'
  fullName: 'member Cephei.Cell.Model.Dispose: unit -> unit'
- uid: Cephei.Cell.Model.GetOrAdd(string * Cephei.Cell.ICell)
  name: 'member GetOrAdd: string * ICell -> ICell'
  nameWithType: 'member Model.GetOrAdd: string * ICell -> ICell'
  fullName: 'member Cephei.Cell.Model.GetOrAdd: string * Cephei.Cell.ICell -> Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.HasFunction(unit)
  name: 'abstract property HasFunction: bool'
  nameWithType: 'abstract property Model.HasFunction: bool'
  fullName: 'abstract property Cephei.Cell.Model.HasFunction: bool'
- uid: Cephei.Cell.Model.HasValue(unit)
  name: 'abstract property HasValue: bool'
  nameWithType: 'abstract property Model.HasValue: bool'
  fullName: 'abstract property Cephei.Cell.Model.HasValue: bool'
- uid: Cephei.Cell.Model.Item(string)
  name: 'property Item: string -> ICell'
  nameWithType: 'property Model.Item: string -> ICell'
  fullName: 'property Cephei.Cell.Model.Item: string -> Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.Mnemonic(unit)
  name: 'abstract property Mnemonic: string'
  nameWithType: 'abstract property Model.Mnemonic: string'
  fullName: 'abstract property Cephei.Cell.Model.Mnemonic: string'
- uid: Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession)
  name: 'abstract member OnChange: CellEvent * ICellEvent * DateTime * ISession -> unit'
  nameWithType: 'abstract member Model.OnChange: CellEvent * ICellEvent * DateTime * ISession -> unit'
  fullName: 'abstract member Cephei.Cell.Model.OnChange: Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession -> unit'
- uid: Cephei.Cell.Model.Parent(unit)
  name: 'abstract property Parent: ICell'
  nameWithType: 'abstract property Model.Parent: ICell'
  fullName: 'abstract property Cephei.Cell.Model.Parent: Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ICell>)
  name: 'abstract member Subscribe: IObserver<ICell> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<ICell> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<Cephei.Cell.ICell> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  name: 'abstract member Subscribe: IObserver<ISession * Model * CellEvent * ICell * DateTime> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<ISession * Model * CellEvent * ICell * DateTime> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,ICell>>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,ICell>>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,decimal>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,decimal>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,float>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,float>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,float>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,float>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,int>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,int>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,int>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,int>> -> System.IDisposable'
- uid: Cephei.Cell.Model.TryAdd(string * Cephei.Cell.ICell)
  name: 'member TryAdd: string * ICell -> bool'
  nameWithType: 'member Model.TryAdd: string * ICell -> bool'
  fullName: 'member Cephei.Cell.Model.TryAdd: string * Cephei.Cell.ICell -> bool'
- uid: Cephei.Cell.Model.TryRemove(string * Cephei.Cell.ICell byref)
  name: 'member TryRemove: string * ICell byref -> bool'
  nameWithType: 'member Model.TryRemove: string * ICell byref -> bool'
  fullName: 'member Cephei.Cell.Model.TryRemove: string * Cephei.Cell.ICell byref -> bool'
- uid: Cephei.Cell.Model.TryUpdate(string * Cephei.Cell.ICell * Cephei.Cell.ICell)
  name: 'member TryUpdate: string * ICell * ICell -> bool'
  nameWithType: 'member Model.TryUpdate: string * ICell * ICell -> bool'
  fullName: 'member Cephei.Cell.Model.TryUpdate: string * Cephei.Cell.ICell * Cephei.Cell.ICell -> bool'
- uid: Cephei.Cell.Model.add_Change(Cephei.Cell.CellChange)
  name: 'abstract member add_Change: CellChange -> unit'
  nameWithType: 'abstract member Model.add_Change: CellChange -> unit'
  fullName: 'abstract member Cephei.Cell.Model.add_Change: Cephei.Cell.CellChange -> unit'
- uid: Cephei.Cell.Model.remove_Change(Cephei.Cell.CellChange)
  name: 'abstract member remove_Change: CellChange -> unit'
  nameWithType: 'abstract member Model.remove_Change: CellChange -> unit'
  fullName: 'abstract member Cephei.Cell.Model.remove_Change: Cephei.Cell.CellChange -> unit'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * 'TValue * System.Func<'TKey,'TValue,'TValue>)
  name: "member AddOrUpdate: 'TKey * 'TValue * Func<'TKey,'TValue,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.AddOrUpdate: 'TKey * 'TValue * Func<'TKey,'TValue,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.AddOrUpdate: 'TKey * 'TValue * System.Func<'TKey,'TValue,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue>)
  name: "member AddOrUpdate: 'TKey * Func<'TKey,'TValue> * Func<'TKey,'TValue,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.AddOrUpdate: 'TKey * Func<'TKey,'TValue> * Func<'TKey,'TValue,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.AddOrUpdate: 'TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear(unit)
  name: 'abstract member Clear: unit -> unit'
  nameWithType: 'abstract member ConcurrentDictionary.Clear: unit -> unit'
  fullName: 'abstract member System.Collections.Concurrent.ConcurrentDictionary.Clear: unit -> unit'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey('TKey)
  name: "abstract member ContainsKey: 'TKey -> bool"
  nameWithType: "abstract member ConcurrentDictionary.ContainsKey: 'TKey -> bool"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.ContainsKey: 'TKey -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count(unit)
  name: 'abstract property Count: int'
  nameWithType: 'abstract property ConcurrentDictionary.Count: int'
  fullName: 'abstract property System.Collections.Concurrent.ConcurrentDictionary.Count: int'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator(unit)
  name: "abstract member GetEnumerator: unit -> IEnumerator<KeyValuePair<'TKey,'TValue>>"
  nameWithType: "abstract member ConcurrentDictionary.GetEnumerator: unit -> IEnumerator<KeyValuePair<'TKey,'TValue>>"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.GetEnumerator: unit -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<'TKey,'TValue>>"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * 'TValue)
  name: "member GetOrAdd: 'TKey * 'TValue -> 'TValue"
  nameWithType: "member ConcurrentDictionary.GetOrAdd: 'TKey * 'TValue -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd: 'TKey * 'TValue -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * System.Func<'TKey,'TValue>)
  name: "member GetOrAdd: 'TKey * Func<'TKey,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.GetOrAdd: 'TKey * Func<'TKey,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd: 'TKey * System.Func<'TKey,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty(unit)
  name: 'property IsEmpty: bool'
  nameWithType: 'property ConcurrentDictionary.IsEmpty: bool'
  fullName: 'property System.Collections.Concurrent.ConcurrentDictionary.IsEmpty: bool'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item('TKey)
  name: "abstract property Item: 'TKey -> 'TValue"
  nameWithType: "abstract property ConcurrentDictionary.Item: 'TKey -> 'TValue"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Item: 'TKey -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys(unit)
  name: "abstract property Keys: ICollection<'TKey>"
  nameWithType: "abstract property ConcurrentDictionary.Keys: ICollection<'TKey>"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Keys: System.Collections.Generic.ICollection<'TKey>"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray(unit)
  name: "member ToArray: unit -> KeyValuePair<'TKey,'TValue> []"
  nameWithType: "member ConcurrentDictionary.ToArray: unit -> KeyValuePair<'TKey,'TValue> []"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.ToArray: unit -> System.Collections.Generic.KeyValuePair<'TKey,'TValue> []"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd('TKey * 'TValue)
  name: "member TryAdd: 'TKey * 'TValue -> bool"
  nameWithType: "member ConcurrentDictionary.TryAdd: 'TKey * 'TValue -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryAdd: 'TKey * 'TValue -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue('TKey * 'TValue byref)
  name: "abstract member TryGetValue: 'TKey * 'TValue byref -> bool"
  nameWithType: "abstract member ConcurrentDictionary.TryGetValue: 'TKey * 'TValue byref -> bool"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.TryGetValue: 'TKey * 'TValue byref -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove('TKey * 'TValue byref)
  name: "member TryRemove: 'TKey * 'TValue byref -> bool"
  nameWithType: "member ConcurrentDictionary.TryRemove: 'TKey * 'TValue byref -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryRemove: 'TKey * 'TValue byref -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate('TKey * 'TValue * 'TValue)
  name: "member TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
  nameWithType: "member ConcurrentDictionary.TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values(unit)
  name: "abstract property Values: ICollection<'TValue>"
  nameWithType: "abstract property ConcurrentDictionary.Values: ICollection<'TValue>"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Values: System.Collections.Generic.ICollection<'TValue>"
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.double>>
  name: ICell<List<double>>
  nameWithType: ICell<List<double>>
  fullName: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<double>>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.double
    name: double
    nameWithType: double
    fullName: double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
  name: ICell<int>
  nameWithType: ICell<int>
  fullName: Cephei.Cell.Generic.ICell<int>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.int
    name: int
    nameWithType: int
    fullName: int
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.double>
  name: ICell<double>
  nameWithType: ICell<double>
  fullName: Cephei.Cell.Generic.ICell<double>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.double
    name: double
    nameWithType: double
    fullName: double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<System.Nullable`1<Microsoft.FSharp.Core.double>>
  name: ICell<Nullable<double>>
  nameWithType: ICell<Nullable<double>>
  fullName: Cephei.Cell.Generic.ICell<System.Nullable<double>>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.double
    name: double
    nameWithType: double
    fullName: double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
  name: ICell<bool>
  nameWithType: ICell<bool>
  fullName: Cephei.Cell.Generic.ICell<bool>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.bool
    name: bool
    nameWithType: bool
    fullName: bool
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.EndCriteria>
  name: ICell<EndCriteria>
  nameWithType: ICell<EndCriteria>
  fullName: Cephei.Cell.Generic.ICell<QLNet.EndCriteria>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.EndCriteria
    name: EndCriteria
    nameWithType: EndCriteria
    fullName: QLNet.EndCriteria
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.OptimizationMethod>
  name: ICell<OptimizationMethod>
  nameWithType: ICell<OptimizationMethod>
  fullName: Cephei.Cell.Generic.ICell<QLNet.OptimizationMethod>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.OptimizationMethod
    name: OptimizationMethod
    nameWithType: OptimizationMethod
    fullName: QLNet.OptimizationMethod
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.VolatilityType>
  name: ICell<VolatilityType>
  nameWithType: ICell<VolatilityType>
  fullName: Cephei.Cell.Generic.ICell<QLNet.VolatilityType>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.VolatilityType
    name: VolatilityType
    nameWithType: VolatilityType
    fullName: QLNet.VolatilityType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.SabrApproximationModel>
  name: ICell<SabrApproximationModel>
  nameWithType: ICell<SabrApproximationModel>
  fullName: Cephei.Cell.Generic.ICell<QLNet.SabrApproximationModel>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.SabrApproximationModel
    name: SabrApproximationModel
    nameWithType: SabrApproximationModel
    fullName: QLNet.SabrApproximationModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.SABRInterpolationModel.#ctor*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.#ctor*
  name: ( .ctor )
  nameWithType: SABRInterpolationModel.( .ctor )
  fullName: Cephei.QL.SABRInterpolationModel
- uid: TypeRef:Cephei.QL.SABRInterpolationModel
  name: SABRInterpolationModel
  nameWithType: SABRInterpolationModel
  fullName: Cephei.QL.SABRInterpolationModel
  spec.csharp:
  - {}
  - uid: Cephei.QL.SABRInterpolationModel
    name: SABRInterpolationModel
    nameWithType: SABRInterpolationModel
    fullName: Cephei.QL.SABRInterpolationModel
  - {}
- uid: Cephei.QL.SABRInterpolationModel.Derivative*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.Derivative*
  name: Derivative
  nameWithType: SABRInterpolationModel.Derivative
  fullName: Cephei.QL.SABRInterpolationModel.Derivative
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
  name: ICell<float>
  nameWithType: ICell<float>
  fullName: Cephei.Cell.Generic.ICell<float>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.SABRInterpolationModel.DisableExtrapolation*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.DisableExtrapolation*
  name: DisableExtrapolation
  nameWithType: SABRInterpolationModel.DisableExtrapolation
  fullName: Cephei.QL.SABRInterpolationModel.DisableExtrapolation
- uid: Cephei.QL.SABRInterpolationModel.EnableExtrapolation*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.EnableExtrapolation*
  name: EnableExtrapolation
  nameWithType: SABRInterpolationModel.EnableExtrapolation
  fullName: Cephei.QL.SABRInterpolationModel.EnableExtrapolation
- uid: Cephei.QL.SABRInterpolationModel.Primitive*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.Primitive*
  name: Primitive
  nameWithType: SABRInterpolationModel.Primitive
  fullName: Cephei.QL.SABRInterpolationModel.Primitive
- uid: Cephei.QL.SABRInterpolationModel.SecondDerivative*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.SecondDerivative*
  name: SecondDerivative
  nameWithType: SABRInterpolationModel.SecondDerivative
  fullName: Cephei.QL.SABRInterpolationModel.SecondDerivative
- uid: Cephei.QL.SABRInterpolationModel.Value*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.Value*
  name: Value
  nameWithType: SABRInterpolationModel.Value
  fullName: Cephei.QL.SABRInterpolationModel.Value
- uid: Cephei.QL.SABRInterpolationModel.Value1*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.Value1*
  name: Value1
  nameWithType: SABRInterpolationModel.Value1
  fullName: Cephei.QL.SABRInterpolationModel.Value1
- uid: Cephei.QL.SABRInterpolationModel.yBegin*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.yBegin*
  name: yBegin
  nameWithType: SABRInterpolationModel.yBegin
  fullName: Cephei.QL.SABRInterpolationModel.yBegin
- uid: Cephei.QL.SABRInterpolationModel.xEnd*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.xEnd*
  name: xEnd
  nameWithType: SABRInterpolationModel.xEnd
  fullName: Cephei.QL.SABRInterpolationModel.xEnd
- uid: Cephei.QL.SABRInterpolationModel.xBegin*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.xBegin*
  name: xBegin
  nameWithType: SABRInterpolationModel.xBegin
  fullName: Cephei.QL.SABRInterpolationModel.xBegin
- uid: Cephei.QL.SABRInterpolationModel.volatilityType*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.volatilityType*
  name: volatilityType
  nameWithType: SABRInterpolationModel.volatilityType
  fullName: Cephei.QL.SABRInterpolationModel.volatilityType
- uid: Cephei.QL.SABRInterpolationModel.vegaWeighted*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.vegaWeighted*
  name: vegaWeighted
  nameWithType: SABRInterpolationModel.vegaWeighted
  fullName: Cephei.QL.SABRInterpolationModel.vegaWeighted
- uid: Cephei.QL.SABRInterpolationModel.useMaxError*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.useMaxError*
  name: useMaxError
  nameWithType: SABRInterpolationModel.useMaxError
  fullName: Cephei.QL.SABRInterpolationModel.useMaxError
- uid: Cephei.QL.SABRInterpolationModel.t*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.t*
  name: t
  nameWithType: SABRInterpolationModel.t
  fullName: Cephei.QL.SABRInterpolationModel.t
- uid: Cephei.QL.SABRInterpolationModel.shift*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.shift*
  name: shift
  nameWithType: SABRInterpolationModel.shift
  fullName: Cephei.QL.SABRInterpolationModel.shift
- uid: Cephei.QL.SABRInterpolationModel.rhoIsFixed*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.rhoIsFixed*
  name: rhoIsFixed
  nameWithType: SABRInterpolationModel.rhoIsFixed
  fullName: Cephei.QL.SABRInterpolationModel.rhoIsFixed
- uid: Cephei.QL.SABRInterpolationModel.rho*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.rho*
  name: rho
  nameWithType: SABRInterpolationModel.rho
  fullName: Cephei.QL.SABRInterpolationModel.rho
- uid: Cephei.QL.SABRInterpolationModel.optMethod*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.optMethod*
  name: optMethod
  nameWithType: SABRInterpolationModel.optMethod
  fullName: Cephei.QL.SABRInterpolationModel.optMethod
- uid: Cephei.QL.SABRInterpolationModel.nuIsFixed*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.nuIsFixed*
  name: nuIsFixed
  nameWithType: SABRInterpolationModel.nuIsFixed
  fullName: Cephei.QL.SABRInterpolationModel.nuIsFixed
- uid: Cephei.QL.SABRInterpolationModel.nu*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.nu*
  name: nu
  nameWithType: SABRInterpolationModel.nu
  fullName: Cephei.QL.SABRInterpolationModel.nu
- uid: Cephei.QL.SABRInterpolationModel.maxGuesses*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.maxGuesses*
  name: maxGuesses
  nameWithType: SABRInterpolationModel.maxGuesses
  fullName: Cephei.QL.SABRInterpolationModel.maxGuesses
- uid: Cephei.QL.SABRInterpolationModel.forward*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.forward*
  name: forward
  nameWithType: SABRInterpolationModel.forward
  fullName: Cephei.QL.SABRInterpolationModel.forward
- uid: Cephei.QL.SABRInterpolationModel.errorAccept*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.errorAccept*
  name: errorAccept
  nameWithType: SABRInterpolationModel.errorAccept
  fullName: Cephei.QL.SABRInterpolationModel.errorAccept
- uid: Cephei.QL.SABRInterpolationModel.endCriteria*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.endCriteria*
  name: endCriteria
  nameWithType: SABRInterpolationModel.endCriteria
  fullName: Cephei.QL.SABRInterpolationModel.endCriteria
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.EndCriteria.Type>
  name: ICell<Type>
  nameWithType: ICell<Type>
  fullName: Cephei.Cell.Generic.ICell<QLNet.EndCriteria.Type>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.EndCriteria.Type
    name: Type
    nameWithType: Type
    fullName: QLNet.EndCriteria.Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.SABRInterpolationModel.betaIsFixed*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.betaIsFixed*
  name: betaIsFixed
  nameWithType: SABRInterpolationModel.betaIsFixed
  fullName: Cephei.QL.SABRInterpolationModel.betaIsFixed
- uid: Cephei.QL.SABRInterpolationModel.beta*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.beta*
  name: beta
  nameWithType: SABRInterpolationModel.beta
  fullName: Cephei.QL.SABRInterpolationModel.beta
- uid: Cephei.QL.SABRInterpolationModel.approximationModel*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.approximationModel*
  name: approximationModel
  nameWithType: SABRInterpolationModel.approximationModel
  fullName: Cephei.QL.SABRInterpolationModel.approximationModel
- uid: Cephei.QL.SABRInterpolationModel.alphaIsFixed*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.alphaIsFixed*
  name: alphaIsFixed
  nameWithType: SABRInterpolationModel.alphaIsFixed
  fullName: Cephei.QL.SABRInterpolationModel.alphaIsFixed
- uid: Cephei.QL.SABRInterpolationModel.alpha*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.alpha*
  name: alpha
  nameWithType: SABRInterpolationModel.alpha
  fullName: Cephei.QL.SABRInterpolationModel.alpha
- uid: Cephei.QL.SABRInterpolationModel.XMin*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.XMin*
  name: XMin
  nameWithType: SABRInterpolationModel.XMin
  fullName: Cephei.QL.SABRInterpolationModel.XMin
- uid: Cephei.QL.SABRInterpolationModel.XMax*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.XMax*
  name: XMax
  nameWithType: SABRInterpolationModel.XMax
  fullName: Cephei.QL.SABRInterpolationModel.XMax
- uid: Cephei.QL.SABRInterpolationModel.Update*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.Update*
  name: Update
  nameWithType: SABRInterpolationModel.Update
  fullName: Cephei.QL.SABRInterpolationModel.Update
- uid: Cephei.QL.SABRInterpolationModel.RmsError*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.RmsError*
  name: RmsError
  nameWithType: SABRInterpolationModel.RmsError
  fullName: Cephei.QL.SABRInterpolationModel.RmsError
- uid: Cephei.QL.SABRInterpolationModel.Rho*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.Rho*
  name: Rho
  nameWithType: SABRInterpolationModel.Rho
  fullName: Cephei.QL.SABRInterpolationModel.Rho
- uid: Cephei.QL.SABRInterpolationModel.Nu*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.Nu*
  name: Nu
  nameWithType: SABRInterpolationModel.Nu
  fullName: Cephei.QL.SABRInterpolationModel.Nu
- uid: Cephei.QL.SABRInterpolationModel.MaxError*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.MaxError*
  name: MaxError
  nameWithType: SABRInterpolationModel.MaxError
  fullName: Cephei.QL.SABRInterpolationModel.MaxError
- uid: Cephei.QL.SABRInterpolationModel.InterpolationWeights*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.InterpolationWeights*
  name: InterpolationWeights
  nameWithType: SABRInterpolationModel.InterpolationWeights
  fullName: Cephei.QL.SABRInterpolationModel.InterpolationWeights
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<System.Collections.Generic.List`1<Microsoft.FSharp.Core.float>>
  name: ICell<List<float>>
  nameWithType: ICell<List<float>>
  fullName: Cephei.Cell.Generic.ICell<System.Collections.Generic.List<float>>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.SABRInterpolationModel.Forward*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.Forward*
  name: Forward
  nameWithType: SABRInterpolationModel.Forward
  fullName: Cephei.QL.SABRInterpolationModel.Forward
- uid: Cephei.QL.SABRInterpolationModel.Extrapolate*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.Extrapolate*
  name: Extrapolate
  nameWithType: SABRInterpolationModel.Extrapolate
  fullName: Cephei.QL.SABRInterpolationModel.Extrapolate
- uid: Cephei.QL.SABRInterpolationModel.Expiry*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.Expiry*
  name: Expiry
  nameWithType: SABRInterpolationModel.Expiry
  fullName: Cephei.QL.SABRInterpolationModel.Expiry
- uid: Cephei.QL.SABRInterpolationModel.EndCriteria*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.EndCriteria*
  name: EndCriteria
  nameWithType: SABRInterpolationModel.EndCriteria
  fullName: Cephei.QL.SABRInterpolationModel.EndCriteria
- uid: Cephei.QL.SABRInterpolationModel.Empty*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.Empty*
  name: Empty
  nameWithType: SABRInterpolationModel.Empty
  fullName: Cephei.QL.SABRInterpolationModel.Empty
- uid: Cephei.QL.SABRInterpolationModel.Beta*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.Beta*
  name: Beta
  nameWithType: SABRInterpolationModel.Beta
  fullName: Cephei.QL.SABRInterpolationModel.Beta
- uid: Cephei.QL.SABRInterpolationModel.Alpha*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.Alpha*
  name: Alpha
  nameWithType: SABRInterpolationModel.Alpha
  fullName: Cephei.QL.SABRInterpolationModel.Alpha
- uid: Cephei.QL.SABRInterpolationModel.AllowsExtrapolation*
  commentId: Overload:Cephei.QL.SABRInterpolationModel.AllowsExtrapolation*
  name: AllowsExtrapolation
  nameWithType: SABRInterpolationModel.AllowsExtrapolation
  fullName: Cephei.QL.SABRInterpolationModel.AllowsExtrapolation
