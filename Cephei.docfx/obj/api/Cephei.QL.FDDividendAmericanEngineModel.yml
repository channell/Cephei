### YamlMime:ManagedReference
items:
- uid: Cephei.QL.FDDividendAmericanEngineModel
  commentId: T:Cephei.QL.FDDividendAmericanEngineModel
  id: FDDividendAmericanEngineModel
  parent: Cephei.QL
  children:
  - Cephei.QL.FDDividendAmericanEngineModel.#ctor(Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<bool>)
  - Cephei.QL.FDDividendAmericanEngineModel.EnsureStrikeInGrid(unit)
  - Cephei.QL.FDDividendAmericanEngineModel.Factory(Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess> -> Cephei.Cell.Generic.ICell<int> -> Cephei.Cell.Generic.ICell<int>)
  - Cephei.QL.FDDividendAmericanEngineModel.GetResidualTime(unit)
  - Cephei.QL.FDDividendAmericanEngineModel.Grid(unit)
  - Cephei.QL.FDDividendAmericanEngineModel.gridPoints(unit)
  - Cephei.QL.FDDividendAmericanEngineModel.IntrinsicValues_(unit)
  - Cephei.QL.FDDividendAmericanEngineModel.Process(unit)
  - Cephei.QL.FDDividendAmericanEngineModel.RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  - Cephei.QL.FDDividendAmericanEngineModel.Reset(unit)
  - Cephei.QL.FDDividendAmericanEngineModel.timeDependent(unit)
  - Cephei.QL.FDDividendAmericanEngineModel.timeSteps(unit)
  - Cephei.QL.FDDividendAmericanEngineModel.UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  - Cephei.QL.FDDividendAmericanEngineModel.Update(unit)
  langs:
  - csharp
  - vb
  name: FDDividendAmericanEngineModel
  nameWithType: Cephei.QL.FDDividendAmericanEngineModel
  fullName: Cephei.QL.FDDividendAmericanEngineModel
  type: Class
  source:
    id: Cephei.QL.FDDividendAmericanEngineModel
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\FDDividendAmericanEngineModel.fs
    startLine: 35
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: >-
      [<AutoSerializable(true)>]

      type FDDividendAmericanEngineModel (Process:ICell<GeneralizedBlackScholesProcess>, timeSteps:ICell<int>, gridPoints:ICell<int>, timeDependent:ICell<bool>)
          inherit Model<FDDividendAmericanEngine>
          interface IDictionary<string,ICell>
          interface ICollection<KeyValuePair<string,ICell>>
          interface IReadOnlyDictionary<string,ICell>
          interface IReadOnlyCollection<KeyValuePair<string,ICell>>
          interface IEnumerable<KeyValuePair<string,ICell>>
          interface IDictionary
          interface ICollection
          interface IEnumerable
          interface IObservable<ICell>
          interface IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
          interface IObservable<ISession * Model * CellEvent * ICell * DateTime>
          interface IObservable<KeyValuePair<string,float>>
          interface IObservable<KeyValuePair<string,int>>
          interface IObservable<KeyValuePair<string,decimal>>
          interface ICell<FDDividendAmericanEngine>
          interface ICell
          interface ICellEvent
          interface IObservable<FDDividendAmericanEngine>
          interface IObservable<KeyValuePair<ISession,KeyValuePair<string,FDDividendAmericanEngine>>>
          interface IObservable<ISession * ICell<FDDividendAmericanEngine> * CellEvent * ICell * DateTime>
          interface IObserver<FDDividendAmericanEngine>
    parameters:
    - id: Process
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.GeneralizedBlackScholesProcess>
      attributes: []
    - id: timeSteps
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
    - id: gridPoints
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
    - id: timeDependent
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    typeParameters: []
  inheritance:
  - TypeRef:System.Object
  - TypeRef:System.Collections.Concurrent.ConcurrentDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:Cephei.Cell.Model
  - TypeRef:Cephei.Cell.Generic.Model`1<QLNet.FDDividendAmericanEngine>
  implements:
  - TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.FDDividendAmericanEngine>
  - TypeRef:Cephei.Cell.ICell
  - TypeRef:Cephei.Cell.ICellEvent
  - TypeRef:System.Collections.Generic.ICollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IReadOnlyCollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  - TypeRef:System.Collections.Generic.IReadOnlyDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  - TypeRef:System.Collections.ICollection
  - TypeRef:System.Collections.IDictionary
  - TypeRef:System.Collections.IEnumerable
  - TypeRef:System.IObservable`1<Cephei.Cell.ICell>
  - TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell`1<QLNet.FDDividendAmericanEngine> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  - TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  - TypeRef:System.IObservable`1<QLNet.FDDividendAmericanEngine>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,QLNet.FDDividendAmericanEngine>>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.decimal>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.float>>
  - TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.int>>
  - TypeRef:System.IObserver`1<QLNet.FDDividendAmericanEngine>
  inheritedMembers:
  - Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell<'T>)
  - Cephei.Cell.Generic.Model`1.OnCompleted(unit)
  - Cephei.Cell.Generic.Model`1.OnError(exn)
  - Cephei.Cell.Generic.Model`1.OnNext('T)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<'T>)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  - Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>>)
  - Cephei.Cell.Generic.Model`1.Value(unit)
  - Cephei.Cell.Model.As(string)
  - Cephei.Cell.Model.Bind(unit)
  - Cephei.Cell.Model.Box(unit)
  - Cephei.Cell.Model.Change()
  - Cephei.Cell.Model.Create(Unit -> 'T * string)
  - Cephei.Cell.Model.CreateValue('T * string)
  - Cephei.Cell.Model.Dependants(unit)
  - Cephei.Cell.Model.Dispose(unit)
  - Cephei.Cell.Model.GetOrAdd(string * Cephei.Cell.ICell)
  - Cephei.Cell.Model.HasFunction(unit)
  - Cephei.Cell.Model.HasValue(unit)
  - Cephei.Cell.Model.Item(string)
  - Cephei.Cell.Model.Mnemonic(unit)
  - Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession)
  - Cephei.Cell.Model.Parent(unit)
  - Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ICell>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,float>>)
  - Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,int>>)
  - Cephei.Cell.Model.TryAdd(string * Cephei.Cell.ICell)
  - Cephei.Cell.Model.TryRemove(string * Cephei.Cell.ICell byref)
  - Cephei.Cell.Model.TryUpdate(string * Cephei.Cell.ICell * Cephei.Cell.ICell)
  - Cephei.Cell.Model.add_Change(Cephei.Cell.CellChange)
  - Cephei.Cell.Model.remove_Change(Cephei.Cell.CellChange)
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * 'TValue * System.Func<'TKey,'TValue,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Clear(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey('TKey)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Count(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * System.Func<'TKey,'TValue>)
  - System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Item('TKey)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Keys(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.ToArray(unit)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd('TKey * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue('TKey * 'TValue byref)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove('TKey * 'TValue byref)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate('TKey * 'TValue * 'TValue)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Values(unit)
  attributes:
  - type: Microsoft.FSharp.Core.AutoSerializableAttribute
    arguments:
    - type: System.Boolean
      value: true
    namedArguments: []
- uid: Cephei.QL.FDDividendAmericanEngineModel.#ctor(Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<bool>)
  commentId: M:Cephei.QL.FDDividendAmericanEngineModel.#ctor(Cephei.Cell.Generic.ICell{QLNet.GeneralizedBlackScholesProcess},Cephei.Cell.Generic.ICell{System.Int32},Cephei.Cell.Generic.ICell{System.Int32},Cephei.Cell.Generic.ICell{System.Boolean})
  id: '#ctor(Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<bool>)'
  parent: Cephei.QL.FDDividendAmericanEngineModel
  langs:
  - csharp
  - vb
  name: 'new: ICell<GeneralizedBlackScholesProcess> * ICell<int> * ICell<int> * ICell<bool> -> FDDividendAmericanEngineModel'
  nameWithType: 'new: ICell<GeneralizedBlackScholesProcess> * ICell<int> * ICell<int> * ICell<bool> -> FDDividendAmericanEngineModel'
  fullName: 'new: Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<bool> -> Cephei.QL.FDDividendAmericanEngineModel'
  type: Constructor
  source:
    id: Cephei.QL.FDDividendAmericanEngineModel.#ctor(Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<int> * Cephei.Cell.Generic.ICell<bool>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\FDDividendAmericanEngineModel.fs
    startLine: 35
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  summary: Implicit constructor.
  syntax:
    content: 'new: Process:ICell<GeneralizedBlackScholesProcess> * timeSteps:ICell<int> * gridPoints:ICell<int> * timeDependent:ICell<bool> -> FDDividendAmericanEngineModel'
    parameters:
    - id: Process
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.GeneralizedBlackScholesProcess>
      attributes: []
    - id: timeSteps
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
    - id: gridPoints
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
    - id: timeDependent
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.QL.FDDividendAmericanEngineModel
      attributes: []
  overload: Cephei.QL.FDDividendAmericanEngineModel.#ctor*
  attributes: []
- uid: Cephei.QL.FDDividendAmericanEngineModel.Factory(Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess> -> Cephei.Cell.Generic.ICell<int> -> Cephei.Cell.Generic.ICell<int>)
  commentId: M:Cephei.QL.FDDividendAmericanEngineModel.Factory(Cephei.Cell.Generic.ICell{QLNet.GeneralizedBlackScholesProcess},Cephei.Cell.Generic.ICell{System.Int32},Cephei.Cell.Generic.ICell{System.Int32})
  id: Factory(Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess> -> Cephei.Cell.Generic.ICell<int> -> Cephei.Cell.Generic.ICell<int>)
  parent: Cephei.QL.FDDividendAmericanEngineModel
  langs:
  - csharp
  - vb
  name: 'member Factory: ICell<GeneralizedBlackScholesProcess> -> ICell<int> -> ICell<int> -> ICell<IFDEngine>'
  nameWithType: 'member FDDividendAmericanEngineModel.Factory: ICell<GeneralizedBlackScholesProcess> -> ICell<int> -> ICell<int> -> ICell<IFDEngine>'
  fullName: 'member Cephei.QL.FDDividendAmericanEngineModel.Factory: Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess> -> Cephei.Cell.Generic.ICell<int> -> Cephei.Cell.Generic.ICell<int> -> Cephei.Cell.Generic.ICell<QLNet.IFDEngine>'
  type: Method
  source:
    id: Cephei.QL.FDDividendAmericanEngineModel.Factory(Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess> -> Cephei.Cell.Generic.ICell<int> -> Cephei.Cell.Generic.ICell<int>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\FDDividendAmericanEngineModel.fs
    startLine: 80
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member Factory: Process:ICell<GeneralizedBlackScholesProcess> -> timeSteps:ICell<int> -> gridPoints:ICell<int> -> ICell<IFDEngine>'
    parameters:
    - id: Process
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.GeneralizedBlackScholesProcess>
      attributes: []
    - id: timeSteps
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
    - id: gridPoints
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.IFDEngine>
      attributes: []
  overload: Cephei.QL.FDDividendAmericanEngineModel.Factory*
  attributes: []
- uid: Cephei.QL.FDDividendAmericanEngineModel.RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  commentId: M:Cephei.QL.FDDividendAmericanEngineModel.RegisterWith(Cephei.Cell.Generic.ICell{QLNet.Callback})
  id: RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  parent: Cephei.QL.FDDividendAmericanEngineModel
  langs:
  - csharp
  - vb
  name: 'member RegisterWith: ICell<Callback> -> ICell<FDDividendAmericanEngine>'
  nameWithType: 'member FDDividendAmericanEngineModel.RegisterWith: ICell<Callback> -> ICell<FDDividendAmericanEngine>'
  fullName: 'member Cephei.QL.FDDividendAmericanEngineModel.RegisterWith: Cephei.Cell.Generic.ICell<QLNet.Callback> -> Cephei.Cell.Generic.ICell<QLNet.FDDividendAmericanEngine>'
  type: Method
  source:
    id: Cephei.QL.FDDividendAmericanEngineModel.RegisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\FDDividendAmericanEngineModel.fs
    startLine: 82
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member RegisterWith: handler:ICell<Callback> -> ICell<FDDividendAmericanEngine>'
    parameters:
    - id: handler
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Callback>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.FDDividendAmericanEngine>
      attributes: []
  overload: Cephei.QL.FDDividendAmericanEngineModel.RegisterWith*
  attributes: []
- uid: Cephei.QL.FDDividendAmericanEngineModel.UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  commentId: M:Cephei.QL.FDDividendAmericanEngineModel.UnregisterWith(Cephei.Cell.Generic.ICell{QLNet.Callback})
  id: UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
  parent: Cephei.QL.FDDividendAmericanEngineModel
  langs:
  - csharp
  - vb
  name: 'member UnregisterWith: ICell<Callback> -> ICell<FDDividendAmericanEngine>'
  nameWithType: 'member FDDividendAmericanEngineModel.UnregisterWith: ICell<Callback> -> ICell<FDDividendAmericanEngine>'
  fullName: 'member Cephei.QL.FDDividendAmericanEngineModel.UnregisterWith: Cephei.Cell.Generic.ICell<QLNet.Callback> -> Cephei.Cell.Generic.ICell<QLNet.FDDividendAmericanEngine>'
  type: Method
  source:
    id: Cephei.QL.FDDividendAmericanEngineModel.UnregisterWith(Cephei.Cell.Generic.ICell<QLNet.Callback>)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\FDDividendAmericanEngineModel.fs
    startLine: 85
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'member UnregisterWith: handler:ICell<Callback> -> ICell<FDDividendAmericanEngine>'
    parameters:
    - id: handler
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Callback>
      attributes: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.FDDividendAmericanEngine>
      attributes: []
  overload: Cephei.QL.FDDividendAmericanEngineModel.UnregisterWith*
  attributes: []
- uid: Cephei.QL.FDDividendAmericanEngineModel.timeSteps(unit)
  commentId: P:Cephei.QL.FDDividendAmericanEngineModel.timeSteps
  id: timeSteps(unit)
  parent: Cephei.QL.FDDividendAmericanEngineModel
  langs:
  - csharp
  - vb
  name: 'property timeSteps: ICell<int>'
  nameWithType: 'property FDDividendAmericanEngineModel.timeSteps: ICell<int>'
  fullName: 'property Cephei.QL.FDDividendAmericanEngineModel.timeSteps: Cephei.Cell.Generic.ICell<int>'
  type: Property
  source:
    id: Cephei.QL.FDDividendAmericanEngineModel.timeSteps(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\FDDividendAmericanEngineModel.fs
    startLine: 77
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property timeSteps: ICell<int> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
  overload: Cephei.QL.FDDividendAmericanEngineModel.timeSteps*
  attributes: []
- uid: Cephei.QL.FDDividendAmericanEngineModel.timeDependent(unit)
  commentId: P:Cephei.QL.FDDividendAmericanEngineModel.timeDependent
  id: timeDependent(unit)
  parent: Cephei.QL.FDDividendAmericanEngineModel
  langs:
  - csharp
  - vb
  name: 'property timeDependent: ICell<bool>'
  nameWithType: 'property FDDividendAmericanEngineModel.timeDependent: ICell<bool>'
  fullName: 'property Cephei.QL.FDDividendAmericanEngineModel.timeDependent: Cephei.Cell.Generic.ICell<bool>'
  type: Property
  source:
    id: Cephei.QL.FDDividendAmericanEngineModel.timeDependent(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\FDDividendAmericanEngineModel.fs
    startLine: 79
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property timeDependent: ICell<bool> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
      attributes: []
  overload: Cephei.QL.FDDividendAmericanEngineModel.timeDependent*
  attributes: []
- uid: Cephei.QL.FDDividendAmericanEngineModel.gridPoints(unit)
  commentId: P:Cephei.QL.FDDividendAmericanEngineModel.gridPoints
  id: gridPoints(unit)
  parent: Cephei.QL.FDDividendAmericanEngineModel
  langs:
  - csharp
  - vb
  name: 'property gridPoints: ICell<int>'
  nameWithType: 'property FDDividendAmericanEngineModel.gridPoints: ICell<int>'
  fullName: 'property Cephei.QL.FDDividendAmericanEngineModel.gridPoints: Cephei.Cell.Generic.ICell<int>'
  type: Property
  source:
    id: Cephei.QL.FDDividendAmericanEngineModel.gridPoints(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\FDDividendAmericanEngineModel.fs
    startLine: 78
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property gridPoints: ICell<int> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
      attributes: []
  overload: Cephei.QL.FDDividendAmericanEngineModel.gridPoints*
  attributes: []
- uid: Cephei.QL.FDDividendAmericanEngineModel.Update(unit)
  commentId: P:Cephei.QL.FDDividendAmericanEngineModel.Update
  id: Update(unit)
  parent: Cephei.QL.FDDividendAmericanEngineModel
  langs:
  - csharp
  - vb
  name: 'property Update: ICell<FDDividendAmericanEngine>'
  nameWithType: 'property FDDividendAmericanEngineModel.Update: ICell<FDDividendAmericanEngine>'
  fullName: 'property Cephei.QL.FDDividendAmericanEngineModel.Update: Cephei.Cell.Generic.ICell<QLNet.FDDividendAmericanEngine>'
  type: Property
  source:
    id: Cephei.QL.FDDividendAmericanEngineModel.Update(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\FDDividendAmericanEngineModel.fs
    startLine: 87
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Update: ICell<FDDividendAmericanEngine> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.FDDividendAmericanEngine>
      attributes: []
  overload: Cephei.QL.FDDividendAmericanEngineModel.Update*
  attributes: []
- uid: Cephei.QL.FDDividendAmericanEngineModel.Reset(unit)
  commentId: P:Cephei.QL.FDDividendAmericanEngineModel.Reset
  id: Reset(unit)
  parent: Cephei.QL.FDDividendAmericanEngineModel
  langs:
  - csharp
  - vb
  name: 'property Reset: ICell<FDDividendAmericanEngine>'
  nameWithType: 'property FDDividendAmericanEngineModel.Reset: ICell<FDDividendAmericanEngine>'
  fullName: 'property Cephei.QL.FDDividendAmericanEngineModel.Reset: Cephei.Cell.Generic.ICell<QLNet.FDDividendAmericanEngine>'
  type: Property
  source:
    id: Cephei.QL.FDDividendAmericanEngineModel.Reset(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\FDDividendAmericanEngineModel.fs
    startLine: 84
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Reset: ICell<FDDividendAmericanEngine> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.FDDividendAmericanEngine>
      attributes: []
  overload: Cephei.QL.FDDividendAmericanEngineModel.Reset*
  attributes: []
- uid: Cephei.QL.FDDividendAmericanEngineModel.Process(unit)
  commentId: P:Cephei.QL.FDDividendAmericanEngineModel.Process
  id: Process(unit)
  parent: Cephei.QL.FDDividendAmericanEngineModel
  langs:
  - csharp
  - vb
  name: 'property Process: ICell<GeneralizedBlackScholesProcess>'
  nameWithType: 'property FDDividendAmericanEngineModel.Process: ICell<GeneralizedBlackScholesProcess>'
  fullName: 'property Cephei.QL.FDDividendAmericanEngineModel.Process: Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess>'
  type: Property
  source:
    id: Cephei.QL.FDDividendAmericanEngineModel.Process(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\FDDividendAmericanEngineModel.fs
    startLine: 76
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Process: ICell<GeneralizedBlackScholesProcess> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.GeneralizedBlackScholesProcess>
      attributes: []
  overload: Cephei.QL.FDDividendAmericanEngineModel.Process*
  attributes: []
- uid: Cephei.QL.FDDividendAmericanEngineModel.IntrinsicValues_(unit)
  commentId: P:Cephei.QL.FDDividendAmericanEngineModel.IntrinsicValues_
  id: IntrinsicValues_(unit)
  parent: Cephei.QL.FDDividendAmericanEngineModel
  langs:
  - csharp
  - vb
  name: 'property IntrinsicValues_: ICell<SampledCurve>'
  nameWithType: 'property FDDividendAmericanEngineModel.IntrinsicValues_: ICell<SampledCurve>'
  fullName: 'property Cephei.QL.FDDividendAmericanEngineModel.IntrinsicValues_: Cephei.Cell.Generic.ICell<QLNet.SampledCurve>'
  type: Property
  source:
    id: Cephei.QL.FDDividendAmericanEngineModel.IntrinsicValues_(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\FDDividendAmericanEngineModel.fs
    startLine: 91
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property IntrinsicValues_: ICell<SampledCurve> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.SampledCurve>
      attributes: []
  overload: Cephei.QL.FDDividendAmericanEngineModel.IntrinsicValues_*
  attributes: []
- uid: Cephei.QL.FDDividendAmericanEngineModel.Grid(unit)
  commentId: P:Cephei.QL.FDDividendAmericanEngineModel.Grid
  id: Grid(unit)
  parent: Cephei.QL.FDDividendAmericanEngineModel
  langs:
  - csharp
  - vb
  name: 'property Grid: ICell<Vector>'
  nameWithType: 'property FDDividendAmericanEngineModel.Grid: ICell<Vector>'
  fullName: 'property Cephei.QL.FDDividendAmericanEngineModel.Grid: Cephei.Cell.Generic.ICell<QLNet.Vector>'
  type: Property
  source:
    id: Cephei.QL.FDDividendAmericanEngineModel.Grid(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\FDDividendAmericanEngineModel.fs
    startLine: 90
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property Grid: ICell<Vector> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
      attributes: []
  overload: Cephei.QL.FDDividendAmericanEngineModel.Grid*
  attributes: []
- uid: Cephei.QL.FDDividendAmericanEngineModel.GetResidualTime(unit)
  commentId: P:Cephei.QL.FDDividendAmericanEngineModel.GetResidualTime
  id: GetResidualTime(unit)
  parent: Cephei.QL.FDDividendAmericanEngineModel
  langs:
  - csharp
  - vb
  name: 'property GetResidualTime: ICell<float>'
  nameWithType: 'property FDDividendAmericanEngineModel.GetResidualTime: ICell<float>'
  fullName: 'property Cephei.QL.FDDividendAmericanEngineModel.GetResidualTime: Cephei.Cell.Generic.ICell<float>'
  type: Property
  source:
    id: Cephei.QL.FDDividendAmericanEngineModel.GetResidualTime(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\FDDividendAmericanEngineModel.fs
    startLine: 89
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property GetResidualTime: ICell<float> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
      attributes: []
  overload: Cephei.QL.FDDividendAmericanEngineModel.GetResidualTime*
  attributes: []
- uid: Cephei.QL.FDDividendAmericanEngineModel.EnsureStrikeInGrid(unit)
  commentId: P:Cephei.QL.FDDividendAmericanEngineModel.EnsureStrikeInGrid
  id: EnsureStrikeInGrid(unit)
  parent: Cephei.QL.FDDividendAmericanEngineModel
  langs:
  - csharp
  - vb
  name: 'property EnsureStrikeInGrid: ICell<FDDividendAmericanEngine>'
  nameWithType: 'property FDDividendAmericanEngineModel.EnsureStrikeInGrid: ICell<FDDividendAmericanEngine>'
  fullName: 'property Cephei.QL.FDDividendAmericanEngineModel.EnsureStrikeInGrid: Cephei.Cell.Generic.ICell<QLNet.FDDividendAmericanEngine>'
  type: Property
  source:
    id: Cephei.QL.FDDividendAmericanEngineModel.EnsureStrikeInGrid(unit)
    path: C:\Users\steve\source\repos\Cephei2\Cephei.QL\Types\FDDividendAmericanEngineModel.fs
    startLine: 88
  assemblies:
  - Cephei.QL
  namespace: Cephei.QL
  syntax:
    content: 'property EnsureStrikeInGrid: ICell<FDDividendAmericanEngine> with get'
    parameters: []
    typeParameters: []
    return:
      id: ''
      type: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.FDDividendAmericanEngine>
      attributes: []
  overload: Cephei.QL.FDDividendAmericanEngineModel.EnsureStrikeInGrid*
  attributes: []
references:
- uid: Cephei.QL
  commentId: N:Cephei.QL
  name: Cephei.QL
  nameWithType: Cephei.QL
  fullName: Cephei.QL
- uid: TypeRef:System.Object
  name: Object
  nameWithType: Object
  fullName: System.Object
  spec.csharp:
  - {}
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - {}
- uid: TypeRef:System.Collections.Concurrent.ConcurrentDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: ConcurrentDictionary<string,ICell>
  nameWithType: ConcurrentDictionary<string,ICell>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Model
  name: Model
  nameWithType: Model
  fullName: Cephei.Cell.Model
  spec.csharp:
  - {}
  - uid: Cephei.Cell.Model
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Model
  - {}
- uid: TypeRef:Cephei.Cell.Generic.Model`1<QLNet.FDDividendAmericanEngine>
  name: Model<FDDividendAmericanEngine>
  nameWithType: Model<FDDividendAmericanEngine>
  fullName: Cephei.Cell.Generic.Model<QLNet.FDDividendAmericanEngine>
  spec.csharp:
  - uid: Cephei.Cell.Generic.Model`1
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Generic.Model
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.FDDividendAmericanEngine
    name: FDDividendAmericanEngine
    nameWithType: FDDividendAmericanEngine
    fullName: QLNet.FDDividendAmericanEngine
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.FDDividendAmericanEngine>
  name: ICell<FDDividendAmericanEngine>
  nameWithType: ICell<FDDividendAmericanEngine>
  fullName: Cephei.Cell.Generic.ICell<QLNet.FDDividendAmericanEngine>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.FDDividendAmericanEngine
    name: FDDividendAmericanEngine
    nameWithType: FDDividendAmericanEngine
    fullName: QLNet.FDDividendAmericanEngine
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.ICell
  name: ICell
  nameWithType: ICell
  fullName: Cephei.Cell.ICell
  spec.csharp:
  - {}
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - {}
- uid: TypeRef:Cephei.Cell.ICellEvent
  name: ICellEvent
  nameWithType: ICellEvent
  fullName: Cephei.Cell.ICellEvent
  spec.csharp:
  - {}
  - uid: Cephei.Cell.ICellEvent
    name: ICellEvent
    nameWithType: ICellEvent
    fullName: Cephei.Cell.ICellEvent
  - {}
- uid: TypeRef:System.Collections.Generic.ICollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: ICollection<KeyValuePair<string,ICell>>
  nameWithType: ICollection<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: IDictionary<string,ICell>
  nameWithType: IDictionary<string,ICell>
  fullName: System.Collections.Generic.IDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: IEnumerable<KeyValuePair<string,ICell>>
  nameWithType: IEnumerable<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IReadOnlyCollection`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>
  name: IReadOnlyCollection<KeyValuePair<string,ICell>>
  nameWithType: IReadOnlyCollection<KeyValuePair<string,ICell>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.Generic.IReadOnlyDictionary`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>
  name: IReadOnlyDictionary<string,ICell>
  nameWithType: IReadOnlyDictionary<string,ICell>
  fullName: System.Collections.Generic.IReadOnlyDictionary<string,Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.Collections.ICollection
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
  spec.csharp:
  - {}
  - uid: System.Collections.ICollection
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.ICollection
  - {}
- uid: TypeRef:System.Collections.IDictionary
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
  spec.csharp:
  - {}
  - uid: System.Collections.IDictionary
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.IDictionary
  - {}
- uid: TypeRef:System.Collections.IEnumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
  spec.csharp:
  - {}
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
  - {}
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ICell>
  name: IObservable<ICell>
  nameWithType: IObservable<ICell>
  fullName: System.IObservable<Cephei.Cell.ICell>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell`1<QLNet.FDDividendAmericanEngine> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  name: IObservable<ISession * ICell<FDDividendAmericanEngine> * CellEvent * ICell * DateTime>
  nameWithType: IObservable<ISession * ICell<FDDividendAmericanEngine> * CellEvent * ICell * DateTime>
  fullName: System.IObservable<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<QLNet.FDDividendAmericanEngine> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.FDDividendAmericanEngine
    name: FDDividendAmericanEngine
    nameWithType: FDDividendAmericanEngine
    fullName: QLNet.FDDividendAmericanEngine
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  name: IObservable<ISession * Model * CellEvent * ICell * DateTime>
  nameWithType: IObservable<ISession * Model * CellEvent * ICell * DateTime>
  fullName: System.IObservable<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.Model
    name: Model
    nameWithType: Model
    fullName: Cephei.Cell.Model
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.CellEvent
    name: CellEvent
    nameWithType: CellEvent
    fullName: Cephei.Cell.CellEvent
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: " * "
    nameWithType: " * "
    fullName: " * "
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<QLNet.FDDividendAmericanEngine>
  name: IObservable<FDDividendAmericanEngine>
  nameWithType: IObservable<FDDividendAmericanEngine>
  fullName: System.IObservable<QLNet.FDDividendAmericanEngine>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.FDDividendAmericanEngine
    name: FDDividendAmericanEngine
    nameWithType: FDDividendAmericanEngine
    fullName: QLNet.FDDividendAmericanEngine
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Cephei.Cell.ICell>>>
  name: IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
  nameWithType: IObservable<KeyValuePair<ISession,KeyValuePair<string,ICell>>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Cephei.Cell.ICell
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.ICell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,QLNet.FDDividendAmericanEngine>>>
  name: IObservable<KeyValuePair<ISession,KeyValuePair<string,FDDividendAmericanEngine>>>
  nameWithType: IObservable<KeyValuePair<ISession,KeyValuePair<string,FDDividendAmericanEngine>>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,QLNet.FDDividendAmericanEngine>>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Cephei.Cell.ISession
    name: ISession
    nameWithType: ISession
    fullName: Cephei.Cell.ISession
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: QLNet.FDDividendAmericanEngine
    name: FDDividendAmericanEngine
    nameWithType: FDDividendAmericanEngine
    fullName: QLNet.FDDividendAmericanEngine
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.decimal>>
  name: IObservable<KeyValuePair<string,decimal>>
  nameWithType: IObservable<KeyValuePair<string,decimal>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,decimal>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.decimal
    name: decimal
    nameWithType: decimal
    fullName: decimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.float>>
  name: IObservable<KeyValuePair<string,float>>
  nameWithType: IObservable<KeyValuePair<string,float>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,float>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObservable`1<System.Collections.Generic.KeyValuePair`2<Microsoft.FSharp.Core.string,Microsoft.FSharp.Core.int>>
  name: IObservable<KeyValuePair<string,int>>
  nameWithType: IObservable<KeyValuePair<string,int>>
  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<string,int>>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.string
    name: string
    nameWithType: string
    fullName: string
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.int
    name: int
    nameWithType: int
    fullName: int
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:System.IObserver`1<QLNet.FDDividendAmericanEngine>
  name: IObserver<FDDividendAmericanEngine>
  nameWithType: IObserver<FDDividendAmericanEngine>
  fullName: System.IObserver<QLNet.FDDividendAmericanEngine>
  spec.csharp:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.FDDividendAmericanEngine
    name: FDDividendAmericanEngine
    nameWithType: FDDividendAmericanEngine
    fullName: QLNet.FDDividendAmericanEngine
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.Cell.Generic.Model`1.Bind(Cephei.Cell.Generic.ICell<'T>)
  name: "member Bind: ICell<'T> -> unit"
  nameWithType: "member Model.Bind: ICell<'T> -> unit"
  fullName: "member Cephei.Cell.Generic.Model.Bind: Cephei.Cell.Generic.ICell<'T> -> unit"
- uid: Cephei.Cell.Generic.Model`1.OnCompleted(unit)
  name: 'abstract member OnCompleted: unit -> unit'
  nameWithType: 'abstract member Model.OnCompleted: unit -> unit'
  fullName: 'abstract member Cephei.Cell.Generic.Model.OnCompleted: unit -> unit'
- uid: Cephei.Cell.Generic.Model`1.OnError(exn)
  name: 'abstract member OnError: exn -> unit'
  nameWithType: 'abstract member Model.OnError: exn -> unit'
  fullName: 'abstract member Cephei.Cell.Generic.Model.OnError: exn -> unit'
- uid: Cephei.Cell.Generic.Model`1.OnNext('T)
  name: "abstract member OnNext: 'T -> unit"
  nameWithType: "abstract member Model.OnNext: 'T -> unit"
  fullName: "abstract member Cephei.Cell.Generic.Model.OnNext: 'T -> unit"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<'T>)
  name: "abstract member Subscribe: IObserver<'T> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<'T> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<'T> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  name: "abstract member Subscribe: IObserver<ISession * ICell<'T> * CellEvent * ICell * DateTime> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<ISession * ICell<'T> * CellEvent * ICell * DateTime> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Generic.ICell<'T> * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>>)
  name: "abstract member Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,'T>>> -> IDisposable"
  nameWithType: "abstract member Model.Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,'T>>> -> IDisposable"
  fullName: "abstract member Cephei.Cell.Generic.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,'T>>> -> System.IDisposable"
- uid: Cephei.Cell.Generic.Model`1.Value(unit)
  name: "abstract property Value: 'T"
  nameWithType: "abstract property Model.Value: 'T"
  fullName: "abstract property Cephei.Cell.Generic.Model.Value: 'T"
- uid: Cephei.Cell.Model.As(string)
  name: "member As: string -> ICell<'T>"
  nameWithType: "member Model.As: string -> ICell<'T>"
  fullName: "member Cephei.Cell.Model.As: string -> Cephei.Cell.Generic.ICell<'T>"
- uid: Cephei.Cell.Model.Bind(unit)
  name: 'member Bind: unit -> unit'
  nameWithType: 'member Model.Bind: unit -> unit'
  fullName: 'member Cephei.Cell.Model.Bind: unit -> unit'
- uid: Cephei.Cell.Model.Box(unit)
  name: 'abstract property Box: obj'
  nameWithType: 'abstract property Model.Box: obj'
  fullName: 'abstract property Cephei.Cell.Model.Box: obj'
- uid: Cephei.Cell.Model.Change()
  name: 'abstract member Change: CellChange'
  nameWithType: 'abstract member Model.Change: CellChange'
  fullName: 'abstract member Cephei.Cell.Model.Change: Cephei.Cell.CellChange'
- uid: Cephei.Cell.Model.Create(Unit -> 'T * string)
  name: "member Create: Unit -> 'T * string -> Cell<'T>"
  nameWithType: "member Model.Create: Unit -> 'T * string -> Cell<'T>"
  fullName: "member Cephei.Cell.Model.Create: Unit -> 'T * string -> Cephei.Cell.Generic.Cell<'T>"
- uid: Cephei.Cell.Model.CreateValue('T * string)
  name: "member CreateValue: 'T * string -> Cell<'T>"
  nameWithType: "member Model.CreateValue: 'T * string -> Cell<'T>"
  fullName: "member Cephei.Cell.Model.CreateValue: 'T * string -> Cephei.Cell.Generic.Cell<'T>"
- uid: Cephei.Cell.Model.Dependants(unit)
  name: 'abstract property Dependants: IEnumerable<ICellEvent>'
  nameWithType: 'abstract property Model.Dependants: IEnumerable<ICellEvent>'
  fullName: 'abstract property Cephei.Cell.Model.Dependants: System.Collections.Generic.IEnumerable<Cephei.Cell.ICellEvent>'
- uid: Cephei.Cell.Model.Dispose(unit)
  name: 'member Dispose: unit -> unit'
  nameWithType: 'member Model.Dispose: unit -> unit'
  fullName: 'member Cephei.Cell.Model.Dispose: unit -> unit'
- uid: Cephei.Cell.Model.GetOrAdd(string * Cephei.Cell.ICell)
  name: 'member GetOrAdd: string * ICell -> ICell'
  nameWithType: 'member Model.GetOrAdd: string * ICell -> ICell'
  fullName: 'member Cephei.Cell.Model.GetOrAdd: string * Cephei.Cell.ICell -> Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.HasFunction(unit)
  name: 'abstract property HasFunction: bool'
  nameWithType: 'abstract property Model.HasFunction: bool'
  fullName: 'abstract property Cephei.Cell.Model.HasFunction: bool'
- uid: Cephei.Cell.Model.HasValue(unit)
  name: 'abstract property HasValue: bool'
  nameWithType: 'abstract property Model.HasValue: bool'
  fullName: 'abstract property Cephei.Cell.Model.HasValue: bool'
- uid: Cephei.Cell.Model.Item(string)
  name: 'property Item: string -> ICell'
  nameWithType: 'property Model.Item: string -> ICell'
  fullName: 'property Cephei.Cell.Model.Item: string -> Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.Mnemonic(unit)
  name: 'abstract property Mnemonic: string'
  nameWithType: 'abstract property Model.Mnemonic: string'
  fullName: 'abstract property Cephei.Cell.Model.Mnemonic: string'
- uid: Cephei.Cell.Model.OnChange(Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession)
  name: 'abstract member OnChange: CellEvent * ICellEvent * DateTime * ISession -> unit'
  nameWithType: 'abstract member Model.OnChange: CellEvent * ICellEvent * DateTime * ISession -> unit'
  fullName: 'abstract member Cephei.Cell.Model.OnChange: Cephei.Cell.CellEvent * Cephei.Cell.ICellEvent * System.DateTime * Cephei.Cell.ISession -> unit'
- uid: Cephei.Cell.Model.Parent(unit)
  name: 'abstract property Parent: ICell'
  nameWithType: 'abstract property Model.Parent: ICell'
  fullName: 'abstract property Cephei.Cell.Model.Parent: Cephei.Cell.ICell'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ICell>)
  name: 'abstract member Subscribe: IObserver<ICell> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<ICell> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<Cephei.Cell.ICell> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime>)
  name: 'abstract member Subscribe: IObserver<ISession * Model * CellEvent * ICell * DateTime> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<ISession * Model * CellEvent * ICell * DateTime> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<Cephei.Cell.ISession * Cephei.Cell.Model * Cephei.Cell.CellEvent * Cephei.Cell.ICell * System.DateTime> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,ICell>>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<ISession,KeyValuePair<string,ICell>>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<Cephei.Cell.ISession,System.Collections.Generic.KeyValuePair<string,Cephei.Cell.ICell>>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,decimal>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,decimal>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,decimal>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,float>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,float>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,float>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,float>> -> System.IDisposable'
- uid: Cephei.Cell.Model.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<string,int>>)
  name: 'abstract member Subscribe: IObserver<KeyValuePair<string,int>> -> IDisposable'
  nameWithType: 'abstract member Model.Subscribe: IObserver<KeyValuePair<string,int>> -> IDisposable'
  fullName: 'abstract member Cephei.Cell.Model.Subscribe: System.IObserver<System.Collections.Generic.KeyValuePair<string,int>> -> System.IDisposable'
- uid: Cephei.Cell.Model.TryAdd(string * Cephei.Cell.ICell)
  name: 'member TryAdd: string * ICell -> bool'
  nameWithType: 'member Model.TryAdd: string * ICell -> bool'
  fullName: 'member Cephei.Cell.Model.TryAdd: string * Cephei.Cell.ICell -> bool'
- uid: Cephei.Cell.Model.TryRemove(string * Cephei.Cell.ICell byref)
  name: 'member TryRemove: string * ICell byref -> bool'
  nameWithType: 'member Model.TryRemove: string * ICell byref -> bool'
  fullName: 'member Cephei.Cell.Model.TryRemove: string * Cephei.Cell.ICell byref -> bool'
- uid: Cephei.Cell.Model.TryUpdate(string * Cephei.Cell.ICell * Cephei.Cell.ICell)
  name: 'member TryUpdate: string * ICell * ICell -> bool'
  nameWithType: 'member Model.TryUpdate: string * ICell * ICell -> bool'
  fullName: 'member Cephei.Cell.Model.TryUpdate: string * Cephei.Cell.ICell * Cephei.Cell.ICell -> bool'
- uid: Cephei.Cell.Model.add_Change(Cephei.Cell.CellChange)
  name: 'abstract member add_Change: CellChange -> unit'
  nameWithType: 'abstract member Model.add_Change: CellChange -> unit'
  fullName: 'abstract member Cephei.Cell.Model.add_Change: Cephei.Cell.CellChange -> unit'
- uid: Cephei.Cell.Model.remove_Change(Cephei.Cell.CellChange)
  name: 'abstract member remove_Change: CellChange -> unit'
  nameWithType: 'abstract member Model.remove_Change: CellChange -> unit'
  fullName: 'abstract member Cephei.Cell.Model.remove_Change: Cephei.Cell.CellChange -> unit'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * 'TValue * System.Func<'TKey,'TValue,'TValue>)
  name: "member AddOrUpdate: 'TKey * 'TValue * Func<'TKey,'TValue,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.AddOrUpdate: 'TKey * 'TValue * Func<'TKey,'TValue,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.AddOrUpdate: 'TKey * 'TValue * System.Func<'TKey,'TValue,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate('TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue>)
  name: "member AddOrUpdate: 'TKey * Func<'TKey,'TValue> * Func<'TKey,'TValue,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.AddOrUpdate: 'TKey * Func<'TKey,'TValue> * Func<'TKey,'TValue,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.AddOrUpdate: 'TKey * System.Func<'TKey,'TValue> * System.Func<'TKey,'TValue,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear(unit)
  name: 'abstract member Clear: unit -> unit'
  nameWithType: 'abstract member ConcurrentDictionary.Clear: unit -> unit'
  fullName: 'abstract member System.Collections.Concurrent.ConcurrentDictionary.Clear: unit -> unit'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey('TKey)
  name: "abstract member ContainsKey: 'TKey -> bool"
  nameWithType: "abstract member ConcurrentDictionary.ContainsKey: 'TKey -> bool"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.ContainsKey: 'TKey -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count(unit)
  name: 'abstract property Count: int'
  nameWithType: 'abstract property ConcurrentDictionary.Count: int'
  fullName: 'abstract property System.Collections.Concurrent.ConcurrentDictionary.Count: int'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator(unit)
  name: "abstract member GetEnumerator: unit -> IEnumerator<KeyValuePair<'TKey,'TValue>>"
  nameWithType: "abstract member ConcurrentDictionary.GetEnumerator: unit -> IEnumerator<KeyValuePair<'TKey,'TValue>>"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.GetEnumerator: unit -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<'TKey,'TValue>>"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * 'TValue)
  name: "member GetOrAdd: 'TKey * 'TValue -> 'TValue"
  nameWithType: "member ConcurrentDictionary.GetOrAdd: 'TKey * 'TValue -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd: 'TKey * 'TValue -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd('TKey * System.Func<'TKey,'TValue>)
  name: "member GetOrAdd: 'TKey * Func<'TKey,'TValue> -> 'TValue"
  nameWithType: "member ConcurrentDictionary.GetOrAdd: 'TKey * Func<'TKey,'TValue> -> 'TValue"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd: 'TKey * System.Func<'TKey,'TValue> -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty(unit)
  name: 'property IsEmpty: bool'
  nameWithType: 'property ConcurrentDictionary.IsEmpty: bool'
  fullName: 'property System.Collections.Concurrent.ConcurrentDictionary.IsEmpty: bool'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item('TKey)
  name: "abstract property Item: 'TKey -> 'TValue"
  nameWithType: "abstract property ConcurrentDictionary.Item: 'TKey -> 'TValue"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Item: 'TKey -> 'TValue"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys(unit)
  name: "abstract property Keys: ICollection<'TKey>"
  nameWithType: "abstract property ConcurrentDictionary.Keys: ICollection<'TKey>"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Keys: System.Collections.Generic.ICollection<'TKey>"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray(unit)
  name: "member ToArray: unit -> KeyValuePair<'TKey,'TValue> []"
  nameWithType: "member ConcurrentDictionary.ToArray: unit -> KeyValuePair<'TKey,'TValue> []"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.ToArray: unit -> System.Collections.Generic.KeyValuePair<'TKey,'TValue> []"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd('TKey * 'TValue)
  name: "member TryAdd: 'TKey * 'TValue -> bool"
  nameWithType: "member ConcurrentDictionary.TryAdd: 'TKey * 'TValue -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryAdd: 'TKey * 'TValue -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue('TKey * 'TValue byref)
  name: "abstract member TryGetValue: 'TKey * 'TValue byref -> bool"
  nameWithType: "abstract member ConcurrentDictionary.TryGetValue: 'TKey * 'TValue byref -> bool"
  fullName: "abstract member System.Collections.Concurrent.ConcurrentDictionary.TryGetValue: 'TKey * 'TValue byref -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove('TKey * 'TValue byref)
  name: "member TryRemove: 'TKey * 'TValue byref -> bool"
  nameWithType: "member ConcurrentDictionary.TryRemove: 'TKey * 'TValue byref -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryRemove: 'TKey * 'TValue byref -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate('TKey * 'TValue * 'TValue)
  name: "member TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
  nameWithType: "member ConcurrentDictionary.TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
  fullName: "member System.Collections.Concurrent.ConcurrentDictionary.TryUpdate: 'TKey * 'TValue * 'TValue -> bool"
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values(unit)
  name: "abstract property Values: ICollection<'TValue>"
  nameWithType: "abstract property ConcurrentDictionary.Values: ICollection<'TValue>"
  fullName: "abstract property System.Collections.Concurrent.ConcurrentDictionary.Values: System.Collections.Generic.ICollection<'TValue>"
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.GeneralizedBlackScholesProcess>
  name: ICell<GeneralizedBlackScholesProcess>
  nameWithType: ICell<GeneralizedBlackScholesProcess>
  fullName: Cephei.Cell.Generic.ICell<QLNet.GeneralizedBlackScholesProcess>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.GeneralizedBlackScholesProcess
    name: GeneralizedBlackScholesProcess
    nameWithType: GeneralizedBlackScholesProcess
    fullName: QLNet.GeneralizedBlackScholesProcess
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.int>
  name: ICell<int>
  nameWithType: ICell<int>
  fullName: Cephei.Cell.Generic.ICell<int>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.int
    name: int
    nameWithType: int
    fullName: int
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.bool>
  name: ICell<bool>
  nameWithType: ICell<bool>
  fullName: Cephei.Cell.Generic.ICell<bool>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.bool
    name: bool
    nameWithType: bool
    fullName: bool
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.FDDividendAmericanEngineModel.#ctor*
  commentId: Overload:Cephei.QL.FDDividendAmericanEngineModel.#ctor*
  name: ( .ctor )
  nameWithType: FDDividendAmericanEngineModel.( .ctor )
  fullName: Cephei.QL.FDDividendAmericanEngineModel
- uid: TypeRef:Cephei.QL.FDDividendAmericanEngineModel
  name: FDDividendAmericanEngineModel
  nameWithType: FDDividendAmericanEngineModel
  fullName: Cephei.QL.FDDividendAmericanEngineModel
  spec.csharp:
  - {}
  - uid: Cephei.QL.FDDividendAmericanEngineModel
    name: FDDividendAmericanEngineModel
    nameWithType: FDDividendAmericanEngineModel
    fullName: Cephei.QL.FDDividendAmericanEngineModel
  - {}
- uid: Cephei.QL.FDDividendAmericanEngineModel.Factory*
  commentId: Overload:Cephei.QL.FDDividendAmericanEngineModel.Factory*
  name: Factory
  nameWithType: FDDividendAmericanEngineModel.Factory
  fullName: Cephei.QL.FDDividendAmericanEngineModel.Factory
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.IFDEngine>
  name: ICell<IFDEngine>
  nameWithType: ICell<IFDEngine>
  fullName: Cephei.Cell.Generic.ICell<QLNet.IFDEngine>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.IFDEngine
    name: IFDEngine
    nameWithType: IFDEngine
    fullName: QLNet.IFDEngine
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.FDDividendAmericanEngineModel.RegisterWith*
  commentId: Overload:Cephei.QL.FDDividendAmericanEngineModel.RegisterWith*
  name: RegisterWith
  nameWithType: FDDividendAmericanEngineModel.RegisterWith
  fullName: Cephei.QL.FDDividendAmericanEngineModel.RegisterWith
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Callback>
  name: ICell<Callback>
  nameWithType: ICell<Callback>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Callback>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Callback
    name: Callback
    nameWithType: Callback
    fullName: QLNet.Callback
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.FDDividendAmericanEngineModel.UnregisterWith*
  commentId: Overload:Cephei.QL.FDDividendAmericanEngineModel.UnregisterWith*
  name: UnregisterWith
  nameWithType: FDDividendAmericanEngineModel.UnregisterWith
  fullName: Cephei.QL.FDDividendAmericanEngineModel.UnregisterWith
- uid: Cephei.QL.FDDividendAmericanEngineModel.timeSteps*
  commentId: Overload:Cephei.QL.FDDividendAmericanEngineModel.timeSteps*
  name: timeSteps
  nameWithType: FDDividendAmericanEngineModel.timeSteps
  fullName: Cephei.QL.FDDividendAmericanEngineModel.timeSteps
- uid: Cephei.QL.FDDividendAmericanEngineModel.timeDependent*
  commentId: Overload:Cephei.QL.FDDividendAmericanEngineModel.timeDependent*
  name: timeDependent
  nameWithType: FDDividendAmericanEngineModel.timeDependent
  fullName: Cephei.QL.FDDividendAmericanEngineModel.timeDependent
- uid: Cephei.QL.FDDividendAmericanEngineModel.gridPoints*
  commentId: Overload:Cephei.QL.FDDividendAmericanEngineModel.gridPoints*
  name: gridPoints
  nameWithType: FDDividendAmericanEngineModel.gridPoints
  fullName: Cephei.QL.FDDividendAmericanEngineModel.gridPoints
- uid: Cephei.QL.FDDividendAmericanEngineModel.Update*
  commentId: Overload:Cephei.QL.FDDividendAmericanEngineModel.Update*
  name: Update
  nameWithType: FDDividendAmericanEngineModel.Update
  fullName: Cephei.QL.FDDividendAmericanEngineModel.Update
- uid: Cephei.QL.FDDividendAmericanEngineModel.Reset*
  commentId: Overload:Cephei.QL.FDDividendAmericanEngineModel.Reset*
  name: Reset
  nameWithType: FDDividendAmericanEngineModel.Reset
  fullName: Cephei.QL.FDDividendAmericanEngineModel.Reset
- uid: Cephei.QL.FDDividendAmericanEngineModel.Process*
  commentId: Overload:Cephei.QL.FDDividendAmericanEngineModel.Process*
  name: Process
  nameWithType: FDDividendAmericanEngineModel.Process
  fullName: Cephei.QL.FDDividendAmericanEngineModel.Process
- uid: Cephei.QL.FDDividendAmericanEngineModel.IntrinsicValues_*
  commentId: Overload:Cephei.QL.FDDividendAmericanEngineModel.IntrinsicValues_*
  name: IntrinsicValues_
  nameWithType: FDDividendAmericanEngineModel.IntrinsicValues_
  fullName: Cephei.QL.FDDividendAmericanEngineModel.IntrinsicValues_
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.SampledCurve>
  name: ICell<SampledCurve>
  nameWithType: ICell<SampledCurve>
  fullName: Cephei.Cell.Generic.ICell<QLNet.SampledCurve>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.SampledCurve
    name: SampledCurve
    nameWithType: SampledCurve
    fullName: QLNet.SampledCurve
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.FDDividendAmericanEngineModel.Grid*
  commentId: Overload:Cephei.QL.FDDividendAmericanEngineModel.Grid*
  name: Grid
  nameWithType: FDDividendAmericanEngineModel.Grid
  fullName: Cephei.QL.FDDividendAmericanEngineModel.Grid
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<QLNet.Vector>
  name: ICell<Vector>
  nameWithType: ICell<Vector>
  fullName: Cephei.Cell.Generic.ICell<QLNet.Vector>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: QLNet.Vector
    name: Vector
    nameWithType: Vector
    fullName: QLNet.Vector
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.FDDividendAmericanEngineModel.GetResidualTime*
  commentId: Overload:Cephei.QL.FDDividendAmericanEngineModel.GetResidualTime*
  name: GetResidualTime
  nameWithType: FDDividendAmericanEngineModel.GetResidualTime
  fullName: Cephei.QL.FDDividendAmericanEngineModel.GetResidualTime
- uid: TypeRef:Cephei.Cell.Generic.ICell`1<Microsoft.FSharp.Core.float>
  name: ICell<float>
  nameWithType: ICell<float>
  fullName: Cephei.Cell.Generic.ICell<float>
  spec.csharp:
  - uid: Cephei.Cell.Generic.ICell`1
    name: ICell
    nameWithType: ICell
    fullName: Cephei.Cell.Generic.ICell
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.float
    name: float
    nameWithType: float
    fullName: float
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Cephei.QL.FDDividendAmericanEngineModel.EnsureStrikeInGrid*
  commentId: Overload:Cephei.QL.FDDividendAmericanEngineModel.EnsureStrikeInGrid*
  name: EnsureStrikeInGrid
  nameWithType: FDDividendAmericanEngineModel.EnsureStrikeInGrid
  fullName: Cephei.QL.FDDividendAmericanEngineModel.EnsureStrikeInGrid
